//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "java/util/Locale.h"
#include "libcore/net/url/UrlUtils.h"

@implementation LibcoreNetUrlUrlUtils

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

+ (NSString *)canonicalizePathWithNSString:(NSString *)path
                               withBoolean:(BOOL)discardRelativePrefix {
  int segmentStart = 0;
  int deletableSegments = 0;
  for (int i = 0; i <= [((NSString *) nil_chk(path)) length]; ) {
    int nextSegmentStart;
    if (i == [path length]) {
      nextSegmentStart = i;
    }
    else if ([path charAtWithInt:i] == '/') {
      nextSegmentStart = i + 1;
    }
    else {
      i++;
      continue;
    }
    if (i == segmentStart + 1 && [path regionMatches:segmentStart aString:@"." otherOffset:0 count:1]) {
      path = [NSString stringWithFormat:@"%@%@", [path substring:0 endIndex:segmentStart], [path substring:nextSegmentStart]];
      i = segmentStart;
    }
    else if (i == segmentStart + 2 && [path regionMatches:segmentStart aString:@".." otherOffset:0 count:2]) {
      if (deletableSegments > 0 || discardRelativePrefix) {
        deletableSegments--;
        int prevSegmentStart = [path lastIndexOf:'/' fromIndex:segmentStart - 2] + 1;
        path = [NSString stringWithFormat:@"%@%@", [path substring:0 endIndex:prevSegmentStart], [path substring:nextSegmentStart]];
        i = segmentStart = prevSegmentStart;
      }
      else {
        i++;
        segmentStart = i;
      }
    }
    else {
      if (i > 0) {
        deletableSegments++;
      }
      i++;
      segmentStart = i;
    }
  }
  return path;
}

+ (NSString *)authoritySafePathWithNSString:(NSString *)authority
                               withNSString:(NSString *)path {
  if (authority != nil && ![authority isEmpty] && ![((NSString *) nil_chk(path)) isEmpty] && ![path hasPrefix:@"/"]) {
    return [NSString stringWithFormat:@"/%@", path];
  }
  return path;
}

+ (NSString *)getSchemePrefixWithNSString:(NSString *)spec {
  int colon = [((NSString *) nil_chk(spec)) indexOf:':'];
  if (colon < 1) {
    return nil;
  }
  for (int i = 0; i < colon; i++) {
    unichar c = [spec charAtWithInt:i];
    if (![LibcoreNetUrlUrlUtils isValidSchemeCharWithInt:i withChar:c]) {
      return nil;
    }
  }
  return [((NSString *) nil_chk([spec substring:0 endIndex:colon])) lowercaseStringWithJRELocale:[JavaUtilLocale US]];
}

+ (BOOL)isValidSchemeCharWithInt:(int)index
                        withChar:(unichar)c {
  if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {
    return YES;
  }
  if (index > 0 && ((c >= '0' && c <= '9') || c == '+' || c == '-' || c == '.')) {
    return YES;
  }
  return NO;
}

+ (int)findFirstOfWithNSString:(NSString *)string
                  withNSString:(NSString *)chars
                       withInt:(int)start
                       withInt:(int)end {
  for (int i = start; i < end; i++) {
    unichar c = [((NSString *) nil_chk(string)) charAtWithInt:i];
    if ([((NSString *) nil_chk(chars)) indexOf:c] != -1) {
      return i;
    }
  }
  return end;
}

@end
