//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/Locale.h"
#include "libcore/icu/ICU.h"
#import "java/lang/UnsupportedOperationException.h"

@implementation LibcoreIcuICU

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:LibcoreIcuICU_isoLanguages_ name:@"LibcoreIcuICU_isoLanguages_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:LibcoreIcuICU_isoCountries_ name:@"LibcoreIcuICU_isoCountries_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:LibcoreIcuICU_availableLocalesCache_ name:@"LibcoreIcuICU_availableLocalesCache_"]];
  return result;
}

static IOSObjectArray * LibcoreIcuICU_isoLanguages_;
static IOSObjectArray * LibcoreIcuICU_isoCountries_;
static IOSObjectArray * LibcoreIcuICU_availableLocalesCache_;

+ (IOSObjectArray *)isoLanguages {
  return LibcoreIcuICU_isoLanguages_;
}

+ (void)setIsoLanguages:(IOSObjectArray *)isoLanguages {
  JreOperatorRetainedAssign(&LibcoreIcuICU_isoLanguages_, nil, isoLanguages);
}

+ (IOSObjectArray *)isoCountries {
  return LibcoreIcuICU_isoCountries_;
}

+ (void)setIsoCountries:(IOSObjectArray *)isoCountries {
  JreOperatorRetainedAssign(&LibcoreIcuICU_isoCountries_, nil, isoCountries);
}

+ (IOSObjectArray *)availableLocalesCache {
  return LibcoreIcuICU_availableLocalesCache_;
}

+ (void)setAvailableLocalesCache:(IOSObjectArray *)availableLocalesCache {
  JreOperatorRetainedAssign(&LibcoreIcuICU_availableLocalesCache_, nil, availableLocalesCache);
}

+ (IOSObjectArray *)getISOLanguages {
  if (LibcoreIcuICU_isoLanguages_ == nil) {
    JreOperatorRetainedAssign(&LibcoreIcuICU_isoLanguages_, nil, [LibcoreIcuICU getISOLanguagesNative]);
  }
  return [((IOSObjectArray *) nil_chk(LibcoreIcuICU_isoLanguages_)) clone];
}

+ (IOSObjectArray *)getISOCountries {
  if (LibcoreIcuICU_isoCountries_ == nil) {
    JreOperatorRetainedAssign(&LibcoreIcuICU_isoCountries_, nil, [LibcoreIcuICU getISOCountriesNative]);
  }
  return [((IOSObjectArray *) nil_chk(LibcoreIcuICU_isoCountries_)) clone];
}

+ (JavaUtilLocale *)localeFromStringWithNSString:(NSString *)localeName {
  int first = [((NSString *) nil_chk(localeName)) indexOf:'_'];
  int second = [localeName indexOf:'_' fromIndex:first + 1];
  if (first == -1) {
    return [[[JavaUtilLocale alloc] initWithNSString:localeName] autorelease];
  }
  else if (second == -1) {
    return [[[JavaUtilLocale alloc] initWithNSString:[localeName substring:0 endIndex:first] withNSString:[localeName substring:first + 1]] autorelease];
  }
  else {
    return [[[JavaUtilLocale alloc] initWithNSString:[localeName substring:0 endIndex:first] withNSString:[localeName substring:first + 1 endIndex:second] withNSString:[localeName substring:second + 1]] autorelease];
  }
}

+ (IOSObjectArray *)localesFromStringsWithNSStringArray:(IOSObjectArray *)localeNames {
  JavaUtilLinkedHashSet *set = [[[JavaUtilLinkedHashSet alloc] init] autorelease];
  {
    IOSObjectArray *a__ = localeNames;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *localeName = (*b__++);
      [set addWithId:[LibcoreIcuICU localeFromStringWithNSString:localeName]];
    }
  }
  return [set toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[set size] type:[IOSClass classWithClass:[JavaUtilLocale class]]]];
}

+ (IOSObjectArray *)getAvailableLocales {
  if (LibcoreIcuICU_availableLocalesCache_ == nil) {
    JreOperatorRetainedAssign(&LibcoreIcuICU_availableLocalesCache_, nil, [LibcoreIcuICU localesFromStringsWithNSStringArray:[LibcoreIcuICU getAvailableLocalesNative]]);
  }
  return [((IOSObjectArray *) nil_chk(LibcoreIcuICU_availableLocalesCache_)) clone];
}

+ (IOSObjectArray *)getAvailableBreakIteratorLocales {
  return [LibcoreIcuICU localesFromStringsWithNSStringArray:[LibcoreIcuICU getAvailableBreakIteratorLocalesNative]];
}

+ (IOSObjectArray *)getAvailableCalendarLocales {
  return [LibcoreIcuICU localesFromStringsWithNSStringArray:[LibcoreIcuICU getAvailableCalendarLocalesNative]];
}

+ (IOSObjectArray *)getAvailableCollatorLocales {
  return [LibcoreIcuICU localesFromStringsWithNSStringArray:[LibcoreIcuICU getAvailableCollatorLocalesNative]];
}

+ (IOSObjectArray *)getAvailableDateFormatLocales {
  return [LibcoreIcuICU localesFromStringsWithNSStringArray:[LibcoreIcuICU getAvailableDateFormatLocalesNative]];
}

+ (IOSObjectArray *)getAvailableDateFormatSymbolsLocales {
  return [LibcoreIcuICU getAvailableDateFormatLocales];
}

+ (IOSObjectArray *)getAvailableDecimalFormatSymbolsLocales {
  return [LibcoreIcuICU getAvailableNumberFormatLocales];
}

+ (IOSObjectArray *)getAvailableNumberFormatLocales {
  return [LibcoreIcuICU localesFromStringsWithNSStringArray:[LibcoreIcuICU getAvailableNumberFormatLocalesNative]];
}

+ (IOSObjectArray *)getAvailableCurrencyCodes {
  NSArray *currencyCodes = [NSLocale ISOCurrencyCodes];
  return [IOSObjectArray arrayWithNSArray:currencyCodes type:[NSString getClass]];
}

+ (IOSObjectArray *)getISOLanguagesNative {
  NSArray *languages = [NSLocale ISOLanguageCodes];
  NSUInteger count = [languages count];
  NSMutableData* data = [NSMutableData dataWithLength: count * sizeof(id)];
  NSRange range = NSMakeRange(0, count);
  [languages getObjects:(__unsafe_unretained id *) data.mutableBytes range:range];
  IOSObjectArray * result =
  [IOSObjectArray arrayWithObjects:(__unsafe_unretained id *) data.mutableBytes
  count:count
  type:[NSString getClass]];
  return result;
}

+ (IOSObjectArray *)getISOCountriesNative {
  NSArray *countries = [NSLocale ISOCountryCodes];
  NSUInteger count = [countries count];
  NSMutableData* data = [NSMutableData dataWithLength: count * sizeof(id)];
  NSRange range = NSMakeRange(0, count);
  [countries getObjects:(__unsafe_unretained id *) data.mutableBytes range:range];
  IOSObjectArray * result =
  [IOSObjectArray arrayWithObjects:(__unsafe_unretained id *) data.mutableBytes
  count:count
  type:[NSString getClass]];
  return result;
}

+ (IOSObjectArray *)getAvailableLocalesNative {
  NSArray *localeIds = [NSLocale availableLocaleIdentifiers];
  return [IOSObjectArray arrayWithNSArray:localeIds type:[NSString getClass]];
}

+ (IOSObjectArray *)getAvailableDateFormatLocalesNative {
  NSMutableArray *localesWithDateFormats = [NSMutableArray array];
  NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
  for (NSString *localeId in [NSLocale availableLocaleIdentifiers]) {
    NSLocale *locale = [[NSLocale alloc] initWithLocaleIdentifier:localeId];
    [formatter setLocale:locale];
    NSString *dateFormat = [formatter dateFormat];
    if (dateFormat) {
      [localesWithDateFormats addObject:localeId];
    }
    #if !__has_feature(objc_arc)
    [locale release];
    #endif
  }
  return [IOSObjectArray arrayWithNSArray:localesWithDateFormats type:[NSString getClass]];
}

+ (IOSObjectArray *)getAvailableCalendarLocalesNative {
  NSMutableArray *localesWithCalendarFormats = [NSMutableArray array];
  for (NSString *localeId in [NSLocale availableLocaleIdentifiers]) {
    NSLocale *locale = [[NSLocale alloc] initWithLocaleIdentifier:localeId];
    if ([locale objectForKey:NSLocaleCalendar]) {
      [localesWithCalendarFormats addObject:localeId];
    }
    #if !__has_feature(objc_arc)
    [locale release];
    #endif
  }
  return [IOSObjectArray arrayWithNSArray:localesWithCalendarFormats type:[NSString getClass]];
}

+ (IOSObjectArray *)getAvailableNumberFormatLocalesNative {
  NSMutableArray *localesWithNumberFormats = [NSMutableArray array];
  NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
  for (NSString *localeId in [NSLocale availableLocaleIdentifiers]) {
    NSLocale *locale = [[NSLocale alloc] initWithLocaleIdentifier:localeId];
    [formatter setLocale:locale];
    NSString *numberFormat = [formatter positiveFormat];
    if (numberFormat) {
      [localesWithNumberFormats addObject:localeId];
    }
    #if !__has_feature(objc_arc)
    [locale release];
    #endif
  }
  return [IOSObjectArray arrayWithNSArray:localesWithNumberFormats type:[NSString getClass]];
}

+ (NSString *)getDisplayCountryNativeWithNSString:(NSString *)countryCode
                                     withNSString:(NSString *)localeId {
  NSLocale *locale = [[NSLocale alloc] initWithLocaleIdentifier:localeId];
  NSString *country = [locale objectForKey:NSLocaleCountryCode];
  #if !__has_feature(objc_arc)
  [locale release];
  #endif
  return (country) ? country : countryCode;
}

+ (NSString *)getDisplayLanguageNativeWithNSString:(NSString *)languageCode
                                      withNSString:(NSString *)localeId {
  NSLocale *locale = [[NSLocale alloc] initWithLocaleIdentifier:localeId];
  NSString *language = [locale objectForKey:NSLocaleLanguageCode];
  #if !__has_feature(objc_arc)
  [locale release];
  #endif
  return (language) ? language : languageCode;
}

+ (NSString *)getDisplayVariantNativeWithNSString:(NSString *)variantCode
                                     withNSString:(NSString *)localeId {
  NSLocale *locale = [[NSLocale alloc] initWithLocaleIdentifier:localeId];
  NSString *variant = [locale objectForKey:NSLocaleVariantCode];
  #if !__has_feature(objc_arc)
  [locale release];
  #endif
  return (variant) ? variant : variantCode;
}

+ (NSString *)getISO3CountryNativeWithNSString:(NSString *)localeId {
  @throw AUTORELEASE([[JavaLangUnsupportedOperationException alloc]
  initWithNSString:@"ISO3 codes not available on iOS"]);
  return nil;
}

+ (NSString *)getISO3LanguageNativeWithNSString:(NSString *)localeId {
  @throw AUTORELEASE([[JavaLangUnsupportedOperationException alloc]
  initWithNSString:@"ISO3 codes not available on iOS"]);
  return nil;
}

+ (NSString *)getCurrencyCodeWithNSString:(NSString *)localeId {
  NSLocale *nativeLocale =
  AUTORELEASE([[NSLocale alloc] initWithLocaleIdentifier:localeId]);
  NSNumberFormatter *formatter = AUTORELEASE([[NSNumberFormatter alloc] init]);
  [formatter setNumberStyle:NSNumberFormatterCurrencyStyle];
  [formatter setLocale:nativeLocale];
  return [formatter currencyCode];
}

+ (NSString *)getCurrencySymbolWithNSString:(NSString *)localeId {
  NSLocale *nativeLocale =
  AUTORELEASE([[NSLocale alloc] initWithLocaleIdentifier:localeId]);
  NSNumberFormatter *formatter = AUTORELEASE([[NSNumberFormatter alloc] init]);
  [formatter setNumberStyle:NSNumberFormatterCurrencyStyle];
  [formatter setLocale:nativeLocale];
  return [formatter currencySymbol];
}

+ (int)getCurrencyFractionDigitsWithNSString:(NSString *)currencyCode {
  NSNumberFormatter *formatter = AUTORELEASE([[NSNumberFormatter alloc] init]);
  [formatter setCurrencyCode:currencyCode];
  return [formatter maximumFractionDigits];
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

@end
