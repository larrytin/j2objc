//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/libcore/icu/TimeZoneNames.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "java/util/Comparator.h"
#include "java/util/HashMap.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"
#include "libcore/icu/TimeZoneNames.h"

@implementation LibcoreIcuTimeZoneNames

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:LibcoreIcuTimeZoneNames_availableTimeZoneIds_ name:@"LibcoreIcuTimeZoneNames_availableTimeZoneIds_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:LibcoreIcuTimeZoneNames_cachedZoneStrings_ name:@"LibcoreIcuTimeZoneNames_cachedZoneStrings_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:LibcoreIcuTimeZoneNames_ZONE_STRINGS_COMPARATOR_ name:@"LibcoreIcuTimeZoneNames_ZONE_STRINGS_COMPARATOR_"]];
  return result;
}

static IOSObjectArray * LibcoreIcuTimeZoneNames_availableTimeZoneIds_;
static LibcoreIcuTimeZoneNames_ZoneStringsCache * LibcoreIcuTimeZoneNames_cachedZoneStrings_;
static id<JavaUtilComparator> LibcoreIcuTimeZoneNames_ZONE_STRINGS_COMPARATOR_;

+ (IOSObjectArray *)availableTimeZoneIds {
  return LibcoreIcuTimeZoneNames_availableTimeZoneIds_;
}

+ (int)OLSON_NAME {
  return LibcoreIcuTimeZoneNames_OLSON_NAME;
}

+ (int)LONG_NAME {
  return LibcoreIcuTimeZoneNames_LONG_NAME;
}

+ (int)SHORT_NAME {
  return LibcoreIcuTimeZoneNames_SHORT_NAME;
}

+ (int)LONG_NAME_DST {
  return LibcoreIcuTimeZoneNames_LONG_NAME_DST;
}

+ (int)SHORT_NAME_DST {
  return LibcoreIcuTimeZoneNames_SHORT_NAME_DST;
}

+ (int)NAME_COUNT {
  return LibcoreIcuTimeZoneNames_NAME_COUNT;
}

+ (LibcoreIcuTimeZoneNames_ZoneStringsCache *)cachedZoneStrings {
  return LibcoreIcuTimeZoneNames_cachedZoneStrings_;
}

+ (id<JavaUtilComparator>)ZONE_STRINGS_COMPARATOR {
  return LibcoreIcuTimeZoneNames_ZONE_STRINGS_COMPARATOR_;
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

+ (NSString *)getDisplayNameWithNSStringArray2:(IOSObjectArray *)zoneStrings
                                  withNSString:(NSString *)id_
                                   withBoolean:(BOOL)daylight
                                       withInt:(int)style {
  IOSObjectArray *needle = [IOSObjectArray arrayWithObjects:(id[]){ id_ } count:1 type:[IOSClass classWithClass:[NSString class]]];
  int index = [JavaUtilArrays binarySearchWithNSObjectArray:zoneStrings withId:needle withJavaUtilComparator:LibcoreIcuTimeZoneNames_ZONE_STRINGS_COMPARATOR_];
  if (index >= 0) {
    IOSObjectArray *row = IOSObjectArray_Get(nil_chk(zoneStrings), index);
    if (daylight) {
      return (style == JavaUtilTimeZone_LONG) ? IOSObjectArray_Get(nil_chk(row), LibcoreIcuTimeZoneNames_LONG_NAME_DST) : IOSObjectArray_Get(nil_chk(row), LibcoreIcuTimeZoneNames_SHORT_NAME_DST);
    }
    else {
      return (style == JavaUtilTimeZone_LONG) ? IOSObjectArray_Get(nil_chk(row), LibcoreIcuTimeZoneNames_LONG_NAME) : IOSObjectArray_Get(nil_chk(row), LibcoreIcuTimeZoneNames_SHORT_NAME);
    }
  }
  return nil;
}

+ (IOSObjectArray *)getZoneStringsWithJavaUtilLocale:(JavaUtilLocale *)locale {
  if (locale == nil) {
    locale = [JavaUtilLocale getDefault];
  }
  return [((LibcoreIcuTimeZoneNames_ZoneStringsCache *) nil_chk(LibcoreIcuTimeZoneNames_cachedZoneStrings_)) getWithId:locale];
}

+ (void)fillZoneStringsWithNSString:(NSString *)localeId
                 withNSStringArray2:(IOSObjectArray *)result {
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(result)) count]; i++) {
    [LibcoreIcuTimeZoneNames fillZoneStringNamesWithNSString:localeId withNSStringArray:IOSObjectArray_Get(result, i)];
  }
}

+ (void)fillZoneStringNamesWithNSString:(NSString *)localeId
                      withNSStringArray:(IOSObjectArray *)result {
  NSLocale *locale = [[NSLocale alloc] initWithLocaleIdentifier:localeId];
  NSTimeZone *tz = [NSTimeZone timeZoneWithName:[result objectAtIndex:0]];
  [result replaceObjectAtIndex:1
  withObject:[tz localizedName:NSTimeZoneNameStyleStandard locale:locale]];
  [result replaceObjectAtIndex:2
  withObject:[tz localizedName:NSTimeZoneNameStyleShortStandard locale:locale]];
  [result replaceObjectAtIndex:3
  withObject:[tz localizedName:NSTimeZoneNameStyleDaylightSaving locale:locale]];
  [result replaceObjectAtIndex:3
  withObject:[tz localizedName:NSTimeZoneNameStyleShortDaylightSaving locale:locale]];
}

+ (void)initialize {
  if (self == [LibcoreIcuTimeZoneNames class]) {
    JreOperatorRetainedAssign(&LibcoreIcuTimeZoneNames_availableTimeZoneIds_, nil, [JavaUtilTimeZone getAvailableIDs]);
    JreOperatorRetainedAssign(&LibcoreIcuTimeZoneNames_cachedZoneStrings_, nil, [[[LibcoreIcuTimeZoneNames_ZoneStringsCache alloc] init] autorelease]);
    {
      [LibcoreIcuTimeZoneNames_cachedZoneStrings_ getWithId:[JavaUtilLocale ROOT]];
      [LibcoreIcuTimeZoneNames_cachedZoneStrings_ getWithId:[JavaUtilLocale US]];
      [LibcoreIcuTimeZoneNames_cachedZoneStrings_ getWithId:[JavaUtilLocale getDefault]];
    }
    JreOperatorRetainedAssign(&LibcoreIcuTimeZoneNames_ZONE_STRINGS_COMPARATOR_, nil, [[[LibcoreIcuTimeZoneNames_$1 alloc] init] autorelease]);
  }
}

@end
@implementation LibcoreIcuTimeZoneNames_ZoneStringsCache

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)init {
  if (self = [super initWithInt:(int) [((IOSObjectArray *) nil_chk([LibcoreIcuTimeZoneNames availableTimeZoneIds])) count]]) {
    LibcoreIcuTimeZoneNames_ZoneStringsCache_set_internTable_(self, [[[JavaUtilHashMap alloc] init] autorelease]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (IOSObjectArray *)createWithId:(JavaUtilLocale *)locale {
  long long int start = [JavaLangSystem currentTimeMillis];
  IOSObjectArray *result = [IOSObjectArray arrayWithDimensions:2 lengths:(int[]){ (int) [((IOSObjectArray *) nil_chk([LibcoreIcuTimeZoneNames availableTimeZoneIds])) count], 5 } type:[IOSClass classWithClass:[NSString class]]];
  for (int i = 0; i < (int) [[LibcoreIcuTimeZoneNames availableTimeZoneIds] count]; ++i) {
    IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(result, i)), 0, IOSObjectArray_Get([LibcoreIcuTimeZoneNames availableTimeZoneIds], i));
  }
  long long int nativeStart = [JavaLangSystem currentTimeMillis];
  [LibcoreIcuTimeZoneNames fillZoneStringsWithNSString:[((JavaUtilLocale *) nil_chk(locale)) description] withNSStringArray2:result];
  long long int nativeEnd = [JavaLangSystem currentTimeMillis];
  [self internStringsWithNSStringArray2:result];
  long long int end = [JavaLangSystem currentTimeMillis];
  long long int nativeDuration = nativeEnd - nativeStart;
  long long int duration = end - start;
  [JavaLangSystem logIWithNSString:[NSString stringWithFormat:@"Loaded time zone names for \"%@\" in %lldms (%lldms in ICU)", locale, duration, nativeDuration]];
  return result;
}

- (void)internStringsWithNSStringArray2:(IOSObjectArray *)result {
  @synchronized(self) {
    {
      for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(result)) count]; ++i) {
        for (int j = 1; j < LibcoreIcuTimeZoneNames_NAME_COUNT; ++j) {
          NSString *original = IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(result, i)), j);
          NSString *nonDuplicate = [((JavaUtilHashMap *) nil_chk(internTable_)) getWithId:original];
          if (nonDuplicate == nil) {
            [internTable_ putWithId:original withId:original];
          }
          else {
            IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(result, i)), j, nonDuplicate);
          }
        }
      }
    }
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  LibcoreIcuTimeZoneNames_ZoneStringsCache_set_internTable_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(LibcoreIcuTimeZoneNames_ZoneStringsCache *)other {
  [super copyAllFieldsTo:other];
  LibcoreIcuTimeZoneNames_ZoneStringsCache_set_internTable_(other, internTable_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:internTable_ name:@"internTable"]];
  return result;
}

@end
@implementation LibcoreIcuTimeZoneNames_$1

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (int)compareWithId:(IOSObjectArray *)lhs
              withId:(IOSObjectArray *)rhs {
  return [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(lhs), LibcoreIcuTimeZoneNames_OLSON_NAME))) compareToWithId:IOSObjectArray_Get(nil_chk(rhs), LibcoreIcuTimeZoneNames_OLSON_NAME)];
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

@end
