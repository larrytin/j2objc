//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/libcore/io/IoUtils.java
//
//  Created by retechretech on 13-9-4.
//

#include "IOSByteArray.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/File.h"
#include "java/io/FileDescriptor.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InterruptedIOException.h"
#include "java/lang/AutoCloseable.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Thread.h"
#include "libcore/io/ErrnoException.h"
#include "libcore/io/IoUtils.h"
#include "libcore/io/Libcore.h"
#include "libcore/io/Os.h"
#include "libcore/io/OsConstants.h"

@implementation LibcoreIoIoUtils

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

+ (void)closeWithJavaIoFileDescriptor:(JavaIoFileDescriptor *)fd {
  @try {
    if (fd != nil && [fd valid]) {
      [((id<LibcoreIoOs>) nil_chk([LibcoreIoLibcore os])) closeWithJavaIoFileDescriptor:fd];
    }
  }
  @catch (LibcoreIoErrnoException *errnoException) {
    @throw [((LibcoreIoErrnoException *) nil_chk(errnoException)) rethrowAsIOException];
  }
}

+ (IOSObjectArray *)__exceptions_closeWithJavaIoFileDescriptor_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

+ (void)closeQuietlyWithJavaLangAutoCloseable:(id<JavaLangAutoCloseable>)closeable {
  if (closeable != nil) {
    @try {
      [closeable close];
    }
    @catch (JavaLangRuntimeException *rethrown) {
      @throw rethrown;
    }
    @catch (JavaLangException *ignored) {
    }
  }
}

+ (void)closeQuietlyWithJavaIoFileDescriptor:(JavaIoFileDescriptor *)fd {
  @try {
    [LibcoreIoIoUtils closeWithJavaIoFileDescriptor:fd];
  }
  @catch (JavaIoIOException *ignored) {
  }
}

+ (void)setBlockingWithJavaIoFileDescriptor:(JavaIoFileDescriptor *)fd
                                   withBOOL:(BOOL)blocking {
  @try {
    int flags = [((id<LibcoreIoOs>) nil_chk([LibcoreIoLibcore os])) fcntlVoidWithJavaIoFileDescriptor:fd withInt:LibcoreIoOsConstants_F_GETFL];
    if (!blocking) {
      flags |= LibcoreIoOsConstants_O_NONBLOCK;
    }
    else {
      flags &= ~LibcoreIoOsConstants_O_NONBLOCK;
    }
    [[LibcoreIoLibcore os] fcntlLongWithJavaIoFileDescriptor:fd withInt:LibcoreIoOsConstants_F_SETFL withLongInt:flags];
  }
  @catch (LibcoreIoErrnoException *errnoException) {
    @throw [((LibcoreIoErrnoException *) nil_chk(errnoException)) rethrowAsIOException];
  }
}

+ (IOSObjectArray *)__exceptions_setBlockingWithJavaIoFileDescriptor_withBOOL_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

+ (IOSByteArray *)readFileAsByteArrayWithNSString:(NSString *)path {
  return [((JavaIoByteArrayOutputStream *) nil_chk([LibcoreIoIoUtils readFileAsBytesWithNSString:path])) toByteArray];
}

+ (IOSObjectArray *)__exceptions_readFileAsByteArrayWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

+ (NSString *)readFileAsStringWithNSString:(NSString *)path {
  return [((JavaIoByteArrayOutputStream *) nil_chk([LibcoreIoIoUtils readFileAsBytesWithNSString:path])) description];
}

+ (IOSObjectArray *)__exceptions_readFileAsStringWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

+ (JavaIoByteArrayOutputStream *)readFileAsBytesWithNSString:(NSString *)path {
  JavaIoFileInputStream *f = nil;
  @try {
    f = [[[JavaIoFileInputStream alloc] initWithNSString:path] autorelease];
    JavaIoByteArrayOutputStream *bytes = [[[JavaIoByteArrayOutputStream alloc] init] autorelease];
    IOSByteArray *buffer = [IOSByteArray arrayWithLength:8192];
    while (YES) {
      int byteCount = [f readWithByteArray:buffer];
      if (byteCount == -1) {
        return bytes;
      }
      [bytes writeWithByteArray:buffer withInt:0 withInt:byteCount];
    }
  }
  @finally {
    [LibcoreIoIoUtils closeQuietlyWithJavaLangAutoCloseable:f];
  }
}

+ (IOSObjectArray *)__exceptions_readFileAsBytesWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

+ (void)deleteContentsWithJavaIoFile:(JavaIoFile *)dir {
  IOSObjectArray *files = [((JavaIoFile *) nil_chk(dir)) listFiles];
  if (files == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"not a directory: %@", dir]] autorelease];
  }
  {
    IOSObjectArray *a__ = files;
    int n__ = (int) [((IOSObjectArray *) nil_chk(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      JavaIoFile *file = [a__ objectAtIndex:i__];
      if ([((JavaIoFile *) nil_chk(file)) isDirectory]) {
        [LibcoreIoIoUtils deleteContentsWithJavaIoFile:file];
      }
      if (![file delete__]) {
        @throw [[[JavaIoIOException alloc] initWithNSString:[NSString stringWithFormat:@"failed to delete file: %@", file]] autorelease];
      }
    }
  }
}

+ (IOSObjectArray *)__exceptions_deleteContentsWithJavaIoFile_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

+ (BOOL)canOpenReadOnlyWithNSString:(NSString *)path {
  @try {
    JavaIoFileDescriptor *fd = [((id<LibcoreIoOs>) nil_chk([LibcoreIoLibcore os])) openWithNSString:path withInt:LibcoreIoOsConstants_O_RDONLY withInt:0];
    [[LibcoreIoLibcore os] closeWithJavaIoFileDescriptor:fd];
    return YES;
  }
  @catch (LibcoreIoErrnoException *errnoException) {
    return NO;
  }
}

+ (void)throwInterruptedIoException {
  [((JavaLangThread *) nil_chk([JavaLangThread currentThread])) interrupt];
  @throw [[[JavaIoInterruptedIOException alloc] init] autorelease];
}

+ (IOSObjectArray *)__exceptions_throwInterruptedIoException {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoInterruptedIOException getClass] } count:1 type:[IOSClass getClass]];
}

@end
