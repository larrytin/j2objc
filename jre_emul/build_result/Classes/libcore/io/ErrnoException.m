//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "java/io/IOException.h"
#include "java/lang/Throwable.h"
#include "libcore/io/ErrnoException.h"
#include "libcore/io/Libcore.h"
#include "libcore/io/Os.h"
#include "libcore/io/OsConstants.h"

@implementation LibcoreIoErrnoException

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithNSString:(NSString *)functionName
               withInt:(int)errno_ {
  if (self = [super init]) {
    LibcoreIoErrnoException_set_functionName_(self, functionName);
    self->errno__ = errno_;
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithNSString:(NSString *)functionName
               withInt:(int)errno_
 withJavaLangThrowable:(JavaLangThrowable *)cause {
  if (self = [super initWithJavaLangThrowable:cause]) {
    LibcoreIoErrnoException_set_functionName_(self, functionName);
    self->errno__ = errno_;
    JreMemDebugAdd(self);
  }
  return self;
}

- (NSString *)getMessage {
  NSString *errnoName = [LibcoreIoOsConstants errnoNameWithInt:errno__];
  if (errnoName == nil) {
    errnoName = [NSString stringWithFormat:@"errno %d", errno__];
  }
  NSString *description_ = [((id<LibcoreIoOs>) nil_chk([LibcoreIoLibcore os])) strerrorWithInt:errno__];
  return [NSString stringWithFormat:@"%@ failed: %@ (%@)", functionName_, errnoName, description_];
}

- (JavaIoIOException *)rethrowAsIOException {
  JavaIoIOException *newException = [[[JavaIoIOException alloc] initWithNSString:[self getMessage]] autorelease];
  [newException initCauseWithJavaLangThrowable:self];
  @throw newException;
}

+ (IOSObjectArray *)__exceptions_rethrowAsIOException {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  LibcoreIoErrnoException_set_functionName_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(LibcoreIoErrnoException *)other {
  [super copyAllFieldsTo:other];
  other->errno__ = errno__;
  LibcoreIoErrnoException_set_functionName_(other, functionName_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:functionName_ name:@"functionName"]];
  return result;
}

@end
