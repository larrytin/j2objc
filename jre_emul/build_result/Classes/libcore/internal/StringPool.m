//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/libcore/internal/StringPool.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSCharArray.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "libcore/internal/StringPool.h"

@implementation LibcoreInternalStringPool

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

+ (BOOL)contentEqualsWithNSString:(NSString *)s
                    withCharArray:(IOSCharArray *)chars
                          withInt:(int)start
                          withInt:(int)length {
  if ([((NSString *) nil_chk(s)) length] != length) {
    return NO;
  }
  for (int i = 0; i < length; i++) {
    if (IOSCharArray_Get(nil_chk(chars), start + i) != [s charAtWithInt:i]) {
      return NO;
    }
  }
  return YES;
}

- (NSString *)getWithCharArray:(IOSCharArray *)array
                       withInt:(int)start
                       withInt:(int)length {
  int hashCode = 0;
  for (int i = start; i < start + length; i++) {
    hashCode = (hashCode * 31) + IOSCharArray_Get(nil_chk(array), i);
  }
  hashCode ^= ((int) (((unsigned int) hashCode) >> 20)) ^ ((int) (((unsigned int) hashCode) >> 12));
  hashCode ^= ((int) (((unsigned int) hashCode) >> 7)) ^ ((int) (((unsigned int) hashCode) >> 4));
  int index = hashCode & ((int) [((IOSObjectArray *) nil_chk(pool_)) count] - 1);
  NSString *pooled = IOSObjectArray_Get(pool_, index);
  if (pooled != nil && [LibcoreInternalStringPool contentEqualsWithNSString:pooled withCharArray:array withInt:start withInt:length]) {
    return pooled;
  }
  NSString *result = [NSString stringWithCharacters:array offset:start length:length];
  IOSObjectArray_Set(pool_, index, result);
  return result;
}

- (id)init {
  if (self = [super init]) {
    LibcoreInternalStringPool_set_pool_(self, [IOSObjectArray arrayWithLength:512 type:[IOSClass classWithClass:[NSString class]]]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  LibcoreInternalStringPool_set_pool_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(LibcoreInternalStringPool *)other {
  [super copyAllFieldsTo:other];
  LibcoreInternalStringPool_set_pool_(other, pool_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:pool_ name:@"pool"]];
  return result;
}

@end
