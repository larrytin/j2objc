//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/libcore/util/Objects.java
//
//  Created by retechretech on 13-9-4.
//

#include "IOSBooleanArray.h"
#include "IOSByteArray.h"
#include "IOSCharArray.h"
#include "IOSClass.h"
#include "IOSDoubleArray.h"
#include "IOSFloatArray.h"
#include "IOSIntArray.h"
#include "IOSLongArray.h"
#include "IOSObjectArray.h"
#include "IOSShortArray.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Character.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/Modifier.h"
#include "java/util/Arrays.h"
#include "libcore/util/Objects.h"

@implementation LibcoreUtilObjects

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

+ (BOOL)equalWithId:(id)a
             withId:(id)b {
  return a == b || (a != nil && [a isEqual:b]);
}

+ (int)hashCodeWithId:(id)o {
  return (o == nil) ? 0 : [o hash];
}

+ (NSString *)toStringWithId:(id)o {
  IOSClass *c = [nil_chk(o) getClass];
  JavaLangStringBuilder *sb = [[[JavaLangStringBuilder alloc] init] autorelease];
  [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:[c getSimpleName]])) appendWithUnichar:'['];
  int i = 0;
  {
    IOSObjectArray *a__ = [c getDeclaredFields];
    int n__ = (int) [((IOSObjectArray *) nil_chk(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      JavaLangReflectField *f = [a__ objectAtIndex:i__];
      if (([((JavaLangReflectField *) nil_chk(f)) getModifiers] & (JavaLangReflectModifier_STATIC | JavaLangReflectModifier_TRANSIENT)) != 0) {
        continue;
      }
      [f setAccessibleWithBOOL:YES];
      @try {
        id value = [f getWithId:o];
        if (i++ > 0) {
          [sb appendWithUnichar:','];
        }
        [sb appendWithNSString:[f getName]];
        [sb appendWithUnichar:'='];
        if ([[nil_chk(value) getClass] isArray]) {
          if ([value getClass] == [IOSBooleanArray iosClass]) {
            [sb appendWithNSString:[JavaUtilArrays toStringWithBooleanArray:(IOSBooleanArray *) value]];
          }
          else if ([value getClass] == [IOSByteArray iosClass]) {
            [sb appendWithNSString:[JavaUtilArrays toStringWithByteArray:(IOSByteArray *) value]];
          }
          else if ([value getClass] == [IOSCharArray iosClass]) {
            [sb appendWithNSString:[JavaUtilArrays toStringWithCharArray:(IOSCharArray *) value]];
          }
          else if ([value getClass] == [IOSDoubleArray iosClass]) {
            [sb appendWithNSString:[JavaUtilArrays toStringWithDoubleArray:(IOSDoubleArray *) value]];
          }
          else if ([value getClass] == [IOSFloatArray iosClass]) {
            [sb appendWithNSString:[JavaUtilArrays toStringWithFloatArray:(IOSFloatArray *) value]];
          }
          else if ([value getClass] == [IOSIntArray iosClass]) {
            [sb appendWithNSString:[JavaUtilArrays toStringWithIntArray:(IOSIntArray *) value]];
          }
          else if ([value getClass] == [IOSLongArray iosClass]) {
            [sb appendWithNSString:[JavaUtilArrays toStringWithLongArray:(IOSLongArray *) value]];
          }
          else if ([value getClass] == [IOSShortArray iosClass]) {
            [sb appendWithNSString:[JavaUtilArrays toStringWithShortArray:(IOSShortArray *) value]];
          }
          else {
            [sb appendWithNSString:[JavaUtilArrays toStringWithNSObjectArray:(IOSObjectArray *) value]];
          }
        }
        else if ([value getClass] == [IOSClass classWithClass:[JavaLangCharacter class]]) {
          [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithUnichar:'\''])) appendWithId:value])) appendWithUnichar:'\''];
        }
        else if ([value getClass] == [IOSClass classWithClass:[NSString class]]) {
          [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithUnichar:'"'])) appendWithId:value])) appendWithUnichar:'"'];
        }
        else {
          [sb appendWithId:value];
        }
      }
      @catch (JavaLangIllegalAccessException *unexpected) {
        @throw [[[JavaLangAssertionError alloc] initWithId:unexpected] autorelease];
      }
    }
  }
  [sb appendWithNSString:@"]"];
  return [sb description];
}

@end
