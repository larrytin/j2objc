//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/luni/src/main/java/java/util/EnumSet.java
//
//  Created by retechretech on 13-9-4.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/AssertionError.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NullPointerException.h"
#include "java/util/Collection.h"
#include "java/util/EnumSet.h"
#include "java/util/HugeEnumSet.h"
#include "java/util/Iterator.h"
#include "java/util/MiniEnumSet.h"

@implementation JavaUtilEnumSet

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithIOSClass:(IOSClass *)cls {
  if ((self = [super init])) {
    JavaUtilEnumSet_set_elementClass_(self, cls);
    JreMemDebugAdd(self);
  }
  return self;
}

+ (JavaUtilEnumSet *)noneOfWithIOSClass:(IOSClass *)elementType {
  if (![((IOSClass *) nil_chk(elementType)) isEnum] || [elementType isEqual:[IOSClass classWithClass:[JavaLangEnum class]]]) {
    @throw [[[JavaLangClassCastException alloc] init] autorelease];
  }
  if ((int) [((IOSObjectArray *) nil_chk([elementType getEnumConstants])) count] <= 64) {
    return [[[JavaUtilMiniEnumSet alloc] initWithIOSClass:elementType] autorelease];
  }
  return [[[JavaUtilHugeEnumSet alloc] initWithIOSClass:elementType] autorelease];
}

+ (JavaUtilEnumSet *)allOfWithIOSClass:(IOSClass *)elementType {
  JavaUtilEnumSet *set = [JavaUtilEnumSet noneOfWithIOSClass:elementType];
  [((JavaUtilEnumSet *) nil_chk(set)) complement];
  return set;
}

+ (JavaUtilEnumSet *)copyOfWithJavaUtilEnumSet:(JavaUtilEnumSet *)s {
  JavaUtilEnumSet *set = [JavaUtilEnumSet noneOfWithIOSClass:((JavaUtilEnumSet *) nil_chk(s))->elementClass_];
  [((JavaUtilEnumSet *) nil_chk(set)) addAllWithJavaUtilCollection:s];
  return set;
}

+ (JavaUtilEnumSet *)copyOfWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  if (c == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  if ([(id) c isKindOfClass:[JavaUtilEnumSet class]]) {
    return [JavaUtilEnumSet copyOfWithJavaUtilEnumSet:(JavaUtilEnumSet *) c];
  }
  if ([((id<JavaUtilCollection>) nil_chk(c)) isEmpty]) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  id<JavaUtilIterator> iterator = [c iterator];
  JavaLangEnum *element = [((id<JavaUtilIterator>) nil_chk(iterator)) next];
  if (!([element isKindOfClass:[JavaLangEnum class]])) {
    @throw [[[JavaLangClassCastException alloc] init] autorelease];
  }
  JavaUtilEnumSet *set = [JavaUtilEnumSet noneOfWithIOSClass:[((JavaLangEnum *) nil_chk(element)) getDeclaringClass]];
  [((JavaUtilEnumSet *) nil_chk(set)) addWithId:element];
  while ([iterator hasNext]) {
    [set addWithId:[iterator next]];
  }
  return set;
}

+ (JavaUtilEnumSet *)complementOfWithJavaUtilEnumSet:(JavaUtilEnumSet *)s {
  JavaUtilEnumSet *set = [JavaUtilEnumSet noneOfWithIOSClass:((JavaUtilEnumSet *) nil_chk(s))->elementClass_];
  [((JavaUtilEnumSet *) nil_chk(set)) addAllWithJavaUtilCollection:s];
  [set complement];
  return set;
}

- (void)complement {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (JavaUtilEnumSet *)ofWithId:(JavaLangEnum *)e {
  if (e == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  if (!([e isKindOfClass:[JavaLangEnum class]])) {
    @throw [[[JavaLangClassCastException alloc] init] autorelease];
  }
  JavaUtilEnumSet *set = [JavaUtilEnumSet noneOfWithIOSClass:[((JavaLangEnum *) nil_chk(e)) getDeclaringClass]];
  [((JavaUtilEnumSet *) nil_chk(set)) addWithId:e];
  return set;
}

+ (JavaUtilEnumSet *)ofWithId:(JavaLangEnum *)e1
                       withId:(JavaLangEnum *)e2 {
  JavaUtilEnumSet *set = [JavaUtilEnumSet ofWithId:e1];
  [((JavaUtilEnumSet *) nil_chk(set)) addWithId:e2];
  return set;
}

+ (JavaUtilEnumSet *)ofWithId:(JavaLangEnum *)e1
                       withId:(JavaLangEnum *)e2
                       withId:(JavaLangEnum *)e3 {
  JavaUtilEnumSet *set = [JavaUtilEnumSet ofWithId:e1 withId:e2];
  [((JavaUtilEnumSet *) nil_chk(set)) addWithId:e3];
  return set;
}

+ (JavaUtilEnumSet *)ofWithId:(JavaLangEnum *)e1
                       withId:(JavaLangEnum *)e2
                       withId:(JavaLangEnum *)e3
                       withId:(JavaLangEnum *)e4 {
  JavaUtilEnumSet *set = [JavaUtilEnumSet ofWithId:e1 withId:e2 withId:e3];
  [((JavaUtilEnumSet *) nil_chk(set)) addWithId:e4];
  return set;
}

+ (JavaUtilEnumSet *)ofWithId:(JavaLangEnum *)e1
                       withId:(JavaLangEnum *)e2
                       withId:(JavaLangEnum *)e3
                       withId:(JavaLangEnum *)e4
                       withId:(JavaLangEnum *)e5 {
  JavaUtilEnumSet *set = [JavaUtilEnumSet ofWithId:e1 withId:e2 withId:e3 withId:e4];
  [((JavaUtilEnumSet *) nil_chk(set)) addWithId:e5];
  return set;
}

+ (JavaUtilEnumSet *)ofWithId:(JavaLangEnum *)start
        withJavaLangEnumArray:(IOSObjectArray *)others {
  if (others == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  JavaUtilEnumSet *set = [JavaUtilEnumSet ofWithId:start];
  {
    IOSObjectArray *a__ = others;
    int n__ = (int) [((IOSObjectArray *) nil_chk(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      JavaLangEnum *e = [a__ objectAtIndex:i__];
      [((JavaUtilEnumSet *) nil_chk(set)) addWithId:e];
    }
  }
  return set;
}

+ (JavaUtilEnumSet *)rangeWithId:(JavaLangEnum *)start
                          withId:(JavaLangEnum *)end {
  if (start == nil || end == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  if ([((JavaLangEnum *) nil_chk(start)) compareToWithId:end] > 0) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  if (!([start isKindOfClass:[JavaLangEnum class]]) || !([end isKindOfClass:[JavaLangEnum class]])) {
    @throw [[[JavaLangClassCastException alloc] init] autorelease];
  }
  JavaUtilEnumSet *set = [JavaUtilEnumSet noneOfWithIOSClass:[start getDeclaringClass]];
  [((JavaUtilEnumSet *) nil_chk(set)) setRangeWithId:start withId:end];
  return set;
}

- (void)setRangeWithId:(JavaLangEnum *)start
                withId:(JavaLangEnum *)end {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (JavaUtilEnumSet *)clone {
  @try {
    return (JavaUtilEnumSet *) [super clone];
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw [[[JavaLangAssertionError alloc] initWithId:e] autorelease];
  }
}

- (BOOL)isValidTypeWithIOSClass:(IOSClass *)cls {
  return [((IOSClass *) nil_chk(cls)) isEqual:elementClass_] || [cls getSuperclass] == elementClass_;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilEnumSet_set_elementClass_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilEnumSet *)other {
  [super copyAllFieldsTo:other];
  JavaUtilEnumSet_set_elementClass_(other, elementClass_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:elementClass_ name:@"elementClass"]];
  return result;
}

@end
