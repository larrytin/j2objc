//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/luni/src/main/java/java/util/PriorityQueue.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Comparable.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/System.h"
#include "java/util/AbstractCollection.h"
#include "java/util/AbstractQueue.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/PriorityQueue.h"
#include "java/util/SortedSet.h"

@implementation JavaUtilPriorityQueue

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)init {
  return JreMemDebugAdd([self initJavaUtilPriorityQueueWithInt:JavaUtilPriorityQueue_DEFAULT_CAPACITY]);
}

- (id)initJavaUtilPriorityQueueWithInt:(int)initialCapacity {
  return JreMemDebugAdd([self initJavaUtilPriorityQueueWithInt:initialCapacity withJavaUtilComparator:nil]);
}

- (id)initWithInt:(int)initialCapacity {
  return [self initJavaUtilPriorityQueueWithInt:initialCapacity];
}

- (id)initJavaUtilPriorityQueueWithInt:(int)initialCapacity
                withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  if (self = [super init]) {
    if (initialCapacity < 1) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
    JavaUtilPriorityQueue_set_elements_(self, [self newElementArrayWithInt:initialCapacity]);
    JavaUtilPriorityQueue_set_comparator__(self, comparator);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithInt:(int)initialCapacity
withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  return [self initJavaUtilPriorityQueueWithInt:initialCapacity withJavaUtilComparator:comparator];
}

- (id)initWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  if (self = [super init]) {
    if ([(id) c isKindOfClass:[JavaUtilPriorityQueue class]]) {
      [self getFromPriorityQueueWithJavaUtilPriorityQueue:(JavaUtilPriorityQueue *) check_class_cast(c, [JavaUtilPriorityQueue class])];
    }
    else if ([(id) c conformsToProtocol: @protocol(JavaUtilSortedSet)]) {
      [self getFromSortedSetWithJavaUtilSortedSet:(id<JavaUtilSortedSet>) check_protocol_cast(c, @protocol(JavaUtilSortedSet))];
    }
    else {
      [self initSizeWithJavaUtilCollection:c];
      [self addAllWithJavaUtilCollection:c];
    }
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaUtilPriorityQueue:(JavaUtilPriorityQueue *)c {
  if (self = [super init]) {
    [self getFromPriorityQueueWithJavaUtilPriorityQueue:c];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaUtilSortedSet:(id<JavaUtilSortedSet>)c {
  if (self = [super init]) {
    [self getFromSortedSetWithJavaUtilSortedSet:c];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id<JavaUtilIterator>)iterator {
  return [[[JavaUtilPriorityQueue_PriorityIterator alloc] initWithJavaUtilPriorityQueue:self] autorelease];
}

- (int)size {
  return size__;
}

- (void)clear {
  [JavaUtilArrays fillWithNSObjectArray:elements_ withId:nil];
  size__ = 0;
}

- (BOOL)offerWithId:(id)o {
  if (nil == o) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  [self growToSizeWithInt:size__ + 1];
  IOSObjectArray_Set(nil_chk(elements_), size__, o);
  [self siftUpWithInt:size__++];
  return YES;
}

- (id)poll {
  if ([self isEmpty]) {
    return nil;
  }
  id result = IOSObjectArray_Get(nil_chk(elements_), 0);
  [self removeAtWithInt:0];
  return result;
}

- (id)peek {
  if ([self isEmpty]) {
    return nil;
  }
  return IOSObjectArray_Get(nil_chk(elements_), 0);
}

- (id<JavaUtilComparator>)comparator {
  return comparator__;
}

- (BOOL)removeWithId:(id)o {
  if (o == nil || size__ == 0) {
    return NO;
  }
  for (int i = 0; i < size__; i++) {
    if ([nil_chk(o) isEqual:IOSObjectArray_Get(nil_chk(elements_), i)]) {
      [self removeAtWithInt:i];
      return YES;
    }
  }
  return NO;
}

- (BOOL)addWithId:(id)o {
  return [self offerWithId:o];
}

- (IOSObjectArray *)newElementArrayWithInt:(int)capacity {
  return (IOSObjectArray *) check_class_cast([IOSObjectArray arrayWithLength:capacity type:[IOSClass classWithClass:[NSObject class]]], [IOSObjectArray class]);
}

- (void)getFromPriorityQueueWithJavaUtilPriorityQueue:(JavaUtilPriorityQueue *)c {
  [self initSizeWithJavaUtilCollection:c];
  JavaUtilPriorityQueue_set_comparator__(self, (id<JavaUtilComparator>) check_protocol_cast([((JavaUtilPriorityQueue *) nil_chk(c)) comparator], @protocol(JavaUtilComparator)));
  [JavaLangSystem arraycopyWithId:c->elements_ withInt:0 withId:elements_ withInt:0 withInt:[c size]];
  size__ = [c size];
}

- (void)getFromSortedSetWithJavaUtilSortedSet:(id<JavaUtilSortedSet>)c {
  [self initSizeWithJavaUtilCollection:c];
  JavaUtilPriorityQueue_set_comparator__(self, (id<JavaUtilComparator>) check_protocol_cast([((id<JavaUtilSortedSet>) nil_chk(c)) comparator], @protocol(JavaUtilComparator)));
  id<JavaUtilIterator> iter = [c iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
    IOSObjectArray_Set(nil_chk(elements_), size__++, [iter next]);
  }
}

- (void)removeAtWithInt:(int)index {
  size__--;
  IOSObjectArray_Set(nil_chk(elements_), index, IOSObjectArray_Get(elements_, size__));
  [self siftDownWithInt:index];
  IOSObjectArray_Set(elements_, size__, nil);
}

- (int)compareWithId:(id)o1
              withId:(id)o2 {
  if (nil != comparator__) {
    return [comparator__ compareWithId:o1 withId:o2];
  }
  return [((id<JavaLangComparable>) nil_chk(o1)) compareToWithId:o2];
}

- (void)siftUpWithInt:(int)childIndex {
  id target = IOSObjectArray_Get(nil_chk(elements_), childIndex);
  int parentIndex;
  while (childIndex > 0) {
    parentIndex = (childIndex - 1) / 2;
    id parent = IOSObjectArray_Get(elements_, parentIndex);
    if ([self compareWithId:parent withId:target] <= 0) {
      break;
    }
    IOSObjectArray_Set(elements_, childIndex, parent);
    childIndex = parentIndex;
  }
  IOSObjectArray_Set(elements_, childIndex, target);
}

- (void)siftDownWithInt:(int)rootIndex {
  id target = IOSObjectArray_Get(nil_chk(elements_), rootIndex);
  int childIndex;
  while ((childIndex = rootIndex * 2 + 1) < size__) {
    if (childIndex + 1 < size__ && [self compareWithId:IOSObjectArray_Get(elements_, childIndex + 1) withId:IOSObjectArray_Get(elements_, childIndex)] < 0) {
      childIndex++;
    }
    if ([self compareWithId:target withId:IOSObjectArray_Get(elements_, childIndex)] <= 0) {
      break;
    }
    IOSObjectArray_Set(elements_, rootIndex, IOSObjectArray_Get(elements_, childIndex));
    rootIndex = childIndex;
  }
  IOSObjectArray_Set(elements_, rootIndex, target);
}

- (void)initSizeWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  if (nil == c) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  if ([((id<JavaUtilCollection>) nil_chk(c)) isEmpty]) {
    JavaUtilPriorityQueue_set_elements_(self, [self newElementArrayWithInt:1]);
  }
  else {
    int capacity = (int) [JavaLangMath ceilWithDouble:[c size] * JavaUtilPriorityQueue_DEFAULT_INIT_CAPACITY_RATIO];
    JavaUtilPriorityQueue_set_elements_(self, [self newElementArrayWithInt:capacity]);
  }
}

- (void)growToSizeWithInt:(int)size {
  if (size > (int) [((IOSObjectArray *) nil_chk(elements_)) count]) {
    IOSObjectArray *newElements = [self newElementArrayWithInt:size * JavaUtilPriorityQueue_DEFAULT_CAPACITY_RATIO];
    [JavaLangSystem arraycopyWithId:elements_ withInt:0 withId:newElements withInt:0 withInt:(int) [elements_ count]];
    JavaUtilPriorityQueue_set_elements_(self, newElements);
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilPriorityQueue_set_elements_(self, nil);
  JavaUtilPriorityQueue_set_comparator__(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilPriorityQueue *)other {
  [super copyAllFieldsTo:other];
  JavaUtilPriorityQueue_set_comparator__(other, comparator__);
  JavaUtilPriorityQueue_set_elements_(other, elements_);
  other->size__ = size__;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:comparator__ name:@"comparator_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:elements_ name:@"elements"]];
  return result;
}

@end
@implementation JavaUtilPriorityQueue_PriorityIterator

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (BOOL)hasNext {
  return currentIndex_ < this$0_->size__ - 1;
}

- (id)next {
  if (![self hasNext]) {
    @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
  }
  allowRemove_ = YES;
  return IOSObjectArray_Get(nil_chk(this$0_->elements_), ++currentIndex_);
}

- (void)remove {
  if (!allowRemove_) {
    @throw [[[JavaLangIllegalStateException alloc] init] autorelease];
  }
  allowRemove_ = NO;
  [this$0_ removeAtWithInt:currentIndex_--];
}

- (id)initWithJavaUtilPriorityQueue:(JavaUtilPriorityQueue *)outer$ {
  JavaUtilPriorityQueue_PriorityIterator_set_this$0_(self, outer$);
  if (self = [super init]) {
    currentIndex_ = -1;
    allowRemove_ = NO;
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilPriorityQueue_PriorityIterator_set_this$0_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilPriorityQueue_PriorityIterator *)other {
  [super copyAllFieldsTo:other];
  other->allowRemove_ = allowRemove_;
  other->currentIndex_ = currentIndex_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:this$0_ name:@"this$0"]];
  return result;
}

@end
