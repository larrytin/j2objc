//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/Properties.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSCharArray.h"
#include "IOSClass.h"
#include "java/io/BufferedReader.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/OutputStream.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/lang/Appendable.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Character.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/IllegalCharsetNameException.h"
#include "java/nio/charset/UnsupportedCharsetException.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/Enumeration.h"
#include "java/util/Hashtable.h"
#include "java/util/InvalidPropertiesFormatException.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "org/xml/sax/Attributes.h"
#include "org/xml/sax/InputSource.h"
#include "org/xml/sax/SAXException.h"
#include "org/xml/sax/XMLReader.h"
#include "org/xml/sax/helpers/XMLReaderFactory.h"

@implementation JavaUtilProperties

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilProperties_PROP_DTD_NAME_ name:@"JavaUtilProperties_PROP_DTD_NAME_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilProperties_PROP_DTD_ name:@"JavaUtilProperties_PROP_DTD_"]];
  return result;
}

static NSString * JavaUtilProperties_PROP_DTD_NAME_ = @"http://java.sun.com/dtd/properties.dtd";
static NSString * JavaUtilProperties_PROP_DTD_ = @"<?xml version=\"1.0\" encoding=\"UTF-8\"?>    <!ELEMENT properties (comment?, entry*) >    <!ATTLIST properties version CDATA #FIXED \"1.0\" >    <!ELEMENT comment (#PCDATA) >    <!ELEMENT entry (#PCDATA) >    <!ATTLIST entry key CDATA #REQUIRED >";

+ (NSString *)PROP_DTD_NAME {
  return JavaUtilProperties_PROP_DTD_NAME_;
}

+ (NSString *)PROP_DTD {
  return JavaUtilProperties_PROP_DTD_;
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

- (id)initWithJavaUtilProperties:(JavaUtilProperties *)properties {
  if (self = [super init]) {
    JavaUtilProperties_set_defaults_(self, properties);
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dumpStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)buffer
                               withNSString:(NSString *)string
                                withBoolean:(BOOL)key {
  int i = 0;
  if (!key && i < [((NSString *) nil_chk(string)) length] && [string charAtWithInt:i] == ' ') {
    [((JavaLangStringBuilder *) nil_chk(buffer)) appendWithNSString:@"\\ "];
    i++;
  }
  for (; i < [((NSString *) nil_chk(string)) length]; i++) {
    unichar ch = [string charAtWithInt:i];
    switch (ch) {
      case 0x0009:
      [((JavaLangStringBuilder *) nil_chk(buffer)) appendWithNSString:@"\\t"];
      break;
      case 0x000a:
      [((JavaLangStringBuilder *) nil_chk(buffer)) appendWithNSString:@"\\n"];
      break;
      case 0x000c:
      [((JavaLangStringBuilder *) nil_chk(buffer)) appendWithNSString:@"\\f"];
      break;
      case 0x000d:
      [((JavaLangStringBuilder *) nil_chk(buffer)) appendWithNSString:@"\\r"];
      break;
      default:
      if ([@"\\#!=:" indexOf:ch] >= 0 || (key && ch == ' ')) {
        [((JavaLangStringBuilder *) nil_chk(buffer)) appendWithChar:'\\'];
      }
      if (ch >= ' ' && ch <= '~') {
        [((JavaLangStringBuilder *) nil_chk(buffer)) appendWithChar:ch];
      }
      else {
        NSString *hex = [JavaLangInteger toHexStringWithInt:ch];
        [((JavaLangStringBuilder *) nil_chk(buffer)) appendWithNSString:@"\\u"];
        for (int j = 0; j < 4 - [((NSString *) nil_chk(hex)) length]; j++) {
          [buffer appendWithNSString:@"0"];
        }
        [buffer appendWithNSString:hex];
      }
    }
  }
}

- (NSString *)getPropertyWithNSString:(NSString *)name {
  id result = [super getWithId:name];
  NSString *property = [result isKindOfClass:[NSString class]] ? (NSString *) check_class_cast(result, [NSString class]) : nil;
  if (property == nil && defaults_ != nil) {
    property = [defaults_ getPropertyWithNSString:name];
  }
  return property;
}

- (NSString *)getPropertyWithNSString:(NSString *)name
                         withNSString:(NSString *)defaultValue {
  id result = [super getWithId:name];
  NSString *property = [result isKindOfClass:[NSString class]] ? (NSString *) check_class_cast(result, [NSString class]) : nil;
  if (property == nil && defaults_ != nil) {
    property = [defaults_ getPropertyWithNSString:name];
  }
  if (property == nil) {
    return defaultValue;
  }
  return property;
}

- (void)listWithJavaIoPrintStream:(JavaIoPrintStream *)outArg {
  [self listToAppendableWithJavaLangAppendable:outArg];
}

- (void)listWithJavaIoPrintWriter:(JavaIoPrintWriter *)outArg {
  [self listToAppendableWithJavaLangAppendable:outArg];
}

- (void)listToAppendableWithJavaLangAppendable:(id<JavaLangAppendable>)outArg {
  @try {
    if (outArg == nil) {
      @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"out == null"] autorelease];
    }
    JavaLangStringBuilder *sb = [[[JavaLangStringBuilder alloc] initWithInt:80] autorelease];
    id<JavaUtilEnumeration> keys = [self propertyNames];
    while ([((id<JavaUtilEnumeration>) nil_chk(keys)) hasMoreElements]) {
      NSString *key = (NSString *) check_class_cast([keys nextElement], [NSString class]);
      [sb appendWithNSString:key];
      [sb appendWithChar:'='];
      NSString *property = (NSString *) check_class_cast([super getWithId:key], [NSString class]);
      JavaUtilProperties *def = defaults_;
      while (property == nil) {
        property = (NSString *) check_class_cast([((JavaUtilProperties *) nil_chk(def)) getWithId:key], [NSString class]);
        def = def->defaults_;
      }
      if ([((NSString *) nil_chk(property)) length] > 40) {
        [sb appendWithNSString:[property substring:0 endIndex:37]];
        [sb appendWithNSString:@"..."];
      }
      else {
        [sb appendWithNSString:property];
      }
      [sb appendWithNSString:[JavaLangSystem lineSeparator]];
      [((id<JavaLangAppendable>) nil_chk(outArg)) appendWithJavaLangCharSequence:[sb description]];
      [sb setLengthWithInt:0];
    }
  }
  @catch (JavaIoIOException *ex) {
    @throw [[[JavaLangAssertionError alloc] initWithId:ex] autorelease];
  }
}

- (void)load__WithJavaIoInputStream:(JavaIoInputStream *)inArg {
  @synchronized(self) {
    {
      if (inArg == nil) {
        @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"in == null"] autorelease];
      }
      [self load__WithJavaIoReader:[[[JavaIoInputStreamReader alloc] initWithJavaIoInputStream:inArg withNSString:@"ISO-8859-1"] autorelease]];
    }
  }
}

+ (IOSObjectArray *)__exceptions_load__WithJavaIoInputStream_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)load__WithJavaIoReader:(JavaIoReader *)inArg {
  @synchronized(self) {
    {
      if (inArg == nil) {
        @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"in == null"] autorelease];
      }
      int mode = JavaUtilProperties_NONE, unicode = 0, count = 0;
      unichar nextChar;
      IOSCharArray *buf = [IOSCharArray arrayWithLength:40];
      int offset = 0, keyLength = -1, intVal;
      BOOL firstChar = YES;
      JavaIoBufferedReader *br = [[[JavaIoBufferedReader alloc] initWithJavaIoReader:inArg] autorelease];
      while (YES) {
        intVal = [br read];
        if (intVal == -1) {
          break;
        }
        nextChar = (unichar) intVal;
        if (offset == (int) [buf count]) {
          IOSCharArray *newBuf = [IOSCharArray arrayWithLength:(int) [buf count] * 2];
          [JavaLangSystem arraycopyWithId:buf withInt:0 withId:newBuf withInt:0 withInt:offset];
          buf = newBuf;
        }
        if (mode == JavaUtilProperties_UNICODE) {
          int digit = [JavaLangCharacter digitWithChar:nextChar withInt:16];
          if (digit >= 0) {
            unicode = (unicode << 4) + digit;
            if (++count < 4) {
              continue;
            }
          }
          else if (count <= 4) {
            @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Invalid Unicode sequence: illegal character"] autorelease];
          }
          mode = JavaUtilProperties_NONE;
          (*IOSCharArray_GetRef(buf, offset++)) = (unichar) unicode;
          if (nextChar != 0x000a) {
            continue;
          }
        }
        if (mode == JavaUtilProperties_SLASH) {
          mode = JavaUtilProperties_NONE;
          switch (nextChar) {
            case 0x000d:
            mode = JavaUtilProperties_CONTINUE;
            continue;
            case 0x000a:
            mode = JavaUtilProperties_IGNORE;
            continue;
            case 'b':
            nextChar = 0x0008;
            break;
            case 'f':
            nextChar = 0x000c;
            break;
            case 'n':
            nextChar = 0x000a;
            break;
            case 'r':
            nextChar = 0x000d;
            break;
            case 't':
            nextChar = 0x0009;
            break;
            case 'u':
            mode = JavaUtilProperties_UNICODE;
            unicode = count = 0;
            continue;
          }
        }
        else {
          switch (nextChar) {
            case '#':
            case '!':
            if (firstChar) {
              while (YES) {
                intVal = [br read];
                if (intVal == -1) {
                  break;
                }
                nextChar = (unichar) intVal;
                if (nextChar == 0x000d || nextChar == 0x000a) {
                  break;
                }
              }
              continue;
            }
            break;
            case 0x000a:
            if (mode == JavaUtilProperties_CONTINUE) {
              mode = JavaUtilProperties_IGNORE;
              continue;
            }
            case 0x000d:
            mode = JavaUtilProperties_NONE;
            firstChar = YES;
            if (offset > 0 || (offset == 0 && keyLength == 0)) {
              if (keyLength == -1) {
                keyLength = offset;
              }
              NSString *temp = [NSString stringWithCharacters:buf offset:0 length:offset];
              [self putWithId:[temp substring:0 endIndex:keyLength] withId:[temp substring:keyLength]];
            }
            keyLength = -1;
            offset = 0;
            continue;
            case '\\':
            if (mode == JavaUtilProperties_KEY_DONE) {
              keyLength = offset;
            }
            mode = JavaUtilProperties_SLASH;
            continue;
            case ':':
            case '=':
            if (keyLength == -1) {
              mode = JavaUtilProperties_NONE;
              keyLength = offset;
              continue;
            }
            break;
          }
          if ([JavaLangCharacter isWhitespaceWithChar:nextChar]) {
            if (mode == JavaUtilProperties_CONTINUE) {
              mode = JavaUtilProperties_IGNORE;
            }
            if (offset == 0 || offset == keyLength || mode == JavaUtilProperties_IGNORE) {
              continue;
            }
            if (keyLength == -1) {
              mode = JavaUtilProperties_KEY_DONE;
              continue;
            }
          }
          if (mode == JavaUtilProperties_IGNORE || mode == JavaUtilProperties_CONTINUE) {
            mode = JavaUtilProperties_NONE;
          }
        }
        firstChar = NO;
        if (mode == JavaUtilProperties_KEY_DONE) {
          keyLength = offset;
          mode = JavaUtilProperties_NONE;
        }
        (*IOSCharArray_GetRef(buf, offset++)) = nextChar;
      }
      if (mode == JavaUtilProperties_UNICODE && count <= 4) {
        @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Invalid Unicode sequence: expected format \\uxxxx"] autorelease];
      }
      if (keyLength == -1 && offset > 0) {
        keyLength = offset;
      }
      if (keyLength >= 0) {
        NSString *temp = [NSString stringWithCharacters:buf offset:0 length:offset];
        NSString *key = [temp substring:0 endIndex:keyLength];
        NSString *value = [temp substring:keyLength];
        if (mode == JavaUtilProperties_SLASH) {
          value = [NSString stringWithFormat:@"%@\x00", value];
        }
        [self putWithId:key withId:value];
      }
    }
  }
}

+ (IOSObjectArray *)__exceptions_load__WithJavaIoReader_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (id<JavaUtilEnumeration>)propertyNames {
  JavaUtilHashtable *selected = [[[JavaUtilHashtable alloc] init] autorelease];
  [self selectPropertiesWithJavaUtilHashtable:selected withBoolean:NO];
  return [selected keys];
}

- (id<JavaUtilSet>)stringPropertyNames {
  JavaUtilHashtable *stringProperties = [[[JavaUtilHashtable alloc] init] autorelease];
  [self selectPropertiesWithJavaUtilHashtable:stringProperties withBoolean:YES];
  return [JavaUtilCollections unmodifiableSetWithJavaUtilSet:[stringProperties keySet]];
}

- (void)selectPropertiesWithJavaUtilHashtable:(JavaUtilHashtable *)selectProperties
                                  withBoolean:(BOOL)isStringOnly {
  if (defaults_ != nil) {
    [defaults_ selectPropertiesWithJavaUtilHashtable:selectProperties withBoolean:isStringOnly];
  }
  id<JavaUtilEnumeration> keys = [self keys];
  while ([((id<JavaUtilEnumeration>) nil_chk(keys)) hasMoreElements]) {
    id key = (id) [keys nextElement];
    if (isStringOnly && !([key isKindOfClass:[NSString class]])) {
      continue;
    }
    id value = [self getWithId:key];
    [((JavaUtilHashtable *) nil_chk(selectProperties)) putWithId:key withId:value];
  }
}

- (void)saveWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                      withNSString:(NSString *)comment {
  @try {
    [self storeWithJavaIoOutputStream:outArg withNSString:comment];
  }
  @catch (JavaIoIOException *e) {
  }
}

- (id)setPropertyWithNSString:(NSString *)name
                 withNSString:(NSString *)value {
  return [self putWithId:name withId:value];
}

- (void)storeWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                       withNSString:(NSString *)comment {
  @synchronized(self) {
    {
      [self storeWithJavaIoWriter:[[[JavaIoOutputStreamWriter alloc] initWithJavaIoOutputStream:outArg withNSString:@"ISO-8859-1"] autorelease] withNSString:comment];
    }
  }
}

+ (IOSObjectArray *)__exceptions_storeWithJavaIoOutputStream_withNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)storeWithJavaIoWriter:(JavaIoWriter *)writer
                 withNSString:(NSString *)comment {
  @synchronized(self) {
    {
      if (comment != nil) {
        [((JavaIoWriter *) nil_chk(writer)) writeWithNSString:@"#"];
        [writer writeWithNSString:comment];
        [writer writeWithNSString:[JavaLangSystem lineSeparator]];
      }
      [((JavaIoWriter *) nil_chk(writer)) writeWithNSString:@"#"];
      [writer writeWithNSString:[((JavaUtilDate *) [[[JavaUtilDate alloc] init] autorelease]) description]];
      [writer writeWithNSString:[JavaLangSystem lineSeparator]];
      JavaLangStringBuilder *sb = [[[JavaLangStringBuilder alloc] initWithInt:200] autorelease];
      for (id<JavaUtilMap_Entry> __strong entry in [self entrySet]) {
        NSString *key = (NSString *) check_class_cast([((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey], [NSString class]);
        [self dumpStringWithJavaLangStringBuilder:sb withNSString:key withBoolean:YES];
        [sb appendWithChar:'='];
        [self dumpStringWithJavaLangStringBuilder:sb withNSString:(NSString *) check_class_cast([entry getValue], [NSString class]) withBoolean:NO];
        [sb appendWithNSString:[JavaLangSystem lineSeparator]];
        [writer writeWithNSString:[sb description]];
        [sb setLengthWithInt:0];
      }
      [writer flush];
    }
  }
}

+ (IOSObjectArray *)__exceptions_storeWithJavaIoWriter_withNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)loadFromXMLWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  @synchronized(self) {
    {
      if (inArg == nil) {
        @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"in == null"] autorelease];
      }
      @try {
        id<OrgXmlSaxXMLReader> reader = [OrgXmlSaxHelpersXMLReaderFactory createXMLReader];
        [((id<OrgXmlSaxXMLReader>) nil_chk(reader)) setContentHandlerWithOrgXmlSaxContentHandler:[[[JavaUtilProperties_$1 alloc] initWithJavaUtilProperties:self] autorelease]];
        [reader parseWithOrgXmlSaxInputSource:[[[OrgXmlSaxInputSource alloc] initWithJavaIoInputStream:inArg] autorelease]];
      }
      @catch (OrgXmlSaxSAXException *e) {
        @throw [[[JavaUtilInvalidPropertiesFormatException alloc] initWithJavaLangThrowable:e] autorelease];
      }
    }
  }
}

+ (IOSObjectArray *)__exceptions_loadFromXMLWithJavaIoInputStream_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass], [JavaUtilInvalidPropertiesFormatException getClass] } count:2 type:[IOSClass getClass]];
}

- (void)storeToXMLWithJavaIoOutputStream:(JavaIoOutputStream *)os
                            withNSString:(NSString *)comment {
  [self storeToXMLWithJavaIoOutputStream:os withNSString:comment withNSString:@"UTF-8"];
}

+ (IOSObjectArray *)__exceptions_storeToXMLWithJavaIoOutputStream_withNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)storeToXMLWithJavaIoOutputStream:(JavaIoOutputStream *)os
                            withNSString:(NSString *)comment
                            withNSString:(NSString *)encoding {
  @synchronized(self) {
    {
      if (os == nil) {
        @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"os == null"] autorelease];
      }
      else if (encoding == nil) {
        @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"encoding == null"] autorelease];
      }
      NSString *encodingCanonicalName;
      @try {
        encodingCanonicalName = [((JavaNioCharsetCharset *) nil_chk([JavaNioCharsetCharset forNameWithNSString:encoding])) name];
      }
      @catch (JavaNioCharsetIllegalCharsetNameException *e) {
        [((JavaIoPrintStream *) nil_chk([JavaLangSystem out])) printlnWithNSString:[NSString stringWithFormat:@"Warning: encoding name %@ is illegal, using UTF-8 as default encoding", encoding]];
        encodingCanonicalName = @"UTF-8";
      }
      @catch (JavaNioCharsetUnsupportedCharsetException *e) {
        [((JavaIoPrintStream *) nil_chk([JavaLangSystem out])) printlnWithNSString:[NSString stringWithFormat:@"Warning: encoding %@ is not supported, using UTF-8 as default encoding", encoding]];
        encodingCanonicalName = @"UTF-8";
      }
      JavaIoPrintStream *printStream = [[[JavaIoPrintStream alloc] initWithJavaIoOutputStream:os withBoolean:NO withNSString:encodingCanonicalName] autorelease];
      [printStream printWithNSString:@"<?xml version=\"1.0\" encoding=\""];
      [printStream printWithNSString:encodingCanonicalName];
      [printStream printlnWithNSString:@"\"?>"];
      [printStream printWithNSString:@"<!DOCTYPE properties SYSTEM \""];
      [printStream printWithNSString:JavaUtilProperties_PROP_DTD_NAME_];
      [printStream printlnWithNSString:@"\">"];
      [printStream printlnWithNSString:@"<properties>"];
      if (comment != nil) {
        [printStream printWithNSString:@"<comment>"];
        [printStream printWithNSString:[self substitutePredefinedEntriesWithNSString:comment]];
        [printStream printlnWithNSString:@"</comment>"];
      }
      for (id<JavaUtilMap_Entry> __strong entry in [self entrySet]) {
        NSString *keyValue = (NSString *) check_class_cast([((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey], [NSString class]);
        NSString *entryValue = (NSString *) check_class_cast([entry getValue], [NSString class]);
        [printStream printWithNSString:@"<entry key=\""];
        [printStream printWithNSString:[self substitutePredefinedEntriesWithNSString:keyValue]];
        [printStream printWithNSString:@"\">"];
        [printStream printWithNSString:[self substitutePredefinedEntriesWithNSString:entryValue]];
        [printStream printlnWithNSString:@"</entry>"];
      }
      [printStream printlnWithNSString:@"</properties>"];
      [printStream flush];
    }
  }
}

+ (IOSObjectArray *)__exceptions_storeToXMLWithJavaIoOutputStream_withNSString_withNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (NSString *)substitutePredefinedEntriesWithNSString:(NSString *)s {
  s = [((NSString *) nil_chk(s)) replaceAll:@"&" withReplacement:@"&amp;"];
  s = [((NSString *) nil_chk(s)) replaceAll:@"<" withReplacement:@"&lt;"];
  s = [((NSString *) nil_chk(s)) replaceAll:@">" withReplacement:@"&gt;"];
  s = [((NSString *) nil_chk(s)) replaceAll:@"'" withReplacement:@"&apos;"];
  s = [((NSString *) nil_chk(s)) replaceAll:@"\"" withReplacement:@"&quot;"];
  return s;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilProperties_set_defaults_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilProperties *)other {
  [super copyAllFieldsTo:other];
  JavaUtilProperties_set_defaults_(other, defaults_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:defaults_ name:@"defaults"]];
  return result;
}

+ (IOSObjectArray *)__annotations_saveWithJavaIoOutputStream_withNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecatedImpl alloc] init] autorelease] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

@end
@implementation JavaUtilProperties_$1

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (void)startElementWithNSString:(NSString *)uri
                    withNSString:(NSString *)localName
                    withNSString:(NSString *)qName
         withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)attributes {
  JavaUtilProperties_$1_set_key_(self, nil);
  if ([((NSString *) nil_chk(qName)) isEqual:@"entry"]) {
    JavaUtilProperties_$1_set_key_(self, [((id<OrgXmlSaxAttributes>) nil_chk(attributes)) getValueWithNSString:@"key"]);
  }
}

+ (IOSObjectArray *)__exceptions_startElementWithNSString_withNSString_withNSString_withOrgXmlSaxAttributes_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlSaxSAXException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)charactersWithCharArray:(IOSCharArray *)ch
                        withInt:(int)start
                        withInt:(int)length {
  if (key_ != nil) {
    NSString *value = [NSString stringWithCharacters:ch offset:start length:length];
    [this$0_ putWithId:key_ withId:value];
    JavaUtilProperties_$1_set_key_(self, nil);
  }
}

+ (IOSObjectArray *)__exceptions_charactersWithCharArray_withInt_withInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlSaxSAXException getClass] } count:1 type:[IOSClass getClass]];
}

- (id)initWithJavaUtilProperties:(JavaUtilProperties *)outer$ {
  JavaUtilProperties_$1_set_this$0_(self, outer$);
  return JreMemDebugAdd([super init]);
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilProperties_$1_set_key_(self, nil);
  JavaUtilProperties_$1_set_this$0_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilProperties_$1 *)other {
  [super copyAllFieldsTo:other];
  JavaUtilProperties_$1_set_key_(other, key_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:this$0_ name:@"this$0"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:key_ name:@"key"]];
  return result;
}

@end
