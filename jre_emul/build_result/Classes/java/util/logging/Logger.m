//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: Classes/java/util/logging/Logger.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/logging/Handler.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/LogManager.h"
#include "java/util/logging/LogRecord.h"
#include "java/util/logging/Logger.h"

@implementation JavaUtilLoggingLogger

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLoggingLogger_GLOBAL_LOGGER_NAME_ name:@"JavaUtilLoggingLogger_GLOBAL_LOGGER_NAME_"]];
  return result;
}

static NSString * JavaUtilLoggingLogger_GLOBAL_LOGGER_NAME_ = @"global";

+ (NSString *)GLOBAL_LOGGER_NAME {
  return JavaUtilLoggingLogger_GLOBAL_LOGGER_NAME_;
}

+ (JavaUtilLoggingLogger *)getLoggerWithNSString:(NSString *)name {
  @synchronized([self class]) {
    {
      JavaUtilLoggingLogManager *manager = [JavaUtilLoggingLogManager getLogManager];
      JavaUtilLoggingLogger *logger = [((JavaUtilLoggingLogManager *) nil_chk(manager)) getLoggerWithNSString:name];
      if (logger == nil) {
        JavaUtilLoggingLogger *newLogger = [[[JavaUtilLoggingLogger alloc] initWithNSString:name withNSString:@""] autorelease];
        [manager addLoggerWithJavaUtilLoggingLogger:newLogger];
        return newLogger;
      }
      return logger;
    }
  }
}

- (id)initWithNSString:(NSString *)name
          withNSString:(NSString *)resourceName {
  if (self = [super init]) {
    JavaUtilLoggingLogger_set_level_(self, nil);
    self->useParentHandlers_ = YES;
    JavaUtilLoggingLogger_set_handlers_(self, [[[JavaUtilArrayList alloc] init] autorelease]);
    JavaUtilLoggingLogger_set_name_(self, name);
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)logWithJavaUtilLoggingLogRecord:(JavaUtilLoggingLogRecord *)record {
  if ([self isLoggableWithJavaUtilLoggingLevel:[((JavaUtilLoggingLogRecord *) nil_chk(record)) getLevel]]) {
    for (JavaUtilLoggingHandler * __strong h in handlers_) {
      [((JavaUtilLoggingHandler *) nil_chk(h)) publishWithJavaUtilLoggingLogRecord:record];
    }
    if (useParentHandlers_ && parent_ != nil) {
      [parent_ logWithJavaUtilLoggingLogRecord:record];
    }
  }
}

- (void)logWithJavaUtilLoggingLevel:(JavaUtilLoggingLevel *)level
                       withNSString:(NSString *)msg {
  [self logWithJavaUtilLoggingLevel:level withNSString:msg withJavaLangThrowable:nil];
}

- (void)logWithJavaUtilLoggingLevel:(JavaUtilLoggingLevel *)level
                       withNSString:(NSString *)msg
              withJavaLangThrowable:(JavaLangThrowable *)thrown {
  if ([self isLoggableWithJavaUtilLoggingLevel:level]) {
    JavaUtilLoggingLogRecord *lr = [[[JavaUtilLoggingLogRecord alloc] initWithJavaUtilLoggingLevel:level withNSString:msg] autorelease];
    [lr setThrownWithJavaLangThrowable:thrown];
    [lr setLoggerNameWithNSString:[self getName]];
    [self logWithJavaUtilLoggingLogRecord:lr];
  }
}

- (void)severeWithNSString:(NSString *)msg {
  if ([((JavaUtilLoggingLevel *) nil_chk([JavaUtilLoggingLevel SEVERE])) intValue] < levelValue_) {
    return;
  }
  [self logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel SEVERE] withNSString:msg];
}

- (void)warningWithNSString:(NSString *)msg {
  if ([((JavaUtilLoggingLevel *) nil_chk([JavaUtilLoggingLevel WARNING])) intValue] < levelValue_) {
    return;
  }
  [self logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel WARNING] withNSString:msg];
}

- (void)infoWithNSString:(NSString *)msg {
  if ([((JavaUtilLoggingLevel *) nil_chk([JavaUtilLoggingLevel INFO])) intValue] < levelValue_) {
    return;
  }
  [self logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel INFO] withNSString:msg];
}

- (void)configWithNSString:(NSString *)msg {
  if ([((JavaUtilLoggingLevel *) nil_chk([JavaUtilLoggingLevel CONFIG])) intValue] < levelValue_) {
    return;
  }
  [self logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel CONFIG] withNSString:msg];
}

- (void)fineWithNSString:(NSString *)msg {
  if ([((JavaUtilLoggingLevel *) nil_chk([JavaUtilLoggingLevel FINE])) intValue] < levelValue_) {
    return;
  }
  [self logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINE] withNSString:msg];
}

- (void)finerWithNSString:(NSString *)msg {
  if ([((JavaUtilLoggingLevel *) nil_chk([JavaUtilLoggingLevel FINER])) intValue] < levelValue_) {
    return;
  }
  [self logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINER] withNSString:msg];
}

- (void)finestWithNSString:(NSString *)msg {
  if ([((JavaUtilLoggingLevel *) nil_chk([JavaUtilLoggingLevel FINEST])) intValue] < levelValue_) {
    return;
  }
  [self logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINEST] withNSString:msg];
}

- (void)addHandlerWithJavaUtilLoggingHandler:(JavaUtilLoggingHandler *)handler {
  [((id<JavaUtilList>) nil_chk(handlers_)) addWithId:handler];
}

- (IOSObjectArray *)getHandlers {
  if ([((id<JavaUtilList>) nil_chk(handlers_)) size] > 0) {
    return [handlers_ toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[handlers_ size] type:[IOSClass classWithClass:[JavaUtilLoggingHandler class]]]];
  }
  return nil;
}

- (void)removeHandlerWithJavaUtilLoggingHandler:(JavaUtilLoggingHandler *)handler {
  [((id<JavaUtilList>) nil_chk(handlers_)) removeWithId:handler];
}

- (JavaUtilLoggingLevel *)getLevel {
  return level_ != nil ? level_ : [((JavaUtilLoggingLogger *) nil_chk([self getParent])) getLevel];
}

- (void)setLevelWithJavaUtilLoggingLevel:(JavaUtilLoggingLevel *)newLevel {
  JavaUtilLoggingLogger_set_level_(self, newLevel);
  levelValue_ = [((JavaUtilLoggingLevel *) nil_chk(newLevel)) intValue];
  for (JavaUtilLoggingHandler * __strong handler in handlers_) {
    [((JavaUtilLoggingHandler *) nil_chk(handler)) setLevelWithJavaUtilLoggingLevel:newLevel];
  }
}

- (NSString *)getName {
  return name_;
}

- (void)setNameWithNSString:(NSString *)newName {
  JavaUtilLoggingLogger_set_name_(self, newName);
}

- (JavaUtilLoggingLogger *)getParent {
  return parent_;
}

- (void)setParentWithJavaUtilLoggingLogger:(JavaUtilLoggingLogger *)newParent {
  if (newParent != nil) {
    JavaUtilLoggingLogger_set_parent_(self, newParent);
  }
}

- (BOOL)getUseParentHandlers {
  return useParentHandlers_;
}

- (void)setUseParentHandlersWithBoolean:(BOOL)newUseParentHandlers {
  useParentHandlers_ = newUseParentHandlers;
}

- (BOOL)isLoggableWithJavaUtilLoggingLevel:(JavaUtilLoggingLevel *)messageLevel {
  return [((JavaUtilLoggingLevel *) nil_chk([self getLevel])) intValue] <= [((JavaUtilLoggingLevel *) nil_chk(messageLevel)) intValue];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilLoggingLogger_set_parent_(self, nil);
  JavaUtilLoggingLogger_set_level_(self, nil);
  JavaUtilLoggingLogger_set_name_(self, nil);
  JavaUtilLoggingLogger_set_handlers_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilLoggingLogger *)other {
  [super copyAllFieldsTo:other];
  JavaUtilLoggingLogger_set_handlers_(other, handlers_);
  JavaUtilLoggingLogger_set_level_(other, level_);
  other->levelValue_ = levelValue_;
  JavaUtilLoggingLogger_set_name_(other, name_);
  JavaUtilLoggingLogger_set_parent_(other, parent_);
  other->useParentHandlers_ = useParentHandlers_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:handlers_ name:@"handlers"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:name_ name:@"name"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:level_ name:@"level"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:parent_ name:@"parent"]];
  return result;
}

@end
