//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: Classes/java/util/logging/Level.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSClass.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/logging/Level.h"

@implementation JavaUtilLoggingLevel

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLoggingLevel_known_ name:@"JavaUtilLoggingLevel_known_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLoggingLevel_OFF_ name:@"JavaUtilLoggingLevel_OFF_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLoggingLevel_SEVERE_ name:@"JavaUtilLoggingLevel_SEVERE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLoggingLevel_WARNING_ name:@"JavaUtilLoggingLevel_WARNING_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLoggingLevel_INFO_ name:@"JavaUtilLoggingLevel_INFO_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLoggingLevel_CONFIG_ name:@"JavaUtilLoggingLevel_CONFIG_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLoggingLevel_FINE_ name:@"JavaUtilLoggingLevel_FINE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLoggingLevel_FINER_ name:@"JavaUtilLoggingLevel_FINER_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLoggingLevel_FINEST_ name:@"JavaUtilLoggingLevel_FINEST_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLoggingLevel_ALL_ name:@"JavaUtilLoggingLevel_ALL_"]];
  return result;
}

static JavaUtilArrayList * JavaUtilLoggingLevel_known_;
static JavaUtilLoggingLevel * JavaUtilLoggingLevel_OFF_;
static JavaUtilLoggingLevel * JavaUtilLoggingLevel_SEVERE_;
static JavaUtilLoggingLevel * JavaUtilLoggingLevel_WARNING_;
static JavaUtilLoggingLevel * JavaUtilLoggingLevel_INFO_;
static JavaUtilLoggingLevel * JavaUtilLoggingLevel_CONFIG_;
static JavaUtilLoggingLevel * JavaUtilLoggingLevel_FINE_;
static JavaUtilLoggingLevel * JavaUtilLoggingLevel_FINER_;
static JavaUtilLoggingLevel * JavaUtilLoggingLevel_FINEST_;
static JavaUtilLoggingLevel * JavaUtilLoggingLevel_ALL_;

+ (JavaUtilArrayList *)known {
  return JavaUtilLoggingLevel_known_;
}

+ (void)setKnown:(JavaUtilArrayList *)known {
  JreOperatorRetainedAssign(&JavaUtilLoggingLevel_known_, nil, known);
}

+ (JavaUtilLoggingLevel *)OFF {
  return JavaUtilLoggingLevel_OFF_;
}

+ (JavaUtilLoggingLevel *)SEVERE {
  return JavaUtilLoggingLevel_SEVERE_;
}

+ (JavaUtilLoggingLevel *)WARNING {
  return JavaUtilLoggingLevel_WARNING_;
}

+ (JavaUtilLoggingLevel *)INFO {
  return JavaUtilLoggingLevel_INFO_;
}

+ (JavaUtilLoggingLevel *)CONFIG {
  return JavaUtilLoggingLevel_CONFIG_;
}

+ (JavaUtilLoggingLevel *)FINE {
  return JavaUtilLoggingLevel_FINE_;
}

+ (JavaUtilLoggingLevel *)FINER {
  return JavaUtilLoggingLevel_FINER_;
}

+ (JavaUtilLoggingLevel *)FINEST {
  return JavaUtilLoggingLevel_FINEST_;
}

+ (JavaUtilLoggingLevel *)ALL {
  return JavaUtilLoggingLevel_ALL_;
}

- (id)initWithNSString:(NSString *)name
               withInt:(int)value {
  if (self = [super init]) {
    JavaUtilLoggingLevel_set_name_(self, name);
    self->value_ = value;
    [((JavaUtilArrayList *) nil_chk(JavaUtilLoggingLevel_known_)) addWithId:self];
    JreMemDebugAdd(self);
  }
  return self;
}

- (NSString *)getName {
  return name_;
}

- (NSString *)getLocalizedName {
  return name_;
}

- (NSString *)description {
  return name_;
}

- (int)intValue {
  return value_;
}

+ (JavaUtilLoggingLevel *)parseWithNSString:(NSString *)name {
  @synchronized([self class]) {
    {
      for (int i = 0; i < [((JavaUtilArrayList *) nil_chk(JavaUtilLoggingLevel_known_)) size]; i++) {
        JavaUtilLoggingLevel *l = (JavaUtilLoggingLevel *) check_class_cast([JavaUtilLoggingLevel_known_ getWithInt:i], [JavaUtilLoggingLevel class]);
        if ([((NSString *) nil_chk(name)) isEqual:((JavaUtilLoggingLevel *) nil_chk(l))->name_]) {
          return l;
        }
      }
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Bad level \"%@\"", name]] autorelease];
    }
  }
}

+ (IOSObjectArray *)__exceptions_parseWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangIllegalArgumentException getClass] } count:1 type:[IOSClass getClass]];
}

- (BOOL)isEqual:(id)ox {
  @try {
    JavaUtilLoggingLevel *lx = (JavaUtilLoggingLevel *) check_class_cast(ox, [JavaUtilLoggingLevel class]);
    return (((JavaUtilLoggingLevel *) nil_chk(lx))->value_ == self->value_);
  }
  @catch (JavaLangException *ex) {
    return NO;
  }
}

- (NSUInteger)hash {
  return self->value_;
}

+ (void)initialize {
  if (self == [JavaUtilLoggingLevel class]) {
    JreOperatorRetainedAssign(&JavaUtilLoggingLevel_known_, nil, [[[JavaUtilArrayList alloc] init] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLoggingLevel_OFF_, nil, [[[JavaUtilLoggingLevel alloc] initWithNSString:@"OFF" withInt:JavaLangInteger_MAX_VALUE] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLoggingLevel_SEVERE_, nil, [[[JavaUtilLoggingLevel alloc] initWithNSString:@"SEVERE" withInt:1000] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLoggingLevel_WARNING_, nil, [[[JavaUtilLoggingLevel alloc] initWithNSString:@"WARNING" withInt:900] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLoggingLevel_INFO_, nil, [[[JavaUtilLoggingLevel alloc] initWithNSString:@"INFO" withInt:800] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLoggingLevel_CONFIG_, nil, [[[JavaUtilLoggingLevel alloc] initWithNSString:@"CONFIG" withInt:700] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLoggingLevel_FINE_, nil, [[[JavaUtilLoggingLevel alloc] initWithNSString:@"FINE" withInt:500] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLoggingLevel_FINER_, nil, [[[JavaUtilLoggingLevel alloc] initWithNSString:@"FINER" withInt:400] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLoggingLevel_FINEST_, nil, [[[JavaUtilLoggingLevel alloc] initWithNSString:@"FINEST" withInt:300] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLoggingLevel_ALL_, nil, [[[JavaUtilLoggingLevel alloc] initWithNSString:@"ALL" withInt:JavaLangInteger_MIN_VALUE] autorelease]);
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilLoggingLevel_set_name_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilLoggingLevel *)other {
  [super copyAllFieldsTo:other];
  JavaUtilLoggingLevel_set_name_(other, name_);
  other->value_ = value_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:name_ name:@"name"]];
  return result;
}

@end
