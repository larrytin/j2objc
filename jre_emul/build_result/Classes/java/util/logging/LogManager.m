//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: Classes/java/util/logging/LogManager.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSClass.h"
#include "java/lang/Math.h"
#include "java/util/HashMap.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/LogManager.h"
#include "java/util/logging/Logger.h"
#include "java/util/logging/NSLogHandler.h"

@implementation JavaUtilLoggingLogManager

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLoggingLogManager_singleton_ name:@"JavaUtilLoggingLogManager_singleton_"]];
  return result;
}

static JavaUtilLoggingLogManager * JavaUtilLoggingLogManager_singleton_;

+ (JavaUtilLoggingLogManager *)singleton {
  return JavaUtilLoggingLogManager_singleton_;
}

+ (void)setSingleton:(JavaUtilLoggingLogManager *)singleton {
  JreOperatorRetainedAssign(&JavaUtilLoggingLogManager_singleton_, nil, singleton);
}

+ (JavaUtilLoggingLogManager *)getLogManager {
  if (JavaUtilLoggingLogManager_singleton_ == nil) {
    JreOperatorRetainedAssign(&JavaUtilLoggingLogManager_singleton_, nil, [[[JavaUtilLoggingLogManager alloc] init] autorelease]);
  }
  return JavaUtilLoggingLogManager_singleton_;
}

- (id)init {
  if (self = [super init]) {
    JavaUtilLoggingLogManager_set_loggerList_(self, [[[JavaUtilHashMap alloc] init] autorelease]);
    JavaUtilLoggingLogManager_set_rootLogger_(self, [[[JavaUtilLoggingLogManager_RootLogger alloc] initWithJavaUtilLoggingLogManager:self] autorelease]);
    [loggerList_ putWithId:@"" withId:rootLogger_];
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)addLoggerWithJavaUtilLoggingLogger:(JavaUtilLoggingLogger *)logger {
  if ([self getLoggerWithNSString:[((JavaUtilLoggingLogger *) nil_chk(logger)) getName]] != nil) {
    return NO;
  }
  [self addLoggerWithoutDuplicationCheckingWithJavaUtilLoggingLogger:logger];
  return YES;
}

- (JavaUtilLoggingLogger *)getLoggerWithNSString:(NSString *)name {
  return [((JavaUtilHashMap *) nil_chk(loggerList_)) getWithId:name];
}

- (void)addLoggerWithoutDuplicationCheckingWithJavaUtilLoggingLogger:(JavaUtilLoggingLogger *)logger {
  NSString *name = [((JavaUtilLoggingLogger *) nil_chk(logger)) getName];
  NSString *parentName = [name substring:0 endIndex:[JavaLangMath maxWithInt:0 withInt:[((NSString *) nil_chk(name)) lastIndexOf:'.']]];
  JavaUtilLoggingLogger *parent = [self getOrAddLoggerWithNSString:parentName];
  [((JavaUtilHashMap *) nil_chk(loggerList_)) putWithId:[logger getName] withId:logger];
  [logger setParentWithJavaUtilLoggingLogger:parent];
}

- (JavaUtilLoggingLogger *)getOrAddLoggerWithNSString:(NSString *)name {
  JavaUtilLoggingLogger *logger = [self getLoggerWithNSString:name];
  if (logger == nil) {
    JavaUtilLoggingLogger *newLogger = [[[JavaUtilLoggingLogger alloc] initWithNSString:name withNSString:nil] autorelease];
    [self addLoggerWithoutDuplicationCheckingWithJavaUtilLoggingLogger:newLogger];
    return newLogger;
  }
  return logger;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilLoggingLogManager_set_rootLogger_(self, nil);
  JavaUtilLoggingLogManager_set_loggerList_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilLoggingLogManager *)other {
  [super copyAllFieldsTo:other];
  JavaUtilLoggingLogManager_set_loggerList_(other, loggerList_);
  JavaUtilLoggingLogManager_set_rootLogger_(other, rootLogger_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:loggerList_ name:@"loggerList"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:rootLogger_ name:@"rootLogger"]];
  return result;
}

@end
@implementation JavaUtilLoggingLogManager_RootLogger

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilLoggingLogManager:(JavaUtilLoggingLogManager *)outer$ {
  if (self = [super initWithNSString:@"" withNSString:nil]) {
    [self addHandlerWithJavaUtilLoggingHandler:[[[JavaUtilLoggingNSLogHandler alloc] init] autorelease]];
    [self setLevelWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel WARNING]];
    JreMemDebugAdd(self);
  }
  return self;
}

@end
