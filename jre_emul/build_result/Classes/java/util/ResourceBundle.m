//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/lang/CharSequence.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/InstantiationException.h"
#include "java/lang/LinkageError.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/net/URL.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/Charsets.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Enumeration.h"
#include "java/util/HashSet.h"
#include "java/util/Hashtable.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/MissingResourceException.h"
#include "java/util/PropertyResourceBundle.h"
#include "java/util/ResourceBundle.h"
#include "java/util/Set.h"
#include "java/util/WeakHashMap.h"
#include "libcore/io/IoUtils.h"

@implementation JavaUtilResourceBundle

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilResourceBundle_UNDER_SCORE_ name:@"JavaUtilResourceBundle_UNDER_SCORE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilResourceBundle_EMPTY_STRING_ name:@"JavaUtilResourceBundle_EMPTY_STRING_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilResourceBundle_MISSING_ name:@"JavaUtilResourceBundle_MISSING_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilResourceBundle_MISSINGBASE_ name:@"JavaUtilResourceBundle_MISSINGBASE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilResourceBundle_cache_ name:@"JavaUtilResourceBundle_cache_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilResourceBundle_cacheLocale_ name:@"JavaUtilResourceBundle_cacheLocale_"]];
  return result;
}

static NSString * JavaUtilResourceBundle_UNDER_SCORE_ = @"_";
static NSString * JavaUtilResourceBundle_EMPTY_STRING_ = @"";
static JavaUtilResourceBundle * JavaUtilResourceBundle_MISSING_;
static JavaUtilResourceBundle * JavaUtilResourceBundle_MISSINGBASE_;
static JavaUtilWeakHashMap * JavaUtilResourceBundle_cache_;
static JavaUtilLocale * JavaUtilResourceBundle_cacheLocale_;

+ (NSString *)UNDER_SCORE {
  return JavaUtilResourceBundle_UNDER_SCORE_;
}

+ (NSString *)EMPTY_STRING {
  return JavaUtilResourceBundle_EMPTY_STRING_;
}

+ (JavaUtilResourceBundle *)MISSING {
  return JavaUtilResourceBundle_MISSING_;
}

+ (JavaUtilResourceBundle *)MISSINGBASE {
  return JavaUtilResourceBundle_MISSINGBASE_;
}

+ (JavaUtilWeakHashMap *)cache {
  return JavaUtilResourceBundle_cache_;
}

+ (JavaUtilLocale *)cacheLocale {
  return JavaUtilResourceBundle_cacheLocale_;
}

+ (void)setCacheLocale:(JavaUtilLocale *)cacheLocale {
  JreOperatorRetainedAssign(&JavaUtilResourceBundle_cacheLocale_, nil, cacheLocale);
}

- (id)init {
  if (self = [super init]) {
    lastLoadTime_ = 0;
    JreMemDebugAdd(self);
  }
  return self;
}

+ (JavaUtilResourceBundle *)getBundleWithNSString:(NSString *)bundleName {
  JavaLangClassLoader *classLoader = [JavaLangClassLoader getSystemClassLoader];
  if (classLoader == nil) {
    classLoader = [JavaUtilResourceBundle getLoader];
  }
  return [JavaUtilResourceBundle getBundleWithNSString:bundleName withJavaUtilLocale:[JavaUtilLocale getDefault] withJavaLangClassLoader:classLoader];
}

+ (IOSObjectArray *)__exceptions_getBundleWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaUtilMissingResourceException getClass] } count:1 type:[IOSClass getClass]];
}

+ (JavaUtilResourceBundle *)getBundleWithNSString:(NSString *)bundleName
                               withJavaUtilLocale:(JavaUtilLocale *)locale {
  JavaLangClassLoader *classLoader = [JavaLangClassLoader getSystemClassLoader];
  if (classLoader == nil) {
    classLoader = [JavaUtilResourceBundle getLoader];
  }
  return [JavaUtilResourceBundle getBundleWithNSString:bundleName withJavaUtilLocale:locale withJavaLangClassLoader:classLoader];
}

+ (JavaUtilResourceBundle *)getBundleWithNSString:(NSString *)bundleName
                               withJavaUtilLocale:(JavaUtilLocale *)locale
                          withJavaLangClassLoader:(JavaLangClassLoader *)loader {
  if (loader == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"loader == null"] autorelease];
  }
  else if (bundleName == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"bundleName == null"] autorelease];
  }
  JavaUtilLocale *defaultLocale = [JavaUtilLocale getDefault];
  if (![((JavaUtilLocale *) nil_chk(JavaUtilResourceBundle_cacheLocale_)) isEqual:defaultLocale]) {
    [((JavaUtilWeakHashMap *) nil_chk(JavaUtilResourceBundle_cache_)) clear];
    JreOperatorRetainedAssign(&JavaUtilResourceBundle_cacheLocale_, nil, defaultLocale);
  }
  JavaUtilResourceBundle *bundle = nil;
  if (![((JavaUtilLocale *) nil_chk(locale)) isEqual:defaultLocale]) {
    bundle = [JavaUtilResourceBundle handleGetBundleWithBoolean:NO withNSString:bundleName withJavaUtilLocale:locale withJavaLangClassLoader:loader];
  }
  if (bundle == nil) {
    bundle = [JavaUtilResourceBundle handleGetBundleWithBoolean:YES withNSString:bundleName withJavaUtilLocale:defaultLocale withJavaLangClassLoader:loader];
    if (bundle == nil) {
      @throw [JavaUtilResourceBundle missingResourceExceptionWithNSString:[NSString stringWithFormat:@"%@_%@", bundleName, locale] withNSString:@""];
    }
  }
  return bundle;
}

+ (IOSObjectArray *)__exceptions_getBundleWithNSString_withJavaUtilLocale_withJavaLangClassLoader_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaUtilMissingResourceException getClass] } count:1 type:[IOSClass getClass]];
}

+ (JavaUtilMissingResourceException *)missingResourceExceptionWithNSString:(NSString *)className_
                                                              withNSString:(NSString *)key {
  NSString *detail = [NSString stringWithFormat:@"Can't find resource for bundle '%@', key '%@'", className_, key];
  @throw [[[JavaUtilMissingResourceException alloc] initWithNSString:detail withNSString:className_ withNSString:key] autorelease];
}

+ (JavaUtilResourceBundle *)getBundleWithNSString:(NSString *)baseName
               withJavaUtilResourceBundle_Control:(JavaUtilResourceBundle_Control *)control {
  return [JavaUtilResourceBundle getBundleWithNSString:baseName withJavaUtilLocale:[JavaUtilLocale getDefault] withJavaLangClassLoader:[JavaUtilResourceBundle getLoader] withJavaUtilResourceBundle_Control:control];
}

+ (JavaUtilResourceBundle *)getBundleWithNSString:(NSString *)baseName
                               withJavaUtilLocale:(JavaUtilLocale *)targetLocale
               withJavaUtilResourceBundle_Control:(JavaUtilResourceBundle_Control *)control {
  return [JavaUtilResourceBundle getBundleWithNSString:baseName withJavaUtilLocale:targetLocale withJavaLangClassLoader:[JavaUtilResourceBundle getLoader] withJavaUtilResourceBundle_Control:control];
}

+ (JavaLangClassLoader *)getLoader {
  JavaLangClassLoader *cl = [[IOSClass classWithClass:[JavaUtilResourceBundle class]] getClassLoader];
  if (cl == nil) {
    cl = [JavaLangClassLoader getSystemClassLoader];
  }
  return cl;
}

+ (JavaUtilResourceBundle *)getBundleWithNSString:(NSString *)baseName
                               withJavaUtilLocale:(JavaUtilLocale *)targetLocale
                          withJavaLangClassLoader:(JavaLangClassLoader *)loader
               withJavaUtilResourceBundle_Control:(JavaUtilResourceBundle_Control *)control {
  BOOL expired = NO;
  NSString *bundleName = [((JavaUtilResourceBundle_Control *) nil_chk(control)) toBundleNameWithNSString:baseName withJavaUtilLocale:targetLocale];
  id cacheKey = loader != nil ? loader : @"null";
  JavaUtilHashtable *loaderCache = [JavaUtilResourceBundle getLoaderCacheWithId:cacheKey];
  JavaUtilResourceBundle *result = [((JavaUtilHashtable *) nil_chk(loaderCache)) getWithId:bundleName];
  if (result != nil) {
    long long int time = [control getTimeToLiveWithNSString:baseName withJavaUtilLocale:targetLocale];
    if (time == 0 || time == JavaUtilResourceBundle_Control_TTL_NO_EXPIRATION_CONTROL || time + result->lastLoadTime_ < [JavaLangSystem currentTimeMillis]) {
      if (JavaUtilResourceBundle_MISSING_ == result) {
        @throw [[[JavaUtilMissingResourceException alloc] initWithNSString:nil withNSString:[NSString stringWithFormat:@"%@_%@", bundleName, targetLocale] withNSString:JavaUtilResourceBundle_EMPTY_STRING_] autorelease];
      }
      return result;
    }
    expired = YES;
  }
  JavaUtilResourceBundle *ret = [JavaUtilResourceBundle processGetBundleWithNSString:baseName withJavaUtilLocale:targetLocale withJavaLangClassLoader:loader withJavaUtilResourceBundle_Control:control withBoolean:expired withJavaUtilResourceBundle:result];
  if (ret != nil) {
    [loaderCache putWithId:bundleName withId:ret];
    ret->lastLoadTime_ = [JavaLangSystem currentTimeMillis];
    return ret;
  }
  [loaderCache putWithId:bundleName withId:JavaUtilResourceBundle_MISSING_];
  @throw [[[JavaUtilMissingResourceException alloc] initWithNSString:nil withNSString:[NSString stringWithFormat:@"%@_%@", bundleName, targetLocale] withNSString:JavaUtilResourceBundle_EMPTY_STRING_] autorelease];
}

+ (JavaUtilResourceBundle *)processGetBundleWithNSString:(NSString *)baseName
                                      withJavaUtilLocale:(JavaUtilLocale *)targetLocale
                                 withJavaLangClassLoader:(JavaLangClassLoader *)loader
                      withJavaUtilResourceBundle_Control:(JavaUtilResourceBundle_Control *)control
                                             withBoolean:(BOOL)expired
                              withJavaUtilResourceBundle:(JavaUtilResourceBundle *)result {
  id<JavaUtilList> locales = [((JavaUtilResourceBundle_Control *) nil_chk(control)) getCandidateLocalesWithNSString:baseName withJavaUtilLocale:targetLocale];
  if (locales == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  id<JavaUtilList> formats = [control getFormatsWithNSString:baseName];
  if ([JavaUtilResourceBundle_Control FORMAT_CLASS] == formats || [JavaUtilResourceBundle_Control FORMAT_PROPERTIES] == formats || [JavaUtilResourceBundle_Control FORMAT_DEFAULT] == formats) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  JavaUtilResourceBundle *ret = nil;
  JavaUtilResourceBundle *currentBundle = nil;
  JavaUtilResourceBundle *bundle = nil;
  for (JavaUtilLocale * __strong locale in locales) {
    for (NSString * __strong format in formats) {
      @try {
        if (expired) {
          bundle = [control newBundleWithNSString:baseName withJavaUtilLocale:locale withNSString:format withJavaLangClassLoader:loader withBoolean:[control needsReloadWithNSString:baseName withJavaUtilLocale:locale withNSString:format withJavaLangClassLoader:loader withJavaUtilResourceBundle:result withLong:[JavaLangSystem currentTimeMillis]]];
        }
        else {
          @try {
            bundle = [control newBundleWithNSString:baseName withJavaUtilLocale:locale withNSString:format withJavaLangClassLoader:loader withBoolean:NO];
          }
          @catch (JavaLangIllegalArgumentException *e) {
          }
        }
      }
      @catch (JavaLangIllegalAccessException *e) {
      }
      @catch (JavaLangInstantiationException *e) {
      }
      @catch (JavaIoIOException *e) {
      }
      if (bundle != nil) {
        if (currentBundle != nil) {
          [currentBundle setParentWithJavaUtilResourceBundle:bundle];
          currentBundle = bundle;
        }
        else {
          if (ret == nil) {
            ret = bundle;
            currentBundle = ret;
          }
        }
      }
      if (bundle != nil) {
        break;
      }
    }
  }
  if ((ret == nil) || ([((JavaUtilLocale *) nil_chk([JavaUtilLocale ROOT])) isEqual:[ret getLocale]] && (!([((id<JavaUtilList>) nil_chk(locales)) size] == 1 && [locales containsWithId:[JavaUtilLocale ROOT]])))) {
    JavaUtilLocale *nextLocale = [control getFallbackLocaleWithNSString:baseName withJavaUtilLocale:targetLocale];
    if (nextLocale != nil) {
      ret = [JavaUtilResourceBundle processGetBundleWithNSString:baseName withJavaUtilLocale:nextLocale withJavaLangClassLoader:loader withJavaUtilResourceBundle_Control:control withBoolean:expired withJavaUtilResourceBundle:result];
    }
  }
  return ret;
}

- (id<JavaUtilEnumeration>)getKeys {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaUtilLocale *)getLocale {
  return locale_;
}

- (id)getObjectWithNSString:(NSString *)key {
  JavaUtilResourceBundle *last, *theParent = self;
  do {
    id result = [theParent handleGetObjectWithNSString:key];
    if (result != nil) {
      return result;
    }
    last = theParent;
    theParent = theParent->parent_;
  }
  while (theParent != nil);
  @throw [JavaUtilResourceBundle missingResourceExceptionWithNSString:[[((JavaUtilResourceBundle *) nil_chk(last)) getClass] getName] withNSString:key];
}

- (NSString *)getStringWithNSString:(NSString *)key {
  return (NSString *) check_class_cast([self getObjectWithNSString:key], [NSString class]);
}

- (IOSObjectArray *)getStringArrayWithNSString:(NSString *)key {
  return (IOSObjectArray *) check_class_cast([self getObjectWithNSString:key], [IOSObjectArray class]);
}

+ (JavaUtilResourceBundle *)handleGetBundleWithBoolean:(BOOL)loadBase
                                          withNSString:(NSString *)base
                                    withJavaUtilLocale:(JavaUtilLocale *)locale
                               withJavaLangClassLoader:(JavaLangClassLoader *)loader {
  NSString *localeName = [((JavaUtilLocale *) nil_chk(locale)) description];
  NSString *bundleName = [((NSString *) nil_chk(localeName)) isEmpty] ? base : ([NSString stringWithFormat:@"%@_%@", base, localeName]);
  id cacheKey = loader != nil ? loader : @"null";
  JavaUtilHashtable *loaderCache = [JavaUtilResourceBundle getLoaderCacheWithId:cacheKey];
  JavaUtilResourceBundle *cached = [((JavaUtilHashtable *) nil_chk(loaderCache)) getWithId:bundleName];
  if (cached != nil) {
    if (cached == JavaUtilResourceBundle_MISSINGBASE_) {
      return nil;
    }
    else if (cached == JavaUtilResourceBundle_MISSING_) {
      if (!loadBase) {
        return nil;
      }
      JavaUtilLocale *newLocale = [JavaUtilResourceBundle stripWithJavaUtilLocale:locale];
      if (newLocale == nil) {
        return nil;
      }
      return [JavaUtilResourceBundle handleGetBundleWithBoolean:loadBase withNSString:base withJavaUtilLocale:newLocale withJavaLangClassLoader:loader];
    }
    return cached;
  }
  JavaUtilResourceBundle *bundle = nil;
  @try {
    IOSClass *bundleClass = [IOSClass forName:bundleName initialize:YES classLoader:loader];
    if ([[IOSClass classWithClass:[JavaUtilResourceBundle class]] isAssignableFrom:bundleClass]) {
      bundle = (JavaUtilResourceBundle *) check_class_cast([((IOSClass *) nil_chk(bundleClass)) newInstance], [JavaUtilResourceBundle class]);
    }
  }
  @catch (JavaLangLinkageError *ignored) {
  }
  @catch (JavaLangException *ignored) {
  }
  if (bundle != nil) {
    [bundle setLocaleWithJavaUtilLocale:locale];
  }
  else {
    NSString *fileName = [NSString stringWithFormat:@"%@.properties", [bundleName replace:'.' withChar:'/']];
    JavaIoInputStream *stream = loader != nil ? [loader getResourceAsStreamWithNSString:fileName] : [JavaLangClassLoader getSystemResourceAsStreamWithNSString:fileName];
    if (stream != nil) {
      @try {
        bundle = [[[JavaUtilPropertyResourceBundle alloc] initWithJavaIoReader:[[[JavaIoInputStreamReader alloc] initWithJavaIoInputStream:stream withJavaNioCharsetCharset:[JavaNioCharsetCharsets UTF_8]] autorelease]] autorelease];
        [bundle setLocaleWithJavaUtilLocale:locale];
      }
      @catch (JavaIoIOException *ignored) {
      }
      @finally {
        [LibcoreIoIoUtils closeQuietlyWithJavaLangAutoCloseable:stream];
      }
    }
  }
  JavaUtilLocale *strippedLocale = [JavaUtilResourceBundle stripWithJavaUtilLocale:locale];
  if (bundle != nil) {
    if (strippedLocale != nil) {
      JavaUtilResourceBundle *parent = [JavaUtilResourceBundle handleGetBundleWithBoolean:loadBase withNSString:base withJavaUtilLocale:strippedLocale withJavaLangClassLoader:loader];
      if (parent != nil) {
        [bundle setParentWithJavaUtilResourceBundle:parent];
      }
    }
    [loaderCache putWithId:bundleName withId:bundle];
    return bundle;
  }
  if (strippedLocale != nil && (loadBase || ![((NSString *) nil_chk([strippedLocale description])) isEmpty])) {
    bundle = [JavaUtilResourceBundle handleGetBundleWithBoolean:loadBase withNSString:base withJavaUtilLocale:strippedLocale withJavaLangClassLoader:loader];
    if (bundle != nil) {
      [loaderCache putWithId:bundleName withId:bundle];
      return bundle;
    }
  }
  [loaderCache putWithId:bundleName withId:loadBase ? JavaUtilResourceBundle_MISSINGBASE_ : JavaUtilResourceBundle_MISSING_];
  return nil;
}

+ (JavaUtilHashtable *)getLoaderCacheWithId:(id)cacheKey {
  @synchronized (JavaUtilResourceBundle_cache_) {
    JavaUtilHashtable *loaderCache = [((JavaUtilWeakHashMap *) nil_chk(JavaUtilResourceBundle_cache_)) getWithId:cacheKey];
    if (loaderCache == nil) {
      loaderCache = [[[JavaUtilHashtable alloc] init] autorelease];
      [JavaUtilResourceBundle_cache_ putWithId:cacheKey withId:loaderCache];
    }
    return loaderCache;
  }
}

- (id)handleGetObjectWithNSString:(NSString *)key {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setParentWithJavaUtilResourceBundle:(JavaUtilResourceBundle *)bundle {
  JavaUtilResourceBundle_set_parent_(self, bundle);
}

+ (JavaUtilLocale *)stripWithJavaUtilLocale:(JavaUtilLocale *)locale {
  NSString *language = [((JavaUtilLocale *) nil_chk(locale)) getLanguage];
  NSString *country = [locale getCountry];
  NSString *variant = [locale getVariant];
  if (![((NSString *) nil_chk(variant)) isEmpty]) {
    variant = @"";
  }
  else if (![((NSString *) nil_chk(country)) isEmpty]) {
    country = @"";
  }
  else if (![((NSString *) nil_chk(language)) isEmpty]) {
    language = @"";
  }
  else {
    return nil;
  }
  return [[[JavaUtilLocale alloc] initWithNSString:language withNSString:country withNSString:variant] autorelease];
}

- (void)setLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale {
  JavaUtilResourceBundle_set_locale_(self, locale);
}

+ (void)clearCache {
  [((JavaUtilWeakHashMap *) nil_chk(JavaUtilResourceBundle_cache_)) removeWithId:[JavaLangClassLoader getSystemClassLoader]];
}

+ (void)clearCacheWithJavaLangClassLoader:(JavaLangClassLoader *)loader {
  if (loader == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"loader == null"] autorelease];
  }
  [((JavaUtilWeakHashMap *) nil_chk(JavaUtilResourceBundle_cache_)) removeWithId:loader];
}

- (BOOL)containsKeyWithNSString:(NSString *)key {
  if (key == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"key == null"] autorelease];
  }
  return [((id<JavaUtilSet>) nil_chk([self keySet])) containsWithId:key];
}

- (id<JavaUtilSet>)keySet {
  id<JavaUtilSet> ret = [[[JavaUtilHashSet alloc] init] autorelease];
  id<JavaUtilEnumeration> keys = [self getKeys];
  while ([((id<JavaUtilEnumeration>) nil_chk(keys)) hasMoreElements]) {
    [ret addWithId:[keys nextElement]];
  }
  return ret;
}

- (id<JavaUtilSet>)handleKeySet {
  id<JavaUtilSet> set = [self keySet];
  id<JavaUtilSet> ret = [[[JavaUtilHashSet alloc] init] autorelease];
  for (NSString * __strong key in set) {
    if ([self handleGetObjectWithNSString:key] != nil) {
      [ret addWithId:key];
    }
  }
  return ret;
}

+ (void)initialize {
  if (self == [JavaUtilResourceBundle class]) {
    JreOperatorRetainedAssign(&JavaUtilResourceBundle_MISSING_, nil, [[[JavaUtilResourceBundle_MissingBundle alloc] init] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilResourceBundle_MISSINGBASE_, nil, [[[JavaUtilResourceBundle_MissingBundle alloc] init] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilResourceBundle_cache_, nil, [[[JavaUtilWeakHashMap alloc] init] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilResourceBundle_cacheLocale_, nil, [JavaUtilLocale getDefault]);
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilResourceBundle_set_locale_(self, nil);
  JavaUtilResourceBundle_set_parent_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilResourceBundle *)other {
  [super copyAllFieldsTo:other];
  other->lastLoadTime_ = lastLoadTime_;
  JavaUtilResourceBundle_set_locale_(other, locale_);
  JavaUtilResourceBundle_set_parent_(other, parent_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:parent_ name:@"parent"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:locale_ name:@"locale"]];
  return result;
}

@end
@implementation JavaUtilResourceBundle_MissingBundle

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id<JavaUtilEnumeration>)getKeys {
  return nil;
}

- (id)handleGetObjectWithNSString:(NSString *)name {
  return nil;
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

@end
@implementation JavaUtilResourceBundle_Control

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilResourceBundle_Control_listDefault_ name:@"JavaUtilResourceBundle_Control_listDefault_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilResourceBundle_Control_listClass_ name:@"JavaUtilResourceBundle_Control_listClass_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilResourceBundle_Control_listProperties_ name:@"JavaUtilResourceBundle_Control_listProperties_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilResourceBundle_Control_JAVACLASS_ name:@"JavaUtilResourceBundle_Control_JAVACLASS_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilResourceBundle_Control_JAVAPROPERTIES_ name:@"JavaUtilResourceBundle_Control_JAVAPROPERTIES_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilResourceBundle_Control_FORMAT_DEFAULT_ name:@"JavaUtilResourceBundle_Control_FORMAT_DEFAULT_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilResourceBundle_Control_FORMAT_CLASS_ name:@"JavaUtilResourceBundle_Control_FORMAT_CLASS_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilResourceBundle_Control_FORMAT_PROPERTIES_ name:@"JavaUtilResourceBundle_Control_FORMAT_PROPERTIES_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilResourceBundle_Control_FORMAT_PROPERTIES_CONTROL_ name:@"JavaUtilResourceBundle_Control_FORMAT_PROPERTIES_CONTROL_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilResourceBundle_Control_FORMAT_CLASS_CONTROL_ name:@"JavaUtilResourceBundle_Control_FORMAT_CLASS_CONTROL_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilResourceBundle_Control_FORMAT_DEFAULT_CONTROL_ name:@"JavaUtilResourceBundle_Control_FORMAT_DEFAULT_CONTROL_"]];
  return result;
}

static id<JavaUtilList> JavaUtilResourceBundle_Control_listDefault_;
static id<JavaUtilList> JavaUtilResourceBundle_Control_listClass_;
static id<JavaUtilList> JavaUtilResourceBundle_Control_listProperties_;
static NSString * JavaUtilResourceBundle_Control_JAVACLASS_;
static NSString * JavaUtilResourceBundle_Control_JAVAPROPERTIES_;
static id<JavaUtilList> JavaUtilResourceBundle_Control_FORMAT_DEFAULT_;
static id<JavaUtilList> JavaUtilResourceBundle_Control_FORMAT_CLASS_;
static id<JavaUtilList> JavaUtilResourceBundle_Control_FORMAT_PROPERTIES_;
static JavaUtilResourceBundle_Control * JavaUtilResourceBundle_Control_FORMAT_PROPERTIES_CONTROL_;
static JavaUtilResourceBundle_Control * JavaUtilResourceBundle_Control_FORMAT_CLASS_CONTROL_;
static JavaUtilResourceBundle_Control * JavaUtilResourceBundle_Control_FORMAT_DEFAULT_CONTROL_;

+ (id<JavaUtilList>)listDefault {
  return JavaUtilResourceBundle_Control_listDefault_;
}

+ (void)setListDefault:(id<JavaUtilList>)listDefault {
  JreOperatorRetainedAssign(&JavaUtilResourceBundle_Control_listDefault_, nil, listDefault);
}

+ (id<JavaUtilList>)listClass {
  return JavaUtilResourceBundle_Control_listClass_;
}

+ (void)setListClass:(id<JavaUtilList>)listClass {
  JreOperatorRetainedAssign(&JavaUtilResourceBundle_Control_listClass_, nil, listClass);
}

+ (id<JavaUtilList>)listProperties {
  return JavaUtilResourceBundle_Control_listProperties_;
}

+ (void)setListProperties:(id<JavaUtilList>)listProperties {
  JreOperatorRetainedAssign(&JavaUtilResourceBundle_Control_listProperties_, nil, listProperties);
}

+ (NSString *)JAVACLASS {
  return JavaUtilResourceBundle_Control_JAVACLASS_;
}

+ (void)setJAVACLASS:(NSString *)JAVACLASS {
  JreOperatorRetainedAssign(&JavaUtilResourceBundle_Control_JAVACLASS_, nil, JAVACLASS);
}

+ (NSString *)JAVAPROPERTIES {
  return JavaUtilResourceBundle_Control_JAVAPROPERTIES_;
}

+ (void)setJAVAPROPERTIES:(NSString *)JAVAPROPERTIES {
  JreOperatorRetainedAssign(&JavaUtilResourceBundle_Control_JAVAPROPERTIES_, nil, JAVAPROPERTIES);
}

+ (id<JavaUtilList>)FORMAT_DEFAULT {
  return JavaUtilResourceBundle_Control_FORMAT_DEFAULT_;
}

+ (id<JavaUtilList>)FORMAT_CLASS {
  return JavaUtilResourceBundle_Control_FORMAT_CLASS_;
}

+ (id<JavaUtilList>)FORMAT_PROPERTIES {
  return JavaUtilResourceBundle_Control_FORMAT_PROPERTIES_;
}

+ (long long int)TTL_DONT_CACHE {
  return JavaUtilResourceBundle_Control_TTL_DONT_CACHE;
}

+ (long long int)TTL_NO_EXPIRATION_CONTROL {
  return JavaUtilResourceBundle_Control_TTL_NO_EXPIRATION_CONTROL;
}

+ (JavaUtilResourceBundle_Control *)FORMAT_PROPERTIES_CONTROL {
  return JavaUtilResourceBundle_Control_FORMAT_PROPERTIES_CONTROL_;
}

+ (JavaUtilResourceBundle_Control *)FORMAT_CLASS_CONTROL {
  return JavaUtilResourceBundle_Control_FORMAT_CLASS_CONTROL_;
}

+ (JavaUtilResourceBundle_Control *)FORMAT_DEFAULT_CONTROL {
  return JavaUtilResourceBundle_Control_FORMAT_DEFAULT_CONTROL_;
}

- (id)init {
  if (self = [super init]) {
    JreOperatorRetainedAssign(&JavaUtilResourceBundle_Control_listClass_, nil, [[[JavaUtilArrayList alloc] init] autorelease]);
    [JavaUtilResourceBundle_Control_listClass_ addWithId:JavaUtilResourceBundle_Control_JAVACLASS_];
    [JavaUtilResourceBundle_Control_listClass_ addWithId:JavaUtilResourceBundle_Control_JAVAPROPERTIES_];
    JavaUtilResourceBundle_Control_set_format_(self, [JavaUtilCollections unmodifiableListWithJavaUtilList:JavaUtilResourceBundle_Control_listClass_]);
    JreMemDebugAdd(self);
  }
  return self;
}

+ (JavaUtilResourceBundle_Control *)getControlWithJavaUtilList:(id<JavaUtilList>)formats {
  switch ([((id<JavaUtilList>) nil_chk(formats)) size]) {
    case 1:
    if ([formats containsWithId:JavaUtilResourceBundle_Control_JAVACLASS_]) {
      return JavaUtilResourceBundle_Control_FORMAT_CLASS_CONTROL_;
    }
    if ([formats containsWithId:JavaUtilResourceBundle_Control_JAVAPROPERTIES_]) {
      return JavaUtilResourceBundle_Control_FORMAT_PROPERTIES_CONTROL_;
    }
    break;
    case 2:
    if ([formats isEqual:JavaUtilResourceBundle_Control_FORMAT_DEFAULT_]) {
      return JavaUtilResourceBundle_Control_FORMAT_DEFAULT_CONTROL_;
    }
    break;
  }
  @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
}

+ (JavaUtilResourceBundle_Control *)getNoFallbackControlWithJavaUtilList:(id<JavaUtilList>)formats {
  switch ([((id<JavaUtilList>) nil_chk(formats)) size]) {
    case 1:
    if ([formats containsWithId:JavaUtilResourceBundle_Control_JAVACLASS_]) {
      return [JavaUtilResourceBundle_NoFallbackControl NOFALLBACK_FORMAT_CLASS_CONTROL];
    }
    if ([formats containsWithId:JavaUtilResourceBundle_Control_JAVAPROPERTIES_]) {
      return [JavaUtilResourceBundle_NoFallbackControl NOFALLBACK_FORMAT_PROPERTIES_CONTROL];
    }
    break;
    case 2:
    if ([formats isEqual:JavaUtilResourceBundle_Control_FORMAT_DEFAULT_]) {
      return [JavaUtilResourceBundle_NoFallbackControl NOFALLBACK_FORMAT_DEFAULT_CONTROL];
    }
    break;
  }
  @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
}

- (id<JavaUtilList>)getCandidateLocalesWithNSString:(NSString *)baseName
                                 withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (baseName == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"baseName == null"] autorelease];
  }
  else if (locale == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"locale == null"] autorelease];
  }
  id<JavaUtilList> retList = [[[JavaUtilArrayList alloc] init] autorelease];
  NSString *language = [((JavaUtilLocale *) nil_chk(locale)) getLanguage];
  NSString *country = [locale getCountry];
  NSString *variant = [locale getVariant];
  if (![((NSString *) nil_chk([JavaUtilResourceBundle EMPTY_STRING])) isEqual:variant]) {
    [retList addWithId:[[[JavaUtilLocale alloc] initWithNSString:language withNSString:country withNSString:variant] autorelease]];
  }
  if (![[JavaUtilResourceBundle EMPTY_STRING] isEqual:country]) {
    [retList addWithId:[[[JavaUtilLocale alloc] initWithNSString:language withNSString:country] autorelease]];
  }
  if (![[JavaUtilResourceBundle EMPTY_STRING] isEqual:language]) {
    [retList addWithId:[[[JavaUtilLocale alloc] initWithNSString:language] autorelease]];
  }
  [retList addWithId:[JavaUtilLocale ROOT]];
  return retList;
}

- (id<JavaUtilList>)getFormatsWithNSString:(NSString *)baseName {
  if (baseName == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"baseName == null"] autorelease];
  }
  return format_;
}

- (JavaUtilLocale *)getFallbackLocaleWithNSString:(NSString *)baseName
                               withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (baseName == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"baseName == null"] autorelease];
  }
  else if (locale == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"locale == null"] autorelease];
  }
  if ([JavaUtilLocale getDefault] != locale) {
    return [JavaUtilLocale getDefault];
  }
  return nil;
}

- (JavaUtilResourceBundle *)newBundleWithNSString:(NSString *)baseName
                               withJavaUtilLocale:(JavaUtilLocale *)locale
                                     withNSString:(NSString *)format
                          withJavaLangClassLoader:(JavaLangClassLoader *)loader
                                      withBoolean:(BOOL)reload {
  if (format == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"format == null"] autorelease];
  }
  else if (loader == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"loader == null"] autorelease];
  }
  NSString *bundleName = [self toBundleNameWithNSString:baseName withJavaUtilLocale:locale];
  JavaLangClassLoader *clsloader = loader;
  JavaUtilResourceBundle *ret;
  if ([((NSString *) nil_chk(format)) isEqual:JavaUtilResourceBundle_Control_JAVACLASS_]) {
    IOSClass *cls = nil;
    @try {
      cls = [((JavaLangClassLoader *) nil_chk(clsloader)) loadClassWithNSString:bundleName];
    }
    @catch (JavaLangException *e) {
    }
    if (cls == nil) {
      return nil;
    }
    @try {
      JavaUtilResourceBundle *bundle = (JavaUtilResourceBundle *) check_class_cast([((IOSClass *) nil_chk(cls)) newInstance], [JavaUtilResourceBundle class]);
      [((JavaUtilResourceBundle *) nil_chk(bundle)) setLocaleWithJavaUtilLocale:locale];
      return bundle;
    }
    @catch (JavaLangNullPointerException *e) {
      return nil;
    }
  }
  if ([format isEqual:JavaUtilResourceBundle_Control_JAVAPROPERTIES_]) {
    JavaIoInputStream *streams = nil;
    NSString *resourceName = [self toResourceNameWithNSString:bundleName withNSString:@"properties"];
    if (reload) {
      JavaNetURL *url = nil;
      @try {
        url = [((JavaLangClassLoader *) nil_chk(loader)) getResourceWithNSString:resourceName];
      }
      @catch (JavaLangNullPointerException *e) {
      }
      if (url != nil) {
        streams = [[[JavaIoFileInputStream alloc] initWithNSString:[url getFile]] autorelease];
      }
    }
    else {
      @try {
        streams = [((JavaLangClassLoader *) nil_chk(clsloader)) getResourceAsStreamWithNSString:resourceName];
      }
      @catch (JavaLangNullPointerException *e) {
      }
    }
    if (streams != nil) {
      @try {
        ret = [[[JavaUtilPropertyResourceBundle alloc] initWithJavaIoReader:[[[JavaIoInputStreamReader alloc] initWithJavaIoInputStream:streams] autorelease]] autorelease];
        [ret setLocaleWithJavaUtilLocale:locale];
        [streams close];
      }
      @catch (JavaIoIOException *e) {
        return nil;
      }
      return ret;
    }
    return nil;
  }
  @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
}

+ (IOSObjectArray *)__exceptions_newBundleWithNSString_withJavaUtilLocale_withNSString_withJavaLangClassLoader_withBoolean_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangIllegalAccessException getClass], [JavaLangInstantiationException getClass], [JavaIoIOException getClass] } count:3 type:[IOSClass getClass]];
}

- (long long int)getTimeToLiveWithNSString:(NSString *)baseName
                        withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (baseName == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"baseName == null"] autorelease];
  }
  else if (locale == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"locale == null"] autorelease];
  }
  return JavaUtilResourceBundle_Control_TTL_NO_EXPIRATION_CONTROL;
}

- (BOOL)needsReloadWithNSString:(NSString *)baseName
             withJavaUtilLocale:(JavaUtilLocale *)locale
                   withNSString:(NSString *)format
        withJavaLangClassLoader:(JavaLangClassLoader *)loader
     withJavaUtilResourceBundle:(JavaUtilResourceBundle *)bundle
                       withLong:(long long int)loadTime {
  if (bundle == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"bundle == null"] autorelease];
  }
  NSString *bundleName = [self toBundleNameWithNSString:baseName withJavaUtilLocale:locale];
  NSString *suffix = format;
  if ([((NSString *) nil_chk(format)) isEqual:JavaUtilResourceBundle_Control_JAVACLASS_]) {
    suffix = @"class";
  }
  if ([format isEqual:JavaUtilResourceBundle_Control_JAVAPROPERTIES_]) {
    suffix = @"properties";
  }
  NSString *urlname = [self toResourceNameWithNSString:bundleName withNSString:suffix];
  JavaNetURL *url = [((JavaLangClassLoader *) nil_chk(loader)) getResourceWithNSString:urlname];
  if (url != nil) {
    NSString *fileName = [url getFile];
    long long int lastModified = [((JavaIoFile *) [[[JavaIoFile alloc] initWithNSString:fileName] autorelease]) lastModified];
    if (lastModified > loadTime) {
      return YES;
    }
  }
  return NO;
}

- (NSString *)toBundleNameWithNSString:(NSString *)baseName
                    withJavaUtilLocale:(JavaUtilLocale *)locale {
  NSString *emptyString = [JavaUtilResourceBundle EMPTY_STRING];
  NSString *preString = [JavaUtilResourceBundle UNDER_SCORE];
  NSString *underline = [JavaUtilResourceBundle UNDER_SCORE];
  if (baseName == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"baseName == null"] autorelease];
  }
  JavaLangStringBuilder *ret = [[[JavaLangStringBuilder alloc] init] autorelease];
  JavaLangStringBuilder *prefix = [[[JavaLangStringBuilder alloc] init] autorelease];
  [ret appendWithNSString:baseName];
  if (![((NSString *) nil_chk([((JavaUtilLocale *) nil_chk(locale)) getLanguage])) isEqual:emptyString]) {
    [ret appendWithNSString:underline];
    [ret appendWithNSString:[locale getLanguage]];
  }
  else {
    [prefix appendWithNSString:preString];
  }
  if (![((NSString *) nil_chk([locale getCountry])) isEqual:emptyString]) {
    [ret appendWithJavaLangCharSequence:(id<JavaLangCharSequence>) check_protocol_cast(prefix, @protocol(JavaLangCharSequence))];
    [ret appendWithNSString:underline];
    [ret appendWithNSString:[locale getCountry]];
    prefix = [[[JavaLangStringBuilder alloc] init] autorelease];
  }
  else {
    [prefix appendWithNSString:preString];
  }
  if (![((NSString *) nil_chk([locale getVariant])) isEqual:emptyString]) {
    [ret appendWithJavaLangCharSequence:(id<JavaLangCharSequence>) check_protocol_cast(prefix, @protocol(JavaLangCharSequence))];
    [ret appendWithNSString:underline];
    [ret appendWithNSString:[locale getVariant]];
  }
  return [ret description];
}

- (NSString *)toResourceNameWithNSString:(NSString *)bundleName
                            withNSString:(NSString *)suffix {
  if (suffix == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"suffix == null"] autorelease];
  }
  JavaLangStringBuilder *ret = [[[JavaLangStringBuilder alloc] initWithNSString:[((NSString *) nil_chk(bundleName)) replace:'.' withChar:'/']] autorelease];
  [ret appendWithChar:'.'];
  [ret appendWithNSString:suffix];
  return [ret description];
}

+ (void)initialize {
  if (self == [JavaUtilResourceBundle_Control class]) {
    JreOperatorRetainedAssign(&JavaUtilResourceBundle_Control_listDefault_, nil, [[[JavaUtilArrayList alloc] init] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilResourceBundle_Control_listClass_, nil, [[[JavaUtilArrayList alloc] init] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilResourceBundle_Control_listProperties_, nil, [[[JavaUtilArrayList alloc] init] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilResourceBundle_Control_JAVACLASS_, nil, @"java.class");
    JreOperatorRetainedAssign(&JavaUtilResourceBundle_Control_JAVAPROPERTIES_, nil, @"java.properties");
    {
      [JavaUtilResourceBundle_Control_listDefault_ addWithId:JavaUtilResourceBundle_Control_JAVACLASS_];
      [JavaUtilResourceBundle_Control_listDefault_ addWithId:JavaUtilResourceBundle_Control_JAVAPROPERTIES_];
      [JavaUtilResourceBundle_Control_listClass_ addWithId:JavaUtilResourceBundle_Control_JAVACLASS_];
      [JavaUtilResourceBundle_Control_listProperties_ addWithId:JavaUtilResourceBundle_Control_JAVAPROPERTIES_];
    }
    JreOperatorRetainedAssign(&JavaUtilResourceBundle_Control_FORMAT_DEFAULT_, nil, [JavaUtilCollections unmodifiableListWithJavaUtilList:JavaUtilResourceBundle_Control_listDefault_]);
    JreOperatorRetainedAssign(&JavaUtilResourceBundle_Control_FORMAT_CLASS_, nil, [JavaUtilCollections unmodifiableListWithJavaUtilList:JavaUtilResourceBundle_Control_listClass_]);
    JreOperatorRetainedAssign(&JavaUtilResourceBundle_Control_FORMAT_PROPERTIES_, nil, [JavaUtilCollections unmodifiableListWithJavaUtilList:JavaUtilResourceBundle_Control_listProperties_]);
    JreOperatorRetainedAssign(&JavaUtilResourceBundle_Control_FORMAT_PROPERTIES_CONTROL_, nil, [[[JavaUtilResourceBundle_SimpleControl alloc] initWithNSString:JavaUtilResourceBundle_Control_JAVAPROPERTIES_] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilResourceBundle_Control_FORMAT_CLASS_CONTROL_, nil, [[[JavaUtilResourceBundle_SimpleControl alloc] initWithNSString:JavaUtilResourceBundle_Control_JAVACLASS_] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilResourceBundle_Control_FORMAT_DEFAULT_CONTROL_, nil, [[[JavaUtilResourceBundle_Control alloc] init] autorelease]);
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilResourceBundle_Control_set_format_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilResourceBundle_Control *)other {
  [super copyAllFieldsTo:other];
  JavaUtilResourceBundle_Control_set_format_(other, format_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:format_ name:@"format"]];
  return result;
}

@end
@implementation JavaUtilResourceBundle_NoFallbackControl

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilResourceBundle_NoFallbackControl_NOFALLBACK_FORMAT_PROPERTIES_CONTROL_ name:@"JavaUtilResourceBundle_NoFallbackControl_NOFALLBACK_FORMAT_PROPERTIES_CONTROL_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilResourceBundle_NoFallbackControl_NOFALLBACK_FORMAT_CLASS_CONTROL_ name:@"JavaUtilResourceBundle_NoFallbackControl_NOFALLBACK_FORMAT_CLASS_CONTROL_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilResourceBundle_NoFallbackControl_NOFALLBACK_FORMAT_DEFAULT_CONTROL_ name:@"JavaUtilResourceBundle_NoFallbackControl_NOFALLBACK_FORMAT_DEFAULT_CONTROL_"]];
  return result;
}

static JavaUtilResourceBundle_Control * JavaUtilResourceBundle_NoFallbackControl_NOFALLBACK_FORMAT_PROPERTIES_CONTROL_;
static JavaUtilResourceBundle_Control * JavaUtilResourceBundle_NoFallbackControl_NOFALLBACK_FORMAT_CLASS_CONTROL_;
static JavaUtilResourceBundle_Control * JavaUtilResourceBundle_NoFallbackControl_NOFALLBACK_FORMAT_DEFAULT_CONTROL_;

+ (JavaUtilResourceBundle_Control *)NOFALLBACK_FORMAT_PROPERTIES_CONTROL {
  return JavaUtilResourceBundle_NoFallbackControl_NOFALLBACK_FORMAT_PROPERTIES_CONTROL_;
}

+ (JavaUtilResourceBundle_Control *)NOFALLBACK_FORMAT_CLASS_CONTROL {
  return JavaUtilResourceBundle_NoFallbackControl_NOFALLBACK_FORMAT_CLASS_CONTROL_;
}

+ (JavaUtilResourceBundle_Control *)NOFALLBACK_FORMAT_DEFAULT_CONTROL {
  return JavaUtilResourceBundle_NoFallbackControl_NOFALLBACK_FORMAT_DEFAULT_CONTROL_;
}

- (id)initWithNSString:(NSString *)format {
  if (self = [super init]) {
    [JavaUtilResourceBundle_Control setListClass:[[[JavaUtilArrayList alloc] init] autorelease]];
    [[JavaUtilResourceBundle_Control listClass] addWithId:format];
    JavaUtilResourceBundle_Control_set_format_(self, [JavaUtilCollections unmodifiableListWithJavaUtilList:[JavaUtilResourceBundle_Control listClass]]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaUtilList:(id<JavaUtilList>)list {
  if (self = [super init]) {
    JavaUtilResourceBundle_Control_set_format_(self, list);
    JreMemDebugAdd(self);
  }
  return self;
}

- (JavaUtilLocale *)getFallbackLocaleWithNSString:(NSString *)baseName
                               withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (baseName == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"baseName == null"] autorelease];
  }
  else if (locale == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"locale == null"] autorelease];
  }
  return nil;
}

+ (void)initialize {
  if (self == [JavaUtilResourceBundle_NoFallbackControl class]) {
    JreOperatorRetainedAssign(&JavaUtilResourceBundle_NoFallbackControl_NOFALLBACK_FORMAT_PROPERTIES_CONTROL_, nil, [[[JavaUtilResourceBundle_NoFallbackControl alloc] initWithNSString:[JavaUtilResourceBundle_Control JAVAPROPERTIES]] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilResourceBundle_NoFallbackControl_NOFALLBACK_FORMAT_CLASS_CONTROL_, nil, [[[JavaUtilResourceBundle_NoFallbackControl alloc] initWithNSString:[JavaUtilResourceBundle_Control JAVACLASS]] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilResourceBundle_NoFallbackControl_NOFALLBACK_FORMAT_DEFAULT_CONTROL_, nil, [[[JavaUtilResourceBundle_NoFallbackControl alloc] initWithJavaUtilList:[JavaUtilResourceBundle_Control listDefault]] autorelease]);
  }
}

@end
@implementation JavaUtilResourceBundle_SimpleControl

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithNSString:(NSString *)format {
  if (self = [super init]) {
    [JavaUtilResourceBundle_Control setListClass:[[[JavaUtilArrayList alloc] init] autorelease]];
    [[JavaUtilResourceBundle_Control listClass] addWithId:format];
    JavaUtilResourceBundle_Control_set_format_(self, [JavaUtilCollections unmodifiableListWithJavaUtilList:[JavaUtilResourceBundle_Control listClass]]);
    JreMemDebugAdd(self);
  }
  return self;
}

@end
