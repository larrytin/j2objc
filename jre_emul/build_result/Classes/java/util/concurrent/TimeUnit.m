//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: Classes/java/util/concurrent/TimeUnit.java
//
//  Created by retechretech on 13-9-4.
//

#include "IOSClass.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/concurrent/TimeUnit.h"


static JavaUtilConcurrentTimeUnitEnum *JavaUtilConcurrentTimeUnitEnum_DAYS;
static JavaUtilConcurrentTimeUnitEnum *JavaUtilConcurrentTimeUnitEnum_HOURS;
static JavaUtilConcurrentTimeUnitEnum *JavaUtilConcurrentTimeUnitEnum_MINUTES;
static JavaUtilConcurrentTimeUnitEnum *JavaUtilConcurrentTimeUnitEnum_SECONDS;
static JavaUtilConcurrentTimeUnitEnum *JavaUtilConcurrentTimeUnitEnum_MILLISECONDS;
static JavaUtilConcurrentTimeUnitEnum *JavaUtilConcurrentTimeUnitEnum_MICROSECONDS;
static JavaUtilConcurrentTimeUnitEnum *JavaUtilConcurrentTimeUnitEnum_NANOSECONDS;
IOSObjectArray *JavaUtilConcurrentTimeUnitEnum_values;

@implementation JavaUtilConcurrentTimeUnitEnum

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilConcurrentTimeUnitEnum_values name:@"enumValues"]];
  return result;
}

+ (JavaUtilConcurrentTimeUnitEnum *)DAYS {
  return JavaUtilConcurrentTimeUnitEnum_DAYS;
}
+ (JavaUtilConcurrentTimeUnitEnum *)HOURS {
  return JavaUtilConcurrentTimeUnitEnum_HOURS;
}
+ (JavaUtilConcurrentTimeUnitEnum *)MINUTES {
  return JavaUtilConcurrentTimeUnitEnum_MINUTES;
}
+ (JavaUtilConcurrentTimeUnitEnum *)SECONDS {
  return JavaUtilConcurrentTimeUnitEnum_SECONDS;
}
+ (JavaUtilConcurrentTimeUnitEnum *)MILLISECONDS {
  return JavaUtilConcurrentTimeUnitEnum_MILLISECONDS;
}
+ (JavaUtilConcurrentTimeUnitEnum *)MICROSECONDS {
  return JavaUtilConcurrentTimeUnitEnum_MICROSECONDS;
}
+ (JavaUtilConcurrentTimeUnitEnum *)NANOSECONDS {
  return JavaUtilConcurrentTimeUnitEnum_NANOSECONDS;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

- (id)initWithLongInt:(long long int)value
         withNSString:(NSString *)__name
              withInt:(int)__ordinal {
  if ((self = [super initWithNSString:__name withInt:__ordinal])) {
    self->value_ = value;
    JreMemDebugAdd(self);
  }
  return self;
}

- (long long int)convertWithLongInt:(long long int)sourceDuration
 withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit {
  return [self convertWithLongInt:sourceDuration * ((JavaUtilConcurrentTimeUnitEnum *) nil_chk(unit))->value_];
}

- (long long int)toDaysWithLongInt:(long long int)duration {
  return [((JavaUtilConcurrentTimeUnitEnum *) nil_chk(JavaUtilConcurrentTimeUnitEnum_DAYS)) convertWithLongInt:duration withJavaUtilConcurrentTimeUnitEnum:self];
}

- (long long int)toHoursWithLongInt:(long long int)duration {
  return [((JavaUtilConcurrentTimeUnitEnum *) nil_chk(JavaUtilConcurrentTimeUnitEnum_HOURS)) convertWithLongInt:duration withJavaUtilConcurrentTimeUnitEnum:self];
}

- (long long int)toMinutesWithLongInt:(long long int)duration {
  return [((JavaUtilConcurrentTimeUnitEnum *) nil_chk(JavaUtilConcurrentTimeUnitEnum_MINUTES)) convertWithLongInt:duration withJavaUtilConcurrentTimeUnitEnum:self];
}

- (long long int)toSecondsWithLongInt:(long long int)duration {
  return [((JavaUtilConcurrentTimeUnitEnum *) nil_chk(JavaUtilConcurrentTimeUnitEnum_SECONDS)) convertWithLongInt:duration withJavaUtilConcurrentTimeUnitEnum:self];
}

- (long long int)toMillisWithLongInt:(long long int)duration {
  return [((JavaUtilConcurrentTimeUnitEnum *) nil_chk(JavaUtilConcurrentTimeUnitEnum_MILLISECONDS)) convertWithLongInt:duration withJavaUtilConcurrentTimeUnitEnum:self];
}

- (long long int)toMicrosWithLongInt:(long long int)duration {
  return [((JavaUtilConcurrentTimeUnitEnum *) nil_chk(JavaUtilConcurrentTimeUnitEnum_MICROSECONDS)) convertWithLongInt:duration withJavaUtilConcurrentTimeUnitEnum:self];
}

- (long long int)toNanosWithLongInt:(long long int)duration {
  return [((JavaUtilConcurrentTimeUnitEnum *) nil_chk(JavaUtilConcurrentTimeUnitEnum_NANOSECONDS)) convertWithLongInt:duration withJavaUtilConcurrentTimeUnitEnum:self];
}

- (long long int)convertWithLongInt:(long long int)sourceDurationNs {
  return sourceDurationNs / self->value_;
}

+ (void)initialize {
  if (self == [JavaUtilConcurrentTimeUnitEnum class]) {
    JavaUtilConcurrentTimeUnitEnum_DAYS = [[JavaUtilConcurrentTimeUnitEnum alloc] initWithLongInt:1000LL * 1000LL * 1000LL * 3600LL * 24LL withNSString:@"JavaUtilConcurrentTimeUnit_DAYS" withInt:0];
    JavaUtilConcurrentTimeUnitEnum_HOURS = [[JavaUtilConcurrentTimeUnitEnum alloc] initWithLongInt:1000LL * 1000LL * 1000LL * 3600LL withNSString:@"JavaUtilConcurrentTimeUnit_HOURS" withInt:1];
    JavaUtilConcurrentTimeUnitEnum_MINUTES = [[JavaUtilConcurrentTimeUnitEnum alloc] initWithLongInt:1000LL * 1000LL * 1000LL * 60LL withNSString:@"JavaUtilConcurrentTimeUnit_MINUTES" withInt:2];
    JavaUtilConcurrentTimeUnitEnum_SECONDS = [[JavaUtilConcurrentTimeUnitEnum alloc] initWithLongInt:1000LL * 1000LL * 1000LL withNSString:@"JavaUtilConcurrentTimeUnit_SECONDS" withInt:3];
    JavaUtilConcurrentTimeUnitEnum_MILLISECONDS = [[JavaUtilConcurrentTimeUnitEnum alloc] initWithLongInt:1000LL * 1000LL withNSString:@"JavaUtilConcurrentTimeUnit_MILLISECONDS" withInt:4];
    JavaUtilConcurrentTimeUnitEnum_MICROSECONDS = [[JavaUtilConcurrentTimeUnitEnum alloc] initWithLongInt:1000LL withNSString:@"JavaUtilConcurrentTimeUnit_MICROSECONDS" withInt:5];
    JavaUtilConcurrentTimeUnitEnum_NANOSECONDS = [[JavaUtilConcurrentTimeUnitEnum alloc] initWithLongInt:1LL withNSString:@"JavaUtilConcurrentTimeUnit_NANOSECONDS" withInt:6];
    JavaUtilConcurrentTimeUnitEnum_values = [[IOSObjectArray alloc] initWithObjects:(id[]){ JavaUtilConcurrentTimeUnitEnum_DAYS, JavaUtilConcurrentTimeUnitEnum_HOURS, JavaUtilConcurrentTimeUnitEnum_MINUTES, JavaUtilConcurrentTimeUnitEnum_SECONDS, JavaUtilConcurrentTimeUnitEnum_MILLISECONDS, JavaUtilConcurrentTimeUnitEnum_MICROSECONDS, JavaUtilConcurrentTimeUnitEnum_NANOSECONDS, nil } count:7 type:[IOSClass classWithClass:[JavaUtilConcurrentTimeUnitEnum class]]];
  }
}

+ (IOSObjectArray *)values {
  return [IOSObjectArray arrayWithArray:JavaUtilConcurrentTimeUnitEnum_values];
}

+ (JavaUtilConcurrentTimeUnitEnum *)valueOfWithNSString:(NSString *)name {
  for (int i = 0; i < [JavaUtilConcurrentTimeUnitEnum_values count]; i++) {
    JavaUtilConcurrentTimeUnitEnum *e = [JavaUtilConcurrentTimeUnitEnum_values objectAtIndex:i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

@end
