//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSLongArray.h"
#include "java/io/Serializable.h"
#include "java/lang/StringBuilder.h"
#include "java/util/concurrent/atomic/AtomicLongArray.h"
#include <libkern/OSAtomic.h>

@implementation JavaUtilConcurrentAtomicAtomicLongArray

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithInt:(int)length {
  if (self = [super init]) {
    JavaUtilConcurrentAtomicAtomicLongArray_set_array_(self, [IOSLongArray arrayWithLength:length]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithLongArray:(IOSLongArray *)array {
  if (self = [super init]) {
    JavaUtilConcurrentAtomicAtomicLongArray_set_array_(self, [((IOSLongArray *) nil_chk(array)) clone]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (int)length {
  return (int) [((IOSLongArray *) nil_chk(array_)) count];
}

- (long long int)getWithInt:(int)i {
  [JavaUtilConcurrentAtomicAtomicLongArray memoryBarrier];
  return IOSLongArray_Get(nil_chk(array_), i);
}

- (void)setWithInt:(int)i
          withLong:(long long int)newValue {
  [self getAndSetWithInt:i withLong:newValue];
}

- (void)lazySetWithInt:(int)i
              withLong:(long long int)newValue {
  [self getAndSetWithInt:i withLong:newValue];
}

- (long long int)getAndSetWithInt:(int)i
                         withLong:(long long int)newValue {
  while (YES) {
    long long int current = IOSLongArray_Get(nil_chk(array_), i);
    if ([self compareAndSetRawWithInt:i withLong:current withLong:newValue]) return current;
  }
}

- (BOOL)compareAndSetWithInt:(int)i
                    withLong:(long long int)expect
                    withLong:(long long int)update {
  return [self compareAndSetRawWithInt:i withLong:expect withLong:update];
}

- (BOOL)weakCompareAndSetWithInt:(int)i
                        withLong:(long long int)expect
                        withLong:(long long int)update {
  return [self compareAndSetRawWithInt:i withLong:expect withLong:update];
}

- (long long int)getAndIncrementWithInt:(int)i {
  return [self getAndAddWithInt:i withLong:1];
}

- (long long int)getAndDecrementWithInt:(int)i {
  return [self getAndAddWithInt:i withLong:-1];
}

- (long long int)getAndAddWithInt:(int)i
                         withLong:(long long int)delta {
  while (YES) {
    long long int current = IOSLongArray_Get(nil_chk(array_), i);
    if ([self compareAndSetRawWithInt:i withLong:current withLong:current + delta]) return current;
  }
}

- (long long int)incrementAndGetWithInt:(int)i {
  return [self addAndGetWithInt:i withLong:1];
}

- (long long int)decrementAndGetWithInt:(int)i {
  return [self addAndGetWithInt:i withLong:-1];
}

- (long long int)addAndGetWithInt:(int)i
                         withLong:(long long int)delta {
  while (YES) {
    long long int current = IOSLongArray_Get(nil_chk(array_), i);
    long long int next = current + delta;
    if ([self compareAndSetRawWithInt:i withLong:current withLong:next]) return next;
  }
}

- (NSString *)description {
  int iMax = (int) [((IOSLongArray *) nil_chk(array_)) count] - 1;
  if (iMax == -1) return @"[]";
  JavaLangStringBuilder *b = [[[JavaLangStringBuilder alloc] init] autorelease];
  [b appendWithChar:'['];
  for (int i = 0; ; i++) {
    [b appendWithLong:IOSLongArray_Get(array_, i)];
    if (i == iMax) return [((JavaLangStringBuilder *) nil_chk([b appendWithChar:']'])) description];
    [((JavaLangStringBuilder *) nil_chk([b appendWithChar:','])) appendWithChar:' '];
  }
}

+ (void)memoryBarrier {
  OSMemoryBarrier();
}

- (BOOL)compareAndSetRawWithInt:(int)i
                       withLong:(long long int)expect
                       withLong:(long long int)update {
  return OSAtomicCompareAndSwap64Barrier(expect, update, [array_ longRefAtIndex:i]);
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilConcurrentAtomicAtomicLongArray_set_array_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilConcurrentAtomicAtomicLongArray *)other {
  [super copyAllFieldsTo:other];
  JavaUtilConcurrentAtomicAtomicLongArray_set_array_(other, array_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:array_ name:@"array"]];
  return result;
}

@end
