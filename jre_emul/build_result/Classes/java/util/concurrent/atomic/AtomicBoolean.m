//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/concurrent/atomic/AtomicBoolean.java
//
//  Created by retechretech on 13-9-25.
//

#include "java/io/Serializable.h"
#include "java/lang/Boolean.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include <libkern/OSAtomic.h>

@implementation JavaUtilConcurrentAtomicAtomicBoolean

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithBoolean:(BOOL)initialValue {
  if (self = [super init]) {
    value_ = initialValue ? 1 : 0;
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

- (BOOL)get {
  [JavaUtilConcurrentAtomicAtomicBoolean memoryBarrier];
  return value_ != 0;
}

- (BOOL)compareAndSetWithBoolean:(BOOL)expect
                     withBoolean:(BOOL)update {
  int e = expect ? 1 : 0;
  int u = update ? 1 : 0;
  return [self compareAndSwapValueWithInt:e withInt:u];
}

- (BOOL)weakCompareAndSetWithBoolean:(BOOL)expect
                         withBoolean:(BOOL)update {
  int e = expect ? 1 : 0;
  int u = update ? 1 : 0;
  return [self compareAndSwapValueWithInt:e withInt:u];
}

- (void)setWithBoolean:(BOOL)newValue {
  [JavaUtilConcurrentAtomicAtomicBoolean memoryBarrier];
  value_ = newValue ? 1 : 0;
}

- (void)lazySetWithBoolean:(BOOL)newValue {
  [JavaUtilConcurrentAtomicAtomicBoolean memoryBarrier];
  value_ = newValue ? 1 : 0;
}

- (BOOL)getAndSetWithBoolean:(BOOL)newValue {
  for (; ; ) {
    BOOL current = [self get];
    if ([self compareAndSetWithBoolean:current withBoolean:newValue]) return current;
  }
}

- (NSString *)description {
  return [JavaLangBoolean toStringWithBoolean:[self get]];
}

+ (void)memoryBarrier {
  OSMemoryBarrier();
}

- (BOOL)compareAndSwapValueWithInt:(int)oldValue
                           withInt:(int)newValue {
  return OSAtomicCompareAndSwapIntBarrier(oldValue, newValue, &value_);
}

- (void)copyAllFieldsTo:(JavaUtilConcurrentAtomicAtomicBoolean *)other {
  [super copyAllFieldsTo:other];
  other->value_ = value_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  return result;
}

@end
