//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/concurrent/atomic/AtomicInteger.java
//
//  Created by retechretech on 13-9-25.
//

#include "java/io/Serializable.h"
#include "java/lang/Integer.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include <libkern/OSAtomic.h>

@implementation JavaUtilConcurrentAtomicAtomicInteger

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithInt:(int)initialValue {
  if (self = [super init]) {
    value_ = initialValue;
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

- (int)get {
  [JavaUtilConcurrentAtomicAtomicInteger memoryBarrier];
  return value_;
}

- (void)setWithInt:(int)newValue {
  [JavaUtilConcurrentAtomicAtomicInteger memoryBarrier];
  value_ = newValue;
}

- (void)lazySetWithInt:(int)newValue {
  [JavaUtilConcurrentAtomicAtomicInteger memoryBarrier];
  value_ = newValue;
}

- (int)getAndSetWithInt:(int)newValue {
  for (; ; ) {
    int current = [self get];
    if ([self compareAndSetWithInt:current withInt:newValue]) return current;
  }
}

- (BOOL)compareAndSetWithInt:(int)expect
                     withInt:(int)update {
  return [self compareAndSwapValueWithInt:expect withInt:update];
}

- (BOOL)weakCompareAndSetWithInt:(int)expect
                         withInt:(int)update {
  return [self compareAndSwapValueWithInt:expect withInt:update];
}

- (int)getAndIncrement {
  for (; ; ) {
    int current = [self get];
    int next = current + 1;
    if ([self compareAndSetWithInt:current withInt:next]) return current;
  }
}

- (int)getAndDecrement {
  for (; ; ) {
    int current = [self get];
    int next = current - 1;
    if ([self compareAndSetWithInt:current withInt:next]) return current;
  }
}

- (int)getAndAddWithInt:(int)delta {
  for (; ; ) {
    int current = [self get];
    int next = current + delta;
    if ([self compareAndSetWithInt:current withInt:next]) return current;
  }
}

- (int)incrementAndGet {
  for (; ; ) {
    int current = [self get];
    int next = current + 1;
    if ([self compareAndSetWithInt:current withInt:next]) return next;
  }
}

- (int)decrementAndGet {
  for (; ; ) {
    int current = [self get];
    int next = current - 1;
    if ([self compareAndSetWithInt:current withInt:next]) return next;
  }
}

- (int)addAndGetWithInt:(int)delta {
  for (; ; ) {
    int current = [self get];
    int next = current + delta;
    if ([self compareAndSetWithInt:current withInt:next]) return next;
  }
}

- (NSString *)description {
  return [JavaLangInteger toStringWithInt:[self get]];
}

- (int)intValue {
  return [self get];
}

- (long long int)longLongValue {
  return (long long int) [self get];
}

- (float)floatValue {
  return (float) [self get];
}

- (double)doubleValue {
  return (double) [self get];
}

+ (void)memoryBarrier {
  OSMemoryBarrier();
}

- (BOOL)compareAndSwapValueWithInt:(int)oldValue
                           withInt:(int)newValue {
  return OSAtomicCompareAndSwapIntBarrier(oldValue, newValue, &value_);
}

- (void)copyAllFieldsTo:(JavaUtilConcurrentAtomicAtomicInteger *)other {
  [super copyAllFieldsTo:other];
  other->value_ = value_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  return result;
}

@end
