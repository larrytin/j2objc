//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "java/io/Serializable.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include <libkern/OSAtomic.h>

@implementation JavaUtilConcurrentAtomicAtomicReference

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithId:(id)initialValue {
  if (self = [super init]) {
    JavaUtilConcurrentAtomicAtomicReference_set_value_(self, initialValue);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

- (id)get {
  [JavaUtilConcurrentAtomicAtomicReference memoryBarrier];
  return value_;
}

- (void)setWithId:(id)newValue {
  [JavaUtilConcurrentAtomicAtomicReference memoryBarrier];
  JavaUtilConcurrentAtomicAtomicReference_set_value_(self, newValue);
}

- (void)lazySetWithId:(id)newValue {
  [JavaUtilConcurrentAtomicAtomicReference memoryBarrier];
  JavaUtilConcurrentAtomicAtomicReference_set_value_(self, newValue);
}

- (BOOL)compareAndSetWithId:(id)expect
                     withId:(id)update {
  return [self compareAndSwapValueWithId:expect withId:update];
}

- (BOOL)weakCompareAndSetWithId:(id)expect
                         withId:(id)update {
  return [self compareAndSwapValueWithId:expect withId:update];
}

- (id)getAndSetWithId:(id)newValue {
  while (YES) {
    id x = [self get];
    if ([self compareAndSetWithId:x withId:newValue]) return x;
  }
}

- (NSString *)description {
  return [NSString valueOf:[self get]];
}

+ (void)memoryBarrier {
  OSMemoryBarrier();
}

- (BOOL)compareAndSwapValueWithId:(id)oldValue
                           withId:(id)newValue {
  #if __has_feature(objc_arc)
  void * volatile tmp = (__bridge void * volatile) value_;
  return OSAtomicCompareAndSwapPtrBarrier(
  (__bridge void *) oldValue, (__bridge void *) newValue, &tmp);
  #else
  return OSAtomicCompareAndSwapPtrBarrier(oldValue, newValue, (void * volatile *) &value_);
  #endif
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilConcurrentAtomicAtomicReference_set_value_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilConcurrentAtomicAtomicReference *)other {
  [super copyAllFieldsTo:other];
  JavaUtilConcurrentAtomicAtomicReference_set_value_(other, value_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:value_ name:@"value"]];
  return result;
}

@end
