//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/AssertionError.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/ConcurrentModificationException.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/concurrent/CopyOnWriteArrayList.h"
#include "libcore/util/EmptyArray.h"
#include "libcore/util/Objects.h"

@implementation JavaUtilConcurrentCopyOnWriteArrayList

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)init {
  if (self = [super init]) {
    JavaUtilConcurrentCopyOnWriteArrayList_set_elements_(self, [LibcoreUtilEmptyArray OBJECT]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  return JreMemDebugAdd([self initJavaUtilConcurrentCopyOnWriteArrayListWithNSObjectArray:(IOSObjectArray *) check_class_cast([((id<JavaUtilCollection>) nil_chk(collection)) toArray], [IOSObjectArray class])]);
}

- (id)initJavaUtilConcurrentCopyOnWriteArrayListWithNSObjectArray:(IOSObjectArray *)array {
  if (self = [super init]) {
    JavaUtilConcurrentCopyOnWriteArrayList_set_elements_(self, [JavaUtilArrays copyOfWithNSObjectArray:array withInt:(int) [((IOSObjectArray *) nil_chk(array)) count] withIOSClass:[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[NSObject class]]]]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithNSObjectArray:(IOSObjectArray *)array {
  return [self initJavaUtilConcurrentCopyOnWriteArrayListWithNSObjectArray:array];
}

- (id)clone {
  @try {
    JavaUtilConcurrentCopyOnWriteArrayList *result = (JavaUtilConcurrentCopyOnWriteArrayList *) check_class_cast([super clone], [JavaUtilConcurrentCopyOnWriteArrayList class]);
    JavaUtilConcurrentCopyOnWriteArrayList_set_elements_(nil_chk(result), [((IOSObjectArray *) nil_chk(result->elements_)) clone]);
    return result;
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw [[[JavaLangAssertionError alloc] initWithId:e] autorelease];
  }
}

- (int)size {
  return (int) [((IOSObjectArray *) nil_chk(elements_)) count];
}

- (id)getWithInt:(int)index {
  return (id) IOSObjectArray_Get(nil_chk(elements_), index);
}

- (BOOL)containsWithId:(id)o {
  return [self indexOfWithId:o] != -1;
}

- (BOOL)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  IOSObjectArray *snapshot = elements_;
  return [JavaUtilConcurrentCopyOnWriteArrayList containsAllWithJavaUtilCollection:collection withNSObjectArray:snapshot withInt:0 withInt:(int) [((IOSObjectArray *) nil_chk(snapshot)) count]];
}

+ (BOOL)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection
                        withNSObjectArray:(IOSObjectArray *)snapshot
                                  withInt:(int)from
                                  withInt:(int)to {
  for (id __strong o in collection) {
    if ([JavaUtilConcurrentCopyOnWriteArrayList indexOfWithId:o withNSObjectArray:snapshot withInt:from withInt:to] == -1) {
      return NO;
    }
  }
  return YES;
}

- (int)indexOfWithId:(id)object
             withInt:(int)from {
  IOSObjectArray *snapshot = elements_;
  return [JavaUtilConcurrentCopyOnWriteArrayList indexOfWithId:object withNSObjectArray:snapshot withInt:from withInt:(int) [((IOSObjectArray *) nil_chk(snapshot)) count]];
}

- (int)indexOfWithId:(id)object {
  IOSObjectArray *snapshot = elements_;
  return [JavaUtilConcurrentCopyOnWriteArrayList indexOfWithId:object withNSObjectArray:snapshot withInt:0 withInt:(int) [((IOSObjectArray *) nil_chk(snapshot)) count]];
}

- (int)lastIndexOfWithId:(id)object
                 withInt:(int)to {
  IOSObjectArray *snapshot = elements_;
  return [JavaUtilConcurrentCopyOnWriteArrayList lastIndexOfWithId:object withNSObjectArray:snapshot withInt:0 withInt:to];
}

- (int)lastIndexOfWithId:(id)object {
  IOSObjectArray *snapshot = elements_;
  return [JavaUtilConcurrentCopyOnWriteArrayList lastIndexOfWithId:object withNSObjectArray:snapshot withInt:0 withInt:(int) [((IOSObjectArray *) nil_chk(snapshot)) count]];
}

- (BOOL)isEmpty {
  return (int) [((IOSObjectArray *) nil_chk(elements_)) count] == 0;
}

- (id<JavaUtilIterator>)iterator {
  IOSObjectArray *snapshot = elements_;
  return [[[JavaUtilConcurrentCopyOnWriteArrayList_CowIterator alloc] initWithNSObjectArray:snapshot withInt:0 withInt:(int) [((IOSObjectArray *) nil_chk(snapshot)) count]] autorelease];
}

- (id<JavaUtilListIterator>)listIteratorWithInt:(int)index {
  IOSObjectArray *snapshot = elements_;
  if (index < 0 || index > (int) [((IOSObjectArray *) nil_chk(snapshot)) count]) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"index=%d, length=%d", index, (int) [((IOSObjectArray *) nil_chk(snapshot)) count]]] autorelease];
  }
  JavaUtilConcurrentCopyOnWriteArrayList_CowIterator *result = [[[JavaUtilConcurrentCopyOnWriteArrayList_CowIterator alloc] initWithNSObjectArray:snapshot withInt:0 withInt:(int) [((IOSObjectArray *) nil_chk(snapshot)) count]] autorelease];
  result->index_ = index;
  return result;
}

- (id<JavaUtilListIterator>)listIterator {
  IOSObjectArray *snapshot = elements_;
  return [[[JavaUtilConcurrentCopyOnWriteArrayList_CowIterator alloc] initWithNSObjectArray:snapshot withInt:0 withInt:(int) [((IOSObjectArray *) nil_chk(snapshot)) count]] autorelease];
}

- (id<JavaUtilList>)subListWithInt:(int)from
                           withInt:(int)to {
  IOSObjectArray *snapshot = elements_;
  if (from < 0 || from > to || to > (int) [((IOSObjectArray *) nil_chk(snapshot)) count]) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"from=%d, to=%d, list size=%d", from, to, (int) [((IOSObjectArray *) nil_chk(snapshot)) count]]] autorelease];
  }
  return [[[JavaUtilConcurrentCopyOnWriteArrayList_CowSubList alloc] initWithJavaUtilConcurrentCopyOnWriteArrayList:self withNSObjectArray:snapshot withInt:from withInt:to] autorelease];
}

- (IOSObjectArray *)toArray {
  return [((IOSObjectArray *) nil_chk(elements_)) clone];
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)contents {
  IOSObjectArray *snapshot = elements_;
  if ((int) [((IOSObjectArray *) nil_chk(snapshot)) count] > (int) [((IOSObjectArray *) nil_chk(contents)) count]) {
    return (IOSObjectArray *) check_class_cast([JavaUtilArrays copyOfWithNSObjectArray:snapshot withInt:(int) [snapshot count] withIOSClass:[contents getClass]], [IOSObjectArray class]);
  }
  [JavaLangSystem arraycopyWithId:snapshot withInt:0 withId:contents withInt:0 withInt:(int) [snapshot count]];
  if ((int) [snapshot count] < (int) [contents count]) {
    IOSObjectArray_Set(contents, (int) [snapshot count], nil);
  }
  return contents;
}

- (BOOL)isEqual:(id)other {
  if ([other isKindOfClass:[JavaUtilConcurrentCopyOnWriteArrayList class]]) {
    return self == other || [JavaUtilArrays equalsWithNSObjectArray:elements_ withNSObjectArray:((JavaUtilConcurrentCopyOnWriteArrayList *) nil_chk(other))->elements_];
  }
  else if ([other conformsToProtocol: @protocol(JavaUtilList)]) {
    IOSObjectArray *snapshot = elements_;
    id<JavaUtilIterator> i = [((id<JavaUtilList>) nil_chk(other)) iterator];
    {
      IOSObjectArray *a__ = snapshot;
      id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      id const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id o = (*b__++);
        if (![((id<JavaUtilIterator>) nil_chk(i)) hasNext] || ![LibcoreUtilObjects equalWithId:o withId:[i next]]) {
          return NO;
        }
      }
    }
    return ![((id<JavaUtilIterator>) nil_chk(i)) hasNext];
  }
  else {
    return NO;
  }
}

- (NSUInteger)hash {
  return [JavaUtilArrays hashCodeWithNSObjectArray:elements_];
}

- (NSString *)description {
  return [JavaUtilArrays toStringWithNSObjectArray:elements_];
}

- (BOOL)addWithId:(id)e {
  @synchronized(self) {
    {
      IOSObjectArray *newElements = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(elements_)) count] + 1 type:[IOSClass classWithClass:[NSObject class]]];
      [JavaLangSystem arraycopyWithId:elements_ withInt:0 withId:newElements withInt:0 withInt:(int) [elements_ count]];
      IOSObjectArray_Set(newElements, (int) [elements_ count], e);
      JavaUtilConcurrentCopyOnWriteArrayList_set_elements_(self, newElements);
      return YES;
    }
  }
}

- (void)addWithInt:(int)index
            withId:(id)e {
  @synchronized(self) {
    {
      IOSObjectArray *newElements = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(elements_)) count] + 1 type:[IOSClass classWithClass:[NSObject class]]];
      [JavaLangSystem arraycopyWithId:elements_ withInt:0 withId:newElements withInt:0 withInt:index];
      IOSObjectArray_Set(newElements, index, e);
      [JavaLangSystem arraycopyWithId:elements_ withInt:index withId:newElements withInt:index + 1 withInt:(int) [elements_ count] - index];
      JavaUtilConcurrentCopyOnWriteArrayList_set_elements_(self, newElements);
    }
  }
}

- (BOOL)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @synchronized(self) {
    {
      return [self addAllWithInt:(int) [((IOSObjectArray *) nil_chk(elements_)) count] withJavaUtilCollection:collection];
    }
  }
}

- (BOOL)addAllWithInt:(int)index
withJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @synchronized(self) {
    {
      IOSObjectArray *toAdd = [((id<JavaUtilCollection>) nil_chk(collection)) toArray];
      IOSObjectArray *newElements = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(elements_)) count] + (int) [((IOSObjectArray *) nil_chk(toAdd)) count] type:[IOSClass classWithClass:[NSObject class]]];
      [JavaLangSystem arraycopyWithId:elements_ withInt:0 withId:newElements withInt:0 withInt:index];
      [JavaLangSystem arraycopyWithId:toAdd withInt:0 withId:newElements withInt:index withInt:(int) [toAdd count]];
      [JavaLangSystem arraycopyWithId:elements_ withInt:index withId:newElements withInt:index + (int) [toAdd count] withInt:(int) [elements_ count] - index];
      JavaUtilConcurrentCopyOnWriteArrayList_set_elements_(self, newElements);
      return (int) [toAdd count] > 0;
    }
  }
}

- (int)addAllAbsentWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @synchronized(self) {
    {
      IOSObjectArray *toAdd = [((id<JavaUtilCollection>) nil_chk(collection)) toArray];
      IOSObjectArray *newElements = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(elements_)) count] + (int) [((IOSObjectArray *) nil_chk(toAdd)) count] type:[IOSClass classWithClass:[NSObject class]]];
      [JavaLangSystem arraycopyWithId:elements_ withInt:0 withId:newElements withInt:0 withInt:(int) [elements_ count]];
      int addedCount = 0;
      {
        IOSObjectArray *a__ = toAdd;
        id const *b__ = a__->buffer_;
        id const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          id o = (*b__++);
          if ([JavaUtilConcurrentCopyOnWriteArrayList indexOfWithId:o withNSObjectArray:newElements withInt:0 withInt:(int) [elements_ count] + addedCount] == -1) {
            IOSObjectArray_Set(newElements, (int) [elements_ count] + addedCount++, o);
          }
        }
      }
      if (addedCount < (int) [toAdd count]) {
        newElements = [JavaUtilArrays copyOfRangeWithNSObjectArray:newElements withInt:0 withInt:(int) [elements_ count] + addedCount];
      }
      JavaUtilConcurrentCopyOnWriteArrayList_set_elements_(self, newElements);
      return addedCount;
    }
  }
}

- (BOOL)addIfAbsentWithId:(id)object {
  @synchronized(self) {
    {
      if ([self containsWithId:object]) {
        return NO;
      }
      [self addWithId:object];
      return YES;
    }
  }
}

- (void)clear {
  @synchronized(self) {
    {
      JavaUtilConcurrentCopyOnWriteArrayList_set_elements_(self, [LibcoreUtilEmptyArray OBJECT]);
    }
  }
}

- (id)removeWithInt:(int)index {
  @synchronized(self) {
    {
      id removed = (id) IOSObjectArray_Get(nil_chk(elements_), index);
      [self removeRangeWithInt:index withInt:index + 1];
      return removed;
    }
  }
}

- (BOOL)removeWithId:(id)o {
  @synchronized(self) {
    {
      int index = [self indexOfWithId:o];
      if (index == -1) {
        return NO;
      }
      [self removeWithInt:index];
      return YES;
    }
  }
}

- (BOOL)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @synchronized(self) {
    {
      return [self removeOrRetainWithJavaUtilCollection:collection withBoolean:NO withInt:0 withInt:(int) [((IOSObjectArray *) nil_chk(elements_)) count]] != 0;
    }
  }
}

- (BOOL)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @synchronized(self) {
    {
      return [self removeOrRetainWithJavaUtilCollection:collection withBoolean:YES withInt:0 withInt:(int) [((IOSObjectArray *) nil_chk(elements_)) count]] != 0;
    }
  }
}

- (int)removeOrRetainWithJavaUtilCollection:(id<JavaUtilCollection>)collection
                                withBoolean:(BOOL)retain_
                                    withInt:(int)from
                                    withInt:(int)to {
  for (int i = from; i < to; i++) {
    if ([((id<JavaUtilCollection>) nil_chk(collection)) containsWithId:IOSObjectArray_Get(nil_chk(elements_), i)] == retain_) {
      continue;
    }
    IOSObjectArray *newElements = [IOSObjectArray arrayWithLength:(int) [elements_ count] - 1 type:[IOSClass classWithClass:[NSObject class]]];
    [JavaLangSystem arraycopyWithId:elements_ withInt:0 withId:newElements withInt:0 withInt:i];
    int newSize = i;
    for (int j = i + 1; j < to; j++) {
      if ([collection containsWithId:IOSObjectArray_Get(elements_, j)] == retain_) {
        IOSObjectArray_Set(newElements, newSize++, IOSObjectArray_Get(elements_, j));
      }
    }
    [JavaLangSystem arraycopyWithId:elements_ withInt:to withId:newElements withInt:newSize withInt:(int) [elements_ count] - to];
    newSize += ((int) [elements_ count] - to);
    if (newSize < (int) [newElements count]) {
      newElements = [JavaUtilArrays copyOfRangeWithNSObjectArray:newElements withInt:0 withInt:newSize];
    }
    int removed = (int) [elements_ count] - (int) [((IOSObjectArray *) nil_chk(newElements)) count];
    JavaUtilConcurrentCopyOnWriteArrayList_set_elements_(self, newElements);
    return removed;
  }
  return 0;
}

- (id)setWithInt:(int)index
          withId:(id)e {
  @synchronized(self) {
    {
      IOSObjectArray *newElements = [((IOSObjectArray *) nil_chk(elements_)) clone];
      id result = (id) IOSObjectArray_Get(nil_chk(newElements), index);
      IOSObjectArray_Set(newElements, index, e);
      JavaUtilConcurrentCopyOnWriteArrayList_set_elements_(self, newElements);
      return result;
    }
  }
}

- (void)removeRangeWithInt:(int)from
                   withInt:(int)to {
  IOSObjectArray *newElements = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(elements_)) count] - (to - from) type:[IOSClass classWithClass:[NSObject class]]];
  [JavaLangSystem arraycopyWithId:elements_ withInt:0 withId:newElements withInt:0 withInt:from];
  [JavaLangSystem arraycopyWithId:elements_ withInt:to withId:newElements withInt:from withInt:(int) [elements_ count] - to];
  JavaUtilConcurrentCopyOnWriteArrayList_set_elements_(self, newElements);
}

+ (int)lastIndexOfWithId:(id)o
       withNSObjectArray:(IOSObjectArray *)data
                 withInt:(int)from
                 withInt:(int)to {
  if (o == nil) {
    for (int i = to - 1; i >= from; i--) {
      if (IOSObjectArray_Get(nil_chk(data), i) == nil) {
        return i;
      }
    }
  }
  else {
    for (int i = to - 1; i >= from; i--) {
      if ([o isEqual:IOSObjectArray_Get(nil_chk(data), i)]) {
        return i;
      }
    }
  }
  return -1;
}

+ (int)indexOfWithId:(id)o
   withNSObjectArray:(IOSObjectArray *)data
             withInt:(int)from
             withInt:(int)to {
  if (o == nil) {
    for (int i = from; i < to; i++) {
      if (IOSObjectArray_Get(nil_chk(data), i) == nil) {
        return i;
      }
    }
  }
  else {
    for (int i = from; i < to; i++) {
      if ([o isEqual:IOSObjectArray_Get(nil_chk(data), i)]) {
        return i;
      }
    }
  }
  return -1;
}

- (IOSObjectArray *)getArray {
  return elements_;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilConcurrentCopyOnWriteArrayList_set_elements_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilConcurrentCopyOnWriteArrayList *)other {
  [super copyAllFieldsTo:other];
  JavaUtilConcurrentCopyOnWriteArrayList_set_elements_(other, elements_);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:elements_ name:@"elements"]];
  return result;
}

@end
@implementation JavaUtilConcurrentCopyOnWriteArrayList_CowSubList

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilConcurrentCopyOnWriteArrayList:(JavaUtilConcurrentCopyOnWriteArrayList *)outer$
                                   withNSObjectArray:(IOSObjectArray *)expectedElements
                                             withInt:(int)from
                                             withInt:(int)to {
  JavaUtilConcurrentCopyOnWriteArrayList_CowSubList_set_this$0_(self, outer$);
  if (self = [super init]) {
    JavaUtilConcurrentCopyOnWriteArrayList_CowSubList_set_slice_(self, [[[JavaUtilConcurrentCopyOnWriteArrayList_Slice alloc] initWithNSObjectArray:expectedElements withInt:from withInt:to] autorelease]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (int)size {
  JavaUtilConcurrentCopyOnWriteArrayList_Slice *slice = self->slice_;
  return ((JavaUtilConcurrentCopyOnWriteArrayList_Slice *) nil_chk(slice))->to_ - slice->from_;
}

- (BOOL)isEmpty {
  JavaUtilConcurrentCopyOnWriteArrayList_Slice *slice = self->slice_;
  return ((JavaUtilConcurrentCopyOnWriteArrayList_Slice *) nil_chk(slice))->from_ == slice->to_;
}

- (id)getWithInt:(int)index {
  JavaUtilConcurrentCopyOnWriteArrayList_Slice *slice = self->slice_;
  IOSObjectArray *snapshot = this$0_->elements_;
  [((JavaUtilConcurrentCopyOnWriteArrayList_Slice *) nil_chk(slice)) checkElementIndexWithInt:index];
  [slice checkConcurrentModificationWithNSObjectArray:snapshot];
  return (id) IOSObjectArray_Get(nil_chk(snapshot), index + slice->from_);
}

- (id<JavaUtilIterator>)iterator {
  return [self listIteratorWithInt:0];
}

- (id<JavaUtilListIterator>)listIterator {
  return [self listIteratorWithInt:0];
}

- (id<JavaUtilListIterator>)listIteratorWithInt:(int)index {
  JavaUtilConcurrentCopyOnWriteArrayList_Slice *slice = self->slice_;
  IOSObjectArray *snapshot = this$0_->elements_;
  [((JavaUtilConcurrentCopyOnWriteArrayList_Slice *) nil_chk(slice)) checkPositionIndexWithInt:index];
  [slice checkConcurrentModificationWithNSObjectArray:snapshot];
  JavaUtilConcurrentCopyOnWriteArrayList_CowIterator *result = [[[JavaUtilConcurrentCopyOnWriteArrayList_CowIterator alloc] initWithNSObjectArray:snapshot withInt:slice->from_ withInt:slice->to_] autorelease];
  result->index_ = slice->from_ + index;
  return result;
}

- (int)indexOfWithId:(id)object {
  JavaUtilConcurrentCopyOnWriteArrayList_Slice *slice = self->slice_;
  IOSObjectArray *snapshot = this$0_->elements_;
  [((JavaUtilConcurrentCopyOnWriteArrayList_Slice *) nil_chk(slice)) checkConcurrentModificationWithNSObjectArray:snapshot];
  int result = [JavaUtilConcurrentCopyOnWriteArrayList indexOfWithId:object withNSObjectArray:snapshot withInt:slice->from_ withInt:slice->to_];
  return (result != -1) ? (result - slice->from_) : -1;
}

- (int)lastIndexOfWithId:(id)object {
  JavaUtilConcurrentCopyOnWriteArrayList_Slice *slice = self->slice_;
  IOSObjectArray *snapshot = this$0_->elements_;
  [((JavaUtilConcurrentCopyOnWriteArrayList_Slice *) nil_chk(slice)) checkConcurrentModificationWithNSObjectArray:snapshot];
  int result = [JavaUtilConcurrentCopyOnWriteArrayList lastIndexOfWithId:object withNSObjectArray:snapshot withInt:slice->from_ withInt:slice->to_];
  return (result != -1) ? (result - slice->from_) : -1;
}

- (BOOL)containsWithId:(id)object {
  return [self indexOfWithId:object] != -1;
}

- (BOOL)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  JavaUtilConcurrentCopyOnWriteArrayList_Slice *slice = self->slice_;
  IOSObjectArray *snapshot = this$0_->elements_;
  [((JavaUtilConcurrentCopyOnWriteArrayList_Slice *) nil_chk(slice)) checkConcurrentModificationWithNSObjectArray:snapshot];
  return [JavaUtilConcurrentCopyOnWriteArrayList containsAllWithJavaUtilCollection:collection withNSObjectArray:snapshot withInt:slice->from_ withInt:slice->to_];
}

- (id<JavaUtilList>)subListWithInt:(int)from
                           withInt:(int)to {
  JavaUtilConcurrentCopyOnWriteArrayList_Slice *slice = self->slice_;
  if (from < 0 || from > to || to > [self size]) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"from=%d, to=%d, list size=%d", from, to, [self size]]] autorelease];
  }
  return [[[JavaUtilConcurrentCopyOnWriteArrayList_CowSubList alloc] initWithJavaUtilConcurrentCopyOnWriteArrayList:this$0_ withNSObjectArray:((JavaUtilConcurrentCopyOnWriteArrayList_Slice *) nil_chk(slice))->expectedElements_ withInt:slice->from_ + from withInt:slice->from_ + to] autorelease];
}

- (id)removeWithInt:(int)index {
  @synchronized (this$0_) {
    [((JavaUtilConcurrentCopyOnWriteArrayList_Slice *) nil_chk(slice_)) checkElementIndexWithInt:index];
    [slice_ checkConcurrentModificationWithNSObjectArray:this$0_->elements_];
    id removed = [this$0_ removeWithInt:slice_->from_ + index];
    JavaUtilConcurrentCopyOnWriteArrayList_CowSubList_set_slice_(self, [[[JavaUtilConcurrentCopyOnWriteArrayList_Slice alloc] initWithNSObjectArray:this$0_->elements_ withInt:slice_->from_ withInt:slice_->to_ - 1] autorelease]);
    return removed;
  }
}

- (void)clear {
  @synchronized (this$0_) {
    [((JavaUtilConcurrentCopyOnWriteArrayList_Slice *) nil_chk(slice_)) checkConcurrentModificationWithNSObjectArray:this$0_->elements_];
    [this$0_ removeRangeWithInt:slice_->from_ withInt:slice_->to_];
    JavaUtilConcurrentCopyOnWriteArrayList_CowSubList_set_slice_(self, [[[JavaUtilConcurrentCopyOnWriteArrayList_Slice alloc] initWithNSObjectArray:this$0_->elements_ withInt:slice_->from_ withInt:slice_->from_] autorelease]);
  }
}

- (void)addWithInt:(int)index
            withId:(id)object {
  @synchronized (this$0_) {
    [((JavaUtilConcurrentCopyOnWriteArrayList_Slice *) nil_chk(slice_)) checkPositionIndexWithInt:index];
    [slice_ checkConcurrentModificationWithNSObjectArray:this$0_->elements_];
    [this$0_ addWithInt:index + slice_->from_ withId:object];
    JavaUtilConcurrentCopyOnWriteArrayList_CowSubList_set_slice_(self, [[[JavaUtilConcurrentCopyOnWriteArrayList_Slice alloc] initWithNSObjectArray:this$0_->elements_ withInt:slice_->from_ withInt:slice_->to_ + 1] autorelease]);
  }
}

- (BOOL)addWithId:(id)object {
  @synchronized (this$0_) {
    [self addWithInt:((JavaUtilConcurrentCopyOnWriteArrayList_Slice *) nil_chk(slice_))->to_ - slice_->from_ withId:object];
    return YES;
  }
}

- (BOOL)addAllWithInt:(int)index
withJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @synchronized (this$0_) {
    [((JavaUtilConcurrentCopyOnWriteArrayList_Slice *) nil_chk(slice_)) checkPositionIndexWithInt:index];
    [slice_ checkConcurrentModificationWithNSObjectArray:this$0_->elements_];
    int oldSize = (int) [((IOSObjectArray *) nil_chk(this$0_->elements_)) count];
    BOOL result = [this$0_ addAllWithInt:index + slice_->from_ withJavaUtilCollection:collection];
    JavaUtilConcurrentCopyOnWriteArrayList_CowSubList_set_slice_(self, [[[JavaUtilConcurrentCopyOnWriteArrayList_Slice alloc] initWithNSObjectArray:this$0_->elements_ withInt:slice_->from_ withInt:slice_->to_ + ((int) [this$0_->elements_ count] - oldSize)] autorelease]);
    return result;
  }
}

- (BOOL)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @synchronized (this$0_) {
    return [self addAllWithInt:[self size] withJavaUtilCollection:collection];
  }
}

- (id)setWithInt:(int)index
          withId:(id)object {
  @synchronized (this$0_) {
    [((JavaUtilConcurrentCopyOnWriteArrayList_Slice *) nil_chk(slice_)) checkElementIndexWithInt:index];
    [slice_ checkConcurrentModificationWithNSObjectArray:this$0_->elements_];
    id result = [this$0_ setWithInt:index + slice_->from_ withId:object];
    JavaUtilConcurrentCopyOnWriteArrayList_CowSubList_set_slice_(self, [[[JavaUtilConcurrentCopyOnWriteArrayList_Slice alloc] initWithNSObjectArray:this$0_->elements_ withInt:slice_->from_ withInt:slice_->to_] autorelease]);
    return result;
  }
}

- (BOOL)removeWithId:(id)object {
  @synchronized (this$0_) {
    int index = [self indexOfWithId:object];
    if (index == -1) {
      return NO;
    }
    [self removeWithInt:index];
    return YES;
  }
}

- (BOOL)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @synchronized (this$0_) {
    [((JavaUtilConcurrentCopyOnWriteArrayList_Slice *) nil_chk(slice_)) checkConcurrentModificationWithNSObjectArray:this$0_->elements_];
    int removed = [this$0_ removeOrRetainWithJavaUtilCollection:collection withBoolean:NO withInt:slice_->from_ withInt:slice_->to_];
    JavaUtilConcurrentCopyOnWriteArrayList_CowSubList_set_slice_(self, [[[JavaUtilConcurrentCopyOnWriteArrayList_Slice alloc] initWithNSObjectArray:this$0_->elements_ withInt:slice_->from_ withInt:slice_->to_ - removed] autorelease]);
    return removed != 0;
  }
}

- (BOOL)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @synchronized (this$0_) {
    [((JavaUtilConcurrentCopyOnWriteArrayList_Slice *) nil_chk(slice_)) checkConcurrentModificationWithNSObjectArray:this$0_->elements_];
    int removed = [this$0_ removeOrRetainWithJavaUtilCollection:collection withBoolean:YES withInt:slice_->from_ withInt:slice_->to_];
    JavaUtilConcurrentCopyOnWriteArrayList_CowSubList_set_slice_(self, [[[JavaUtilConcurrentCopyOnWriteArrayList_Slice alloc] initWithNSObjectArray:this$0_->elements_ withInt:slice_->from_ withInt:slice_->to_ - removed] autorelease]);
    return removed != 0;
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilConcurrentCopyOnWriteArrayList_CowSubList_set_slice_(self, nil);
  JavaUtilConcurrentCopyOnWriteArrayList_CowSubList_set_this$0_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilConcurrentCopyOnWriteArrayList_CowSubList *)other {
  [super copyAllFieldsTo:other];
  JavaUtilConcurrentCopyOnWriteArrayList_CowSubList_set_slice_(other, slice_);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:this$0_ name:@"this$0"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:slice_ name:@"slice"]];
  return result;
}

@end
@implementation JavaUtilConcurrentCopyOnWriteArrayList_Slice

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithNSObjectArray:(IOSObjectArray *)expectedElements
                    withInt:(int)from
                    withInt:(int)to {
  if (self = [super init]) {
    JavaUtilConcurrentCopyOnWriteArrayList_Slice_set_expectedElements_(self, expectedElements);
    self->from_ = from;
    self->to_ = to;
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)checkElementIndexWithInt:(int)index {
  if (index < 0 || index >= to_ - from_) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"index=%d, size=%d", index, (to_ - from_)]] autorelease];
  }
}

- (void)checkPositionIndexWithInt:(int)index {
  if (index < 0 || index > to_ - from_) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"index=%d, size=%d", index, (to_ - from_)]] autorelease];
  }
}

- (void)checkConcurrentModificationWithNSObjectArray:(IOSObjectArray *)snapshot {
  if (expectedElements_ != snapshot) {
    @throw [[[JavaUtilConcurrentModificationException alloc] init] autorelease];
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilConcurrentCopyOnWriteArrayList_Slice_set_expectedElements_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilConcurrentCopyOnWriteArrayList_Slice *)other {
  [super copyAllFieldsTo:other];
  JavaUtilConcurrentCopyOnWriteArrayList_Slice_set_expectedElements_(other, expectedElements_);
  other->from_ = from_;
  other->to_ = to_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:expectedElements_ name:@"expectedElements"]];
  return result;
}

@end
@implementation JavaUtilConcurrentCopyOnWriteArrayList_CowIterator

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithNSObjectArray:(IOSObjectArray *)snapshot
                    withInt:(int)from
                    withInt:(int)to {
  if (self = [super init]) {
    index_ = 0;
    JavaUtilConcurrentCopyOnWriteArrayList_CowIterator_set_snapshot_(self, snapshot);
    self->from_ = from;
    self->to_ = to;
    self->index_ = from;
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)addWithId:(id)object {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (BOOL)hasNext {
  return index_ < to_;
}

- (BOOL)hasPrevious {
  return index_ > from_;
}

- (id)next {
  if (index_ < to_) {
    return (id) IOSObjectArray_Get(nil_chk(snapshot_), index_++);
  }
  else {
    @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
  }
}

- (int)nextIndex {
  return index_;
}

- (id)previous {
  if (index_ > from_) {
    return (id) IOSObjectArray_Get(nil_chk(snapshot_), --index_);
  }
  else {
    @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
  }
}

- (int)previousIndex {
  return index_ - 1;
}

- (void)remove {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (void)setWithId:(id)object {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilConcurrentCopyOnWriteArrayList_CowIterator_set_snapshot_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilConcurrentCopyOnWriteArrayList_CowIterator *)other {
  [super copyAllFieldsTo:other];
  other->from_ = from_;
  other->index_ = index_;
  JavaUtilConcurrentCopyOnWriteArrayList_CowIterator_set_snapshot_(other, snapshot_);
  other->to_ = to_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:snapshot_ name:@"snapshot"]];
  return result;
}

@end
