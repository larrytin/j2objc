//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/Calendar.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSBooleanArray.h"
#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Boolean.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/text/DateFormatSymbols.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/GregorianCalendar.h"
#include "java/util/HashMap.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/TimeZone.h"
#include "libcore/icu/ICU.h"
#include "libcore/icu/LocaleData.h"

@implementation JavaUtilCalendar

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilCalendar_FIELD_NAMES_ name:@"JavaUtilCalendar_FIELD_NAMES_"]];
  return result;
}

static IOSObjectArray * JavaUtilCalendar_FIELD_NAMES_;

+ (int)JANUARY {
  return JavaUtilCalendar_JANUARY;
}

+ (int)FEBRUARY {
  return JavaUtilCalendar_FEBRUARY;
}

+ (int)MARCH {
  return JavaUtilCalendar_MARCH;
}

+ (int)APRIL {
  return JavaUtilCalendar_APRIL;
}

+ (int)MAY {
  return JavaUtilCalendar_MAY;
}

+ (int)JUNE {
  return JavaUtilCalendar_JUNE;
}

+ (int)JULY {
  return JavaUtilCalendar_JULY;
}

+ (int)AUGUST {
  return JavaUtilCalendar_AUGUST;
}

+ (int)SEPTEMBER {
  return JavaUtilCalendar_SEPTEMBER;
}

+ (int)OCTOBER {
  return JavaUtilCalendar_OCTOBER;
}

+ (int)NOVEMBER {
  return JavaUtilCalendar_NOVEMBER;
}

+ (int)DECEMBER {
  return JavaUtilCalendar_DECEMBER;
}

+ (int)UNDECIMBER {
  return JavaUtilCalendar_UNDECIMBER;
}

+ (int)SUNDAY {
  return JavaUtilCalendar_SUNDAY;
}

+ (int)MONDAY {
  return JavaUtilCalendar_MONDAY;
}

+ (int)TUESDAY {
  return JavaUtilCalendar_TUESDAY;
}

+ (int)WEDNESDAY {
  return JavaUtilCalendar_WEDNESDAY;
}

+ (int)THURSDAY {
  return JavaUtilCalendar_THURSDAY;
}

+ (int)FRIDAY {
  return JavaUtilCalendar_FRIDAY;
}

+ (int)SATURDAY {
  return JavaUtilCalendar_SATURDAY;
}

+ (int)ERA {
  return JavaUtilCalendar_ERA;
}

+ (int)YEAR {
  return JavaUtilCalendar_YEAR;
}

+ (int)MONTH {
  return JavaUtilCalendar_MONTH;
}

+ (int)WEEK_OF_YEAR {
  return JavaUtilCalendar_WEEK_OF_YEAR;
}

+ (int)WEEK_OF_MONTH {
  return JavaUtilCalendar_WEEK_OF_MONTH;
}

+ (int)DATE {
  return JavaUtilCalendar_DATE;
}

+ (int)DAY_OF_MONTH {
  return JavaUtilCalendar_DAY_OF_MONTH;
}

+ (int)DAY_OF_YEAR {
  return JavaUtilCalendar_DAY_OF_YEAR;
}

+ (int)DAY_OF_WEEK {
  return JavaUtilCalendar_DAY_OF_WEEK;
}

+ (int)DAY_OF_WEEK_IN_MONTH {
  return JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH;
}

+ (int)AM_PM {
  return JavaUtilCalendar_AM_PM;
}

+ (int)HOUR {
  return JavaUtilCalendar_HOUR;
}

+ (int)HOUR_OF_DAY {
  return JavaUtilCalendar_HOUR_OF_DAY;
}

+ (int)MINUTE {
  return JavaUtilCalendar_MINUTE;
}

+ (int)SECOND {
  return JavaUtilCalendar_SECOND;
}

+ (int)MILLISECOND {
  return JavaUtilCalendar_MILLISECOND;
}

+ (int)ZONE_OFFSET {
  return JavaUtilCalendar_ZONE_OFFSET;
}

+ (int)DST_OFFSET {
  return JavaUtilCalendar_DST_OFFSET;
}

+ (int)FIELD_COUNT {
  return JavaUtilCalendar_FIELD_COUNT;
}

+ (int)AM {
  return JavaUtilCalendar_AM;
}

+ (int)PM {
  return JavaUtilCalendar_PM;
}

+ (int)ALL_STYLES {
  return JavaUtilCalendar_ALL_STYLES;
}

+ (int)SHORT {
  return JavaUtilCalendar_SHORT;
}

+ (int)LONG {
  return JavaUtilCalendar_LONG;
}

+ (IOSObjectArray *)FIELD_NAMES {
  return JavaUtilCalendar_FIELD_NAMES_;
}

- (id)init {
  return JreMemDebugAdd([self initJavaUtilCalendarWithJavaUtilTimeZone:[JavaUtilTimeZone getDefault] withJavaUtilLocale:[JavaUtilLocale getDefault]]);
}

- (id)initJavaUtilCalendarWithJavaUtilTimeZone:(JavaUtilTimeZone *)timezone {
  if (self = [super init]) {
    JavaUtilCalendar_set_fields_(self, [IOSIntArray arrayWithLength:JavaUtilCalendar_FIELD_COUNT]);
    JavaUtilCalendar_set_isSet__(self, [IOSBooleanArray arrayWithLength:JavaUtilCalendar_FIELD_COUNT]);
    areFieldsSet_ = isTimeSet_ = NO;
    [self setLenientWithBoolean:YES];
    [self setTimeZoneWithJavaUtilTimeZone:timezone];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaUtilTimeZone:(JavaUtilTimeZone *)timezone {
  return [self initJavaUtilCalendarWithJavaUtilTimeZone:timezone];
}

- (id)initJavaUtilCalendarWithJavaUtilTimeZone:(JavaUtilTimeZone *)timezone
                            withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (self = [self initJavaUtilCalendarWithJavaUtilTimeZone:timezone]) {
    LibcoreIcuLocaleData *localeData = [LibcoreIcuLocaleData getWithJavaUtilLocale:locale];
    [self setFirstDayOfWeekWithInt:[((JavaLangInteger *) nil_chk(((LibcoreIcuLocaleData *) nil_chk(localeData))->firstDayOfWeek_)) intValue]];
    [self setMinimalDaysInFirstWeekWithInt:[((JavaLangInteger *) nil_chk(localeData->minimalDaysInFirstWeek_)) intValue]];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaUtilTimeZone:(JavaUtilTimeZone *)timezone
            withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [self initJavaUtilCalendarWithJavaUtilTimeZone:timezone withJavaUtilLocale:locale];
}

- (void)addWithInt:(int)field
           withInt:(int)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (BOOL)afterWithId:(id)calendar {
  if (!([calendar isKindOfClass:[JavaUtilCalendar class]])) {
    return NO;
  }
  return [self getTimeInMillis] > [((JavaUtilCalendar *) nil_chk(calendar)) getTimeInMillis];
}

- (BOOL)beforeWithId:(id)calendar {
  if (!([calendar isKindOfClass:[JavaUtilCalendar class]])) {
    return NO;
  }
  return [self getTimeInMillis] < [((JavaUtilCalendar *) nil_chk(calendar)) getTimeInMillis];
}

- (void)clear {
  for (int i = 0; i < JavaUtilCalendar_FIELD_COUNT; i++) {
    (*IOSIntArray_GetRef(nil_chk(fields_), i)) = 0;
    (*IOSBooleanArray_GetRef(nil_chk(isSet__), i)) = NO;
  }
  areFieldsSet_ = isTimeSet_ = NO;
}

- (void)clearWithInt:(int)field {
  (*IOSIntArray_GetRef(nil_chk(fields_), field)) = 0;
  (*IOSBooleanArray_GetRef(nil_chk(isSet__), field)) = NO;
  areFieldsSet_ = isTimeSet_ = NO;
}

- (id)clone {
  @try {
    JavaUtilCalendar *clone = (JavaUtilCalendar *) check_class_cast([super clone], [JavaUtilCalendar class]);
    JavaUtilCalendar_set_fields_(nil_chk(clone), [((IOSIntArray *) nil_chk(fields_)) clone]);
    JavaUtilCalendar_set_isSet__(clone, [((IOSBooleanArray *) nil_chk(isSet__)) clone]);
    JavaUtilCalendar_set_zone_(clone, (JavaUtilTimeZone *) check_class_cast([((JavaUtilTimeZone *) nil_chk(zone_)) clone], [JavaUtilTimeZone class]));
    return clone;
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw [[[JavaLangAssertionError alloc] initWithId:e] autorelease];
  }
}

- (void)complete {
  if (!isTimeSet_) {
    [self computeTime];
    isTimeSet_ = YES;
  }
  if (!areFieldsSet_) {
    [self computeFields];
    areFieldsSet_ = YES;
  }
}

- (void)computeFields {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)computeTime {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (BOOL)isEqual:(id)object {
  if (self == object) {
    return YES;
  }
  if (!([object isKindOfClass:[JavaUtilCalendar class]])) {
    return NO;
  }
  JavaUtilCalendar *cal = (JavaUtilCalendar *) check_class_cast(object, [JavaUtilCalendar class]);
  return [self getTimeInMillis] == [((JavaUtilCalendar *) nil_chk(cal)) getTimeInMillis] && [self isLenient] == [cal isLenient] && [self getFirstDayOfWeek] == [cal getFirstDayOfWeek] && [self getMinimalDaysInFirstWeek] == [cal getMinimalDaysInFirstWeek] && [((JavaUtilTimeZone *) nil_chk([self getTimeZone])) isEqual:[cal getTimeZone]];
}

- (int)getWithInt:(int)field {
  [self complete];
  return IOSIntArray_Get(nil_chk(fields_), field);
}

- (int)getActualMaximumWithInt:(int)field {
  int value, next;
  if ([self getMaximumWithInt:field] == (next = [self getLeastMaximumWithInt:field])) {
    return next;
  }
  [self complete];
  long long int orgTime = time_;
  [self setWithInt:field withInt:next];
  do {
    value = next;
    [self rollWithInt:field withBoolean:YES];
    next = [self getWithInt:field];
  }
  while (next > value);
  time_ = orgTime;
  areFieldsSet_ = NO;
  return value;
}

- (int)getActualMinimumWithInt:(int)field {
  int value, next;
  if ([self getMinimumWithInt:field] == (next = [self getGreatestMinimumWithInt:field])) {
    return next;
  }
  [self complete];
  long long int orgTime = time_;
  [self setWithInt:field withInt:next];
  do {
    value = next;
    [self rollWithInt:field withBoolean:NO];
    next = [self getWithInt:field];
  }
  while (next < value);
  time_ = orgTime;
  areFieldsSet_ = NO;
  return value;
}

+ (IOSObjectArray *)getAvailableLocales {
  @synchronized([self class]) {
    {
      return [LibcoreIcuICU getAvailableCalendarLocales];
    }
  }
}

- (int)getFirstDayOfWeek {
  return firstDayOfWeek_;
}

- (int)getGreatestMinimumWithInt:(int)field {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (JavaUtilCalendar *)getInstance {
  @synchronized([self class]) {
    {
      return [[[JavaUtilGregorianCalendar alloc] init] autorelease];
    }
  }
}

+ (JavaUtilCalendar *)getInstanceWithJavaUtilLocale:(JavaUtilLocale *)locale {
  @synchronized([self class]) {
    {
      return [[[JavaUtilGregorianCalendar alloc] initWithJavaUtilLocale:locale] autorelease];
    }
  }
}

+ (JavaUtilCalendar *)getInstanceWithJavaUtilTimeZone:(JavaUtilTimeZone *)timezone {
  @synchronized([self class]) {
    {
      return [[[JavaUtilGregorianCalendar alloc] initWithJavaUtilTimeZone:timezone] autorelease];
    }
  }
}

+ (JavaUtilCalendar *)getInstanceWithJavaUtilTimeZone:(JavaUtilTimeZone *)timezone
                                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  @synchronized([self class]) {
    {
      return [[[JavaUtilGregorianCalendar alloc] initWithJavaUtilTimeZone:timezone withJavaUtilLocale:locale] autorelease];
    }
  }
}

- (int)getLeastMaximumWithInt:(int)field {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)getMaximumWithInt:(int)field {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)getMinimalDaysInFirstWeek {
  return minimalDaysInFirstWeek_;
}

- (int)getMinimumWithInt:(int)field {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaUtilDate *)getTime {
  return [[[JavaUtilDate alloc] initWithLong:[self getTimeInMillis]] autorelease];
}

- (long long int)getTimeInMillis {
  if (!isTimeSet_) {
    [self computeTime];
    isTimeSet_ = YES;
  }
  return time_;
}

- (JavaUtilTimeZone *)getTimeZone {
  return zone_;
}

- (NSUInteger)hash {
  return ([self isLenient] ? 1237 : 1231) + [self getFirstDayOfWeek] + [self getMinimalDaysInFirstWeek] + [((JavaUtilTimeZone *) nil_chk([self getTimeZone])) hash];
}

- (int)internalGetWithInt:(int)field {
  return IOSIntArray_Get(nil_chk(fields_), field);
}

- (BOOL)isLenient {
  return lenient_;
}

- (BOOL)isSetWithInt:(int)field {
  return IOSBooleanArray_Get(nil_chk(isSet__), field);
}

- (void)rollWithInt:(int)field
            withInt:(int)value {
  BOOL increment = value >= 0;
  int count = increment ? value : -value;
  for (int i = 0; i < count; i++) {
    [self rollWithInt:field withBoolean:increment];
  }
}

- (void)rollWithInt:(int)field
        withBoolean:(BOOL)increment {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setWithInt:(int)field
           withInt:(int)value {
  (*IOSIntArray_GetRef(nil_chk(fields_), field)) = value;
  (*IOSBooleanArray_GetRef(nil_chk(isSet__), field)) = YES;
  areFieldsSet_ = isTimeSet_ = NO;
  if (field > JavaUtilCalendar_MONTH && field < JavaUtilCalendar_AM_PM) {
    lastDateFieldSet_ = field;
  }
  if (field == JavaUtilCalendar_HOUR || field == JavaUtilCalendar_HOUR_OF_DAY) {
    lastTimeFieldSet_ = field;
  }
  if (field == JavaUtilCalendar_AM_PM) {
    lastTimeFieldSet_ = JavaUtilCalendar_HOUR;
  }
}

- (void)setWithInt:(int)year
           withInt:(int)month
           withInt:(int)day {
  [self setWithInt:JavaUtilCalendar_YEAR withInt:year];
  [self setWithInt:JavaUtilCalendar_MONTH withInt:month];
  [self setWithInt:JavaUtilCalendar_DATE withInt:day];
}

- (void)setWithInt:(int)year
           withInt:(int)month
           withInt:(int)day
           withInt:(int)hourOfDay
           withInt:(int)minute {
  [self setWithInt:year withInt:month withInt:day];
  [self setWithInt:JavaUtilCalendar_HOUR_OF_DAY withInt:hourOfDay];
  [self setWithInt:JavaUtilCalendar_MINUTE withInt:minute];
}

- (void)setWithInt:(int)year
           withInt:(int)month
           withInt:(int)day
           withInt:(int)hourOfDay
           withInt:(int)minute
           withInt:(int)second {
  [self setWithInt:year withInt:month withInt:day withInt:hourOfDay withInt:minute];
  [self setWithInt:JavaUtilCalendar_SECOND withInt:second];
}

- (void)setFirstDayOfWeekWithInt:(int)value {
  firstDayOfWeek_ = value;
}

- (void)setLenientWithBoolean:(BOOL)value {
  lenient_ = value;
}

- (void)setMinimalDaysInFirstWeekWithInt:(int)value {
  minimalDaysInFirstWeek_ = value;
}

- (void)setTimeWithJavaUtilDate:(JavaUtilDate *)date {
  [self setTimeInMillisWithLong:[((JavaUtilDate *) nil_chk(date)) getTime]];
}

- (void)setTimeInMillisWithLong:(long long int)milliseconds {
  if (!isTimeSet_ || !areFieldsSet_ || time_ != milliseconds) {
    time_ = milliseconds;
    isTimeSet_ = YES;
    areFieldsSet_ = NO;
    [self complete];
  }
}

- (void)setTimeZoneWithJavaUtilTimeZone:(JavaUtilTimeZone *)timezone {
  JavaUtilCalendar_set_zone_(self, timezone);
  areFieldsSet_ = NO;
}

- (NSString *)description {
  JavaLangStringBuilder *result = [[[JavaLangStringBuilder alloc] initWithNSString:[NSString stringWithFormat:@"%@[time=%@,areFieldsSet=%@,lenient=%@,zone=%@,firstDayOfWeek=%d,minimalDaysInFirstWeek=%d", [[self getClass] getName], (isTimeSet_ ? [NSString valueOfLong:time_] : @"?"), [JavaLangBoolean toStringWithBoolean:areFieldsSet_], [JavaLangBoolean toStringWithBoolean:lenient_], [((JavaUtilTimeZone *) nil_chk(zone_)) getID], firstDayOfWeek_, minimalDaysInFirstWeek_]] autorelease];
  for (int i = 0; i < JavaUtilCalendar_FIELD_COUNT; i++) {
    [result appendWithChar:','];
    [result appendWithNSString:IOSObjectArray_Get(nil_chk(JavaUtilCalendar_FIELD_NAMES_), i)];
    [result appendWithChar:'='];
    if (IOSBooleanArray_Get(nil_chk(isSet__), i)) {
      [result appendWithInt:IOSIntArray_Get(nil_chk(fields_), i)];
    }
    else {
      [result appendWithChar:'?'];
    }
  }
  [result appendWithChar:']'];
  return [result description];
}

- (int)compareToWithId:(JavaUtilCalendar *)anotherCalendar {
  if (anotherCalendar != nil && ![anotherCalendar isKindOfClass:[JavaUtilCalendar class]]) {
    @throw [[[JavaLangClassCastException alloc] init] autorelease];
  }
  if (anotherCalendar == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"anotherCalendar == null"] autorelease];
  }
  long long int timeInMillis = [self getTimeInMillis];
  long long int anotherTimeInMillis = [((JavaUtilCalendar *) nil_chk(anotherCalendar)) getTimeInMillis];
  if (timeInMillis > anotherTimeInMillis) {
    return 1;
  }
  if (timeInMillis == anotherTimeInMillis) {
    return 0;
  }
  return -1;
}

- (NSString *)getDisplayNameWithInt:(int)field
                            withInt:(int)style
                 withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (style == JavaUtilCalendar_ALL_STYLES) {
    style = JavaUtilCalendar_SHORT;
  }
  IOSObjectArray *array = [self getDisplayNameArrayWithInt:field withInt:style withJavaUtilLocale:locale];
  int value = [self getWithInt:field];
  return (array != nil) ? IOSObjectArray_Get(array, value) : nil;
}

- (IOSObjectArray *)getDisplayNameArrayWithInt:(int)field
                                       withInt:(int)style
                            withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (field < 0 || field >= JavaUtilCalendar_FIELD_COUNT) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"bad field %d", field]] autorelease];
  }
  [JavaUtilCalendar checkStyleWithInt:style];
  JavaTextDateFormatSymbols *dfs = [JavaTextDateFormatSymbols getInstanceWithJavaUtilLocale:locale];
  switch (field) {
    case JavaUtilCalendar_AM_PM:
    return [((JavaTextDateFormatSymbols *) nil_chk(dfs)) getAmPmStrings];
    case JavaUtilCalendar_DAY_OF_WEEK:
    return (style == JavaUtilCalendar_LONG) ? [((JavaTextDateFormatSymbols *) nil_chk(dfs)) getWeekdays] : [((JavaTextDateFormatSymbols *) nil_chk(dfs)) getShortWeekdays];
    case JavaUtilCalendar_ERA:
    return [((JavaTextDateFormatSymbols *) nil_chk(dfs)) getEras];
    case JavaUtilCalendar_MONTH:
    return (style == JavaUtilCalendar_LONG) ? [((JavaTextDateFormatSymbols *) nil_chk(dfs)) getMonths] : [((JavaTextDateFormatSymbols *) nil_chk(dfs)) getShortMonths];
  }
  return nil;
}

+ (void)checkStyleWithInt:(int)style {
  if (style != JavaUtilCalendar_ALL_STYLES && style != JavaUtilCalendar_SHORT && style != JavaUtilCalendar_LONG) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"bad style %d", style]] autorelease];
  }
}

- (id<JavaUtilMap>)getDisplayNamesWithInt:(int)field
                                  withInt:(int)style
                       withJavaUtilLocale:(JavaUtilLocale *)locale {
  [JavaUtilCalendar checkStyleWithInt:style];
  [self complete];
  id<JavaUtilMap> result = [[[JavaUtilHashMap alloc] init] autorelease];
  if (style == JavaUtilCalendar_SHORT || style == JavaUtilCalendar_ALL_STYLES) {
    [JavaUtilCalendar insertValuesInMapWithJavaUtilMap:result withNSStringArray:[self getDisplayNameArrayWithInt:field withInt:JavaUtilCalendar_SHORT withJavaUtilLocale:locale]];
  }
  if (style == JavaUtilCalendar_LONG || style == JavaUtilCalendar_ALL_STYLES) {
    [JavaUtilCalendar insertValuesInMapWithJavaUtilMap:result withNSStringArray:[self getDisplayNameArrayWithInt:field withInt:JavaUtilCalendar_LONG withJavaUtilLocale:locale]];
  }
  return [result isEmpty] ? nil : result;
}

+ (void)insertValuesInMapWithJavaUtilMap:(id<JavaUtilMap>)map
                       withNSStringArray:(IOSObjectArray *)values {
  if (values == nil) {
    return;
  }
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(values)) count]; ++i) {
    if (IOSObjectArray_Get(values, i) != nil && ![((NSString *) nil_chk(IOSObjectArray_Get(values, i))) isEmpty]) {
      [((id<JavaUtilMap>) nil_chk(map)) putWithId:IOSObjectArray_Get(values, i) withId:[JavaLangInteger valueOfWithInt:i]];
    }
  }
}

+ (void)initialize {
  if (self == [JavaUtilCalendar class]) {
    JreOperatorRetainedAssign(&JavaUtilCalendar_FIELD_NAMES_, nil, [IOSObjectArray arrayWithObjects:(id[]){ @"ERA", @"YEAR", @"MONTH", @"WEEK_OF_YEAR", @"WEEK_OF_MONTH", @"DAY_OF_MONTH", @"DAY_OF_YEAR", @"DAY_OF_WEEK", @"DAY_OF_WEEK_IN_MONTH", @"AM_PM", @"HOUR", @"HOUR_OF_DAY", @"MINUTE", @"SECOND", @"MILLISECOND", @"ZONE_OFFSET", @"DST_OFFSET" } count:17 type:[IOSClass classWithClass:[NSString class]]]);
  }
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilCalendar_set_zone_(self, nil);
  JavaUtilCalendar_set_isSet__(self, nil);
  JavaUtilCalendar_set_fields_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilCalendar *)other {
  [super copyAllFieldsTo:other];
  other->areFieldsSet_ = areFieldsSet_;
  JavaUtilCalendar_set_fields_(other, fields_);
  other->firstDayOfWeek_ = firstDayOfWeek_;
  JavaUtilCalendar_set_isSet__(other, isSet__);
  other->isTimeSet_ = isTimeSet_;
  other->lastDateFieldSet_ = lastDateFieldSet_;
  other->lastTimeFieldSet_ = lastTimeFieldSet_;
  other->lenient_ = lenient_;
  other->minimalDaysInFirstWeek_ = minimalDaysInFirstWeek_;
  other->time_ = time_;
  JavaUtilCalendar_set_zone_(other, zone_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:fields_ name:@"fields"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:isSet__ name:@"isSet_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:zone_ name:@"zone"]];
  return result;
}

@end
