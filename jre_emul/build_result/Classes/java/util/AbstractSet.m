//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/luni/src/main/java/java/util/AbstractSet.java
//
//  Created by retechretech on 13-9-25.
//

#include "java/lang/ClassCastException.h"
#include "java/lang/NullPointerException.h"
#include "java/util/AbstractCollection.h"
#include "java/util/AbstractSet.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/Set.h"

@implementation JavaUtilAbstractSet

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

- (BOOL)isEqual:(id)object {
  if (self == object) {
    return YES;
  }
  if ([object conformsToProtocol: @protocol(JavaUtilSet)]) {
    id<JavaUtilSet> s = (id<JavaUtilSet>) check_protocol_cast(object, @protocol(JavaUtilSet));
    @try {
      return [self size] == [((id<JavaUtilSet>) nil_chk(s)) size] && [self containsAllWithJavaUtilCollection:s];
    }
    @catch (JavaLangNullPointerException *ignored) {
      return NO;
    }
    @catch (JavaLangClassCastException *ignored) {
      return NO;
    }
  }
  return NO;
}

- (NSUInteger)hash {
  int result = 0;
  id<JavaUtilIterator> it = [self iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    id next = [it next];
    result += next == nil ? 0 : [next hash];
  }
  return result;
}

- (BOOL)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  BOOL result = NO;
  if ([self size] <= [((id<JavaUtilCollection>) nil_chk(collection)) size]) {
    id<JavaUtilIterator> it = [self iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      if ([collection containsWithId:[it next]]) {
        [it remove];
        result = YES;
      }
    }
  }
  else {
    id<JavaUtilIterator> it = [collection iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      result = [self removeWithId:[it next]] || result;
    }
  }
  return result;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

@end
