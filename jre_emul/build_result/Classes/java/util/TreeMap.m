//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/luni/src/main/java/java/util/TreeMap.java
//
//  Created by retechretech on 13-9-4.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/Comparable.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/System.h"
#include "java/util/AbstractMap.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/util/ConcurrentModificationException.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/Set.h"
#include "java/util/SortedMap.h"
#include "java/util/TreeMap.h"

@implementation JavaUtilTreeMap

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

+ (id<JavaLangComparable>)toComparableWithId:(id)obj {
  if (obj == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  return (id<JavaLangComparable>) obj;
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

- (id)initJavaUtilTreeMapWithJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  if ((self = [super init])) {
    JavaUtilTreeMap_set_comparator__(self, comparator);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  return [self initJavaUtilTreeMapWithJavaUtilComparator:comparator];
}

- (id)initWithJavaUtilMap:(id<JavaUtilMap>)map {
  if ((self = [super init])) {
    [self putAllWithJavaUtilMap:map];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)map {
  if ((self = [self initJavaUtilTreeMapWithJavaUtilComparator:[((id<JavaUtilSortedMap>) nil_chk(map)) comparator]])) {
    JavaUtilTreeMap_Node *lastNode = nil;
    id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([map entrySet])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      id<JavaUtilMap_Entry> entry = [it next];
      lastNode = [self addToLastWithJavaUtilTreeMap_Node:lastNode withId:[((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey] withId:[entry getValue]];
    }
    JreMemDebugAdd(self);
  }
  return self;
}

- (JavaUtilTreeMap_Node *)addToLastWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)last
                                                     withId:(id)key
                                                     withId:(id)value {
  if (last == nil) {
    JavaUtilTreeMap_set_root_(self, last = [self createNodeWithId:key withId:value]);
    size__ = 1;
  }
  else if (last->size_ == JavaUtilTreeMap_Node_NODE_SIZE) {
    JavaUtilTreeMap_Node *newNode = [self createNodeWithId:key withId:value];
    [self attachToRightWithJavaUtilTreeMap_Node:last withJavaUtilTreeMap_Node:newNode];
    [self balanceWithJavaUtilTreeMap_Node:newNode];
    size__++;
    last = newNode;
  }
  else {
    [self appendFromRightWithJavaUtilTreeMap_Node:last withId:key withId:value];
    size__++;
  }
  return last;
}

- (void)clear {
  JavaUtilTreeMap_set_root_(self, nil);
  size__ = 0;
  modCount_++;
}

- (id)clone {
  @try {
    JavaUtilTreeMap *clone = (JavaUtilTreeMap *) [super clone];
    JavaUtilTreeMap_set_entrySet__(nil_chk(clone), nil);
    if (root_ != nil) {
      JavaUtilTreeMap_set_root_(clone, [root_ cloneWithJavaUtilTreeMap_Node:nil]);
      JavaUtilTreeMap_Node *node = [JavaUtilTreeMap minimumWithJavaUtilTreeMap_Node:clone->root_];
      while (YES) {
        JavaUtilTreeMap_Node *nxt = [JavaUtilTreeMap successorWithJavaUtilTreeMap_Node:node];
        if (nxt == nil) {
          break;
        }
        ((JavaUtilTreeMap_Node *) nil_chk(nxt))->prev_ = node;
        ((JavaUtilTreeMap_Node *) nil_chk(node))->next_ = nxt;
        node = nxt;
      }
    }
    return clone;
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    return nil;
  }
}

+ (JavaUtilTreeMap_Node *)successorWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)x {
  if (((JavaUtilTreeMap_Node *) nil_chk(x))->right_ != nil) {
    return [JavaUtilTreeMap minimumWithJavaUtilTreeMap_Node:x->right_];
  }
  JavaUtilTreeMap_Node *y = x->parent_;
  while (y != nil && x == y->right_) {
    x = y;
    y = ((JavaUtilTreeMap_Node *) nil_chk(y))->parent_;
  }
  return y;
}

- (id<JavaUtilComparator>)comparator {
  return comparator__;
}

- (BOOL)containsKeyWithId:(id)key {
  id<JavaLangComparable> object = comparator__ == nil ? [JavaUtilTreeMap toComparableWithId:(id) key] : nil;
  id keyK = (id) key;
  JavaUtilTreeMap_Node *node = root_;
  while (node != nil) {
    IOSObjectArray *keys = ((JavaUtilTreeMap_Node *) nil_chk(node))->keys_;
    int left_idx = node->left_idx_;
    int result = [self cmpWithJavaLangComparable:object withId:keyK withId:[((IOSObjectArray *) nil_chk(keys)) objectAtIndex:left_idx]];
    if (result < 0) {
      node = node->left_;
    }
    else if (result == 0) {
      return YES;
    }
    else {
      int right_idx = node->right_idx_;
      if (left_idx != right_idx) {
        result = [self cmpWithJavaLangComparable:object withId:keyK withId:[keys objectAtIndex:right_idx]];
      }
      if (result > 0) {
        node = node->right_;
      }
      else if (result == 0) {
        return YES;
      }
      else {
        int low = left_idx + 1, mid = 0, high = right_idx - 1;
        while (low <= high) {
          mid = (int) (((unsigned int) (low + high)) >> 1);
          result = [self cmpWithJavaLangComparable:object withId:keyK withId:[keys objectAtIndex:mid]];
          if (result > 0) {
            low = mid + 1;
          }
          else if (result == 0) {
            return YES;
          }
          else {
            high = mid - 1;
          }
        }
        return NO;
      }
    }
  }
  return NO;
}

- (BOOL)containsValueWithId:(id)value {
  if (root_ == nil) {
    return NO;
  }
  JavaUtilTreeMap_Node *node = [JavaUtilTreeMap minimumWithJavaUtilTreeMap_Node:root_];
  if (value != nil) {
    while (node != nil) {
      int to = ((JavaUtilTreeMap_Node *) nil_chk(node))->right_idx_;
      IOSObjectArray *values = node->values_;
      for (int i = node->left_idx_; i <= to; i++) {
        if ([value isEqual:[((IOSObjectArray *) nil_chk(values)) objectAtIndex:i]]) {
          return YES;
        }
      }
      node = node->next_;
    }
  }
  else {
    while (node != nil) {
      int to = ((JavaUtilTreeMap_Node *) nil_chk(node))->right_idx_;
      IOSObjectArray *values = node->values_;
      for (int i = node->left_idx_; i <= to; i++) {
        if ([((IOSObjectArray *) nil_chk(values)) objectAtIndex:i] == nil) {
          return YES;
        }
      }
      node = node->next_;
    }
  }
  return NO;
}

- (id<JavaUtilSet>)entrySet {
  if (entrySet__ == nil) {
    JavaUtilTreeMap_set_entrySet__(self, [[[JavaUtilTreeMap_EntrySet alloc] initWithJavaUtilTreeMap:self] autorelease]);
  }
  return entrySet__;
}

- (id)firstKey {
  if (root_ != nil) {
    JavaUtilTreeMap_Node *node = [JavaUtilTreeMap minimumWithJavaUtilTreeMap_Node:root_];
    return [((IOSObjectArray *) nil_chk(((JavaUtilTreeMap_Node *) nil_chk(node))->keys_)) objectAtIndex:node->left_idx_];
  }
  @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
}

- (id)getWithId:(id)key {
  id<JavaLangComparable> object = comparator__ == nil ? [JavaUtilTreeMap toComparableWithId:(id) key] : nil;
  id keyK = (id) key;
  JavaUtilTreeMap_Node *node = root_;
  while (node != nil) {
    IOSObjectArray *keys = ((JavaUtilTreeMap_Node *) nil_chk(node))->keys_;
    int left_idx = node->left_idx_;
    int result = [self cmpWithJavaLangComparable:object withId:keyK withId:[((IOSObjectArray *) nil_chk(keys)) objectAtIndex:left_idx]];
    if (result < 0) {
      node = node->left_;
    }
    else if (result == 0) {
      return [((IOSObjectArray *) nil_chk(node->values_)) objectAtIndex:left_idx];
    }
    else {
      int right_idx = node->right_idx_;
      if (left_idx != right_idx) {
        result = [self cmpWithJavaLangComparable:object withId:keyK withId:[keys objectAtIndex:right_idx]];
      }
      if (result > 0) {
        node = node->right_;
      }
      else if (result == 0) {
        return [((IOSObjectArray *) nil_chk(node->values_)) objectAtIndex:right_idx];
      }
      else {
        int low = left_idx + 1, mid = 0, high = right_idx - 1;
        while (low <= high) {
          mid = (int) (((unsigned int) (low + high)) >> 1);
          result = [self cmpWithJavaLangComparable:object withId:keyK withId:[keys objectAtIndex:mid]];
          if (result > 0) {
            low = mid + 1;
          }
          else if (result == 0) {
            return [((IOSObjectArray *) nil_chk(node->values_)) objectAtIndex:mid];
          }
          else {
            high = mid - 1;
          }
        }
        return nil;
      }
    }
  }
  return nil;
}

- (int)cmpWithJavaLangComparable:(id<JavaLangComparable>)object
                          withId:(id)key1
                          withId:(id)key2 {
  return object != nil ? [object compareToWithId:key2] : [((id<JavaUtilComparator>) nil_chk(comparator__)) compareWithId:key1 withId:key2];
}

- (id<JavaUtilSortedMap>)headMapWithId:(id)endKey {
  if (comparator__ == nil) {
    [((id<JavaLangComparable>) nil_chk([JavaUtilTreeMap toComparableWithId:endKey])) compareToWithId:endKey];
  }
  else {
    [comparator__ compareWithId:endKey withId:endKey];
  }
  return [[[JavaUtilTreeMap_SubMap alloc] initWithJavaUtilTreeMap:self withId:endKey] autorelease];
}

- (id<JavaUtilSet>)keySet {
  if (keySet__ == nil) {
    JavaUtilAbstractMap_set_keySet__(self, [[[JavaUtilTreeMap_KeySet alloc] initWithJavaUtilTreeMap:self] autorelease]);
  }
  return keySet__;
}

- (id)lastKey {
  if (root_ != nil) {
    JavaUtilTreeMap_Node *node = [JavaUtilTreeMap maximumWithJavaUtilTreeMap_Node:root_];
    return [((IOSObjectArray *) nil_chk(((JavaUtilTreeMap_Node *) nil_chk(node))->keys_)) objectAtIndex:node->right_idx_];
  }
  @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
}

+ (JavaUtilTreeMap_Node *)minimumWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)x {
  if (x == nil) {
    return nil;
  }
  while (((JavaUtilTreeMap_Node *) nil_chk(x))->left_ != nil) {
    x = x->left_;
  }
  return x;
}

+ (JavaUtilTreeMap_Node *)maximumWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)x {
  if (x == nil) {
    return nil;
  }
  while (((JavaUtilTreeMap_Node *) nil_chk(x))->right_ != nil) {
    x = x->right_;
  }
  return x;
}

- (id)putWithId:(id)key
         withId:(id)value {
  if (root_ == nil) {
    JavaUtilTreeMap_set_root_(self, [self createNodeWithId:key withId:value]);
    size__ = 1;
    modCount_++;
    return nil;
  }
  id<JavaLangComparable> object = comparator__ == nil ? [JavaUtilTreeMap toComparableWithId:(id) key] : nil;
  id keyK = (id) key;
  JavaUtilTreeMap_Node *node = root_;
  JavaUtilTreeMap_Node *prevNode = nil;
  int result = 0;
  while (node != nil) {
    prevNode = node;
    IOSObjectArray *keys = ((JavaUtilTreeMap_Node *) nil_chk(node))->keys_;
    int left_idx = node->left_idx_;
    result = [self cmpWithJavaLangComparable:object withId:keyK withId:[((IOSObjectArray *) nil_chk(keys)) objectAtIndex:left_idx]];
    if (result < 0) {
      node = node->left_;
    }
    else if (result == 0) {
      id res = [((IOSObjectArray *) nil_chk(node->values_)) objectAtIndex:left_idx];
      [node->values_ replaceObjectAtIndex:left_idx withObject:value];
      return res;
    }
    else {
      int right_idx = node->right_idx_;
      if (left_idx != right_idx) {
        result = [self cmpWithJavaLangComparable:object withId:keyK withId:[keys objectAtIndex:right_idx]];
      }
      if (result > 0) {
        node = node->right_;
      }
      else if (result == 0) {
        id res = [((IOSObjectArray *) nil_chk(node->values_)) objectAtIndex:right_idx];
        [node->values_ replaceObjectAtIndex:right_idx withObject:value];
        return res;
      }
      else {
        int low = left_idx + 1, mid = 0, high = right_idx - 1;
        while (low <= high) {
          mid = (int) (((unsigned int) (low + high)) >> 1);
          result = [self cmpWithJavaLangComparable:object withId:keyK withId:[keys objectAtIndex:mid]];
          if (result > 0) {
            low = mid + 1;
          }
          else if (result == 0) {
            id res = [((IOSObjectArray *) nil_chk(node->values_)) objectAtIndex:mid];
            [node->values_ replaceObjectAtIndex:mid withObject:value];
            return res;
          }
          else {
            high = mid - 1;
          }
        }
        result = low;
        break;
      }
    }
  }
  size__++;
  modCount_++;
  if (node == nil) {
    if (prevNode == nil) {
      JavaUtilTreeMap_set_root_(self, [self createNodeWithId:key withId:value]);
    }
    else if (prevNode->size_ < JavaUtilTreeMap_Node_NODE_SIZE) {
      if (result < 0) {
        [self appendFromLeftWithJavaUtilTreeMap_Node:prevNode withId:key withId:value];
      }
      else {
        [self appendFromRightWithJavaUtilTreeMap_Node:prevNode withId:key withId:value];
      }
    }
    else {
      JavaUtilTreeMap_Node *newNode = [self createNodeWithId:key withId:value];
      if (result < 0) {
        [self attachToLeftWithJavaUtilTreeMap_Node:prevNode withJavaUtilTreeMap_Node:newNode];
      }
      else {
        [self attachToRightWithJavaUtilTreeMap_Node:prevNode withJavaUtilTreeMap_Node:newNode];
      }
      [self balanceWithJavaUtilTreeMap_Node:newNode];
    }
  }
  else {
    if (node->size_ < JavaUtilTreeMap_Node_NODE_SIZE) {
      int left_idx = node->left_idx_;
      int right_idx = node->right_idx_;
      if (left_idx == 0 || ((right_idx != JavaUtilTreeMap_Node_NODE_SIZE - 1) && (right_idx - result <= result - left_idx))) {
        int right_idxPlus1 = right_idx + 1;
        [JavaLangSystem arraycopyWithId:node->keys_ withInt:result withId:node->keys_ withInt:result + 1 withInt:right_idxPlus1 - result];
        [JavaLangSystem arraycopyWithId:node->values_ withInt:result withId:node->values_ withInt:result + 1 withInt:right_idxPlus1 - result];
        node->right_idx_ = right_idxPlus1;
        [((IOSObjectArray *) nil_chk(node->keys_)) replaceObjectAtIndex:result withObject:key];
        [((IOSObjectArray *) nil_chk(node->values_)) replaceObjectAtIndex:result withObject:value];
      }
      else {
        int left_idxMinus1 = left_idx - 1;
        [JavaLangSystem arraycopyWithId:node->keys_ withInt:left_idx withId:node->keys_ withInt:left_idxMinus1 withInt:result - left_idx];
        [JavaLangSystem arraycopyWithId:node->values_ withInt:left_idx withId:node->values_ withInt:left_idxMinus1 withInt:result - left_idx];
        node->left_idx_ = left_idxMinus1;
        [((IOSObjectArray *) nil_chk(node->keys_)) replaceObjectAtIndex:result - 1 withObject:key];
        [((IOSObjectArray *) nil_chk(node->values_)) replaceObjectAtIndex:result - 1 withObject:value];
      }
      node->size_++;
    }
    else {
      JavaUtilTreeMap_Node *previous = node->prev_;
      JavaUtilTreeMap_Node *nextNode = node->next_;
      BOOL removeFromStart;
      BOOL attachFromLeft = NO;
      JavaUtilTreeMap_Node *attachHere = nil;
      if (previous == nil) {
        if (nextNode != nil && nextNode->size_ < JavaUtilTreeMap_Node_NODE_SIZE) {
          removeFromStart = NO;
        }
        else {
          removeFromStart = YES;
          attachFromLeft = YES;
          attachHere = node;
        }
      }
      else if (nextNode == nil) {
        if (previous->size_ < JavaUtilTreeMap_Node_NODE_SIZE) {
          removeFromStart = YES;
        }
        else {
          removeFromStart = NO;
          attachFromLeft = NO;
          attachHere = node;
        }
      }
      else {
        if (previous->size_ < JavaUtilTreeMap_Node_NODE_SIZE) {
          if (nextNode->size_ < JavaUtilTreeMap_Node_NODE_SIZE) {
            removeFromStart = previous->size_ < nextNode->size_;
          }
          else {
            removeFromStart = YES;
          }
        }
        else {
          if (nextNode->size_ < JavaUtilTreeMap_Node_NODE_SIZE) {
            removeFromStart = NO;
          }
          else {
            if (node->right_ == nil) {
              attachHere = node;
              attachFromLeft = NO;
              removeFromStart = NO;
            }
            else {
              attachHere = nextNode;
              attachFromLeft = YES;
              removeFromStart = NO;
            }
          }
        }
      }
      id movedKey;
      id movedValue;
      if (removeFromStart) {
        movedKey = [((IOSObjectArray *) nil_chk(node->keys_)) objectAtIndex:0];
        movedValue = [((IOSObjectArray *) nil_chk(node->values_)) objectAtIndex:0];
        int resMunus1 = result - 1;
        [JavaLangSystem arraycopyWithId:node->keys_ withInt:1 withId:node->keys_ withInt:0 withInt:resMunus1];
        [JavaLangSystem arraycopyWithId:node->values_ withInt:1 withId:node->values_ withInt:0 withInt:resMunus1];
        [node->keys_ replaceObjectAtIndex:resMunus1 withObject:key];
        [node->values_ replaceObjectAtIndex:resMunus1 withObject:value];
      }
      else {
        movedKey = [((IOSObjectArray *) nil_chk(node->keys_)) objectAtIndex:JavaUtilTreeMap_Node_NODE_SIZE - 1];
        movedValue = [((IOSObjectArray *) nil_chk(node->values_)) objectAtIndex:JavaUtilTreeMap_Node_NODE_SIZE - 1];
        [JavaLangSystem arraycopyWithId:node->keys_ withInt:result withId:node->keys_ withInt:result + 1 withInt:JavaUtilTreeMap_Node_NODE_SIZE - 1 - result];
        [JavaLangSystem arraycopyWithId:node->values_ withInt:result withId:node->values_ withInt:result + 1 withInt:JavaUtilTreeMap_Node_NODE_SIZE - 1 - result];
        [node->keys_ replaceObjectAtIndex:result withObject:key];
        [node->values_ replaceObjectAtIndex:result withObject:value];
      }
      if (attachHere == nil) {
        if (removeFromStart) {
          [self appendFromRightWithJavaUtilTreeMap_Node:previous withId:movedKey withId:movedValue];
        }
        else {
          [self appendFromLeftWithJavaUtilTreeMap_Node:nextNode withId:movedKey withId:movedValue];
        }
      }
      else {
        JavaUtilTreeMap_Node *newNode = [self createNodeWithId:movedKey withId:movedValue];
        if (attachFromLeft) {
          [self attachToLeftWithJavaUtilTreeMap_Node:attachHere withJavaUtilTreeMap_Node:newNode];
        }
        else {
          [self attachToRightWithJavaUtilTreeMap_Node:attachHere withJavaUtilTreeMap_Node:newNode];
        }
        [self balanceWithJavaUtilTreeMap_Node:newNode];
      }
    }
  }
  return nil;
}

- (void)appendFromLeftWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)node
                                        withId:(id)keyObj
                                        withId:(id)value {
  if (((JavaUtilTreeMap_Node *) nil_chk(node))->left_idx_ == 0) {
    int new_right = node->right_idx_ + 1;
    [JavaLangSystem arraycopyWithId:node->keys_ withInt:0 withId:node->keys_ withInt:1 withInt:new_right];
    [JavaLangSystem arraycopyWithId:node->values_ withInt:0 withId:node->values_ withInt:1 withInt:new_right];
    node->right_idx_ = new_right;
  }
  else {
    node->left_idx_--;
  }
  node->size_++;
  [((IOSObjectArray *) nil_chk(node->keys_)) replaceObjectAtIndex:node->left_idx_ withObject:keyObj];
  [((IOSObjectArray *) nil_chk(node->values_)) replaceObjectAtIndex:node->left_idx_ withObject:value];
}

- (void)attachToLeftWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)node
                    withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)newNode {
  ((JavaUtilTreeMap_Node *) nil_chk(newNode))->parent_ = node;
  JavaUtilTreeMap_Node_set_left_(nil_chk(node), newNode);
  JavaUtilTreeMap_Node *predecessor = node->prev_;
  newNode->prev_ = predecessor;
  newNode->next_ = node;
  if (predecessor != nil) {
    predecessor->next_ = newNode;
  }
  node->prev_ = newNode;
}

- (void)appendFromRightWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)node
                                         withId:(id)keyObj
                                         withId:(id)value {
  if (((JavaUtilTreeMap_Node *) nil_chk(node))->right_idx_ == JavaUtilTreeMap_Node_NODE_SIZE - 1) {
    int left_idx = node->left_idx_;
    int left_idxMinus1 = left_idx - 1;
    [JavaLangSystem arraycopyWithId:node->keys_ withInt:left_idx withId:node->keys_ withInt:left_idxMinus1 withInt:JavaUtilTreeMap_Node_NODE_SIZE - left_idx];
    [JavaLangSystem arraycopyWithId:node->values_ withInt:left_idx withId:node->values_ withInt:left_idxMinus1 withInt:JavaUtilTreeMap_Node_NODE_SIZE - left_idx];
    node->left_idx_ = left_idxMinus1;
  }
  else {
    node->right_idx_++;
  }
  node->size_++;
  [((IOSObjectArray *) nil_chk(node->keys_)) replaceObjectAtIndex:node->right_idx_ withObject:keyObj];
  [((IOSObjectArray *) nil_chk(node->values_)) replaceObjectAtIndex:node->right_idx_ withObject:value];
}

- (void)attachToRightWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)node
                     withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)newNode {
  ((JavaUtilTreeMap_Node *) nil_chk(newNode))->parent_ = node;
  JavaUtilTreeMap_Node_set_right_(nil_chk(node), newNode);
  newNode->prev_ = node;
  JavaUtilTreeMap_Node *successor = node->next_;
  newNode->next_ = successor;
  if (successor != nil) {
    successor->prev_ = newNode;
  }
  node->next_ = newNode;
}

- (JavaUtilTreeMap_Node *)createNodeWithId:(id)keyObj
                                    withId:(id)value {
  JavaUtilTreeMap_Node *node = [[[JavaUtilTreeMap_Node alloc] init] autorelease];
  [((IOSObjectArray *) nil_chk(node->keys_)) replaceObjectAtIndex:0 withObject:keyObj];
  [((IOSObjectArray *) nil_chk(node->values_)) replaceObjectAtIndex:0 withObject:value];
  node->left_idx_ = 0;
  node->right_idx_ = 0;
  node->size_ = 1;
  return node;
}

- (void)balanceWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)x {
  JavaUtilTreeMap_Node *y;
  ((JavaUtilTreeMap_Node *) nil_chk(x))->color_ = YES;
  while (x != root_ && ((JavaUtilTreeMap_Node *) nil_chk(x->parent_))->color_) {
    if (x->parent_ == ((JavaUtilTreeMap_Node *) nil_chk(x->parent_))->parent_->left_) {
      y = x->parent_->parent_->right_;
      if (y != nil && y->color_) {
        x->parent_->color_ = NO;
        y->color_ = NO;
        x->parent_->parent_->color_ = YES;
        x = x->parent_->parent_;
      }
      else {
        if (x == x->parent_->right_) {
          x = x->parent_;
          [self leftRotateWithJavaUtilTreeMap_Node:x];
        }
        x->parent_->color_ = NO;
        x->parent_->parent_->color_ = YES;
        [self rightRotateWithJavaUtilTreeMap_Node:x->parent_->parent_];
      }
    }
    else {
      y = x->parent_->parent_->left_;
      if (y != nil && y->color_) {
        x->parent_->color_ = NO;
        y->color_ = NO;
        x->parent_->parent_->color_ = YES;
        x = x->parent_->parent_;
      }
      else {
        if (x == x->parent_->left_) {
          x = x->parent_;
          [self rightRotateWithJavaUtilTreeMap_Node:x];
        }
        x->parent_->color_ = NO;
        x->parent_->parent_->color_ = YES;
        [self leftRotateWithJavaUtilTreeMap_Node:x->parent_->parent_];
      }
    }
  }
  ((JavaUtilTreeMap_Node *) nil_chk(root_))->color_ = NO;
}

- (void)rightRotateWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)x {
  JavaUtilTreeMap_Node *y = ((JavaUtilTreeMap_Node *) nil_chk(x))->left_;
  JavaUtilTreeMap_Node_set_left_(x, ((JavaUtilTreeMap_Node *) nil_chk(y))->right_);
  if (y->right_ != nil) {
    y->right_->parent_ = x;
  }
  y->parent_ = x->parent_;
  if (x->parent_ == nil) {
    JavaUtilTreeMap_set_root_(self, y);
  }
  else {
    if (x == x->parent_->right_) {
      JavaUtilTreeMap_Node_set_right_(x->parent_, y);
    }
    else {
      JavaUtilTreeMap_Node_set_left_(x->parent_, y);
    }
  }
  JavaUtilTreeMap_Node_set_right_(y, x);
  x->parent_ = y;
}

- (void)leftRotateWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)x {
  JavaUtilTreeMap_Node *y = ((JavaUtilTreeMap_Node *) nil_chk(x))->right_;
  JavaUtilTreeMap_Node_set_right_(x, ((JavaUtilTreeMap_Node *) nil_chk(y))->left_);
  if (y->left_ != nil) {
    y->left_->parent_ = x;
  }
  y->parent_ = x->parent_;
  if (x->parent_ == nil) {
    JavaUtilTreeMap_set_root_(self, y);
  }
  else {
    if (x == x->parent_->left_) {
      JavaUtilTreeMap_Node_set_left_(x->parent_, y);
    }
    else {
      JavaUtilTreeMap_Node_set_right_(x->parent_, y);
    }
  }
  JavaUtilTreeMap_Node_set_left_(y, x);
  x->parent_ = y;
}

- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)map {
  [super putAllWithJavaUtilMap:map];
}

- (id)removeWithId:(id)key {
  if (size__ == 0) {
    return nil;
  }
  id<JavaLangComparable> object = comparator__ == nil ? [JavaUtilTreeMap toComparableWithId:(id) key] : nil;
  id keyK = (id) key;
  JavaUtilTreeMap_Node *node = root_;
  while (node != nil) {
    IOSObjectArray *keys = ((JavaUtilTreeMap_Node *) nil_chk(node))->keys_;
    int left_idx = node->left_idx_;
    int result = [self cmpWithJavaLangComparable:object withId:keyK withId:[((IOSObjectArray *) nil_chk(keys)) objectAtIndex:left_idx]];
    if (result < 0) {
      node = node->left_;
    }
    else if (result == 0) {
      id value = [((IOSObjectArray *) nil_chk(node->values_)) objectAtIndex:left_idx];
      [self removeLeftmostWithJavaUtilTreeMap_Node:node];
      return value;
    }
    else {
      int right_idx = node->right_idx_;
      if (left_idx != right_idx) {
        result = [self cmpWithJavaLangComparable:object withId:keyK withId:[keys objectAtIndex:right_idx]];
      }
      if (result > 0) {
        node = node->right_;
      }
      else if (result == 0) {
        id value = [((IOSObjectArray *) nil_chk(node->values_)) objectAtIndex:right_idx];
        [self removeRightmostWithJavaUtilTreeMap_Node:node];
        return value;
      }
      else {
        int low = left_idx + 1, mid = 0, high = right_idx - 1;
        while (low <= high) {
          mid = (int) (((unsigned int) (low + high)) >> 1);
          result = [self cmpWithJavaLangComparable:object withId:keyK withId:[keys objectAtIndex:mid]];
          if (result > 0) {
            low = mid + 1;
          }
          else if (result == 0) {
            id value = [((IOSObjectArray *) nil_chk(node->values_)) objectAtIndex:mid];
            [self removeMiddleElementWithJavaUtilTreeMap_Node:node withInt:mid];
            return value;
          }
          else {
            high = mid - 1;
          }
        }
        return nil;
      }
    }
  }
  return nil;
}

- (void)removeLeftmostWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)node {
  int index = ((JavaUtilTreeMap_Node *) nil_chk(node))->left_idx_;
  if (node->size_ == 1) {
    [self deleteNodeWithJavaUtilTreeMap_Node:node];
  }
  else if (node->prev_ != nil && (JavaUtilTreeMap_Node_NODE_SIZE - 1 - node->prev_->right_idx_) > node->size_) {
    JavaUtilTreeMap_Node *prev = node->prev_;
    int len = node->right_idx_ - index;
    [JavaLangSystem arraycopyWithId:node->keys_ withInt:index + 1 withId:prev->keys_ withInt:prev->right_idx_ + 1 withInt:len];
    [JavaLangSystem arraycopyWithId:node->values_ withInt:index + 1 withId:prev->values_ withInt:prev->right_idx_ + 1 withInt:len];
    prev->right_idx_ += len;
    prev->size_ += len;
    [self deleteNodeWithJavaUtilTreeMap_Node:node];
  }
  else if (node->next_ != nil && (node->next_->left_idx_) > node->size_) {
    JavaUtilTreeMap_Node *next = node->next_;
    int len = node->right_idx_ - index;
    int next_new_left = next->left_idx_ - len;
    next->left_idx_ = next_new_left;
    [JavaLangSystem arraycopyWithId:node->keys_ withInt:index + 1 withId:next->keys_ withInt:next_new_left withInt:len];
    [JavaLangSystem arraycopyWithId:node->values_ withInt:index + 1 withId:next->values_ withInt:next_new_left withInt:len];
    next->size_ += len;
    [self deleteNodeWithJavaUtilTreeMap_Node:node];
  }
  else {
    [((IOSObjectArray *) nil_chk(node->keys_)) replaceObjectAtIndex:index withObject:nil];
    [((IOSObjectArray *) nil_chk(node->values_)) replaceObjectAtIndex:index withObject:nil];
    node->left_idx_++;
    node->size_--;
    JavaUtilTreeMap_Node *prev = node->prev_;
    if (prev != nil && prev->size_ == 1) {
      node->size_++;
      node->left_idx_--;
      [node->keys_ replaceObjectAtIndex:node->left_idx_ withObject:[prev->keys_ objectAtIndex:prev->left_idx_]];
      [node->values_ replaceObjectAtIndex:node->left_idx_ withObject:[prev->values_ objectAtIndex:prev->left_idx_]];
      [self deleteNodeWithJavaUtilTreeMap_Node:prev];
    }
  }
  modCount_++;
  size__--;
}

- (void)removeRightmostWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)node {
  int index = ((JavaUtilTreeMap_Node *) nil_chk(node))->right_idx_;
  if (node->size_ == 1) {
    [self deleteNodeWithJavaUtilTreeMap_Node:node];
  }
  else if (node->prev_ != nil && (JavaUtilTreeMap_Node_NODE_SIZE - 1 - node->prev_->right_idx_) > node->size_) {
    JavaUtilTreeMap_Node *prev = node->prev_;
    int left_idx = node->left_idx_;
    int len = index - left_idx;
    [JavaLangSystem arraycopyWithId:node->keys_ withInt:left_idx withId:prev->keys_ withInt:prev->right_idx_ + 1 withInt:len];
    [JavaLangSystem arraycopyWithId:node->values_ withInt:left_idx withId:prev->values_ withInt:prev->right_idx_ + 1 withInt:len];
    prev->right_idx_ += len;
    prev->size_ += len;
    [self deleteNodeWithJavaUtilTreeMap_Node:node];
  }
  else if (node->next_ != nil && (node->next_->left_idx_) > node->size_) {
    JavaUtilTreeMap_Node *next = node->next_;
    int left_idx = node->left_idx_;
    int len = index - left_idx;
    int next_new_left = next->left_idx_ - len;
    next->left_idx_ = next_new_left;
    [JavaLangSystem arraycopyWithId:node->keys_ withInt:left_idx withId:next->keys_ withInt:next_new_left withInt:len];
    [JavaLangSystem arraycopyWithId:node->values_ withInt:left_idx withId:next->values_ withInt:next_new_left withInt:len];
    next->size_ += len;
    [self deleteNodeWithJavaUtilTreeMap_Node:node];
  }
  else {
    [((IOSObjectArray *) nil_chk(node->keys_)) replaceObjectAtIndex:index withObject:nil];
    [((IOSObjectArray *) nil_chk(node->values_)) replaceObjectAtIndex:index withObject:nil];
    node->right_idx_--;
    node->size_--;
    JavaUtilTreeMap_Node *next = node->next_;
    if (next != nil && next->size_ == 1) {
      node->size_++;
      node->right_idx_++;
      [node->keys_ replaceObjectAtIndex:node->right_idx_ withObject:[next->keys_ objectAtIndex:next->left_idx_]];
      [node->values_ replaceObjectAtIndex:node->right_idx_ withObject:[next->values_ objectAtIndex:next->left_idx_]];
      [self deleteNodeWithJavaUtilTreeMap_Node:next];
    }
  }
  modCount_++;
  size__--;
}

- (void)removeMiddleElementWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)node
                                            withInt:(int)index {
  if (((JavaUtilTreeMap_Node *) nil_chk(node))->prev_ != nil && (JavaUtilTreeMap_Node_NODE_SIZE - 1 - node->prev_->right_idx_) > node->size_) {
    JavaUtilTreeMap_Node *prev = node->prev_;
    int left_idx = node->left_idx_;
    int len = index - left_idx;
    [JavaLangSystem arraycopyWithId:node->keys_ withInt:left_idx withId:prev->keys_ withInt:prev->right_idx_ + 1 withInt:len];
    [JavaLangSystem arraycopyWithId:node->values_ withInt:left_idx withId:prev->values_ withInt:prev->right_idx_ + 1 withInt:len];
    prev->right_idx_ += len;
    len = node->right_idx_ - index;
    [JavaLangSystem arraycopyWithId:node->keys_ withInt:index + 1 withId:prev->keys_ withInt:prev->right_idx_ + 1 withInt:len];
    [JavaLangSystem arraycopyWithId:node->values_ withInt:index + 1 withId:prev->values_ withInt:prev->right_idx_ + 1 withInt:len];
    prev->right_idx_ += len;
    prev->size_ += (node->size_ - 1);
    [self deleteNodeWithJavaUtilTreeMap_Node:node];
  }
  else if (node->next_ != nil && (node->next_->left_idx_) > node->size_) {
    JavaUtilTreeMap_Node *next = node->next_;
    int left_idx = node->left_idx_;
    int next_new_left = next->left_idx_ - node->size_ + 1;
    next->left_idx_ = next_new_left;
    int len = index - left_idx;
    [JavaLangSystem arraycopyWithId:node->keys_ withInt:left_idx withId:next->keys_ withInt:next_new_left withInt:len];
    [JavaLangSystem arraycopyWithId:node->values_ withInt:left_idx withId:next->values_ withInt:next_new_left withInt:len];
    next_new_left += len;
    len = node->right_idx_ - index;
    [JavaLangSystem arraycopyWithId:node->keys_ withInt:index + 1 withId:next->keys_ withInt:next_new_left withInt:len];
    [JavaLangSystem arraycopyWithId:node->values_ withInt:index + 1 withId:next->values_ withInt:next_new_left withInt:len];
    next->size_ += (node->size_ - 1);
    [self deleteNodeWithJavaUtilTreeMap_Node:node];
  }
  else {
    int moveFromRight = node->right_idx_ - index;
    int left_idx = node->left_idx_;
    int moveFromLeft = index - left_idx;
    if (moveFromRight <= moveFromLeft) {
      [JavaLangSystem arraycopyWithId:node->keys_ withInt:index + 1 withId:node->keys_ withInt:index withInt:moveFromRight];
      [JavaLangSystem arraycopyWithId:node->values_ withInt:index + 1 withId:node->values_ withInt:index withInt:moveFromRight];
      JavaUtilTreeMap_Node *next = node->next_;
      if (next != nil && next->size_ == 1) {
        [((IOSObjectArray *) nil_chk(node->keys_)) replaceObjectAtIndex:node->right_idx_ withObject:[next->keys_ objectAtIndex:next->left_idx_]];
        [((IOSObjectArray *) nil_chk(node->values_)) replaceObjectAtIndex:node->right_idx_ withObject:[next->values_ objectAtIndex:next->left_idx_]];
        [self deleteNodeWithJavaUtilTreeMap_Node:next];
      }
      else {
        [((IOSObjectArray *) nil_chk(node->keys_)) replaceObjectAtIndex:node->right_idx_ withObject:nil];
        [((IOSObjectArray *) nil_chk(node->values_)) replaceObjectAtIndex:node->right_idx_ withObject:nil];
        node->right_idx_--;
        node->size_--;
      }
    }
    else {
      [JavaLangSystem arraycopyWithId:node->keys_ withInt:left_idx withId:node->keys_ withInt:left_idx + 1 withInt:moveFromLeft];
      [JavaLangSystem arraycopyWithId:node->values_ withInt:left_idx withId:node->values_ withInt:left_idx + 1 withInt:moveFromLeft];
      JavaUtilTreeMap_Node *prev = node->prev_;
      if (prev != nil && prev->size_ == 1) {
        [((IOSObjectArray *) nil_chk(node->keys_)) replaceObjectAtIndex:left_idx withObject:[prev->keys_ objectAtIndex:prev->left_idx_]];
        [((IOSObjectArray *) nil_chk(node->values_)) replaceObjectAtIndex:left_idx withObject:[prev->values_ objectAtIndex:prev->left_idx_]];
        [self deleteNodeWithJavaUtilTreeMap_Node:prev];
      }
      else {
        [((IOSObjectArray *) nil_chk(node->keys_)) replaceObjectAtIndex:left_idx withObject:nil];
        [((IOSObjectArray *) nil_chk(node->values_)) replaceObjectAtIndex:left_idx withObject:nil];
        node->left_idx_++;
        node->size_--;
      }
    }
  }
  modCount_++;
  size__--;
}

- (void)removeFromIteratorWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)node
                                           withInt:(int)index {
  if (((JavaUtilTreeMap_Node *) nil_chk(node))->size_ == 1) {
    [self deleteNodeWithJavaUtilTreeMap_Node:node];
  }
  else {
    int left_idx = node->left_idx_;
    if (index == left_idx) {
      JavaUtilTreeMap_Node *prev = node->prev_;
      if (prev != nil && prev->size_ == 1) {
        [((IOSObjectArray *) nil_chk(node->keys_)) replaceObjectAtIndex:left_idx withObject:[prev->keys_ objectAtIndex:prev->left_idx_]];
        [((IOSObjectArray *) nil_chk(node->values_)) replaceObjectAtIndex:left_idx withObject:[prev->values_ objectAtIndex:prev->left_idx_]];
        [self deleteNodeWithJavaUtilTreeMap_Node:prev];
      }
      else {
        [((IOSObjectArray *) nil_chk(node->keys_)) replaceObjectAtIndex:left_idx withObject:nil];
        [((IOSObjectArray *) nil_chk(node->values_)) replaceObjectAtIndex:left_idx withObject:nil];
        node->left_idx_++;
        node->size_--;
      }
    }
    else if (index == node->right_idx_) {
      [((IOSObjectArray *) nil_chk(node->keys_)) replaceObjectAtIndex:index withObject:nil];
      [((IOSObjectArray *) nil_chk(node->values_)) replaceObjectAtIndex:index withObject:nil];
      node->right_idx_--;
      node->size_--;
    }
    else {
      int moveFromRight = node->right_idx_ - index;
      int moveFromLeft = index - left_idx;
      if (moveFromRight <= moveFromLeft) {
        [JavaLangSystem arraycopyWithId:node->keys_ withInt:index + 1 withId:node->keys_ withInt:index withInt:moveFromRight];
        [JavaLangSystem arraycopyWithId:node->values_ withInt:index + 1 withId:node->values_ withInt:index withInt:moveFromRight];
        [((IOSObjectArray *) nil_chk(node->keys_)) replaceObjectAtIndex:node->right_idx_ withObject:nil];
        [((IOSObjectArray *) nil_chk(node->values_)) replaceObjectAtIndex:node->right_idx_ withObject:nil];
        node->right_idx_--;
        node->size_--;
      }
      else {
        [JavaLangSystem arraycopyWithId:node->keys_ withInt:left_idx withId:node->keys_ withInt:left_idx + 1 withInt:moveFromLeft];
        [JavaLangSystem arraycopyWithId:node->values_ withInt:left_idx withId:node->values_ withInt:left_idx + 1 withInt:moveFromLeft];
        [((IOSObjectArray *) nil_chk(node->keys_)) replaceObjectAtIndex:left_idx withObject:nil];
        [((IOSObjectArray *) nil_chk(node->values_)) replaceObjectAtIndex:left_idx withObject:nil];
        node->left_idx_++;
        node->size_--;
      }
    }
  }
  modCount_++;
  size__--;
}

- (void)deleteNodeWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)node {
  if (((JavaUtilTreeMap_Node *) nil_chk(node))->right_ == nil) {
    if (node->left_ != nil) {
      [self attachToParentWithJavaUtilTreeMap_Node:node withJavaUtilTreeMap_Node:node->left_];
    }
    else {
      [self attachNullToParentWithJavaUtilTreeMap_Node:node];
    }
    [self fixNextChainWithJavaUtilTreeMap_Node:node];
  }
  else if (node->left_ == nil) {
    [self attachToParentWithJavaUtilTreeMap_Node:node withJavaUtilTreeMap_Node:node->right_];
    [self fixNextChainWithJavaUtilTreeMap_Node:node];
  }
  else {
    JavaUtilTreeMap_Node *toMoveUp = node->next_;
    [self fixNextChainWithJavaUtilTreeMap_Node:node];
    if (((JavaUtilTreeMap_Node *) nil_chk(toMoveUp))->right_ == nil) {
      [self attachNullToParentWithJavaUtilTreeMap_Node:toMoveUp];
    }
    else {
      [self attachToParentWithJavaUtilTreeMap_Node:toMoveUp withJavaUtilTreeMap_Node:toMoveUp->right_];
    }
    JavaUtilTreeMap_Node_set_left_(toMoveUp, node->left_);
    if (node->left_ != nil) {
      node->left_->parent_ = toMoveUp;
    }
    JavaUtilTreeMap_Node_set_right_(toMoveUp, node->right_);
    if (node->right_ != nil) {
      node->right_->parent_ = toMoveUp;
    }
    [self attachToParentNoFixupWithJavaUtilTreeMap_Node:node withJavaUtilTreeMap_Node:toMoveUp];
    toMoveUp->color_ = node->color_;
  }
}

- (void)attachToParentNoFixupWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)toDelete
                             withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)toConnect {
  JavaUtilTreeMap_Node *parent = ((JavaUtilTreeMap_Node *) nil_chk(toDelete))->parent_;
  ((JavaUtilTreeMap_Node *) nil_chk(toConnect))->parent_ = parent;
  if (parent == nil) {
    JavaUtilTreeMap_set_root_(self, toConnect);
  }
  else if (toDelete == parent->left_) {
    JavaUtilTreeMap_Node_set_left_(parent, toConnect);
  }
  else {
    JavaUtilTreeMap_Node_set_right_(parent, toConnect);
  }
}

- (void)attachToParentWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)toDelete
                      withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)toConnect {
  [self attachToParentNoFixupWithJavaUtilTreeMap_Node:toDelete withJavaUtilTreeMap_Node:toConnect];
  if (!((JavaUtilTreeMap_Node *) nil_chk(toDelete))->color_) {
    [self fixupWithJavaUtilTreeMap_Node:toConnect];
  }
}

- (void)attachNullToParentWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)toDelete {
  JavaUtilTreeMap_Node *parent = ((JavaUtilTreeMap_Node *) nil_chk(toDelete))->parent_;
  if (parent == nil) {
    JavaUtilTreeMap_set_root_(self, nil);
  }
  else {
    if (toDelete == parent->left_) {
      JavaUtilTreeMap_Node_set_left_(parent, nil);
    }
    else {
      JavaUtilTreeMap_Node_set_right_(parent, nil);
    }
    if (!toDelete->color_) {
      [self fixupWithJavaUtilTreeMap_Node:parent];
    }
  }
}

- (void)fixNextChainWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)node {
  if (((JavaUtilTreeMap_Node *) nil_chk(node))->prev_ != nil) {
    node->prev_->next_ = node->next_;
  }
  if (node->next_ != nil) {
    node->next_->prev_ = node->prev_;
  }
}

- (void)fixupWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)x {
  JavaUtilTreeMap_Node *w;
  while (x != root_ && !((JavaUtilTreeMap_Node *) nil_chk(x))->color_) {
    if (x == ((JavaUtilTreeMap_Node *) nil_chk(((JavaUtilTreeMap_Node *) nil_chk(x))->parent_))->left_) {
      w = x->parent_->right_;
      if (w == nil) {
        x = x->parent_;
        continue;
      }
      if (((JavaUtilTreeMap_Node *) nil_chk(w))->color_) {
        w->color_ = NO;
        x->parent_->color_ = YES;
        [self leftRotateWithJavaUtilTreeMap_Node:x->parent_];
        w = x->parent_->right_;
        if (w == nil) {
          x = x->parent_;
          continue;
        }
      }
      if ((((JavaUtilTreeMap_Node *) nil_chk(w))->left_ == nil || !w->left_->color_) && (w->right_ == nil || !w->right_->color_)) {
        w->color_ = YES;
        x = x->parent_;
      }
      else {
        if (w->right_ == nil || !w->right_->color_) {
          ((JavaUtilTreeMap_Node *) nil_chk(w->left_))->color_ = NO;
          w->color_ = YES;
          [self rightRotateWithJavaUtilTreeMap_Node:w];
          w = x->parent_->right_;
        }
        ((JavaUtilTreeMap_Node *) nil_chk(w))->color_ = x->parent_->color_;
        x->parent_->color_ = NO;
        ((JavaUtilTreeMap_Node *) nil_chk(w->right_))->color_ = NO;
        [self leftRotateWithJavaUtilTreeMap_Node:x->parent_];
        x = root_;
      }
    }
    else {
      w = x->parent_->left_;
      if (w == nil) {
        x = x->parent_;
        continue;
      }
      if (((JavaUtilTreeMap_Node *) nil_chk(w))->color_) {
        w->color_ = NO;
        x->parent_->color_ = YES;
        [self rightRotateWithJavaUtilTreeMap_Node:x->parent_];
        w = x->parent_->left_;
        if (w == nil) {
          x = x->parent_;
          continue;
        }
      }
      if ((((JavaUtilTreeMap_Node *) nil_chk(w))->left_ == nil || !w->left_->color_) && (w->right_ == nil || !w->right_->color_)) {
        w->color_ = YES;
        x = x->parent_;
      }
      else {
        if (w->left_ == nil || !w->left_->color_) {
          ((JavaUtilTreeMap_Node *) nil_chk(w->right_))->color_ = NO;
          w->color_ = YES;
          [self leftRotateWithJavaUtilTreeMap_Node:w];
          w = x->parent_->left_;
        }
        ((JavaUtilTreeMap_Node *) nil_chk(w))->color_ = x->parent_->color_;
        x->parent_->color_ = NO;
        ((JavaUtilTreeMap_Node *) nil_chk(w->left_))->color_ = NO;
        [self rightRotateWithJavaUtilTreeMap_Node:x->parent_];
        x = root_;
      }
    }
  }
  ((JavaUtilTreeMap_Node *) nil_chk(x))->color_ = NO;
}

- (int)size {
  return size__;
}

- (id<JavaUtilSortedMap>)subMapWithId:(id)startKey
                               withId:(id)endKey {
  if (comparator__ == nil) {
    if ([((id<JavaLangComparable>) nil_chk([JavaUtilTreeMap toComparableWithId:startKey])) compareToWithId:endKey] <= 0) {
      return [[[JavaUtilTreeMap_SubMap alloc] initWithId:startKey withJavaUtilTreeMap:self withId:endKey] autorelease];
    }
  }
  else {
    if ([comparator__ compareWithId:startKey withId:endKey] <= 0) {
      return [[[JavaUtilTreeMap_SubMap alloc] initWithId:startKey withJavaUtilTreeMap:self withId:endKey] autorelease];
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
}

- (id<JavaUtilSortedMap>)tailMapWithId:(id)startKey {
  if (comparator__ == nil) {
    [((id<JavaLangComparable>) nil_chk([JavaUtilTreeMap toComparableWithId:startKey])) compareToWithId:startKey];
  }
  else {
    [comparator__ compareWithId:startKey withId:startKey];
  }
  return [[[JavaUtilTreeMap_SubMap alloc] initWithId:startKey withJavaUtilTreeMap:self] autorelease];
}

- (id<JavaUtilCollection>)values {
  if (valuesCollection_ == nil) {
    JavaUtilAbstractMap_set_valuesCollection_(self, [[[JavaUtilTreeMap_ValuesCollection alloc] initWithJavaUtilTreeMap:self] autorelease]);
  }
  return valuesCollection_;
}

- (JavaUtilTreeMap_MapEntry *)newMapEntryWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)node
                                                          withInt:(int)offset {
  return [[[JavaUtilTreeMap_MapEntry alloc] initWithJavaUtilTreeMap:self withJavaUtilTreeMap_Node:node withInt:offset] autorelease];
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilTreeMap_set_root_(self, nil);
  JavaUtilTreeMap_set_entrySet__(self, nil);
  JavaUtilTreeMap_set_comparator__(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilTreeMap *)other {
  [super copyAllFieldsTo:other];
  JavaUtilTreeMap_set_comparator__(other, comparator__);
  JavaUtilTreeMap_set_entrySet__(other, entrySet__);
  other->modCount_ = modCount_;
  JavaUtilTreeMap_set_root_(other, root_);
  other->size__ = size__;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:comparator__ name:@"comparator_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:entrySet__ name:@"entrySet_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:root_ name:@"root"]];
  return result;
}

@end
@implementation JavaUtilTreeMap_MapEntry

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initJavaUtilTreeMap_MapEntryWithJavaUtilTreeMap:(JavaUtilTreeMap *)outer$
                             withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)node
                                              withInt:(int)offset {
  if ((self = [super init])) {
    JavaUtilTreeMap_MapEntry_set_this$0_(self, outer$);
    JavaUtilTreeMap_MapEntry_set_node_(self, node);
    self->offset_ = offset;
    JavaUtilTreeMap_MapEntry_set_key_(self, [((IOSObjectArray *) nil_chk(((JavaUtilTreeMap_Node *) nil_chk(node))->keys_)) objectAtIndex:offset]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)outer$
     withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)node
                      withInt:(int)offset {
  return [self initJavaUtilTreeMap_MapEntryWithJavaUtilTreeMap:outer$ withJavaUtilTreeMap_Node:node withInt:offset];
}

- (id)clone {
  @try {
    return [super clone];
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    return nil;
  }
}

- (BOOL)isEqual:(id)object {
  if (self == object) {
    return YES;
  }
  if ([object conformsToProtocol: @protocol(JavaUtilMap_Entry)]) {
    id<JavaUtilMap_Entry> entry = (id<JavaUtilMap_Entry>) object;
    id value = [self getValue];
    return (key_ == nil ? [((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey] == nil : [key_ isEqual:[((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey]]) && (value == nil ? [entry getValue] == nil : [value isEqual:[entry getValue]]);
  }
  return NO;
}

- (id)getKey {
  return key_;
}

- (id)getValue {
  if ([((IOSObjectArray *) nil_chk(((JavaUtilTreeMap_Node *) nil_chk(node_))->keys_)) objectAtIndex:offset_] == key_) {
    return [((IOSObjectArray *) nil_chk(node_->values_)) objectAtIndex:offset_];
  }
  if ([this$0_ containsKeyWithId:key_]) {
    return [this$0_ getWithId:key_];
  }
  @throw [[[JavaLangIllegalStateException alloc] init] autorelease];
}

- (NSUInteger)hash {
  id value = [self getValue];
  return (key_ == nil ? 0 : [key_ hash]) ^ (value == nil ? 0 : [value hash]);
}

- (id)setValueWithId:(id)object {
  if ([((IOSObjectArray *) nil_chk(((JavaUtilTreeMap_Node *) nil_chk(node_))->keys_)) objectAtIndex:offset_] == key_) {
    id res = [((IOSObjectArray *) nil_chk(node_->values_)) objectAtIndex:offset_];
    [node_->values_ replaceObjectAtIndex:offset_ withObject:object];
    return res;
  }
  if ([this$0_ containsKeyWithId:key_]) {
    return [this$0_ putWithId:key_ withId:object];
  }
  @throw [[[JavaLangIllegalStateException alloc] init] autorelease];
}

- (NSString *)description {
  return [NSString stringWithFormat:@"%@=%@", key_, [self getValue]];
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilTreeMap_MapEntry_set_key_(self, nil);
  JavaUtilTreeMap_MapEntry_set_node_(self, nil);
  JavaUtilTreeMap_MapEntry_set_this$0_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilTreeMap_MapEntry *)other {
  [super copyAllFieldsTo:other];
  JavaUtilTreeMap_MapEntry_set_key_(other, key_);
  JavaUtilTreeMap_MapEntry_set_node_(other, node_);
  other->offset_ = offset_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:this$0_ name:@"this$0"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:node_ name:@"node"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:key_ name:@"key"]];
  return result;
}

@end
@implementation JavaUtilTreeMap_Node

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

+ (int)NODE_SIZE {
  return JavaUtilTreeMap_Node_NODE_SIZE;
}

- (id)init {
  if ((self = [super init])) {
    left_idx_ = 0;
    right_idx_ = -1;
    size_ = 0;
    JavaUtilTreeMap_Node_set_keys_(self, (IOSObjectArray *) [IOSObjectArray arrayWithLength:JavaUtilTreeMap_Node_NODE_SIZE type:[IOSClass classWithClass:[NSObject class]]]);
    JavaUtilTreeMap_Node_set_values_(self, (IOSObjectArray *) [IOSObjectArray arrayWithLength:JavaUtilTreeMap_Node_NODE_SIZE type:[IOSClass classWithClass:[NSObject class]]]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (JavaUtilTreeMap_Node *)cloneWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)parent {
  JavaUtilTreeMap_Node *clone = (JavaUtilTreeMap_Node *) [super clone];
  JavaUtilTreeMap_Node_set_keys_(nil_chk(clone), (IOSObjectArray *) [IOSObjectArray arrayWithLength:JavaUtilTreeMap_Node_NODE_SIZE type:[IOSClass classWithClass:[NSObject class]]]);
  JavaUtilTreeMap_Node_set_values_(clone, (IOSObjectArray *) [IOSObjectArray arrayWithLength:JavaUtilTreeMap_Node_NODE_SIZE type:[IOSClass classWithClass:[NSObject class]]]);
  [JavaLangSystem arraycopyWithId:keys_ withInt:0 withId:clone->keys_ withInt:0 withInt:(int) [keys_ count]];
  [JavaLangSystem arraycopyWithId:values_ withInt:0 withId:clone->values_ withInt:0 withInt:(int) [values_ count]];
  clone->left_idx_ = left_idx_;
  clone->right_idx_ = right_idx_;
  clone->parent_ = parent;
  if (left_ != nil) {
    JavaUtilTreeMap_Node_set_left_(clone, [left_ cloneWithJavaUtilTreeMap_Node:clone]);
  }
  if (right_ != nil) {
    JavaUtilTreeMap_Node_set_right_(clone, [right_ cloneWithJavaUtilTreeMap_Node:clone]);
  }
  clone->prev_ = nil;
  clone->next_ = nil;
  return clone;
}

+ (IOSObjectArray *)__exceptions_cloneWithJavaUtilTreeMap_Node_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangCloneNotSupportedException getClass] } count:1 type:[IOSClass getClass]];
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilTreeMap_Node_set_keys_(self, nil);
  JavaUtilTreeMap_Node_set_values_(self, nil);
  JavaUtilTreeMap_Node_set_right_(self, nil);
  JavaUtilTreeMap_Node_set_left_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilTreeMap_Node *)other {
  [super copyAllFieldsTo:other];
  other->color_ = color_;
  JavaUtilTreeMap_Node_set_keys_(other, keys_);
  JavaUtilTreeMap_Node_set_left_(other, left_);
  other->left_idx_ = left_idx_;
  other->next_ = next_;
  other->parent_ = parent_;
  other->prev_ = prev_;
  JavaUtilTreeMap_Node_set_right_(other, right_);
  other->right_idx_ = right_idx_;
  other->size_ = size_;
  JavaUtilTreeMap_Node_set_values_(other, values_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:left_ name:@"left"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:right_ name:@"right"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:values_ name:@"values"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:keys_ name:@"keys"]];
  return result;
}

@end
@implementation JavaUtilTreeMap_AbstractMapIterator

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initJavaUtilTreeMap_AbstractMapIteratorWithJavaUtilTreeMap:(JavaUtilTreeMap *)map
                                        withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode
                                                         withInt:(int)startOffset {
  if ((self = [super init])) {
    JavaUtilTreeMap_AbstractMapIterator_set_backingMap_(self, map);
    expectedModCount_ = ((JavaUtilTreeMap *) nil_chk(map))->modCount_;
    JavaUtilTreeMap_AbstractMapIterator_set_node_(self, startNode);
    offset_ = startOffset;
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)map
     withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode
                      withInt:(int)startOffset {
  return [self initJavaUtilTreeMap_AbstractMapIteratorWithJavaUtilTreeMap:map withJavaUtilTreeMap_Node:startNode withInt:startOffset];
}

- (id)initJavaUtilTreeMap_AbstractMapIteratorWithJavaUtilTreeMap:(JavaUtilTreeMap *)map
                                        withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode {
  return JreMemDebugAdd([self initJavaUtilTreeMap_AbstractMapIteratorWithJavaUtilTreeMap:map withJavaUtilTreeMap_Node:startNode withInt:startNode != nil ? startNode->right_idx_ - startNode->left_idx_ : 0]);
}

- (id)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)map
     withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode {
  return [self initJavaUtilTreeMap_AbstractMapIteratorWithJavaUtilTreeMap:map withJavaUtilTreeMap_Node:startNode];
}

- (id)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)map {
  return JreMemDebugAdd([self initJavaUtilTreeMap_AbstractMapIteratorWithJavaUtilTreeMap:map withJavaUtilTreeMap_Node:[JavaUtilTreeMap minimumWithJavaUtilTreeMap_Node:((JavaUtilTreeMap *) nil_chk(map))->root_]]);
}

- (BOOL)hasNext {
  return node_ != nil;
}

- (void)makeNext {
  if (expectedModCount_ != ((JavaUtilTreeMap *) nil_chk(backingMap_))->modCount_) {
    @throw [[[JavaUtilConcurrentModificationException alloc] init] autorelease];
  }
  else if (node_ == nil) {
    @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
  }
  JavaUtilTreeMap_AbstractMapIterator_set_lastNode_(self, node_);
  lastOffset_ = offset_;
  if (offset_ != 0) {
    offset_--;
  }
  else {
    JavaUtilTreeMap_AbstractMapIterator_set_node_(self, ((JavaUtilTreeMap_Node *) nil_chk(node_))->next_);
    if (node_ != nil) {
      offset_ = node_->right_idx_ - node_->left_idx_;
    }
  }
}

- (void)remove {
  if (expectedModCount_ == ((JavaUtilTreeMap *) nil_chk(backingMap_))->modCount_) {
    if (lastNode_ != nil) {
      int idx = lastNode_->right_idx_ - lastOffset_;
      [backingMap_ removeFromIteratorWithJavaUtilTreeMap_Node:lastNode_ withInt:idx];
      JavaUtilTreeMap_AbstractMapIterator_set_lastNode_(self, nil);
      expectedModCount_++;
    }
    else {
      @throw [[[JavaLangIllegalStateException alloc] init] autorelease];
    }
  }
  else {
    @throw [[[JavaUtilConcurrentModificationException alloc] init] autorelease];
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilTreeMap_AbstractMapIterator_set_lastNode_(self, nil);
  JavaUtilTreeMap_AbstractMapIterator_set_node_(self, nil);
  JavaUtilTreeMap_AbstractMapIterator_set_backingMap_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilTreeMap_AbstractMapIterator *)other {
  [super copyAllFieldsTo:other];
  JavaUtilTreeMap_AbstractMapIterator_set_backingMap_(other, backingMap_);
  other->expectedModCount_ = expectedModCount_;
  JavaUtilTreeMap_AbstractMapIterator_set_lastNode_(other, lastNode_);
  other->lastOffset_ = lastOffset_;
  JavaUtilTreeMap_AbstractMapIterator_set_node_(other, node_);
  other->offset_ = offset_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:backingMap_ name:@"backingMap"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:node_ name:@"node"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:lastNode_ name:@"lastNode"]];
  return result;
}

@end
@implementation JavaUtilTreeMap_UnboundedEntryIterator

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initJavaUtilTreeMap_UnboundedEntryIteratorWithJavaUtilTreeMap:(JavaUtilTreeMap *)map
                                           withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode
                                                            withInt:(int)startOffset {
  return JreMemDebugAdd([super initWithJavaUtilTreeMap:map withJavaUtilTreeMap_Node:startNode withInt:startOffset]);
}

- (id)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)map
     withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode
                      withInt:(int)startOffset {
  return [self initJavaUtilTreeMap_UnboundedEntryIteratorWithJavaUtilTreeMap:map withJavaUtilTreeMap_Node:startNode withInt:startOffset];
}

- (id)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)map {
  return JreMemDebugAdd([super initWithJavaUtilTreeMap:map]);
}

- (id<JavaUtilMap_Entry>)next {
  [self makeNext];
  int idx = ((JavaUtilTreeMap_Node *) nil_chk(lastNode_))->right_idx_ - lastOffset_;
  return [((JavaUtilTreeMap *) nil_chk(backingMap_)) newMapEntryWithJavaUtilTreeMap_Node:lastNode_ withInt:idx];
}

@end
@implementation JavaUtilTreeMap_UnboundedKeyIterator

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initJavaUtilTreeMap_UnboundedKeyIteratorWithJavaUtilTreeMap:(JavaUtilTreeMap *)map
                                         withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode
                                                          withInt:(int)startOffset {
  return JreMemDebugAdd([super initWithJavaUtilTreeMap:map withJavaUtilTreeMap_Node:startNode withInt:startOffset]);
}

- (id)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)map
     withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode
                      withInt:(int)startOffset {
  return [self initJavaUtilTreeMap_UnboundedKeyIteratorWithJavaUtilTreeMap:map withJavaUtilTreeMap_Node:startNode withInt:startOffset];
}

- (id)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)map {
  return JreMemDebugAdd([super initWithJavaUtilTreeMap:map]);
}

- (id)next {
  [self makeNext];
  return [((IOSObjectArray *) nil_chk(((JavaUtilTreeMap_Node *) nil_chk(lastNode_))->keys_)) objectAtIndex:lastNode_->right_idx_ - lastOffset_];
}

@end
@implementation JavaUtilTreeMap_UnboundedValueIterator

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initJavaUtilTreeMap_UnboundedValueIteratorWithJavaUtilTreeMap:(JavaUtilTreeMap *)map
                                           withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode
                                                            withInt:(int)startOffset {
  return JreMemDebugAdd([super initWithJavaUtilTreeMap:map withJavaUtilTreeMap_Node:startNode withInt:startOffset]);
}

- (id)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)map
     withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode
                      withInt:(int)startOffset {
  return [self initJavaUtilTreeMap_UnboundedValueIteratorWithJavaUtilTreeMap:map withJavaUtilTreeMap_Node:startNode withInt:startOffset];
}

- (id)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)map {
  return JreMemDebugAdd([super initWithJavaUtilTreeMap:map]);
}

- (id)next {
  [self makeNext];
  return [((IOSObjectArray *) nil_chk(((JavaUtilTreeMap_Node *) nil_chk(lastNode_))->values_)) objectAtIndex:lastNode_->right_idx_ - lastOffset_];
}

@end
@implementation JavaUtilTreeMap_BoundedMapIterator

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initJavaUtilTreeMap_BoundedMapIteratorWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode
                                                             withInt:(int)startOffset
                                                 withJavaUtilTreeMap:(JavaUtilTreeMap *)map
                                            withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)finalNode
                                                             withInt:(int)finalOffset {
  if ((self = [super initWithJavaUtilTreeMap:map withJavaUtilTreeMap_Node:finalNode == nil ? nil : startNode withInt:startOffset])) {
    JavaUtilTreeMap_BoundedMapIterator_set_finalNode_(self, finalNode);
    self->finalOffset_ = finalOffset;
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode
                           withInt:(int)startOffset
               withJavaUtilTreeMap:(JavaUtilTreeMap *)map
          withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)finalNode
                           withInt:(int)finalOffset {
  return [self initJavaUtilTreeMap_BoundedMapIteratorWithJavaUtilTreeMap_Node:startNode withInt:startOffset withJavaUtilTreeMap:map withJavaUtilTreeMap_Node:finalNode withInt:finalOffset];
}

- (id)initWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode
               withJavaUtilTreeMap:(JavaUtilTreeMap *)map
          withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)finalNode
                           withInt:(int)finalOffset {
  return JreMemDebugAdd([self initJavaUtilTreeMap_BoundedMapIteratorWithJavaUtilTreeMap_Node:startNode withInt:startNode != nil ? startNode->right_idx_ - startNode->left_idx_ : 0 withJavaUtilTreeMap:map withJavaUtilTreeMap_Node:finalNode withInt:finalOffset]);
}

- (id)initWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode
                           withInt:(int)startOffset
               withJavaUtilTreeMap:(JavaUtilTreeMap *)map
          withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)finalNode {
  return JreMemDebugAdd([self initJavaUtilTreeMap_BoundedMapIteratorWithJavaUtilTreeMap_Node:startNode withInt:startOffset withJavaUtilTreeMap:map withJavaUtilTreeMap_Node:finalNode withInt:((JavaUtilTreeMap_Node *) nil_chk(finalNode))->right_idx_ - finalNode->left_idx_]);
}

- (void)makeBoundedNext {
  [self makeNext];
  if (lastNode_ == finalNode_ && lastOffset_ == finalOffset_) {
    JavaUtilTreeMap_AbstractMapIterator_set_node_(self, nil);
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilTreeMap_BoundedMapIterator_set_finalNode_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilTreeMap_BoundedMapIterator *)other {
  [super copyAllFieldsTo:other];
  JavaUtilTreeMap_BoundedMapIterator_set_finalNode_(other, finalNode_);
  other->finalOffset_ = finalOffset_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:finalNode_ name:@"finalNode"]];
  return result;
}

@end
@implementation JavaUtilTreeMap_BoundedEntryIterator

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initJavaUtilTreeMap_BoundedEntryIteratorWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode
                                                               withInt:(int)startOffset
                                                   withJavaUtilTreeMap:(JavaUtilTreeMap *)map
                                              withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)finalNode
                                                               withInt:(int)finalOffset {
  return JreMemDebugAdd([super initWithJavaUtilTreeMap_Node:startNode withInt:startOffset withJavaUtilTreeMap:map withJavaUtilTreeMap_Node:finalNode withInt:finalOffset]);
}

- (id)initWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode
                           withInt:(int)startOffset
               withJavaUtilTreeMap:(JavaUtilTreeMap *)map
          withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)finalNode
                           withInt:(int)finalOffset {
  return [self initJavaUtilTreeMap_BoundedEntryIteratorWithJavaUtilTreeMap_Node:startNode withInt:startOffset withJavaUtilTreeMap:map withJavaUtilTreeMap_Node:finalNode withInt:finalOffset];
}

- (id<JavaUtilMap_Entry>)next {
  [self makeBoundedNext];
  int idx = ((JavaUtilTreeMap_Node *) nil_chk(lastNode_))->right_idx_ - lastOffset_;
  return [((JavaUtilTreeMap *) nil_chk(backingMap_)) newMapEntryWithJavaUtilTreeMap_Node:lastNode_ withInt:idx];
}

@end
@implementation JavaUtilTreeMap_BoundedKeyIterator

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initJavaUtilTreeMap_BoundedKeyIteratorWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode
                                                             withInt:(int)startOffset
                                                 withJavaUtilTreeMap:(JavaUtilTreeMap *)map
                                            withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)finalNode
                                                             withInt:(int)finalOffset {
  return JreMemDebugAdd([super initWithJavaUtilTreeMap_Node:startNode withInt:startOffset withJavaUtilTreeMap:map withJavaUtilTreeMap_Node:finalNode withInt:finalOffset]);
}

- (id)initWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode
                           withInt:(int)startOffset
               withJavaUtilTreeMap:(JavaUtilTreeMap *)map
          withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)finalNode
                           withInt:(int)finalOffset {
  return [self initJavaUtilTreeMap_BoundedKeyIteratorWithJavaUtilTreeMap_Node:startNode withInt:startOffset withJavaUtilTreeMap:map withJavaUtilTreeMap_Node:finalNode withInt:finalOffset];
}

- (id)next {
  [self makeBoundedNext];
  return [((IOSObjectArray *) nil_chk(((JavaUtilTreeMap_Node *) nil_chk(lastNode_))->keys_)) objectAtIndex:lastNode_->right_idx_ - lastOffset_];
}

@end
@implementation JavaUtilTreeMap_BoundedValueIterator

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initJavaUtilTreeMap_BoundedValueIteratorWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode
                                                               withInt:(int)startOffset
                                                   withJavaUtilTreeMap:(JavaUtilTreeMap *)map
                                              withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)finalNode
                                                               withInt:(int)finalOffset {
  return JreMemDebugAdd([super initWithJavaUtilTreeMap_Node:startNode withInt:startOffset withJavaUtilTreeMap:map withJavaUtilTreeMap_Node:finalNode withInt:finalOffset]);
}

- (id)initWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode
                           withInt:(int)startOffset
               withJavaUtilTreeMap:(JavaUtilTreeMap *)map
          withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)finalNode
                           withInt:(int)finalOffset {
  return [self initJavaUtilTreeMap_BoundedValueIteratorWithJavaUtilTreeMap_Node:startNode withInt:startOffset withJavaUtilTreeMap:map withJavaUtilTreeMap_Node:finalNode withInt:finalOffset];
}

- (id)next {
  [self makeBoundedNext];
  return [((IOSObjectArray *) nil_chk(((JavaUtilTreeMap_Node *) nil_chk(lastNode_))->values_)) objectAtIndex:lastNode_->right_idx_ - lastOffset_];
}

@end
@implementation JavaUtilTreeMap_SubMap

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithId:(id)start
withJavaUtilTreeMap:(JavaUtilTreeMap *)map {
  if ((self = [super init])) {
    JavaUtilTreeMap_SubMap_set_entrySet__(self, nil);
    firstKeyModCount_ = -1;
    lastKeyModCount_ = -1;
    JavaUtilTreeMap_SubMap_set_backingMap_(self, map);
    hasStart_ = YES;
    JavaUtilTreeMap_SubMap_set_startKey_(self, start);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithId:(id)start
withJavaUtilTreeMap:(JavaUtilTreeMap *)map
          withId:(id)end {
  if ((self = [super init])) {
    JavaUtilTreeMap_SubMap_set_entrySet__(self, nil);
    firstKeyModCount_ = -1;
    lastKeyModCount_ = -1;
    JavaUtilTreeMap_SubMap_set_backingMap_(self, map);
    hasStart_ = hasEnd_ = YES;
    JavaUtilTreeMap_SubMap_set_startKey_(self, start);
    JavaUtilTreeMap_SubMap_set_endKey_(self, end);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)map
                       withId:(id)end {
  if ((self = [super init])) {
    JavaUtilTreeMap_SubMap_set_entrySet__(self, nil);
    firstKeyModCount_ = -1;
    lastKeyModCount_ = -1;
    JavaUtilTreeMap_SubMap_set_backingMap_(self, map);
    hasEnd_ = YES;
    JavaUtilTreeMap_SubMap_set_endKey_(self, end);
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)checkRangeWithId:(id)key {
  id<JavaUtilComparator> cmp = ((JavaUtilTreeMap *) nil_chk(backingMap_))->comparator__;
  if (cmp == nil) {
    id<JavaLangComparable> object = [JavaUtilTreeMap toComparableWithId:key];
    if (hasStart_ && [((id<JavaLangComparable>) nil_chk(object)) compareToWithId:startKey_] < 0) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
    if (hasEnd_ && [((id<JavaLangComparable>) nil_chk(object)) compareToWithId:endKey_] > 0) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
  }
  else {
    if (hasStart_ && [((id<JavaUtilComparator>) nil_chk([backingMap_ comparator])) compareWithId:key withId:startKey_] < 0) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
    if (hasEnd_ && [((id<JavaUtilComparator>) nil_chk([backingMap_ comparator])) compareWithId:key withId:endKey_] > 0) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
  }
}

- (BOOL)isInRangeWithId:(id)key {
  id<JavaUtilComparator> cmp = ((JavaUtilTreeMap *) nil_chk(backingMap_))->comparator__;
  if (cmp == nil) {
    id<JavaLangComparable> object = [JavaUtilTreeMap toComparableWithId:key];
    if (hasStart_ && [((id<JavaLangComparable>) nil_chk(object)) compareToWithId:startKey_] < 0) {
      return NO;
    }
    if (hasEnd_ && [((id<JavaLangComparable>) nil_chk(object)) compareToWithId:endKey_] >= 0) {
      return NO;
    }
  }
  else {
    if (hasStart_ && [cmp compareWithId:key withId:startKey_] < 0) {
      return NO;
    }
    if (hasEnd_ && [cmp compareWithId:key withId:endKey_] >= 0) {
      return NO;
    }
  }
  return YES;
}

- (BOOL)checkUpperBoundWithId:(id)key {
  if (hasEnd_) {
    id<JavaUtilComparator> cmp = ((JavaUtilTreeMap *) nil_chk(backingMap_))->comparator__;
    if (cmp == nil) {
      return ([((id<JavaLangComparable>) nil_chk([JavaUtilTreeMap toComparableWithId:key])) compareToWithId:endKey_] < 0);
    }
    return ([((id<JavaUtilComparator>) nil_chk(cmp)) compareWithId:key withId:endKey_] < 0);
  }
  return YES;
}

- (BOOL)checkLowerBoundWithId:(id)key {
  if (hasStart_) {
    id<JavaUtilComparator> cmp = ((JavaUtilTreeMap *) nil_chk(backingMap_))->comparator__;
    if (cmp == nil) {
      return ([((id<JavaLangComparable>) nil_chk([JavaUtilTreeMap toComparableWithId:key])) compareToWithId:startKey_] >= 0);
    }
    return ([((id<JavaUtilComparator>) nil_chk(cmp)) compareWithId:key withId:startKey_] >= 0);
  }
  return YES;
}

- (id<JavaUtilComparator>)comparator {
  return [((JavaUtilTreeMap *) nil_chk(backingMap_)) comparator];
}

- (BOOL)containsKeyWithId:(id)key {
  if ([self isInRangeWithId:(id) key]) {
    return [((JavaUtilTreeMap *) nil_chk(backingMap_)) containsKeyWithId:key];
  }
  return NO;
}

- (void)clear {
  [((id<JavaUtilSet>) nil_chk([self keySet])) clear];
}

- (BOOL)containsValueWithId:(id)value {
  id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk([self values])) iterator];
  if (value != nil) {
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      if ([value isEqual:[it next]]) {
        return YES;
      }
    }
  }
  else {
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      if ([it next] == nil) {
        return YES;
      }
    }
  }
  return NO;
}

- (id<JavaUtilSet>)entrySet {
  if (entrySet__ == nil) {
    JavaUtilTreeMap_SubMap_set_entrySet__(self, [[[JavaUtilTreeMap_SubMapEntrySet alloc] initWithJavaUtilTreeMap_SubMap:self] autorelease]);
  }
  return entrySet__;
}

- (void)setFirstKey {
  if (firstKeyModCount_ == ((JavaUtilTreeMap *) nil_chk(backingMap_))->modCount_) {
    return;
  }
  id<JavaLangComparable> object = backingMap_->comparator__ == nil ? [JavaUtilTreeMap toComparableWithId:(id) startKey_] : nil;
  id key = (id) startKey_;
  JavaUtilTreeMap_Node *node = backingMap_->root_;
  JavaUtilTreeMap_Node *foundNode = nil;
  int foundIndex = -1;
  while (node != nil) {
    IOSObjectArray *keys = ((JavaUtilTreeMap_Node *) nil_chk(node))->keys_;
    int left_idx = node->left_idx_;
    int result = [backingMap_ cmpWithJavaLangComparable:object withId:key withId:[((IOSObjectArray *) nil_chk(keys)) objectAtIndex:left_idx]];
    if (result < 0) {
      foundNode = node;
      foundIndex = left_idx;
      node = node->left_;
    }
    else if (result == 0) {
      foundNode = node;
      foundIndex = left_idx;
      break;
    }
    else {
      int right_idx = node->right_idx_;
      if (left_idx != right_idx) {
        result = [backingMap_ cmpWithJavaLangComparable:object withId:key withId:[keys objectAtIndex:right_idx]];
      }
      if (result > 0) {
        node = node->right_;
      }
      else if (result == 0) {
        foundNode = node;
        foundIndex = right_idx;
        break;
      }
      else {
        foundNode = node;
        foundIndex = right_idx;
        int low = left_idx + 1, mid = 0, high = right_idx - 1;
        while (low <= high) {
          mid = (int) (((unsigned int) (low + high)) >> 1);
          result = [backingMap_ cmpWithJavaLangComparable:object withId:key withId:[keys objectAtIndex:mid]];
          if (result > 0) {
            low = mid + 1;
          }
          else if (result == 0) {
            foundNode = node;
            foundIndex = mid;
            goto break_TOP_LOOP;
          }
          else {
            foundNode = node;
            foundIndex = mid;
            high = mid - 1;
          }
        }
        goto break_TOP_LOOP;
      }
    }
  }
  break_TOP_LOOP: ;
  if (foundNode != nil && ![self checkUpperBoundWithId:[((IOSObjectArray *) nil_chk(foundNode->keys_)) objectAtIndex:foundIndex]]) {
    foundNode = nil;
  }
  JavaUtilTreeMap_SubMap_set_firstKeyNode_(self, foundNode);
  firstKeyIndex_ = foundIndex;
  firstKeyModCount_ = backingMap_->modCount_;
}

- (id)firstKey {
  if (((JavaUtilTreeMap *) nil_chk(backingMap_))->size__ > 0) {
    if (!hasStart_) {
      JavaUtilTreeMap_Node *node = [JavaUtilTreeMap minimumWithJavaUtilTreeMap_Node:backingMap_->root_];
      if (node != nil && [self checkUpperBoundWithId:[((IOSObjectArray *) nil_chk(node->keys_)) objectAtIndex:node->left_idx_]]) {
        return [node->keys_ objectAtIndex:node->left_idx_];
      }
    }
    else {
      [self setFirstKey];
      if (firstKeyNode_ != nil) {
        return [((IOSObjectArray *) nil_chk(firstKeyNode_->keys_)) objectAtIndex:firstKeyIndex_];
      }
    }
  }
  @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
}

- (id)getWithId:(id)key {
  if ([self isInRangeWithId:(id) key]) {
    return [((JavaUtilTreeMap *) nil_chk(backingMap_)) getWithId:key];
  }
  return nil;
}

- (id<JavaUtilSortedMap>)headMapWithId:(id)endKey {
  [self checkRangeWithId:endKey];
  if (hasStart_) {
    return [[[JavaUtilTreeMap_SubMap alloc] initWithId:startKey_ withJavaUtilTreeMap:backingMap_ withId:endKey] autorelease];
  }
  return [[[JavaUtilTreeMap_SubMap alloc] initWithJavaUtilTreeMap:backingMap_ withId:endKey] autorelease];
}

- (BOOL)isEmpty {
  if (hasStart_) {
    [self setFirstKey];
    return firstKeyNode_ == nil;
  }
  else {
    [self setLastKey];
    return lastKeyNode_ == nil;
  }
}

- (id<JavaUtilSet>)keySet {
  if (keySet__ == nil) {
    JavaUtilAbstractMap_set_keySet__(self, [[[JavaUtilTreeMap_SubMapKeySet alloc] initWithJavaUtilTreeMap_SubMap:self] autorelease]);
  }
  return keySet__;
}

- (void)setLastKey {
  if (lastKeyModCount_ == ((JavaUtilTreeMap *) nil_chk(backingMap_))->modCount_) {
    return;
  }
  id<JavaLangComparable> object = backingMap_->comparator__ == nil ? [JavaUtilTreeMap toComparableWithId:(id) endKey_] : nil;
  id key = (id) endKey_;
  JavaUtilTreeMap_Node *node = backingMap_->root_;
  JavaUtilTreeMap_Node *foundNode = nil;
  int foundIndex = -1;
  while (node != nil) {
    IOSObjectArray *keys = ((JavaUtilTreeMap_Node *) nil_chk(node))->keys_;
    int left_idx = node->left_idx_;
    int result = [backingMap_ cmpWithJavaLangComparable:object withId:key withId:[((IOSObjectArray *) nil_chk(keys)) objectAtIndex:left_idx]];
    if (result <= 0) {
      node = node->left_;
    }
    else {
      int right_idx = node->right_idx_;
      if (left_idx != right_idx) {
        result = [backingMap_ cmpWithJavaLangComparable:object withId:key withId:[keys objectAtIndex:right_idx]];
      }
      if (result > 0) {
        foundNode = node;
        foundIndex = right_idx;
        node = node->right_;
      }
      else if (result == 0) {
        if (node->left_idx_ == node->right_idx_) {
          foundNode = node->prev_;
          if (foundNode != nil) {
            foundIndex = foundNode->right_idx_ - 1;
          }
        }
        else {
          foundNode = node;
          foundIndex = right_idx - 1;
        }
        break;
      }
      else {
        foundNode = node;
        foundIndex = left_idx;
        int low = left_idx + 1, mid = 0, high = right_idx - 1;
        while (low <= high) {
          mid = (int) (((unsigned int) (low + high)) >> 1);
          result = [backingMap_ cmpWithJavaLangComparable:object withId:key withId:[keys objectAtIndex:mid]];
          if (result > 0) {
            foundNode = node;
            foundIndex = mid;
            low = mid + 1;
          }
          else if (result == 0) {
            foundNode = node;
            foundIndex = mid - 1;
            goto break_TOP_LOOP;
          }
          else {
            high = mid - 1;
          }
        }
        goto break_TOP_LOOP;
      }
    }
  }
  break_TOP_LOOP: ;
  if (foundNode != nil && ![self checkLowerBoundWithId:[((IOSObjectArray *) nil_chk(foundNode->keys_)) objectAtIndex:foundIndex]]) {
    foundNode = nil;
  }
  JavaUtilTreeMap_SubMap_set_lastKeyNode_(self, foundNode);
  lastKeyIndex_ = foundIndex;
  lastKeyModCount_ = backingMap_->modCount_;
}

- (id)lastKey {
  if (((JavaUtilTreeMap *) nil_chk(backingMap_))->size__ > 0) {
    if (!hasEnd_) {
      JavaUtilTreeMap_Node *node = [JavaUtilTreeMap maximumWithJavaUtilTreeMap_Node:backingMap_->root_];
      if (node != nil && [self checkLowerBoundWithId:[((IOSObjectArray *) nil_chk(node->keys_)) objectAtIndex:node->right_idx_]]) {
        return [node->keys_ objectAtIndex:node->right_idx_];
      }
    }
    else {
      [self setLastKey];
      if (lastKeyNode_ != nil) {
        return [((IOSObjectArray *) nil_chk(lastKeyNode_->keys_)) objectAtIndex:lastKeyIndex_];
      }
    }
  }
  @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
}

- (id)putWithId:(id)key
         withId:(id)value {
  if ([self isInRangeWithId:key]) {
    return [((JavaUtilTreeMap *) nil_chk(backingMap_)) putWithId:key withId:value];
  }
  @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
}

- (id)removeWithId:(id)key {
  if ([self isInRangeWithId:(id) key]) {
    return [((JavaUtilTreeMap *) nil_chk(backingMap_)) removeWithId:key];
  }
  return nil;
}

- (id<JavaUtilSortedMap>)subMapWithId:(id)startKey
                               withId:(id)endKey {
  [self checkRangeWithId:startKey];
  [self checkRangeWithId:endKey];
  id<JavaUtilComparator> c = [((JavaUtilTreeMap *) nil_chk(backingMap_)) comparator];
  if (c == nil) {
    if ([((id<JavaLangComparable>) nil_chk([JavaUtilTreeMap toComparableWithId:startKey])) compareToWithId:endKey] <= 0) {
      return [[[JavaUtilTreeMap_SubMap alloc] initWithId:startKey withJavaUtilTreeMap:backingMap_ withId:endKey] autorelease];
    }
  }
  else {
    if ([c compareWithId:startKey withId:endKey] <= 0) {
      return [[[JavaUtilTreeMap_SubMap alloc] initWithId:startKey withJavaUtilTreeMap:backingMap_ withId:endKey] autorelease];
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
}

- (id<JavaUtilSortedMap>)tailMapWithId:(id)startKey {
  [self checkRangeWithId:startKey];
  if (hasEnd_) {
    return [[[JavaUtilTreeMap_SubMap alloc] initWithId:startKey withJavaUtilTreeMap:backingMap_ withId:endKey_] autorelease];
  }
  return [[[JavaUtilTreeMap_SubMap alloc] initWithId:startKey withJavaUtilTreeMap:backingMap_] autorelease];
}

- (id<JavaUtilCollection>)values {
  if (valuesCollection_ == nil) {
    JavaUtilAbstractMap_set_valuesCollection_(self, [[[JavaUtilTreeMap_SubMapValuesCollection alloc] initWithJavaUtilTreeMap_SubMap:self] autorelease]);
  }
  return valuesCollection_;
}

- (int)size {
  JavaUtilTreeMap_Node *from, *to;
  int fromIndex, toIndex;
  if (hasStart_) {
    [self setFirstKey];
    from = firstKeyNode_;
    fromIndex = firstKeyIndex_;
  }
  else {
    from = [JavaUtilTreeMap minimumWithJavaUtilTreeMap_Node:((JavaUtilTreeMap *) nil_chk(backingMap_))->root_];
    fromIndex = from == nil ? 0 : from->left_idx_;
  }
  if (from == nil) {
    return 0;
  }
  if (hasEnd_) {
    [self setLastKey];
    to = lastKeyNode_;
    toIndex = lastKeyIndex_;
  }
  else {
    to = [JavaUtilTreeMap maximumWithJavaUtilTreeMap_Node:((JavaUtilTreeMap *) nil_chk(backingMap_))->root_];
    toIndex = to == nil ? 0 : to->right_idx_;
  }
  if (to == nil) {
    return 0;
  }
  if (from == to) {
    return toIndex - fromIndex + 1;
  }
  int sum = 0;
  while (from != to) {
    sum += (((JavaUtilTreeMap_Node *) nil_chk(from))->right_idx_ - fromIndex + 1);
    from = from->next_;
    fromIndex = ((JavaUtilTreeMap_Node *) nil_chk(from))->left_idx_;
  }
  return sum + toIndex - fromIndex + 1;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilTreeMap_SubMap_set_lastKeyNode_(self, nil);
  JavaUtilTreeMap_SubMap_set_firstKeyNode_(self, nil);
  JavaUtilTreeMap_SubMap_set_entrySet__(self, nil);
  JavaUtilTreeMap_SubMap_set_endKey_(self, nil);
  JavaUtilTreeMap_SubMap_set_startKey_(self, nil);
  JavaUtilTreeMap_SubMap_set_backingMap_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilTreeMap_SubMap *)other {
  [super copyAllFieldsTo:other];
  JavaUtilTreeMap_SubMap_set_backingMap_(other, backingMap_);
  JavaUtilTreeMap_SubMap_set_endKey_(other, endKey_);
  JavaUtilTreeMap_SubMap_set_entrySet__(other, entrySet__);
  other->firstKeyIndex_ = firstKeyIndex_;
  other->firstKeyModCount_ = firstKeyModCount_;
  JavaUtilTreeMap_SubMap_set_firstKeyNode_(other, firstKeyNode_);
  other->hasEnd_ = hasEnd_;
  other->hasStart_ = hasStart_;
  other->lastKeyIndex_ = lastKeyIndex_;
  other->lastKeyModCount_ = lastKeyModCount_;
  JavaUtilTreeMap_SubMap_set_lastKeyNode_(other, lastKeyNode_);
  JavaUtilTreeMap_SubMap_set_startKey_(other, startKey_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:backingMap_ name:@"backingMap"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:startKey_ name:@"startKey"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:endKey_ name:@"endKey"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:entrySet__ name:@"entrySet_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:firstKeyNode_ name:@"firstKeyNode"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:lastKeyNode_ name:@"lastKeyNode"]];
  return result;
}

@end
@implementation JavaUtilTreeMap_SubMapEntrySet

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilTreeMap_SubMap:(JavaUtilTreeMap_SubMap *)map {
  if ((self = [super init])) {
    subMap_ = map;
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)isEmpty {
  return [((JavaUtilTreeMap_SubMap *) nil_chk(subMap_)) isEmpty];
}

- (id<JavaUtilIterator>)iterator {
  JavaUtilTreeMap_Node *from;
  int fromIndex;
  if (((JavaUtilTreeMap_SubMap *) nil_chk(subMap_))->hasStart_) {
    [subMap_ setFirstKey];
    from = subMap_->firstKeyNode_;
    fromIndex = subMap_->firstKeyIndex_;
  }
  else {
    from = [JavaUtilTreeMap minimumWithJavaUtilTreeMap_Node:((JavaUtilTreeMap *) nil_chk(subMap_->backingMap_))->root_];
    fromIndex = from != nil ? from->left_idx_ : 0;
  }
  if (!subMap_->hasEnd_) {
    return [[[JavaUtilTreeMap_UnboundedEntryIterator alloc] initWithJavaUtilTreeMap:subMap_->backingMap_ withJavaUtilTreeMap_Node:from withInt:from == nil ? 0 : from->right_idx_ - fromIndex] autorelease];
  }
  [subMap_ setLastKey];
  JavaUtilTreeMap_Node *to = subMap_->lastKeyNode_;
  int toIndex = subMap_->lastKeyIndex_;
  return [[[JavaUtilTreeMap_BoundedEntryIterator alloc] initWithJavaUtilTreeMap_Node:from withInt:from == nil ? 0 : from->right_idx_ - fromIndex withJavaUtilTreeMap:subMap_->backingMap_ withJavaUtilTreeMap_Node:to withInt:to == nil ? 0 : to->right_idx_ - toIndex] autorelease];
}

- (int)size {
  return [((JavaUtilTreeMap_SubMap *) nil_chk(subMap_)) size];
}

- (BOOL)containsWithId:(id)object {
  if ([object conformsToProtocol: @protocol(JavaUtilMap_Entry)]) {
    id<JavaUtilMap_Entry> entry = (id<JavaUtilMap_Entry>) object;
    id key = [((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey];
    if ([((JavaUtilTreeMap_SubMap *) nil_chk(subMap_)) isInRangeWithId:key]) {
      id v1 = [subMap_ getWithId:key], v2 = [entry getValue];
      return v1 == nil ? (v2 == nil && [subMap_ containsKeyWithId:key]) : [v1 isEqual:v2];
    }
  }
  return NO;
}

- (BOOL)removeWithId:(id)object {
  if ([self containsWithId:object]) {
    id<JavaUtilMap_Entry> entry = (id<JavaUtilMap_Entry>) object;
    id key = [((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey];
    [((JavaUtilTreeMap_SubMap *) nil_chk(subMap_)) removeWithId:key];
    return YES;
  }
  return NO;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilTreeMap_SubMapEntrySet *)other {
  [super copyAllFieldsTo:other];
  other->subMap_ = subMap_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  return result;
}

@end
@implementation JavaUtilTreeMap_SubMapKeySet

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilTreeMap_SubMap:(JavaUtilTreeMap_SubMap *)map {
  if ((self = [super init])) {
    subMap_ = map;
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)containsWithId:(id)object {
  return [((JavaUtilTreeMap_SubMap *) nil_chk(subMap_)) containsKeyWithId:object];
}

- (BOOL)isEmpty {
  return [((JavaUtilTreeMap_SubMap *) nil_chk(subMap_)) isEmpty];
}

- (int)size {
  return [((JavaUtilTreeMap_SubMap *) nil_chk(subMap_)) size];
}

- (BOOL)removeWithId:(id)object {
  if ([((JavaUtilTreeMap_SubMap *) nil_chk(subMap_)) containsKeyWithId:object]) {
    [subMap_ removeWithId:object];
    return YES;
  }
  return NO;
}

- (id<JavaUtilIterator>)iterator {
  JavaUtilTreeMap_Node *from;
  int fromIndex;
  if (((JavaUtilTreeMap_SubMap *) nil_chk(subMap_))->hasStart_) {
    [subMap_ setFirstKey];
    from = subMap_->firstKeyNode_;
    fromIndex = subMap_->firstKeyIndex_;
  }
  else {
    from = [JavaUtilTreeMap minimumWithJavaUtilTreeMap_Node:((JavaUtilTreeMap *) nil_chk(subMap_->backingMap_))->root_];
    fromIndex = from != nil ? from->left_idx_ : 0;
  }
  if (!subMap_->hasEnd_) {
    return [[[JavaUtilTreeMap_UnboundedKeyIterator alloc] initWithJavaUtilTreeMap:subMap_->backingMap_ withJavaUtilTreeMap_Node:from withInt:from == nil ? 0 : from->right_idx_ - fromIndex] autorelease];
  }
  [subMap_ setLastKey];
  JavaUtilTreeMap_Node *to = subMap_->lastKeyNode_;
  int toIndex = subMap_->lastKeyIndex_;
  return [[[JavaUtilTreeMap_BoundedKeyIterator alloc] initWithJavaUtilTreeMap_Node:from withInt:from == nil ? 0 : from->right_idx_ - fromIndex withJavaUtilTreeMap:subMap_->backingMap_ withJavaUtilTreeMap_Node:to withInt:to == nil ? 0 : to->right_idx_ - toIndex] autorelease];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilTreeMap_SubMapKeySet *)other {
  [super copyAllFieldsTo:other];
  other->subMap_ = subMap_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  return result;
}

@end
@implementation JavaUtilTreeMap_SubMapValuesCollection

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilTreeMap_SubMap:(JavaUtilTreeMap_SubMap *)subMap {
  if ((self = [super init])) {
    self->subMap_ = subMap;
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)isEmpty {
  return [((JavaUtilTreeMap_SubMap *) nil_chk(subMap_)) isEmpty];
}

- (id<JavaUtilIterator>)iterator {
  JavaUtilTreeMap_Node *from;
  int fromIndex;
  if (((JavaUtilTreeMap_SubMap *) nil_chk(subMap_))->hasStart_) {
    [subMap_ setFirstKey];
    from = subMap_->firstKeyNode_;
    fromIndex = subMap_->firstKeyIndex_;
  }
  else {
    from = [JavaUtilTreeMap minimumWithJavaUtilTreeMap_Node:((JavaUtilTreeMap *) nil_chk(subMap_->backingMap_))->root_];
    fromIndex = from != nil ? from->left_idx_ : 0;
  }
  if (!subMap_->hasEnd_) {
    return [[[JavaUtilTreeMap_UnboundedValueIterator alloc] initWithJavaUtilTreeMap:subMap_->backingMap_ withJavaUtilTreeMap_Node:from withInt:from == nil ? 0 : from->right_idx_ - fromIndex] autorelease];
  }
  [subMap_ setLastKey];
  JavaUtilTreeMap_Node *to = subMap_->lastKeyNode_;
  int toIndex = subMap_->lastKeyIndex_;
  return [[[JavaUtilTreeMap_BoundedValueIterator alloc] initWithJavaUtilTreeMap_Node:from withInt:from == nil ? 0 : from->right_idx_ - fromIndex withJavaUtilTreeMap:subMap_->backingMap_ withJavaUtilTreeMap_Node:to withInt:to == nil ? 0 : to->right_idx_ - toIndex] autorelease];
}

- (int)size {
  return [((JavaUtilTreeMap_SubMap *) nil_chk(subMap_)) size];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilTreeMap_SubMapValuesCollection *)other {
  [super copyAllFieldsTo:other];
  other->subMap_ = subMap_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  return result;
}

@end
@implementation JavaUtilTreeMap_EntrySet

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (int)size {
  return this$0_->size__;
}

- (void)clear {
  [this$0_ clear];
}

- (BOOL)containsWithId:(id)object {
  if ([object conformsToProtocol: @protocol(JavaUtilMap_Entry)]) {
    id<JavaUtilMap_Entry> entry = (id<JavaUtilMap_Entry>) object;
    id key = [((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey];
    id v1 = [this$0_ getWithId:key], v2 = [entry getValue];
    return v1 == nil ? (v2 == nil && [this$0_ containsKeyWithId:key]) : [v1 isEqual:v2];
  }
  return NO;
}

- (BOOL)removeWithId:(id)object {
  if ([self containsWithId:object]) {
    id<JavaUtilMap_Entry> entry = (id<JavaUtilMap_Entry>) object;
    id key = [((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey];
    [this$0_ removeWithId:key];
    return YES;
  }
  return NO;
}

- (id<JavaUtilIterator>)iterator {
  return [[[JavaUtilTreeMap_UnboundedEntryIterator alloc] initWithJavaUtilTreeMap:this$0_] autorelease];
}

- (id)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  return result;
}

@end
@implementation JavaUtilTreeMap_KeySet

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)map {
  if ((self = [super init])) {
    self->map_ = map;
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)containsWithId:(id)object {
  return [((JavaUtilTreeMap *) nil_chk(map_)) containsKeyWithId:object];
}

- (int)size {
  return ((JavaUtilTreeMap *) nil_chk(map_))->size__;
}

- (void)clear {
  [((JavaUtilTreeMap *) nil_chk(map_)) clear];
}

- (BOOL)removeWithId:(id)object {
  if ([self containsWithId:object]) {
    [((JavaUtilTreeMap *) nil_chk(map_)) removeWithId:object];
    return YES;
  }
  return NO;
}

- (id<JavaUtilIterator>)iterator {
  return [[[JavaUtilTreeMap_UnboundedKeyIterator alloc] initWithJavaUtilTreeMap:map_] autorelease];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilTreeMap_KeySet *)other {
  [super copyAllFieldsTo:other];
  other->map_ = map_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  return result;
}

@end
@implementation JavaUtilTreeMap_ValuesCollection

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)map {
  if ((self = [super init])) {
    self->map_ = map;
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)containsWithId:(id)object {
  return [((JavaUtilTreeMap *) nil_chk(map_)) containsValueWithId:object];
}

- (int)size {
  return ((JavaUtilTreeMap *) nil_chk(map_))->size__;
}

- (void)clear {
  [((JavaUtilTreeMap *) nil_chk(map_)) clear];
}

- (id<JavaUtilIterator>)iterator {
  return [[[JavaUtilTreeMap_UnboundedValueIterator alloc] initWithJavaUtilTreeMap:map_] autorelease];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilTreeMap_ValuesCollection *)other {
  [super copyAllFieldsTo:other];
  other->map_ = map_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  return result;
}

@end
