//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/LinkedHashSet.h"

@implementation JavaUtilLinkedHashSet

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)init {
  return JreMemDebugAdd([super initWithJavaUtilHashMap:[[[JavaUtilLinkedHashMap alloc] init] autorelease]]);
}

- (id)initWithInt:(int)capacity {
  return JreMemDebugAdd([super initWithJavaUtilHashMap:[[[JavaUtilLinkedHashMap alloc] initWithInt:capacity] autorelease]]);
}

- (id)initWithInt:(int)capacity
        withFloat:(float)loadFactor {
  return JreMemDebugAdd([super initWithJavaUtilHashMap:[[[JavaUtilLinkedHashMap alloc] initWithInt:capacity withFloat:loadFactor] autorelease]]);
}

- (id)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  if (self = [super initWithJavaUtilHashMap:[[[JavaUtilLinkedHashMap alloc] initWithInt:[((id<JavaUtilCollection>) nil_chk(collection)) size] < 6 ? 11 : [collection size] * 2] autorelease]]) {
    for (id __strong e in collection) {
      [self addWithId:e];
    }
    JreMemDebugAdd(self);
  }
  return self;
}

- (JavaUtilHashMap *)createBackingMapWithInt:(int)capacity
                                   withFloat:(float)loadFactor {
  return [[[JavaUtilLinkedHashMap alloc] initWithInt:capacity withFloat:loadFactor] autorelease];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

@end
