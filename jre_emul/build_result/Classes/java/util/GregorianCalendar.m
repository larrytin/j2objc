//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSBooleanArray.h"
#include "IOSByteArray.h"
#include "IOSIntArray.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Long.h"
#include "java/lang/System.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/GregorianCalendar.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"

@implementation JavaUtilGregorianCalendar

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilGregorianCalendar_DaysInMonth_ name:@"JavaUtilGregorianCalendar_DaysInMonth_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilGregorianCalendar_DaysInYear_ name:@"JavaUtilGregorianCalendar_DaysInYear_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilGregorianCalendar_maximums_ name:@"JavaUtilGregorianCalendar_maximums_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilGregorianCalendar_minimums_ name:@"JavaUtilGregorianCalendar_minimums_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilGregorianCalendar_leastMaximums_ name:@"JavaUtilGregorianCalendar_leastMaximums_"]];
  return result;
}

static IOSByteArray * JavaUtilGregorianCalendar_DaysInMonth_;
static IOSIntArray * JavaUtilGregorianCalendar_DaysInYear_;
static IOSIntArray * JavaUtilGregorianCalendar_maximums_;
static IOSIntArray * JavaUtilGregorianCalendar_minimums_;
static IOSIntArray * JavaUtilGregorianCalendar_leastMaximums_;

+ (int)BC {
  return JavaUtilGregorianCalendar_BC;
}

+ (int)AD {
  return JavaUtilGregorianCalendar_AD;
}

+ (IOSByteArray *)DaysInMonth {
  return JavaUtilGregorianCalendar_DaysInMonth_;
}

+ (void)setDaysInMonth:(IOSByteArray *)DaysInMonth {
  JreOperatorRetainedAssign(&JavaUtilGregorianCalendar_DaysInMonth_, nil, DaysInMonth);
}

+ (IOSIntArray *)DaysInYear {
  return JavaUtilGregorianCalendar_DaysInYear_;
}

+ (void)setDaysInYear:(IOSIntArray *)DaysInYear {
  JreOperatorRetainedAssign(&JavaUtilGregorianCalendar_DaysInYear_, nil, DaysInYear);
}

+ (IOSIntArray *)maximums {
  return JavaUtilGregorianCalendar_maximums_;
}

+ (void)setMaximums:(IOSIntArray *)maximums {
  JreOperatorRetainedAssign(&JavaUtilGregorianCalendar_maximums_, nil, maximums);
}

+ (IOSIntArray *)minimums {
  return JavaUtilGregorianCalendar_minimums_;
}

+ (void)setMinimums:(IOSIntArray *)minimums {
  JreOperatorRetainedAssign(&JavaUtilGregorianCalendar_minimums_, nil, minimums);
}

+ (IOSIntArray *)leastMaximums {
  return JavaUtilGregorianCalendar_leastMaximums_;
}

+ (void)setLeastMaximums:(IOSIntArray *)leastMaximums {
  JreOperatorRetainedAssign(&JavaUtilGregorianCalendar_leastMaximums_, nil, leastMaximums);
}

- (id)init {
  return JreMemDebugAdd([self initJavaUtilGregorianCalendarWithJavaUtilTimeZone:[JavaUtilTimeZone getDefault] withJavaUtilLocale:[JavaUtilLocale getDefault]]);
}

- (id)initWithInt:(int)year
          withInt:(int)month
          withInt:(int)day {
  if (self = [super initWithJavaUtilTimeZone:[JavaUtilTimeZone getDefault] withJavaUtilLocale:[JavaUtilLocale getDefault]]) {
    gregorianCutover_ = JavaUtilGregorianCalendar_defaultGregorianCutover;
    changeYear_ = 1582;
    julianSkew_ = ((changeYear_ - 2000) / 400) + [self julianError] - ((changeYear_ - 2000) / 100);
    currentYearSkew_ = 10;
    lastYearSkew_ = 0;
    [self setWithInt:year withInt:month withInt:day];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithInt:(int)year
          withInt:(int)month
          withInt:(int)day
          withInt:(int)hour
          withInt:(int)minute {
  if (self = [super initWithJavaUtilTimeZone:[JavaUtilTimeZone getDefault] withJavaUtilLocale:[JavaUtilLocale getDefault]]) {
    gregorianCutover_ = JavaUtilGregorianCalendar_defaultGregorianCutover;
    changeYear_ = 1582;
    julianSkew_ = ((changeYear_ - 2000) / 400) + [self julianError] - ((changeYear_ - 2000) / 100);
    currentYearSkew_ = 10;
    lastYearSkew_ = 0;
    [self setWithInt:year withInt:month withInt:day withInt:hour withInt:minute];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithInt:(int)year
          withInt:(int)month
          withInt:(int)day
          withInt:(int)hour
          withInt:(int)minute
          withInt:(int)second {
  if (self = [super initWithJavaUtilTimeZone:[JavaUtilTimeZone getDefault] withJavaUtilLocale:[JavaUtilLocale getDefault]]) {
    gregorianCutover_ = JavaUtilGregorianCalendar_defaultGregorianCutover;
    changeYear_ = 1582;
    julianSkew_ = ((changeYear_ - 2000) / 400) + [self julianError] - ((changeYear_ - 2000) / 100);
    currentYearSkew_ = 10;
    lastYearSkew_ = 0;
    [self setWithInt:year withInt:month withInt:day withInt:hour withInt:minute withInt:second];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithLong:(long long int)milliseconds {
  if (self = [self initJavaUtilGregorianCalendarWithBoolean:NO]) {
    [self setTimeInMillisWithLong:milliseconds];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return JreMemDebugAdd([self initJavaUtilGregorianCalendarWithJavaUtilTimeZone:[JavaUtilTimeZone getDefault] withJavaUtilLocale:locale]);
}

- (id)initWithJavaUtilTimeZone:(JavaUtilTimeZone *)timezone {
  return JreMemDebugAdd([self initJavaUtilGregorianCalendarWithJavaUtilTimeZone:timezone withJavaUtilLocale:[JavaUtilLocale getDefault]]);
}

- (id)initJavaUtilGregorianCalendarWithJavaUtilTimeZone:(JavaUtilTimeZone *)timezone
                                     withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (self = [super initWithJavaUtilTimeZone:timezone withJavaUtilLocale:locale]) {
    gregorianCutover_ = JavaUtilGregorianCalendar_defaultGregorianCutover;
    changeYear_ = 1582;
    julianSkew_ = ((changeYear_ - 2000) / 400) + [self julianError] - ((changeYear_ - 2000) / 100);
    currentYearSkew_ = 10;
    lastYearSkew_ = 0;
    [self setTimeInMillisWithLong:[JavaLangSystem currentTimeMillis]];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaUtilTimeZone:(JavaUtilTimeZone *)timezone
            withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [self initJavaUtilGregorianCalendarWithJavaUtilTimeZone:timezone withJavaUtilLocale:locale];
}

- (id)initJavaUtilGregorianCalendarWithBoolean:(BOOL)ignored {
  if (self = [super initWithJavaUtilTimeZone:[JavaUtilTimeZone getDefault]]) {
    gregorianCutover_ = JavaUtilGregorianCalendar_defaultGregorianCutover;
    changeYear_ = 1582;
    julianSkew_ = ((changeYear_ - 2000) / 400) + [self julianError] - ((changeYear_ - 2000) / 100);
    currentYearSkew_ = 10;
    lastYearSkew_ = 0;
    [self setFirstDayOfWeekWithInt:JavaUtilCalendar_SUNDAY];
    [self setMinimalDaysInFirstWeekWithInt:1];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithBoolean:(BOOL)ignored {
  return [self initJavaUtilGregorianCalendarWithBoolean:ignored];
}

- (void)addWithInt:(int)field
           withInt:(int)value {
  if (value == 0) {
    return;
  }
  if (field < 0 || field >= JavaUtilCalendar_ZONE_OFFSET) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  if (field == JavaUtilCalendar_ERA) {
    [self complete];
    if (IOSIntArray_Get(nil_chk(fields_), JavaUtilCalendar_ERA) == JavaUtilGregorianCalendar_AD) {
      if (value >= 0) {
        return;
      }
      [self setWithInt:JavaUtilCalendar_ERA withInt:JavaUtilGregorianCalendar_BC];
    }
    else {
      if (value <= 0) {
        return;
      }
      [self setWithInt:JavaUtilCalendar_ERA withInt:JavaUtilGregorianCalendar_AD];
    }
    [self complete];
    return;
  }
  if (field == JavaUtilCalendar_YEAR || field == JavaUtilCalendar_MONTH) {
    [self complete];
    if (field == JavaUtilCalendar_MONTH) {
      int month = IOSIntArray_Get(nil_chk(fields_), JavaUtilCalendar_MONTH) + value;
      if (month < 0) {
        value = (month - 11) / 12;
        month = 12 + (month % 12);
      }
      else {
        value = month / 12;
      }
      [self setWithInt:JavaUtilCalendar_MONTH withInt:month % 12];
    }
    [self setWithInt:JavaUtilCalendar_YEAR withInt:IOSIntArray_Get(nil_chk(fields_), JavaUtilCalendar_YEAR) + value];
    int days = [self daysInMonthWithBoolean:[self isLeapYearWithInt:IOSIntArray_Get(fields_, JavaUtilCalendar_YEAR)] withInt:IOSIntArray_Get(fields_, JavaUtilCalendar_MONTH)];
    if (IOSIntArray_Get(fields_, JavaUtilCalendar_DATE) > days) {
      [self setWithInt:JavaUtilCalendar_DATE withInt:days];
    }
    [self complete];
    return;
  }
  long long int multiplier = 0;
  [self getTimeInMillis];
  switch (field) {
    case JavaUtilCalendar_MILLISECOND:
    time_ += value;
    break;
    case JavaUtilCalendar_SECOND:
    time_ += value * 1000LL;
    break;
    case JavaUtilCalendar_MINUTE:
    time_ += value * 60000LL;
    break;
    case JavaUtilCalendar_HOUR:
    case JavaUtilCalendar_HOUR_OF_DAY:
    time_ += value * 3600000LL;
    break;
    case JavaUtilCalendar_AM_PM:
    multiplier = 43200000LL;
    break;
    case JavaUtilCalendar_DATE:
    case JavaUtilCalendar_DAY_OF_YEAR:
    case JavaUtilCalendar_DAY_OF_WEEK:
    multiplier = 86400000LL;
    break;
    case JavaUtilCalendar_WEEK_OF_YEAR:
    case JavaUtilCalendar_WEEK_OF_MONTH:
    case JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH:
    multiplier = 604800000LL;
    break;
  }
  if (multiplier == 0) {
    areFieldsSet_ = NO;
    [self complete];
    return;
  }
  long long int delta = value * multiplier;
  int zoneOffset = [((JavaUtilTimeZone *) nil_chk([self getTimeZone])) getRawOffset];
  int offsetBefore = [self getOffsetWithLong:time_ + zoneOffset];
  int offsetAfter = [self getOffsetWithLong:time_ + zoneOffset + delta];
  int dstDelta = offsetBefore - offsetAfter;
  if ([self getOffsetWithLong:time_ + zoneOffset + delta + dstDelta] == offsetAfter) {
    delta += dstDelta;
  }
  time_ += delta;
  areFieldsSet_ = NO;
  [self complete];
}

- (void)fullFieldsCalcWithLong:(long long int)timeVal
                       withInt:(int)zoneOffset {
  int millis = (int) (time_ % 86400000);
  long long int days = timeVal / 86400000;
  if (millis < 0) {
    millis += 86400000;
    days--;
  }
  millis += zoneOffset;
  while (millis < 0) {
    millis += 86400000;
    days--;
  }
  while (millis >= 86400000) {
    millis -= 86400000;
    days++;
  }
  int dayOfYear = [self computeYearAndDayWithLong:days withLong:timeVal + zoneOffset];
  (*IOSIntArray_GetRef(nil_chk(fields_), JavaUtilCalendar_DAY_OF_YEAR)) = dayOfYear;
  if (IOSIntArray_Get(fields_, JavaUtilCalendar_YEAR) == changeYear_ && gregorianCutover_ <= timeVal + zoneOffset) {
    dayOfYear += currentYearSkew_;
  }
  int month = dayOfYear / 32;
  BOOL leapYear = [self isLeapYearWithInt:IOSIntArray_Get(fields_, JavaUtilCalendar_YEAR)];
  int date = dayOfYear - [self daysInYearWithBoolean:leapYear withInt:month];
  if (date > [self daysInMonthWithBoolean:leapYear withInt:month]) {
    date -= [self daysInMonthWithBoolean:leapYear withInt:month];
    month++;
  }
  (*IOSIntArray_GetRef(fields_, JavaUtilCalendar_DAY_OF_WEEK)) = [self mod7WithLong:days - 3] + 1;
  int dstOffset = IOSIntArray_Get(fields_, JavaUtilCalendar_YEAR) <= 0 ? 0 : [((JavaUtilTimeZone *) nil_chk([self getTimeZone])) getOffsetWithInt:JavaUtilGregorianCalendar_AD withInt:IOSIntArray_Get(fields_, JavaUtilCalendar_YEAR) withInt:month withInt:date withInt:IOSIntArray_Get(fields_, JavaUtilCalendar_DAY_OF_WEEK) withInt:millis];
  if (IOSIntArray_Get(fields_, JavaUtilCalendar_YEAR) > 0) {
    dstOffset -= zoneOffset;
  }
  (*IOSIntArray_GetRef(fields_, JavaUtilCalendar_DST_OFFSET)) = dstOffset;
  if (dstOffset != 0) {
    long long int oldDays = days;
    millis += dstOffset;
    if (millis < 0) {
      millis += 86400000;
      days--;
    }
    else if (millis >= 86400000) {
      millis -= 86400000;
      days++;
    }
    if (oldDays != days) {
      dayOfYear = [self computeYearAndDayWithLong:days withLong:timeVal - zoneOffset + dstOffset];
      (*IOSIntArray_GetRef(fields_, JavaUtilCalendar_DAY_OF_YEAR)) = dayOfYear;
      if (IOSIntArray_Get(fields_, JavaUtilCalendar_YEAR) == changeYear_ && gregorianCutover_ <= timeVal - zoneOffset + dstOffset) {
        dayOfYear += currentYearSkew_;
      }
      month = dayOfYear / 32;
      leapYear = [self isLeapYearWithInt:IOSIntArray_Get(fields_, JavaUtilCalendar_YEAR)];
      date = dayOfYear - [self daysInYearWithBoolean:leapYear withInt:month];
      if (date > [self daysInMonthWithBoolean:leapYear withInt:month]) {
        date -= [self daysInMonthWithBoolean:leapYear withInt:month];
        month++;
      }
      (*IOSIntArray_GetRef(fields_, JavaUtilCalendar_DAY_OF_WEEK)) = [self mod7WithLong:days - 3] + 1;
    }
  }
  (*IOSIntArray_GetRef(fields_, JavaUtilCalendar_MILLISECOND)) = (millis % 1000);
  millis /= 1000;
  (*IOSIntArray_GetRef(fields_, JavaUtilCalendar_SECOND)) = (millis % 60);
  millis /= 60;
  (*IOSIntArray_GetRef(fields_, JavaUtilCalendar_MINUTE)) = (millis % 60);
  millis /= 60;
  (*IOSIntArray_GetRef(fields_, JavaUtilCalendar_HOUR_OF_DAY)) = (millis % 24);
  (*IOSIntArray_GetRef(fields_, JavaUtilCalendar_AM_PM)) = IOSIntArray_Get(fields_, JavaUtilCalendar_HOUR_OF_DAY) > 11 ? 1 : 0;
  (*IOSIntArray_GetRef(fields_, JavaUtilCalendar_HOUR)) = IOSIntArray_Get(fields_, JavaUtilCalendar_HOUR_OF_DAY) % 12;
  if (IOSIntArray_Get(fields_, JavaUtilCalendar_YEAR) <= 0) {
    (*IOSIntArray_GetRef(fields_, JavaUtilCalendar_ERA)) = JavaUtilGregorianCalendar_BC;
    (*IOSIntArray_GetRef(fields_, JavaUtilCalendar_YEAR)) = -IOSIntArray_Get(fields_, JavaUtilCalendar_YEAR) + 1;
  }
  else {
    (*IOSIntArray_GetRef(fields_, JavaUtilCalendar_ERA)) = JavaUtilGregorianCalendar_AD;
  }
  (*IOSIntArray_GetRef(fields_, JavaUtilCalendar_MONTH)) = month;
  (*IOSIntArray_GetRef(fields_, JavaUtilCalendar_DATE)) = date;
  (*IOSIntArray_GetRef(fields_, JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH)) = (date - 1) / 7 + 1;
  (*IOSIntArray_GetRef(fields_, JavaUtilCalendar_WEEK_OF_MONTH)) = (date - 1 + [self mod7WithLong:days - date - 2 - ([self getFirstDayOfWeek] - 1)]) / 7 + 1;
  int daysFromStart = [self mod7WithLong:days - 3 - (IOSIntArray_Get(fields_, JavaUtilCalendar_DAY_OF_YEAR) - 1) - ([self getFirstDayOfWeek] - 1)];
  int week = (IOSIntArray_Get(fields_, JavaUtilCalendar_DAY_OF_YEAR) - 1 + daysFromStart) / 7 + (7 - daysFromStart >= [self getMinimalDaysInFirstWeek] ? 1 : 0);
  if (week == 0) {
    (*IOSIntArray_GetRef(fields_, JavaUtilCalendar_WEEK_OF_YEAR)) = 7 - [self mod7WithLong:daysFromStart - ([self isLeapYearWithInt:IOSIntArray_Get(fields_, JavaUtilCalendar_YEAR) - 1] ? 2 : 1)] >= [self getMinimalDaysInFirstWeek] ? 53 : 52;
  }
  else if (IOSIntArray_Get(fields_, JavaUtilCalendar_DAY_OF_YEAR) >= (leapYear ? 367 : 366) - [self mod7WithLong:daysFromStart + (leapYear ? 2 : 1)]) {
    (*IOSIntArray_GetRef(fields_, JavaUtilCalendar_WEEK_OF_YEAR)) = 7 - [self mod7WithLong:daysFromStart + (leapYear ? 2 : 1)] >= [self getMinimalDaysInFirstWeek] ? 1 : week;
  }
  else {
    (*IOSIntArray_GetRef(fields_, JavaUtilCalendar_WEEK_OF_YEAR)) = week;
  }
}

- (void)computeFields {
  JavaUtilTimeZone *timeZone = [self getTimeZone];
  int dstOffset = [((JavaUtilTimeZone *) nil_chk(timeZone)) inDaylightTimeWithJavaUtilDate:[[[JavaUtilDate alloc] initWithLong:time_] autorelease]] ? [timeZone getDSTSavings] : 0;
  int zoneOffset = [timeZone getRawOffset];
  (*IOSIntArray_GetRef(nil_chk(fields_), JavaUtilCalendar_DST_OFFSET)) = dstOffset;
  (*IOSIntArray_GetRef(fields_, JavaUtilCalendar_ZONE_OFFSET)) = zoneOffset;
  [self fullFieldsCalcWithLong:time_ withInt:zoneOffset];
  for (int i = 0; i < JavaUtilCalendar_FIELD_COUNT; i++) {
    (*IOSBooleanArray_GetRef(nil_chk(isSet__), i)) = YES;
  }
}

- (void)computeTime {
  if (![self isLenient]) {
    if (IOSBooleanArray_Get(nil_chk(isSet__), JavaUtilCalendar_HOUR_OF_DAY)) {
      if (IOSIntArray_Get(nil_chk(fields_), JavaUtilCalendar_HOUR_OF_DAY) < 0 || IOSIntArray_Get(fields_, JavaUtilCalendar_HOUR_OF_DAY) > 23) {
        @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
      }
    }
    else if (IOSBooleanArray_Get(isSet__, JavaUtilCalendar_HOUR) && (IOSIntArray_Get(nil_chk(fields_), JavaUtilCalendar_HOUR) < 0 || IOSIntArray_Get(fields_, JavaUtilCalendar_HOUR) > 11)) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
    if (IOSBooleanArray_Get(isSet__, JavaUtilCalendar_MINUTE) && (IOSIntArray_Get(nil_chk(fields_), JavaUtilCalendar_MINUTE) < 0 || IOSIntArray_Get(fields_, JavaUtilCalendar_MINUTE) > 59)) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
    if (IOSBooleanArray_Get(isSet__, JavaUtilCalendar_SECOND) && (IOSIntArray_Get(nil_chk(fields_), JavaUtilCalendar_SECOND) < 0 || IOSIntArray_Get(fields_, JavaUtilCalendar_SECOND) > 59)) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
    if (IOSBooleanArray_Get(isSet__, JavaUtilCalendar_MILLISECOND) && (IOSIntArray_Get(nil_chk(fields_), JavaUtilCalendar_MILLISECOND) < 0 || IOSIntArray_Get(fields_, JavaUtilCalendar_MILLISECOND) > 999)) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
    if (IOSBooleanArray_Get(isSet__, JavaUtilCalendar_WEEK_OF_YEAR) && (IOSIntArray_Get(nil_chk(fields_), JavaUtilCalendar_WEEK_OF_YEAR) < 1 || IOSIntArray_Get(fields_, JavaUtilCalendar_WEEK_OF_YEAR) > 53)) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
    if (IOSBooleanArray_Get(isSet__, JavaUtilCalendar_DAY_OF_WEEK) && (IOSIntArray_Get(nil_chk(fields_), JavaUtilCalendar_DAY_OF_WEEK) < 1 || IOSIntArray_Get(fields_, JavaUtilCalendar_DAY_OF_WEEK) > 7)) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
    if (IOSBooleanArray_Get(isSet__, JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH) && (IOSIntArray_Get(nil_chk(fields_), JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH) < 1 || IOSIntArray_Get(fields_, JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH) > 6)) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
    if (IOSBooleanArray_Get(isSet__, JavaUtilCalendar_WEEK_OF_MONTH) && (IOSIntArray_Get(nil_chk(fields_), JavaUtilCalendar_WEEK_OF_MONTH) < 1 || IOSIntArray_Get(fields_, JavaUtilCalendar_WEEK_OF_MONTH) > 6)) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
    if (IOSBooleanArray_Get(isSet__, JavaUtilCalendar_AM_PM) && IOSIntArray_Get(nil_chk(fields_), JavaUtilCalendar_AM_PM) != JavaUtilCalendar_AM && IOSIntArray_Get(fields_, JavaUtilCalendar_AM_PM) != JavaUtilCalendar_PM) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
    if (IOSBooleanArray_Get(isSet__, JavaUtilCalendar_HOUR) && (IOSIntArray_Get(nil_chk(fields_), JavaUtilCalendar_HOUR) < 0 || IOSIntArray_Get(fields_, JavaUtilCalendar_HOUR) > 11)) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
    if (IOSBooleanArray_Get(isSet__, JavaUtilCalendar_YEAR)) {
      if (IOSBooleanArray_Get(isSet__, JavaUtilCalendar_ERA) && IOSIntArray_Get(nil_chk(fields_), JavaUtilCalendar_ERA) == JavaUtilGregorianCalendar_BC && (IOSIntArray_Get(fields_, JavaUtilCalendar_YEAR) < 1 || IOSIntArray_Get(fields_, JavaUtilCalendar_YEAR) > 292269054)) {
        @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
      }
      else if (IOSIntArray_Get(nil_chk(fields_), JavaUtilCalendar_YEAR) < 1 || IOSIntArray_Get(fields_, JavaUtilCalendar_YEAR) > 292278994) {
        @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
      }
    }
    if (IOSBooleanArray_Get(isSet__, JavaUtilCalendar_MONTH) && (IOSIntArray_Get(nil_chk(fields_), JavaUtilCalendar_MONTH) < 0 || IOSIntArray_Get(fields_, JavaUtilCalendar_MONTH) > 11)) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
  }
  long long int timeVal;
  long long int hour = 0;
  if (IOSBooleanArray_Get(nil_chk(isSet__), JavaUtilCalendar_HOUR_OF_DAY) && lastTimeFieldSet_ != JavaUtilCalendar_HOUR) {
    hour = IOSIntArray_Get(nil_chk(fields_), JavaUtilCalendar_HOUR_OF_DAY);
  }
  else if (IOSBooleanArray_Get(isSet__, JavaUtilCalendar_HOUR)) {
    hour = (IOSIntArray_Get(nil_chk(fields_), JavaUtilCalendar_AM_PM) * 12) + IOSIntArray_Get(fields_, JavaUtilCalendar_HOUR);
  }
  timeVal = hour * 3600000;
  if (IOSBooleanArray_Get(isSet__, JavaUtilCalendar_MINUTE)) {
    timeVal += ((long long int) IOSIntArray_Get(nil_chk(fields_), JavaUtilCalendar_MINUTE)) * 60000;
  }
  if (IOSBooleanArray_Get(isSet__, JavaUtilCalendar_SECOND)) {
    timeVal += ((long long int) IOSIntArray_Get(nil_chk(fields_), JavaUtilCalendar_SECOND)) * 1000;
  }
  if (IOSBooleanArray_Get(isSet__, JavaUtilCalendar_MILLISECOND)) {
    timeVal += IOSIntArray_Get(nil_chk(fields_), JavaUtilCalendar_MILLISECOND);
  }
  long long int days;
  int year = IOSBooleanArray_Get(isSet__, JavaUtilCalendar_YEAR) ? IOSIntArray_Get(nil_chk(fields_), JavaUtilCalendar_YEAR) : 1970;
  if (IOSBooleanArray_Get(isSet__, JavaUtilCalendar_ERA)) {
    if (IOSIntArray_Get(nil_chk(fields_), JavaUtilCalendar_ERA) != JavaUtilGregorianCalendar_BC && IOSIntArray_Get(fields_, JavaUtilCalendar_ERA) != JavaUtilGregorianCalendar_AD) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
    if (IOSIntArray_Get(fields_, JavaUtilCalendar_ERA) == JavaUtilGregorianCalendar_BC) {
      year = 1 - year;
    }
  }
  BOOL weekMonthSet = IOSBooleanArray_Get(isSet__, JavaUtilCalendar_WEEK_OF_MONTH) || IOSBooleanArray_Get(isSet__, JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH);
  BOOL useMonth = (IOSBooleanArray_Get(isSet__, JavaUtilCalendar_DATE) || IOSBooleanArray_Get(isSet__, JavaUtilCalendar_MONTH) || weekMonthSet) && lastDateFieldSet_ != JavaUtilCalendar_DAY_OF_YEAR;
  if (useMonth && (lastDateFieldSet_ == JavaUtilCalendar_DAY_OF_WEEK || lastDateFieldSet_ == JavaUtilCalendar_WEEK_OF_YEAR)) {
    if (IOSBooleanArray_Get(isSet__, JavaUtilCalendar_WEEK_OF_YEAR) && IOSBooleanArray_Get(isSet__, JavaUtilCalendar_DAY_OF_WEEK)) {
      useMonth = lastDateFieldSet_ != JavaUtilCalendar_WEEK_OF_YEAR && weekMonthSet && IOSBooleanArray_Get(isSet__, JavaUtilCalendar_DAY_OF_WEEK);
    }
    else if (IOSBooleanArray_Get(isSet__, JavaUtilCalendar_DAY_OF_YEAR)) {
      useMonth = IOSBooleanArray_Get(isSet__, JavaUtilCalendar_DATE) && IOSBooleanArray_Get(isSet__, JavaUtilCalendar_MONTH);
    }
  }
  if (useMonth) {
    int month = IOSIntArray_Get(nil_chk(fields_), JavaUtilCalendar_MONTH);
    year += month / 12;
    month %= 12;
    if (month < 0) {
      year--;
      month += 12;
    }
    BOOL leapYear = [self isLeapYearWithInt:year];
    days = [self daysFromBaseYearWithLong:year] + [self daysInYearWithBoolean:leapYear withInt:month];
    BOOL useDate = IOSBooleanArray_Get(isSet__, JavaUtilCalendar_DATE);
    if (useDate && (lastDateFieldSet_ == JavaUtilCalendar_DAY_OF_WEEK || lastDateFieldSet_ == JavaUtilCalendar_WEEK_OF_MONTH || lastDateFieldSet_ == JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH)) {
      useDate = !(IOSBooleanArray_Get(isSet__, JavaUtilCalendar_DAY_OF_WEEK) && weekMonthSet);
    }
    if (useDate) {
      if (![self isLenient] && (IOSIntArray_Get(fields_, JavaUtilCalendar_DATE) < 1 || IOSIntArray_Get(fields_, JavaUtilCalendar_DATE) > [self daysInMonthWithBoolean:leapYear withInt:month])) {
        @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
      }
      days += IOSIntArray_Get(fields_, JavaUtilCalendar_DATE) - 1;
    }
    else {
      int dayOfWeek;
      if (IOSBooleanArray_Get(isSet__, JavaUtilCalendar_DAY_OF_WEEK)) {
        dayOfWeek = IOSIntArray_Get(fields_, JavaUtilCalendar_DAY_OF_WEEK) - 1;
      }
      else {
        dayOfWeek = [self getFirstDayOfWeek] - 1;
      }
      if (IOSBooleanArray_Get(isSet__, JavaUtilCalendar_WEEK_OF_MONTH) && lastDateFieldSet_ != JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH) {
        int skew = [self mod7WithLong:days - 3 - ([self getFirstDayOfWeek] - 1)];
        days += (IOSIntArray_Get(fields_, JavaUtilCalendar_WEEK_OF_MONTH) - 1) * 7 + [self mod7WithLong:skew + dayOfWeek - (days - 3)] - skew;
      }
      else if (IOSBooleanArray_Get(isSet__, JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH)) {
        if (IOSIntArray_Get(fields_, JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH) >= 0) {
          days += [self mod7WithLong:dayOfWeek - (days - 3)] + (IOSIntArray_Get(fields_, JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH) - 1) * 7;
        }
        else {
          days += [self daysInMonthWithBoolean:leapYear withInt:month] + [self mod7WithLong:dayOfWeek - (days + [self daysInMonthWithBoolean:leapYear withInt:month] - 3)] + IOSIntArray_Get(fields_, JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH) * 7;
        }
      }
      else if (IOSBooleanArray_Get(isSet__, JavaUtilCalendar_DAY_OF_WEEK)) {
        int skew = [self mod7WithLong:days - 3 - ([self getFirstDayOfWeek] - 1)];
        days += [self mod7WithLong:[self mod7WithLong:skew + dayOfWeek - (days - 3)] - skew];
      }
    }
  }
  else {
    BOOL useWeekYear = IOSBooleanArray_Get(isSet__, JavaUtilCalendar_WEEK_OF_YEAR) && lastDateFieldSet_ != JavaUtilCalendar_DAY_OF_YEAR;
    if (useWeekYear && IOSBooleanArray_Get(isSet__, JavaUtilCalendar_DAY_OF_YEAR)) {
      useWeekYear = IOSBooleanArray_Get(isSet__, JavaUtilCalendar_DAY_OF_WEEK);
    }
    days = [self daysFromBaseYearWithLong:year];
    if (useWeekYear) {
      int dayOfWeek;
      if (IOSBooleanArray_Get(isSet__, JavaUtilCalendar_DAY_OF_WEEK)) {
        dayOfWeek = IOSIntArray_Get(nil_chk(fields_), JavaUtilCalendar_DAY_OF_WEEK) - 1;
      }
      else {
        dayOfWeek = [self getFirstDayOfWeek] - 1;
      }
      int skew = [self mod7WithLong:days - 3 - ([self getFirstDayOfWeek] - 1)];
      days += (IOSIntArray_Get(nil_chk(fields_), JavaUtilCalendar_WEEK_OF_YEAR) - 1) * 7 + [self mod7WithLong:skew + dayOfWeek - (days - 3)] - skew;
      if (7 - skew < [self getMinimalDaysInFirstWeek]) {
        days += 7;
      }
    }
    else if (IOSBooleanArray_Get(isSet__, JavaUtilCalendar_DAY_OF_YEAR)) {
      if (![self isLenient] && (IOSIntArray_Get(nil_chk(fields_), JavaUtilCalendar_DAY_OF_YEAR) < 1 || IOSIntArray_Get(fields_, JavaUtilCalendar_DAY_OF_YEAR) > (365 + ([self isLeapYearWithInt:year] ? 1 : 0)))) {
        @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
      }
      days += IOSIntArray_Get(nil_chk(fields_), JavaUtilCalendar_DAY_OF_YEAR) - 1;
    }
    else if (IOSBooleanArray_Get(isSet__, JavaUtilCalendar_DAY_OF_WEEK)) {
      days += [self mod7WithLong:IOSIntArray_Get(nil_chk(fields_), JavaUtilCalendar_DAY_OF_WEEK) - 1 - (days - 3)];
    }
  }
  lastDateFieldSet_ = 0;
  timeVal += days * 86400000;
  if (year == changeYear_ && timeVal >= gregorianCutover_ + [self julianError] * 86400000LL) {
    timeVal -= [self julianError] * 86400000LL;
  }
  long long int timeValWithoutDST = timeVal - [self getOffsetWithLong:timeVal] + [((JavaUtilTimeZone *) nil_chk([self getTimeZone])) getRawOffset];
  timeVal -= [self getOffsetWithLong:timeValWithoutDST];
  self->time_ = timeVal;
  if (timeValWithoutDST != timeVal) {
    [self computeFields];
    areFieldsSet_ = YES;
  }
}

- (int)computeYearAndDayWithLong:(long long int)dayCount
                        withLong:(long long int)localTime {
  int year = 1970;
  long long int days = dayCount;
  if (localTime < gregorianCutover_) {
    days -= julianSkew_;
  }
  int approxYears;
  while ((approxYears = (int) (days / 365)) != 0) {
    year = year + approxYears;
    days = dayCount - [self daysFromBaseYearWithLong:year];
  }
  if (days < 0) {
    year = year - 1;
    days = days + [self daysInYearWithInt:year];
  }
  (*IOSIntArray_GetRef(nil_chk(fields_), JavaUtilCalendar_YEAR)) = year;
  return (int) days + 1;
}

- (long long int)daysFromBaseYearWithLong:(long long int)year {
  if (year >= 1970) {
    long long int days = (year - 1970) * 365 + ((year - 1969) / 4);
    if (year > changeYear_) {
      days -= ((year - 1901) / 100) - ((year - 1601) / 400);
    }
    else {
      if (year == changeYear_) {
        days += currentYearSkew_;
      }
      else if (year == changeYear_ - 1) {
        days += lastYearSkew_;
      }
      else {
        days += julianSkew_;
      }
    }
    return days;
  }
  else if (year <= changeYear_) {
    return (year - 1970) * 365 + ((year - 1972) / 4) + julianSkew_;
  }
  return (year - 1970) * 365 + ((year - 1972) / 4) - ((year - 2000) / 100) + ((year - 2000) / 400);
}

- (int)daysInMonth {
  return [self daysInMonthWithBoolean:[self isLeapYearWithInt:IOSIntArray_Get(nil_chk(fields_), JavaUtilCalendar_YEAR)] withInt:IOSIntArray_Get(fields_, JavaUtilCalendar_MONTH)];
}

- (int)daysInMonthWithBoolean:(BOOL)leapYear
                      withInt:(int)month {
  if (leapYear && month == JavaUtilCalendar_FEBRUARY) {
    return IOSByteArray_Get(nil_chk(JavaUtilGregorianCalendar_DaysInMonth_), month) + 1;
  }
  return IOSByteArray_Get(nil_chk(JavaUtilGregorianCalendar_DaysInMonth_), month);
}

- (int)daysInYearWithInt:(int)year {
  int daysInYear = [self isLeapYearWithInt:year] ? 366 : 365;
  if (year == changeYear_) {
    daysInYear -= currentYearSkew_;
  }
  if (year == changeYear_ - 1) {
    daysInYear -= lastYearSkew_;
  }
  return daysInYear;
}

- (int)daysInYearWithBoolean:(BOOL)leapYear
                     withInt:(int)month {
  if (leapYear && month > JavaUtilCalendar_FEBRUARY) {
    return IOSIntArray_Get(nil_chk(JavaUtilGregorianCalendar_DaysInYear_), month) + 1;
  }
  return IOSIntArray_Get(nil_chk(JavaUtilGregorianCalendar_DaysInYear_), month);
}

- (BOOL)isEqual:(id)object {
  if (!([object isKindOfClass:[JavaUtilGregorianCalendar class]])) {
    return NO;
  }
  if (object == self) {
    return YES;
  }
  return [super isEqual:object] && gregorianCutover_ == ((JavaUtilGregorianCalendar *) nil_chk(object))->gregorianCutover_;
}

- (int)getActualMaximumWithInt:(int)field {
  int value;
  if ((value = IOSIntArray_Get(nil_chk(JavaUtilGregorianCalendar_maximums_), field)) == IOSIntArray_Get(nil_chk(JavaUtilGregorianCalendar_leastMaximums_), field)) {
    return value;
  }
  [self complete];
  long long int orgTime = time_;
  int result = 0;
  {
    JavaUtilGregorianCalendar *clone;
    switch (field) {
      case JavaUtilCalendar_WEEK_OF_YEAR:
      [self setWithInt:JavaUtilCalendar_DATE withInt:31];
      [self setWithInt:JavaUtilCalendar_MONTH withInt:JavaUtilCalendar_DECEMBER];
      result = [self getWithInt:JavaUtilCalendar_WEEK_OF_YEAR];
      if (result == 1) {
        [self setWithInt:JavaUtilCalendar_DATE withInt:31 - 7];
        result = [self getWithInt:JavaUtilCalendar_WEEK_OF_YEAR];
      }
      areFieldsSet_ = NO;
      break;
      case JavaUtilCalendar_WEEK_OF_MONTH:
      [self setWithInt:JavaUtilCalendar_DATE withInt:[self daysInMonth]];
      result = [self getWithInt:JavaUtilCalendar_WEEK_OF_MONTH];
      areFieldsSet_ = NO;
      break;
      case JavaUtilCalendar_DATE:
      return [self daysInMonth];
      case JavaUtilCalendar_DAY_OF_YEAR:
      return [self daysInYearWithInt:IOSIntArray_Get(nil_chk(fields_), JavaUtilCalendar_YEAR)];
      case JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH:
      result = [self getWithInt:JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH] + (([self daysInMonth] - [self getWithInt:JavaUtilCalendar_DATE]) / 7);
      break;
      case JavaUtilCalendar_YEAR:
      clone = (JavaUtilGregorianCalendar *) check_class_cast([self clone], [JavaUtilGregorianCalendar class]);
      if ([self getWithInt:JavaUtilCalendar_ERA] == JavaUtilGregorianCalendar_AD) {
        [((JavaUtilGregorianCalendar *) nil_chk(clone)) setTimeInMillisWithLong:JavaLangLong_MAX_VALUE];
      }
      else {
        [((JavaUtilGregorianCalendar *) nil_chk(clone)) setTimeInMillisWithLong:JavaLangLong_MIN_VALUE];
      }
      result = [((JavaUtilGregorianCalendar *) nil_chk(clone)) getWithInt:JavaUtilCalendar_YEAR];
      [clone setWithInt:JavaUtilCalendar_YEAR withInt:[self getWithInt:JavaUtilCalendar_YEAR]];
      if ([clone beforeWithId:self]) {
        result--;
      }
      break;
      case JavaUtilCalendar_DST_OFFSET:
      result = [self getMaximumWithInt:JavaUtilCalendar_DST_OFFSET];
      break;
    }
  }
  time_ = orgTime;
  return result;
}

- (int)getActualMinimumWithInt:(int)field {
  return [self getMinimumWithInt:field];
}

- (int)getGreatestMinimumWithInt:(int)field {
  return IOSIntArray_Get(nil_chk(JavaUtilGregorianCalendar_minimums_), field);
}

- (JavaUtilDate *)getGregorianChange {
  return [[[JavaUtilDate alloc] initWithLong:gregorianCutover_] autorelease];
}

- (int)getLeastMaximumWithInt:(int)field {
  if (gregorianCutover_ != JavaUtilGregorianCalendar_defaultGregorianCutover && field == JavaUtilCalendar_WEEK_OF_YEAR) {
    long long int currentTimeInMillis = time_;
    [self setTimeInMillisWithLong:gregorianCutover_];
    int actual = [self getActualMaximumWithInt:field];
    [self setTimeInMillisWithLong:currentTimeInMillis];
    return actual;
  }
  return IOSIntArray_Get(nil_chk(JavaUtilGregorianCalendar_leastMaximums_), field);
}

- (int)getMaximumWithInt:(int)field {
  return IOSIntArray_Get(nil_chk(JavaUtilGregorianCalendar_maximums_), field);
}

- (int)getMinimumWithInt:(int)field {
  return IOSIntArray_Get(nil_chk(JavaUtilGregorianCalendar_minimums_), field);
}

- (int)getOffsetWithLong:(long long int)localTime {
  JavaUtilTimeZone *timeZone = [self getTimeZone];
  long long int dayCount = localTime / 86400000;
  int millis = (int) (localTime % 86400000);
  if (millis < 0) {
    millis += 86400000;
    dayCount--;
  }
  int year = 1970;
  long long int days = dayCount;
  if (localTime < gregorianCutover_) {
    days -= julianSkew_;
  }
  int approxYears;
  while ((approxYears = (int) (days / 365)) != 0) {
    year = year + approxYears;
    days = dayCount - [self daysFromBaseYearWithLong:year];
  }
  if (days < 0) {
    year = year - 1;
    days = days + 365 + ([self isLeapYearWithInt:year] ? 1 : 0);
    if (year == changeYear_ && localTime < gregorianCutover_) {
      days -= [self julianError];
    }
  }
  if (year <= 0) {
    return [((JavaUtilTimeZone *) nil_chk(timeZone)) getRawOffset];
  }
  int dayOfYear = (int) days + 1;
  int month = dayOfYear / 32;
  BOOL leapYear = [self isLeapYearWithInt:year];
  int date = dayOfYear - [self daysInYearWithBoolean:leapYear withInt:month];
  if (date > [self daysInMonthWithBoolean:leapYear withInt:month]) {
    date -= [self daysInMonthWithBoolean:leapYear withInt:month];
    month++;
  }
  int dayOfWeek = [self mod7WithLong:dayCount - 3] + 1;
  return [((JavaUtilTimeZone *) nil_chk(timeZone)) getOffsetWithInt:JavaUtilGregorianCalendar_AD withInt:year withInt:month withInt:date withInt:dayOfWeek withInt:millis];
}

- (NSUInteger)hash {
  return [super hash] + ((int) ((long long) (((unsigned long long) gregorianCutover_) >> 32)) ^ (int) gregorianCutover_);
}

- (BOOL)isLeapYearWithInt:(int)year {
  if (year > changeYear_) {
    return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);
  }
  return year % 4 == 0;
}

- (int)julianError {
  return changeYear_ / 100 - changeYear_ / 400 - 2;
}

- (int)modWithInt:(int)value
          withInt:(int)mod {
  int rem = value % mod;
  if (value < 0 && rem < 0) {
    return rem + mod;
  }
  return rem;
}

- (int)mod7WithLong:(long long int)num1 {
  int rem = (int) (num1 % 7);
  if (num1 < 0 && rem < 0) {
    return rem + 7;
  }
  return rem;
}

- (void)rollWithInt:(int)field
            withInt:(int)value {
  if (value == 0) {
    return;
  }
  if (field < 0 || field >= JavaUtilCalendar_ZONE_OFFSET) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  [self complete];
  int days, day, mod, maxWeeks, newWeek;
  int max = -1;
  switch (field) {
    case JavaUtilCalendar_YEAR:
    max = IOSIntArray_Get(nil_chk(JavaUtilGregorianCalendar_maximums_), field);
    break;
    case JavaUtilCalendar_WEEK_OF_YEAR:
    days = [self daysInYearWithInt:IOSIntArray_Get(nil_chk(fields_), JavaUtilCalendar_YEAR)];
    day = JavaUtilCalendar_DAY_OF_YEAR;
    mod = [self mod7WithLong:IOSIntArray_Get(fields_, JavaUtilCalendar_DAY_OF_WEEK) - IOSIntArray_Get(fields_, day) - ([self getFirstDayOfWeek] - 1)];
    maxWeeks = (days - 1 + mod) / 7 + 1;
    newWeek = [self modWithInt:IOSIntArray_Get(fields_, field) - 1 + value withInt:maxWeeks] + 1;
    if (newWeek == maxWeeks) {
      int addDays = (newWeek - IOSIntArray_Get(fields_, field)) * 7;
      if (IOSIntArray_Get(fields_, day) > addDays && IOSIntArray_Get(fields_, day) + addDays > days) {
        [self setWithInt:field withInt:1];
      }
      else {
        [self setWithInt:field withInt:newWeek - 1];
      }
    }
    else if (newWeek == 1) {
      int week = (IOSIntArray_Get(fields_, day) - ((IOSIntArray_Get(fields_, day) - 1) / 7 * 7) - 1 + mod) / 7 + 1;
      if (week > 1) {
        [self setWithInt:field withInt:1];
      }
      else {
        [self setWithInt:field withInt:newWeek];
      }
    }
    else {
      [self setWithInt:field withInt:newWeek];
    }
    break;
    case JavaUtilCalendar_WEEK_OF_MONTH:
    days = [self daysInMonth];
    day = JavaUtilCalendar_DATE;
    mod = [self mod7WithLong:IOSIntArray_Get(nil_chk(fields_), JavaUtilCalendar_DAY_OF_WEEK) - IOSIntArray_Get(fields_, day) - ([self getFirstDayOfWeek] - 1)];
    maxWeeks = (days - 1 + mod) / 7 + 1;
    newWeek = [self modWithInt:IOSIntArray_Get(fields_, field) - 1 + value withInt:maxWeeks] + 1;
    if (newWeek == maxWeeks) {
      if (IOSIntArray_Get(fields_, day) + (newWeek - IOSIntArray_Get(fields_, field)) * 7 > days) {
        [self setWithInt:day withInt:days];
      }
      else {
        [self setWithInt:field withInt:newWeek];
      }
    }
    else if (newWeek == 1) {
      int week = (IOSIntArray_Get(fields_, day) - ((IOSIntArray_Get(fields_, day) - 1) / 7 * 7) - 1 + mod) / 7 + 1;
      if (week > 1) {
        [self setWithInt:day withInt:1];
      }
      else {
        [self setWithInt:field withInt:newWeek];
      }
    }
    else {
      [self setWithInt:field withInt:newWeek];
    }
    break;
    case JavaUtilCalendar_DATE:
    max = [self daysInMonth];
    break;
    case JavaUtilCalendar_DAY_OF_YEAR:
    max = [self daysInYearWithInt:IOSIntArray_Get(nil_chk(fields_), JavaUtilCalendar_YEAR)];
    break;
    case JavaUtilCalendar_DAY_OF_WEEK:
    max = IOSIntArray_Get(nil_chk(JavaUtilGregorianCalendar_maximums_), field);
    lastDateFieldSet_ = JavaUtilCalendar_WEEK_OF_MONTH;
    break;
    case JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH:
    max = (IOSIntArray_Get(nil_chk(fields_), JavaUtilCalendar_DATE) + (([self daysInMonth] - IOSIntArray_Get(fields_, JavaUtilCalendar_DATE)) / 7 * 7) - 1) / 7 + 1;
    break;
    case JavaUtilCalendar_ERA:
    case JavaUtilCalendar_MONTH:
    case JavaUtilCalendar_AM_PM:
    case JavaUtilCalendar_HOUR:
    case JavaUtilCalendar_HOUR_OF_DAY:
    case JavaUtilCalendar_MINUTE:
    case JavaUtilCalendar_SECOND:
    case JavaUtilCalendar_MILLISECOND:
    [self setWithInt:field withInt:[self modWithInt:IOSIntArray_Get(nil_chk(fields_), field) + value withInt:IOSIntArray_Get(nil_chk(JavaUtilGregorianCalendar_maximums_), field) + 1]];
    if (field == JavaUtilCalendar_MONTH && IOSIntArray_Get(fields_, JavaUtilCalendar_DATE) > [self daysInMonth]) {
      [self setWithInt:JavaUtilCalendar_DATE withInt:[self daysInMonth]];
    }
    else if (field == JavaUtilCalendar_AM_PM) {
      lastTimeFieldSet_ = JavaUtilCalendar_HOUR;
    }
    break;
  }
  if (max != -1) {
    [self setWithInt:field withInt:[self modWithInt:IOSIntArray_Get(nil_chk(fields_), field) - 1 + value withInt:max] + 1];
  }
  [self complete];
}

- (void)rollWithInt:(int)field
        withBoolean:(BOOL)increment {
  [self rollWithInt:field withInt:increment ? 1 : -1];
}

- (void)setGregorianChangeWithJavaUtilDate:(JavaUtilDate *)date {
  gregorianCutover_ = [((JavaUtilDate *) nil_chk(date)) getTime];
  JavaUtilGregorianCalendar *cal = [[[JavaUtilGregorianCalendar alloc] initWithJavaUtilTimeZone:[JavaUtilTimeZone getTimeZoneWithNSString:@"GMT"]] autorelease];
  [cal setTimeWithJavaUtilDate:date];
  changeYear_ = [cal getWithInt:JavaUtilCalendar_YEAR];
  if ([cal getWithInt:JavaUtilCalendar_ERA] == JavaUtilGregorianCalendar_BC) {
    changeYear_ = 1 - changeYear_;
  }
  julianSkew_ = ((changeYear_ - 2000) / 400) + [self julianError] - ((changeYear_ - 2000) / 100);
  int dayOfYear = [cal getWithInt:JavaUtilCalendar_DAY_OF_YEAR];
  if (dayOfYear < julianSkew_) {
    currentYearSkew_ = dayOfYear - 1;
    lastYearSkew_ = julianSkew_ - dayOfYear + 1;
  }
  else {
    lastYearSkew_ = 0;
    currentYearSkew_ = julianSkew_;
  }
}

+ (void)initialize {
  if (self == [JavaUtilGregorianCalendar class]) {
    JreOperatorRetainedAssign(&JavaUtilGregorianCalendar_DaysInMonth_, nil, [IOSByteArray arrayWithBytes:(char[]){ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 } count:12]);
    JreOperatorRetainedAssign(&JavaUtilGregorianCalendar_DaysInYear_, nil, [IOSIntArray arrayWithInts:(int[]){ 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334 } count:12]);
    JreOperatorRetainedAssign(&JavaUtilGregorianCalendar_maximums_, nil, [IOSIntArray arrayWithInts:(int[]){ 1, 292278994, 11, 53, 6, 31, 366, 7, 6, 1, 11, 23, 59, 59, 999, 14 * 3600 * 1000, 7200000 } count:17]);
    JreOperatorRetainedAssign(&JavaUtilGregorianCalendar_minimums_, nil, [IOSIntArray arrayWithInts:(int[]){ 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, -13 * 3600 * 1000, 0 } count:17]);
    JreOperatorRetainedAssign(&JavaUtilGregorianCalendar_leastMaximums_, nil, [IOSIntArray arrayWithInts:(int[]){ 1, 292269054, 11, 50, 3, 28, 355, 7, 3, 1, 11, 23, 59, 59, 999, 50400000, 1200000 } count:17]);
  }
}

- (void)copyAllFieldsTo:(JavaUtilGregorianCalendar *)other {
  [super copyAllFieldsTo:other];
  other->changeYear_ = changeYear_;
  other->currentYearSkew_ = currentYearSkew_;
  other->gregorianCutover_ = gregorianCutover_;
  other->julianSkew_ = julianSkew_;
  other->lastYearSkew_ = lastYearSkew_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  return result;
}

@end
