//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/luni/src/main/java/java/util/Arrays.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSBooleanArray.h"
#include "IOSByteArray.h"
#include "IOSCharArray.h"
#include "IOSClass.h"
#include "IOSDoubleArray.h"
#include "IOSFloatArray.h"
#include "IOSIntArray.h"
#include "IOSLongArray.h"
#include "IOSObjectArray.h"
#include "IOSShortArray.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/ArrayStoreException.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Character.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Comparable.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/NegativeArraySizeException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Short.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/reflect/Array.h"
#include "java/util/Arrays.h"
#include "java/util/Comparator.h"
#include "java/util/List.h"

@implementation JavaUtilArrays

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

+ (id<JavaUtilList>)asListWithNSObjectArray:(IOSObjectArray *)array {
  return [[[JavaUtilArrays_ArrayList alloc] initWithNSObjectArray:array] autorelease];
}

+ (int)binarySearchWithByteArray:(IOSByteArray *)array
                        withByte:(char)value {
  return [JavaUtilArrays binarySearchWithByteArray:array withInt:0 withInt:(int) [((IOSByteArray *) nil_chk(array)) count] withByte:value];
}

+ (int)binarySearchWithByteArray:(IOSByteArray *)array
                         withInt:(int)startIndex
                         withInt:(int)endIndex
                        withByte:(char)value {
  [JavaUtilArrays checkBinarySearchBoundsWithInt:startIndex withInt:endIndex withInt:(int) [((IOSByteArray *) nil_chk(array)) count]];
  int lo = startIndex;
  int hi = endIndex - 1;
  while (lo <= hi) {
    int mid = (int) (((unsigned int) (lo + hi)) >> 1);
    char midVal = IOSByteArray_Get(array, mid);
    if (midVal < value) {
      lo = mid + 1;
    }
    else if (midVal > value) {
      hi = mid - 1;
    }
    else {
      return mid;
    }
  }
  return ~lo;
}

+ (int)binarySearchWithCharArray:(IOSCharArray *)array
                        withChar:(unichar)value {
  return [JavaUtilArrays binarySearchWithCharArray:array withInt:0 withInt:(int) [((IOSCharArray *) nil_chk(array)) count] withChar:value];
}

+ (int)binarySearchWithCharArray:(IOSCharArray *)array
                         withInt:(int)startIndex
                         withInt:(int)endIndex
                        withChar:(unichar)value {
  [JavaUtilArrays checkBinarySearchBoundsWithInt:startIndex withInt:endIndex withInt:(int) [((IOSCharArray *) nil_chk(array)) count]];
  int lo = startIndex;
  int hi = endIndex - 1;
  while (lo <= hi) {
    int mid = (int) (((unsigned int) (lo + hi)) >> 1);
    unichar midVal = IOSCharArray_Get(array, mid);
    if (midVal < value) {
      lo = mid + 1;
    }
    else if (midVal > value) {
      hi = mid - 1;
    }
    else {
      return mid;
    }
  }
  return ~lo;
}

+ (int)binarySearchWithDoubleArray:(IOSDoubleArray *)array
                        withDouble:(double)value {
  return [JavaUtilArrays binarySearchWithDoubleArray:array withInt:0 withInt:(int) [((IOSDoubleArray *) nil_chk(array)) count] withDouble:value];
}

+ (int)binarySearchWithDoubleArray:(IOSDoubleArray *)array
                           withInt:(int)startIndex
                           withInt:(int)endIndex
                        withDouble:(double)value {
  [JavaUtilArrays checkBinarySearchBoundsWithInt:startIndex withInt:endIndex withInt:(int) [((IOSDoubleArray *) nil_chk(array)) count]];
  int lo = startIndex;
  int hi = endIndex - 1;
  while (lo <= hi) {
    int mid = (int) (((unsigned int) (lo + hi)) >> 1);
    double midVal = IOSDoubleArray_Get(array, mid);
    if (midVal < value) {
      lo = mid + 1;
    }
    else if (midVal > value) {
      hi = mid - 1;
    }
    else if (midVal != 0 && midVal == value) {
      return mid;
    }
    else {
      long long int midValBits = [JavaLangDouble doubleToLongBitsWithDouble:midVal];
      long long int valueBits = [JavaLangDouble doubleToLongBitsWithDouble:value];
      if (midValBits < valueBits) {
        lo = mid + 1;
      }
      else if (midValBits > valueBits) {
        hi = mid - 1;
      }
      else {
        return mid;
      }
    }
  }
  return ~lo;
}

+ (int)binarySearchWithFloatArray:(IOSFloatArray *)array
                        withFloat:(float)value {
  return [JavaUtilArrays binarySearchWithFloatArray:array withInt:0 withInt:(int) [((IOSFloatArray *) nil_chk(array)) count] withFloat:value];
}

+ (int)binarySearchWithFloatArray:(IOSFloatArray *)array
                          withInt:(int)startIndex
                          withInt:(int)endIndex
                        withFloat:(float)value {
  [JavaUtilArrays checkBinarySearchBoundsWithInt:startIndex withInt:endIndex withInt:(int) [((IOSFloatArray *) nil_chk(array)) count]];
  int lo = startIndex;
  int hi = endIndex - 1;
  while (lo <= hi) {
    int mid = (int) (((unsigned int) (lo + hi)) >> 1);
    float midVal = IOSFloatArray_Get(array, mid);
    if (midVal < value) {
      lo = mid + 1;
    }
    else if (midVal > value) {
      hi = mid - 1;
    }
    else if (midVal != 0 && midVal == value) {
      return mid;
    }
    else {
      int midValBits = [JavaLangFloat floatToIntBitsWithFloat:midVal];
      int valueBits = [JavaLangFloat floatToIntBitsWithFloat:value];
      if (midValBits < valueBits) {
        lo = mid + 1;
      }
      else if (midValBits > valueBits) {
        hi = mid - 1;
      }
      else {
        return mid;
      }
    }
  }
  return ~lo;
}

+ (int)binarySearchWithIntArray:(IOSIntArray *)array
                        withInt:(int)value {
  return [JavaUtilArrays binarySearchWithIntArray:array withInt:0 withInt:(int) [((IOSIntArray *) nil_chk(array)) count] withInt:value];
}

+ (int)binarySearchWithIntArray:(IOSIntArray *)array
                        withInt:(int)startIndex
                        withInt:(int)endIndex
                        withInt:(int)value {
  [JavaUtilArrays checkBinarySearchBoundsWithInt:startIndex withInt:endIndex withInt:(int) [((IOSIntArray *) nil_chk(array)) count]];
  int lo = startIndex;
  int hi = endIndex - 1;
  while (lo <= hi) {
    int mid = (int) (((unsigned int) (lo + hi)) >> 1);
    int midVal = IOSIntArray_Get(array, mid);
    if (midVal < value) {
      lo = mid + 1;
    }
    else if (midVal > value) {
      hi = mid - 1;
    }
    else {
      return mid;
    }
  }
  return ~lo;
}

+ (int)binarySearchWithLongArray:(IOSLongArray *)array
                        withLong:(long long int)value {
  return [JavaUtilArrays binarySearchWithLongArray:array withInt:0 withInt:(int) [((IOSLongArray *) nil_chk(array)) count] withLong:value];
}

+ (int)binarySearchWithLongArray:(IOSLongArray *)array
                         withInt:(int)startIndex
                         withInt:(int)endIndex
                        withLong:(long long int)value {
  [JavaUtilArrays checkBinarySearchBoundsWithInt:startIndex withInt:endIndex withInt:(int) [((IOSLongArray *) nil_chk(array)) count]];
  int lo = startIndex;
  int hi = endIndex - 1;
  while (lo <= hi) {
    int mid = (int) (((unsigned int) (lo + hi)) >> 1);
    long long int midVal = IOSLongArray_Get(array, mid);
    if (midVal < value) {
      lo = mid + 1;
    }
    else if (midVal > value) {
      hi = mid - 1;
    }
    else {
      return mid;
    }
  }
  return ~lo;
}

+ (int)binarySearchWithNSObjectArray:(IOSObjectArray *)array
                              withId:(id)value {
  return [JavaUtilArrays binarySearchWithNSObjectArray:array withInt:0 withInt:(int) [((IOSObjectArray *) nil_chk(array)) count] withId:value];
}

+ (int)binarySearchWithNSObjectArray:(IOSObjectArray *)array
                             withInt:(int)startIndex
                             withInt:(int)endIndex
                              withId:(id)value {
  [JavaUtilArrays checkBinarySearchBoundsWithInt:startIndex withInt:endIndex withInt:(int) [((IOSObjectArray *) nil_chk(array)) count]];
  int lo = startIndex;
  int hi = endIndex - 1;
  while (lo <= hi) {
    int mid = (int) (((unsigned int) (lo + hi)) >> 1);
    int midValCmp = [((id<JavaLangComparable>) nil_chk(IOSObjectArray_Get(array, mid))) compareToWithId:value];
    if (midValCmp < 0) {
      lo = mid + 1;
    }
    else if (midValCmp > 0) {
      hi = mid - 1;
    }
    else {
      return mid;
    }
  }
  return ~lo;
}

+ (int)binarySearchWithNSObjectArray:(IOSObjectArray *)array
                              withId:(id)value
              withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  return [JavaUtilArrays binarySearchWithNSObjectArray:array withInt:0 withInt:(int) [((IOSObjectArray *) nil_chk(array)) count] withId:value withJavaUtilComparator:comparator];
}

+ (int)binarySearchWithNSObjectArray:(IOSObjectArray *)array
                             withInt:(int)startIndex
                             withInt:(int)endIndex
                              withId:(id)value
              withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  if (comparator == nil) {
    return [JavaUtilArrays binarySearchWithNSObjectArray:array withInt:startIndex withInt:endIndex withId:value];
  }
  [JavaUtilArrays checkBinarySearchBoundsWithInt:startIndex withInt:endIndex withInt:(int) [((IOSObjectArray *) nil_chk(array)) count]];
  int lo = startIndex;
  int hi = endIndex - 1;
  while (lo <= hi) {
    int mid = (int) (((unsigned int) (lo + hi)) >> 1);
    int midValCmp = [((id<JavaUtilComparator>) nil_chk(comparator)) compareWithId:IOSObjectArray_Get(array, mid) withId:value];
    if (midValCmp < 0) {
      lo = mid + 1;
    }
    else if (midValCmp > 0) {
      hi = mid - 1;
    }
    else {
      return mid;
    }
  }
  return ~lo;
}

+ (int)binarySearchWithShortArray:(IOSShortArray *)array
                        withShort:(short int)value {
  return [JavaUtilArrays binarySearchWithShortArray:array withInt:0 withInt:(int) [((IOSShortArray *) nil_chk(array)) count] withShort:value];
}

+ (int)binarySearchWithShortArray:(IOSShortArray *)array
                          withInt:(int)startIndex
                          withInt:(int)endIndex
                        withShort:(short int)value {
  [JavaUtilArrays checkBinarySearchBoundsWithInt:startIndex withInt:endIndex withInt:(int) [((IOSShortArray *) nil_chk(array)) count]];
  int lo = startIndex;
  int hi = endIndex - 1;
  while (lo <= hi) {
    int mid = (int) (((unsigned int) (lo + hi)) >> 1);
    short int midVal = IOSShortArray_Get(array, mid);
    if (midVal < value) {
      lo = mid + 1;
    }
    else if (midVal > value) {
      hi = mid - 1;
    }
    else {
      return mid;
    }
  }
  return ~lo;
}

+ (void)checkBinarySearchBoundsWithInt:(int)startIndex
                               withInt:(int)endIndex
                               withInt:(int)length {
  if (startIndex > endIndex) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  if (startIndex < 0 || endIndex > length) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] init] autorelease];
  }
}

+ (void)fillWithByteArray:(IOSByteArray *)array
                 withByte:(char)value {
  for (int i = 0; i < (int) [((IOSByteArray *) nil_chk(array)) count]; i++) {
    (*IOSByteArray_GetRef(array, i)) = value;
  }
}

+ (void)fillWithByteArray:(IOSByteArray *)array
                  withInt:(int)start
                  withInt:(int)end
                 withByte:(char)value {
  [JavaUtilArrays checkBoundsWithInt:(int) [((IOSByteArray *) nil_chk(array)) count] withInt:start withInt:end];
  for (int i = start; i < end; i++) {
    (*IOSByteArray_GetRef(array, i)) = value;
  }
}

+ (void)fillWithShortArray:(IOSShortArray *)array
                 withShort:(short int)value {
  for (int i = 0; i < (int) [((IOSShortArray *) nil_chk(array)) count]; i++) {
    (*IOSShortArray_GetRef(array, i)) = value;
  }
}

+ (void)fillWithShortArray:(IOSShortArray *)array
                   withInt:(int)start
                   withInt:(int)end
                 withShort:(short int)value {
  [JavaUtilArrays checkBoundsWithInt:(int) [((IOSShortArray *) nil_chk(array)) count] withInt:start withInt:end];
  for (int i = start; i < end; i++) {
    (*IOSShortArray_GetRef(array, i)) = value;
  }
}

+ (void)fillWithCharArray:(IOSCharArray *)array
                 withChar:(unichar)value {
  for (int i = 0; i < (int) [((IOSCharArray *) nil_chk(array)) count]; i++) {
    (*IOSCharArray_GetRef(array, i)) = value;
  }
}

+ (void)fillWithCharArray:(IOSCharArray *)array
                  withInt:(int)start
                  withInt:(int)end
                 withChar:(unichar)value {
  [JavaUtilArrays checkBoundsWithInt:(int) [((IOSCharArray *) nil_chk(array)) count] withInt:start withInt:end];
  for (int i = start; i < end; i++) {
    (*IOSCharArray_GetRef(array, i)) = value;
  }
}

+ (void)fillWithIntArray:(IOSIntArray *)array
                 withInt:(int)value {
  for (int i = 0; i < (int) [((IOSIntArray *) nil_chk(array)) count]; i++) {
    (*IOSIntArray_GetRef(array, i)) = value;
  }
}

+ (void)fillWithIntArray:(IOSIntArray *)array
                 withInt:(int)start
                 withInt:(int)end
                 withInt:(int)value {
  [JavaUtilArrays checkBoundsWithInt:(int) [((IOSIntArray *) nil_chk(array)) count] withInt:start withInt:end];
  for (int i = start; i < end; i++) {
    (*IOSIntArray_GetRef(array, i)) = value;
  }
}

+ (void)fillWithLongArray:(IOSLongArray *)array
                 withLong:(long long int)value {
  for (int i = 0; i < (int) [((IOSLongArray *) nil_chk(array)) count]; i++) {
    (*IOSLongArray_GetRef(array, i)) = value;
  }
}

+ (void)fillWithLongArray:(IOSLongArray *)array
                  withInt:(int)start
                  withInt:(int)end
                 withLong:(long long int)value {
  [JavaUtilArrays checkBoundsWithInt:(int) [((IOSLongArray *) nil_chk(array)) count] withInt:start withInt:end];
  for (int i = start; i < end; i++) {
    (*IOSLongArray_GetRef(array, i)) = value;
  }
}

+ (void)fillWithFloatArray:(IOSFloatArray *)array
                 withFloat:(float)value {
  for (int i = 0; i < (int) [((IOSFloatArray *) nil_chk(array)) count]; i++) {
    (*IOSFloatArray_GetRef(array, i)) = value;
  }
}

+ (void)fillWithFloatArray:(IOSFloatArray *)array
                   withInt:(int)start
                   withInt:(int)end
                 withFloat:(float)value {
  [JavaUtilArrays checkBoundsWithInt:(int) [((IOSFloatArray *) nil_chk(array)) count] withInt:start withInt:end];
  for (int i = start; i < end; i++) {
    (*IOSFloatArray_GetRef(array, i)) = value;
  }
}

+ (void)fillWithDoubleArray:(IOSDoubleArray *)array
                 withDouble:(double)value {
  for (int i = 0; i < (int) [((IOSDoubleArray *) nil_chk(array)) count]; i++) {
    (*IOSDoubleArray_GetRef(array, i)) = value;
  }
}

+ (void)fillWithDoubleArray:(IOSDoubleArray *)array
                    withInt:(int)start
                    withInt:(int)end
                 withDouble:(double)value {
  [JavaUtilArrays checkBoundsWithInt:(int) [((IOSDoubleArray *) nil_chk(array)) count] withInt:start withInt:end];
  for (int i = start; i < end; i++) {
    (*IOSDoubleArray_GetRef(array, i)) = value;
  }
}

+ (void)fillWithBooleanArray:(IOSBooleanArray *)array
                 withBoolean:(BOOL)value {
  for (int i = 0; i < (int) [((IOSBooleanArray *) nil_chk(array)) count]; i++) {
    (*IOSBooleanArray_GetRef(array, i)) = value;
  }
}

+ (void)fillWithBooleanArray:(IOSBooleanArray *)array
                     withInt:(int)start
                     withInt:(int)end
                 withBoolean:(BOOL)value {
  [JavaUtilArrays checkBoundsWithInt:(int) [((IOSBooleanArray *) nil_chk(array)) count] withInt:start withInt:end];
  for (int i = start; i < end; i++) {
    (*IOSBooleanArray_GetRef(array, i)) = value;
  }
}

+ (void)fillWithNSObjectArray:(IOSObjectArray *)array
                       withId:(id)value {
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(array)) count]; i++) {
    IOSObjectArray_Set(array, i, value);
  }
}

+ (void)fillWithNSObjectArray:(IOSObjectArray *)array
                      withInt:(int)start
                      withInt:(int)end
                       withId:(id)value {
  [JavaUtilArrays checkBoundsWithInt:(int) [((IOSObjectArray *) nil_chk(array)) count] withInt:start withInt:end];
  for (int i = start; i < end; i++) {
    IOSObjectArray_Set(array, i, value);
  }
}

+ (int)hashCodeWithBooleanArray:(IOSBooleanArray *)array {
  if (array == nil) {
    return 0;
  }
  int hashCode = 1;
  {
    IOSBooleanArray *a__ = array;
    BOOL const *b__ = ((IOSBooleanArray *) nil_chk(a__))->buffer_;
    BOOL const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      BOOL element = (*b__++);
      hashCode = 31 * hashCode + (element ? 1231 : 1237);
    }
  }
  return hashCode;
}

+ (int)hashCodeWithIntArray:(IOSIntArray *)array {
  if (array == nil) {
    return 0;
  }
  int hashCode = 1;
  {
    IOSIntArray *a__ = array;
    int const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    int const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      int element = (*b__++);
      hashCode = 31 * hashCode + element;
    }
  }
  return hashCode;
}

+ (int)hashCodeWithShortArray:(IOSShortArray *)array {
  if (array == nil) {
    return 0;
  }
  int hashCode = 1;
  {
    IOSShortArray *a__ = array;
    short int const *b__ = ((IOSShortArray *) nil_chk(a__))->buffer_;
    short int const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      short int element = (*b__++);
      hashCode = 31 * hashCode + element;
    }
  }
  return hashCode;
}

+ (int)hashCodeWithCharArray:(IOSCharArray *)array {
  if (array == nil) {
    return 0;
  }
  int hashCode = 1;
  {
    IOSCharArray *a__ = array;
    unichar const *b__ = ((IOSCharArray *) nil_chk(a__))->buffer_;
    unichar const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      unichar element = (*b__++);
      hashCode = 31 * hashCode + element;
    }
  }
  return hashCode;
}

+ (int)hashCodeWithByteArray:(IOSByteArray *)array {
  if (array == nil) {
    return 0;
  }
  int hashCode = 1;
  {
    IOSByteArray *a__ = array;
    char const *b__ = ((IOSByteArray *) nil_chk(a__))->buffer_;
    char const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      char element = (*b__++);
      hashCode = 31 * hashCode + element;
    }
  }
  return hashCode;
}

+ (int)hashCodeWithLongArray:(IOSLongArray *)array {
  if (array == nil) {
    return 0;
  }
  int hashCode = 1;
  {
    IOSLongArray *a__ = array;
    long long int const *b__ = ((IOSLongArray *) nil_chk(a__))->buffer_;
    long long int const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      long long int elementValue = (*b__++);
      hashCode = 31 * hashCode + (int) (elementValue ^ ((long long) (((unsigned long long) elementValue) >> 32)));
    }
  }
  return hashCode;
}

+ (int)hashCodeWithFloatArray:(IOSFloatArray *)array {
  if (array == nil) {
    return 0;
  }
  int hashCode = 1;
  {
    IOSFloatArray *a__ = array;
    float const *b__ = ((IOSFloatArray *) nil_chk(a__))->buffer_;
    float const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      float element = (*b__++);
      hashCode = 31 * hashCode + [JavaLangFloat floatToIntBitsWithFloat:element];
    }
  }
  return hashCode;
}

+ (int)hashCodeWithDoubleArray:(IOSDoubleArray *)array {
  if (array == nil) {
    return 0;
  }
  int hashCode = 1;
  {
    IOSDoubleArray *a__ = array;
    double const *b__ = ((IOSDoubleArray *) nil_chk(a__))->buffer_;
    double const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      double element = (*b__++);
      long long int v = [JavaLangDouble doubleToLongBitsWithDouble:element];
      hashCode = 31 * hashCode + (int) (v ^ ((long long) (((unsigned long long) v) >> 32)));
    }
  }
  return hashCode;
}

+ (int)hashCodeWithNSObjectArray:(IOSObjectArray *)array {
  if (array == nil) {
    return 0;
  }
  int hashCode = 1;
  {
    IOSObjectArray *a__ = array;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id element = (*b__++);
      int elementHashCode;
      if (element == nil) {
        elementHashCode = 0;
      }
      else {
        elementHashCode = [(element) hash];
      }
      hashCode = 31 * hashCode + elementHashCode;
    }
  }
  return hashCode;
}

+ (int)deepHashCodeWithNSObjectArray:(IOSObjectArray *)array {
  @throw [[[JavaLangAssertionError alloc] initWithId:@"not implemented"] autorelease];
}

+ (BOOL)equalsWithByteArray:(IOSByteArray *)array1
              withByteArray:(IOSByteArray *)array2 {
  if (array1 == array2) {
    return YES;
  }
  if (array1 == nil || array2 == nil || (int) [array1 count] != (int) [array2 count]) {
    return NO;
  }
  for (int i = 0; i < (int) [((IOSByteArray *) nil_chk(array1)) count]; i++) {
    if (IOSByteArray_Get(array1, i) != IOSByteArray_Get(nil_chk(array2), i)) {
      return NO;
    }
  }
  return YES;
}

+ (BOOL)equalsWithShortArray:(IOSShortArray *)array1
              withShortArray:(IOSShortArray *)array2 {
  if (array1 == array2) {
    return YES;
  }
  if (array1 == nil || array2 == nil || (int) [array1 count] != (int) [array2 count]) {
    return NO;
  }
  for (int i = 0; i < (int) [((IOSShortArray *) nil_chk(array1)) count]; i++) {
    if (IOSShortArray_Get(array1, i) != IOSShortArray_Get(nil_chk(array2), i)) {
      return NO;
    }
  }
  return YES;
}

+ (BOOL)equalsWithCharArray:(IOSCharArray *)array1
              withCharArray:(IOSCharArray *)array2 {
  if (array1 == array2) {
    return YES;
  }
  if (array1 == nil || array2 == nil || (int) [array1 count] != (int) [array2 count]) {
    return NO;
  }
  for (int i = 0; i < (int) [((IOSCharArray *) nil_chk(array1)) count]; i++) {
    if (IOSCharArray_Get(array1, i) != IOSCharArray_Get(nil_chk(array2), i)) {
      return NO;
    }
  }
  return YES;
}

+ (BOOL)equalsWithIntArray:(IOSIntArray *)array1
              withIntArray:(IOSIntArray *)array2 {
  if (array1 == array2) {
    return YES;
  }
  if (array1 == nil || array2 == nil || (int) [array1 count] != (int) [array2 count]) {
    return NO;
  }
  for (int i = 0; i < (int) [((IOSIntArray *) nil_chk(array1)) count]; i++) {
    if (IOSIntArray_Get(array1, i) != IOSIntArray_Get(nil_chk(array2), i)) {
      return NO;
    }
  }
  return YES;
}

+ (BOOL)equalsWithLongArray:(IOSLongArray *)array1
              withLongArray:(IOSLongArray *)array2 {
  if (array1 == array2) {
    return YES;
  }
  if (array1 == nil || array2 == nil || (int) [array1 count] != (int) [array2 count]) {
    return NO;
  }
  for (int i = 0; i < (int) [((IOSLongArray *) nil_chk(array1)) count]; i++) {
    if (IOSLongArray_Get(array1, i) != IOSLongArray_Get(nil_chk(array2), i)) {
      return NO;
    }
  }
  return YES;
}

+ (BOOL)equalsWithFloatArray:(IOSFloatArray *)array1
              withFloatArray:(IOSFloatArray *)array2 {
  if (array1 == array2) {
    return YES;
  }
  if (array1 == nil || array2 == nil || (int) [array1 count] != (int) [array2 count]) {
    return NO;
  }
  for (int i = 0; i < (int) [((IOSFloatArray *) nil_chk(array1)) count]; i++) {
    if ([JavaLangFloat floatToIntBitsWithFloat:IOSFloatArray_Get(array1, i)] != [JavaLangFloat floatToIntBitsWithFloat:IOSFloatArray_Get(nil_chk(array2), i)]) {
      return NO;
    }
  }
  return YES;
}

+ (BOOL)equalsWithDoubleArray:(IOSDoubleArray *)array1
              withDoubleArray:(IOSDoubleArray *)array2 {
  if (array1 == array2) {
    return YES;
  }
  if (array1 == nil || array2 == nil || (int) [array1 count] != (int) [array2 count]) {
    return NO;
  }
  for (int i = 0; i < (int) [((IOSDoubleArray *) nil_chk(array1)) count]; i++) {
    if ([JavaLangDouble doubleToLongBitsWithDouble:IOSDoubleArray_Get(array1, i)] != [JavaLangDouble doubleToLongBitsWithDouble:IOSDoubleArray_Get(nil_chk(array2), i)]) {
      return NO;
    }
  }
  return YES;
}

+ (BOOL)equalsWithBooleanArray:(IOSBooleanArray *)array1
              withBooleanArray:(IOSBooleanArray *)array2 {
  if (array1 == array2) {
    return YES;
  }
  if (array1 == nil || array2 == nil || (int) [array1 count] != (int) [array2 count]) {
    return NO;
  }
  for (int i = 0; i < (int) [((IOSBooleanArray *) nil_chk(array1)) count]; i++) {
    if (IOSBooleanArray_Get(array1, i) != IOSBooleanArray_Get(nil_chk(array2), i)) {
      return NO;
    }
  }
  return YES;
}

+ (BOOL)equalsWithNSObjectArray:(IOSObjectArray *)array1
              withNSObjectArray:(IOSObjectArray *)array2 {
  if (array1 == array2) {
    return YES;
  }
  if (array1 == nil || array2 == nil || (int) [array1 count] != (int) [array2 count]) {
    return NO;
  }
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(array1)) count]; i++) {
    id e1 = IOSObjectArray_Get(array1, i), e2 = IOSObjectArray_Get(nil_chk(array2), i);
    if (!(e1 == nil ? e2 == nil : [e1 isEqual:e2])) {
      return NO;
    }
  }
  return YES;
}

+ (BOOL)deepEqualsWithNSObjectArray:(IOSObjectArray *)array1
                  withNSObjectArray:(IOSObjectArray *)array2 {
  @throw [[[JavaLangAssertionError alloc] initWithId:@"not implemented"] autorelease];
}

+ (BOOL)isSameWithDouble:(double)double1
              withDouble:(double)double2 {
  if (double1 == double2 && 0.0 != double1) {
    return YES;
  }
  if ([JavaLangDouble isNaNWithDouble:double1]) {
    return [JavaLangDouble isNaNWithDouble:double2];
  }
  if ([JavaLangDouble isNaNWithDouble:double2]) {
    return NO;
  }
  long long int d1 = [JavaLangDouble doubleToRawLongBitsWithDouble:double1];
  long long int d2 = [JavaLangDouble doubleToRawLongBitsWithDouble:double2];
  return d1 == d2;
}

+ (BOOL)lessThanWithDouble:(double)double1
                withDouble:(double)double2 {
  if (double1 < double2) {
    return YES;
  }
  if (double1 > double2) {
    return NO;
  }
  if (double1 == double2 && 0.0 != double1) {
    return NO;
  }
  if ([JavaLangDouble isNaNWithDouble:double1]) {
    return NO;
  }
  else if ([JavaLangDouble isNaNWithDouble:double2]) {
    return YES;
  }
  long long int d1 = [JavaLangDouble doubleToRawLongBitsWithDouble:double1];
  long long int d2 = [JavaLangDouble doubleToRawLongBitsWithDouble:double2];
  return d1 < d2;
}

+ (BOOL)isSameWithFloat:(float)float1
              withFloat:(float)float2 {
  if (float1 == float2 && 0.0 != float1) {
    return YES;
  }
  if ([JavaLangFloat isNaNWithFloat:float1]) {
    return [JavaLangFloat isNaNWithFloat:float2];
  }
  if ([JavaLangFloat isNaNWithFloat:float2]) {
    return NO;
  }
  int f1 = [JavaLangFloat floatToRawIntBitsWithFloat:float1];
  int f2 = [JavaLangFloat floatToRawIntBitsWithFloat:float2];
  return f1 == f2;
}

+ (BOOL)lessThanWithFloat:(float)float1
                withFloat:(float)float2 {
  if (float1 < float2) {
    return YES;
  }
  if (float1 > float2) {
    return NO;
  }
  if (float1 == float2 && 0.0f != float1) {
    return NO;
  }
  if ([JavaLangFloat isNaNWithFloat:float1]) {
    return NO;
  }
  else if ([JavaLangFloat isNaNWithFloat:float2]) {
    return YES;
  }
  int f1 = [JavaLangFloat floatToRawIntBitsWithFloat:float1];
  int f2 = [JavaLangFloat floatToRawIntBitsWithFloat:float2];
  return f1 < f2;
}

+ (int)med3WithByteArray:(IOSByteArray *)array
                 withInt:(int)a
                 withInt:(int)b
                 withInt:(int)c {
  char x = IOSByteArray_Get(nil_chk(array), a), y = IOSByteArray_Get(array, b), z = IOSByteArray_Get(array, c);
  return x < y ? (y < z ? b : (x < z ? c : a)) : (y > z ? b : (x > z ? c : a));
}

+ (int)med3WithCharArray:(IOSCharArray *)array
                 withInt:(int)a
                 withInt:(int)b
                 withInt:(int)c {
  unichar x = IOSCharArray_Get(nil_chk(array), a), y = IOSCharArray_Get(array, b), z = IOSCharArray_Get(array, c);
  return x < y ? (y < z ? b : (x < z ? c : a)) : (y > z ? b : (x > z ? c : a));
}

+ (int)med3WithDoubleArray:(IOSDoubleArray *)array
                   withInt:(int)a
                   withInt:(int)b
                   withInt:(int)c {
  double x = IOSDoubleArray_Get(nil_chk(array), a), y = IOSDoubleArray_Get(array, b), z = IOSDoubleArray_Get(array, c);
  return [JavaUtilArrays lessThanWithDouble:x withDouble:y] ? ([JavaUtilArrays lessThanWithDouble:y withDouble:z] ? b : ([JavaUtilArrays lessThanWithDouble:x withDouble:z] ? c : a)) : ([JavaUtilArrays lessThanWithDouble:z withDouble:y] ? b : ([JavaUtilArrays lessThanWithDouble:z withDouble:x] ? c : a));
}

+ (int)med3WithFloatArray:(IOSFloatArray *)array
                  withInt:(int)a
                  withInt:(int)b
                  withInt:(int)c {
  float x = IOSFloatArray_Get(nil_chk(array), a), y = IOSFloatArray_Get(array, b), z = IOSFloatArray_Get(array, c);
  return [JavaUtilArrays lessThanWithFloat:x withFloat:y] ? ([JavaUtilArrays lessThanWithFloat:y withFloat:z] ? b : ([JavaUtilArrays lessThanWithFloat:x withFloat:z] ? c : a)) : ([JavaUtilArrays lessThanWithFloat:z withFloat:y] ? b : ([JavaUtilArrays lessThanWithFloat:z withFloat:x] ? c : a));
}

+ (int)med3WithIntArray:(IOSIntArray *)array
                withInt:(int)a
                withInt:(int)b
                withInt:(int)c {
  int x = IOSIntArray_Get(nil_chk(array), a), y = IOSIntArray_Get(array, b), z = IOSIntArray_Get(array, c);
  return x < y ? (y < z ? b : (x < z ? c : a)) : (y > z ? b : (x > z ? c : a));
}

+ (int)med3WithLongArray:(IOSLongArray *)array
                 withInt:(int)a
                 withInt:(int)b
                 withInt:(int)c {
  long long int x = IOSLongArray_Get(nil_chk(array), a), y = IOSLongArray_Get(array, b), z = IOSLongArray_Get(array, c);
  return x < y ? (y < z ? b : (x < z ? c : a)) : (y > z ? b : (x > z ? c : a));
}

+ (int)med3WithShortArray:(IOSShortArray *)array
                  withInt:(int)a
                  withInt:(int)b
                  withInt:(int)c {
  short int x = IOSShortArray_Get(nil_chk(array), a), y = IOSShortArray_Get(array, b), z = IOSShortArray_Get(array, c);
  return x < y ? (y < z ? b : (x < z ? c : a)) : (y > z ? b : (x > z ? c : a));
}

+ (void)sortWithByteArray:(IOSByteArray *)array {
  [JavaUtilArrays sortWithByteArray:array withInt:0 withInt:(int) [((IOSByteArray *) nil_chk(array)) count]];
}

+ (void)sortWithByteArray:(IOSByteArray *)array
                  withInt:(int)start
                  withInt:(int)end {
  if (array == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  [JavaUtilArrays checkBoundsWithInt:(int) [((IOSByteArray *) nil_chk(array)) count] withInt:start withInt:end];
  [JavaUtilArrays sortWithInt:start withInt:end withByteArray:array];
}

+ (void)checkBoundsWithInt:(int)arrLength
                   withInt:(int)start
                   withInt:(int)end {
  if (start > end) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Start index (%d) is greater than end index (%d)", start, end]] autorelease];
  }
  if (start < 0) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"Array index out of range: %d", start]] autorelease];
  }
  if (end > arrLength) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"Array index out of range: %d", end]] autorelease];
  }
}

+ (void)sortWithInt:(int)start
            withInt:(int)end
      withByteArray:(IOSByteArray *)array {
  char temp;
  int length = end - start;
  if (length < 7) {
    for (int i = start + 1; i < end; i++) {
      for (int j = i; j > start && IOSByteArray_Get(nil_chk(array), j - 1) > IOSByteArray_Get(array, j); j--) {
        temp = IOSByteArray_Get(nil_chk(array), j);
        (*IOSByteArray_GetRef(array, j)) = IOSByteArray_Get(array, j - 1);
        (*IOSByteArray_GetRef(array, j - 1)) = temp;
      }
    }
    return;
  }
  int middle = (start + end) / 2;
  if (length > 7) {
    int bottom = start;
    int top = end - 1;
    if (length > 40) {
      length /= 8;
      bottom = [JavaUtilArrays med3WithByteArray:array withInt:bottom withInt:bottom + length withInt:bottom + (2 * length)];
      middle = [JavaUtilArrays med3WithByteArray:array withInt:middle - length withInt:middle withInt:middle + length];
      top = [JavaUtilArrays med3WithByteArray:array withInt:top - (2 * length) withInt:top - length withInt:top];
    }
    middle = [JavaUtilArrays med3WithByteArray:array withInt:bottom withInt:middle withInt:top];
  }
  char partionValue = IOSByteArray_Get(nil_chk(array), middle);
  int a, b, c, d;
  a = b = start;
  c = d = end - 1;
  while (YES) {
    while (b <= c && IOSByteArray_Get(array, b) <= partionValue) {
      if (IOSByteArray_Get(array, b) == partionValue) {
        temp = IOSByteArray_Get(array, a);
        (*IOSByteArray_GetRef(array, a++)) = IOSByteArray_Get(array, b);
        (*IOSByteArray_GetRef(array, b)) = temp;
      }
      b++;
    }
    while (c >= b && IOSByteArray_Get(array, c) >= partionValue) {
      if (IOSByteArray_Get(array, c) == partionValue) {
        temp = IOSByteArray_Get(array, c);
        (*IOSByteArray_GetRef(array, c)) = IOSByteArray_Get(array, d);
        (*IOSByteArray_GetRef(array, d--)) = temp;
      }
      c--;
    }
    if (b > c) {
      break;
    }
    temp = IOSByteArray_Get(array, b);
    (*IOSByteArray_GetRef(array, b++)) = IOSByteArray_Get(array, c);
    (*IOSByteArray_GetRef(array, c--)) = temp;
  }
  length = a - start < b - a ? a - start : b - a;
  int l = start;
  int h = b - length;
  while (length-- > 0) {
    temp = IOSByteArray_Get(array, l);
    (*IOSByteArray_GetRef(array, l++)) = IOSByteArray_Get(array, h);
    (*IOSByteArray_GetRef(array, h++)) = temp;
  }
  length = d - c < end - 1 - d ? d - c : end - 1 - d;
  l = b;
  h = end - length;
  while (length-- > 0) {
    temp = IOSByteArray_Get(array, l);
    (*IOSByteArray_GetRef(array, l++)) = IOSByteArray_Get(array, h);
    (*IOSByteArray_GetRef(array, h++)) = temp;
  }
  if ((length = b - a) > 0) {
    [JavaUtilArrays sortWithInt:start withInt:start + length withByteArray:array];
  }
  if ((length = d - c) > 0) {
    [JavaUtilArrays sortWithInt:end - length withInt:end withByteArray:array];
  }
}

+ (void)sortWithCharArray:(IOSCharArray *)array {
  [JavaUtilArrays sortWithCharArray:array withInt:0 withInt:(int) [((IOSCharArray *) nil_chk(array)) count]];
}

+ (void)sortWithCharArray:(IOSCharArray *)array
                  withInt:(int)start
                  withInt:(int)end {
  if (array == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  [JavaUtilArrays checkBoundsWithInt:(int) [((IOSCharArray *) nil_chk(array)) count] withInt:start withInt:end];
  [JavaUtilArrays sortWithInt:start withInt:end withCharArray:array];
}

+ (void)sortWithInt:(int)start
            withInt:(int)end
      withCharArray:(IOSCharArray *)array {
  unichar temp;
  int length = end - start;
  if (length < 7) {
    for (int i = start + 1; i < end; i++) {
      for (int j = i; j > start && IOSCharArray_Get(nil_chk(array), j - 1) > IOSCharArray_Get(array, j); j--) {
        temp = IOSCharArray_Get(nil_chk(array), j);
        (*IOSCharArray_GetRef(array, j)) = IOSCharArray_Get(array, j - 1);
        (*IOSCharArray_GetRef(array, j - 1)) = temp;
      }
    }
    return;
  }
  int middle = (start + end) / 2;
  if (length > 7) {
    int bottom = start;
    int top = end - 1;
    if (length > 40) {
      length /= 8;
      bottom = [JavaUtilArrays med3WithCharArray:array withInt:bottom withInt:bottom + length withInt:bottom + (2 * length)];
      middle = [JavaUtilArrays med3WithCharArray:array withInt:middle - length withInt:middle withInt:middle + length];
      top = [JavaUtilArrays med3WithCharArray:array withInt:top - (2 * length) withInt:top - length withInt:top];
    }
    middle = [JavaUtilArrays med3WithCharArray:array withInt:bottom withInt:middle withInt:top];
  }
  unichar partionValue = IOSCharArray_Get(nil_chk(array), middle);
  int a, b, c, d;
  a = b = start;
  c = d = end - 1;
  while (YES) {
    while (b <= c && IOSCharArray_Get(array, b) <= partionValue) {
      if (IOSCharArray_Get(array, b) == partionValue) {
        temp = IOSCharArray_Get(array, a);
        (*IOSCharArray_GetRef(array, a++)) = IOSCharArray_Get(array, b);
        (*IOSCharArray_GetRef(array, b)) = temp;
      }
      b++;
    }
    while (c >= b && IOSCharArray_Get(array, c) >= partionValue) {
      if (IOSCharArray_Get(array, c) == partionValue) {
        temp = IOSCharArray_Get(array, c);
        (*IOSCharArray_GetRef(array, c)) = IOSCharArray_Get(array, d);
        (*IOSCharArray_GetRef(array, d--)) = temp;
      }
      c--;
    }
    if (b > c) {
      break;
    }
    temp = IOSCharArray_Get(array, b);
    (*IOSCharArray_GetRef(array, b++)) = IOSCharArray_Get(array, c);
    (*IOSCharArray_GetRef(array, c--)) = temp;
  }
  length = a - start < b - a ? a - start : b - a;
  int l = start;
  int h = b - length;
  while (length-- > 0) {
    temp = IOSCharArray_Get(array, l);
    (*IOSCharArray_GetRef(array, l++)) = IOSCharArray_Get(array, h);
    (*IOSCharArray_GetRef(array, h++)) = temp;
  }
  length = d - c < end - 1 - d ? d - c : end - 1 - d;
  l = b;
  h = end - length;
  while (length-- > 0) {
    temp = IOSCharArray_Get(array, l);
    (*IOSCharArray_GetRef(array, l++)) = IOSCharArray_Get(array, h);
    (*IOSCharArray_GetRef(array, h++)) = temp;
  }
  if ((length = b - a) > 0) {
    [JavaUtilArrays sortWithInt:start withInt:start + length withCharArray:array];
  }
  if ((length = d - c) > 0) {
    [JavaUtilArrays sortWithInt:end - length withInt:end withCharArray:array];
  }
}

+ (void)sortWithDoubleArray:(IOSDoubleArray *)array {
  [JavaUtilArrays sortWithDoubleArray:array withInt:0 withInt:(int) [((IOSDoubleArray *) nil_chk(array)) count]];
}

+ (void)sortWithDoubleArray:(IOSDoubleArray *)array
                    withInt:(int)start
                    withInt:(int)end {
  if (array == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  [JavaUtilArrays checkBoundsWithInt:(int) [((IOSDoubleArray *) nil_chk(array)) count] withInt:start withInt:end];
  [JavaUtilArrays sortWithInt:start withInt:end withDoubleArray:array];
}

+ (void)sortWithInt:(int)start
            withInt:(int)end
    withDoubleArray:(IOSDoubleArray *)array {
  double temp;
  int length = end - start;
  if (length < 7) {
    for (int i = start + 1; i < end; i++) {
      for (int j = i; j > start && [JavaUtilArrays lessThanWithDouble:IOSDoubleArray_Get(nil_chk(array), j) withDouble:IOSDoubleArray_Get(array, j - 1)]; j--) {
        temp = IOSDoubleArray_Get(nil_chk(array), j);
        (*IOSDoubleArray_GetRef(array, j)) = IOSDoubleArray_Get(array, j - 1);
        (*IOSDoubleArray_GetRef(array, j - 1)) = temp;
      }
    }
    return;
  }
  int middle = (start + end) / 2;
  if (length > 7) {
    int bottom = start;
    int top = end - 1;
    if (length > 40) {
      length /= 8;
      bottom = [JavaUtilArrays med3WithDoubleArray:array withInt:bottom withInt:bottom + length withInt:bottom + (2 * length)];
      middle = [JavaUtilArrays med3WithDoubleArray:array withInt:middle - length withInt:middle withInt:middle + length];
      top = [JavaUtilArrays med3WithDoubleArray:array withInt:top - (2 * length) withInt:top - length withInt:top];
    }
    middle = [JavaUtilArrays med3WithDoubleArray:array withInt:bottom withInt:middle withInt:top];
  }
  double partionValue = IOSDoubleArray_Get(nil_chk(array), middle);
  int a, b, c, d;
  a = b = start;
  c = d = end - 1;
  while (YES) {
    while (b <= c && ![JavaUtilArrays lessThanWithDouble:partionValue withDouble:IOSDoubleArray_Get(array, b)]) {
      if ([JavaUtilArrays isSameWithDouble:IOSDoubleArray_Get(array, b) withDouble:partionValue]) {
        temp = IOSDoubleArray_Get(array, a);
        (*IOSDoubleArray_GetRef(array, a++)) = IOSDoubleArray_Get(array, b);
        (*IOSDoubleArray_GetRef(array, b)) = temp;
      }
      b++;
    }
    while (c >= b && ![JavaUtilArrays lessThanWithDouble:IOSDoubleArray_Get(array, c) withDouble:partionValue]) {
      if ([JavaUtilArrays isSameWithDouble:IOSDoubleArray_Get(array, c) withDouble:partionValue]) {
        temp = IOSDoubleArray_Get(array, c);
        (*IOSDoubleArray_GetRef(array, c)) = IOSDoubleArray_Get(array, d);
        (*IOSDoubleArray_GetRef(array, d--)) = temp;
      }
      c--;
    }
    if (b > c) {
      break;
    }
    temp = IOSDoubleArray_Get(array, b);
    (*IOSDoubleArray_GetRef(array, b++)) = IOSDoubleArray_Get(array, c);
    (*IOSDoubleArray_GetRef(array, c--)) = temp;
  }
  length = a - start < b - a ? a - start : b - a;
  int l = start;
  int h = b - length;
  while (length-- > 0) {
    temp = IOSDoubleArray_Get(array, l);
    (*IOSDoubleArray_GetRef(array, l++)) = IOSDoubleArray_Get(array, h);
    (*IOSDoubleArray_GetRef(array, h++)) = temp;
  }
  length = d - c < end - 1 - d ? d - c : end - 1 - d;
  l = b;
  h = end - length;
  while (length-- > 0) {
    temp = IOSDoubleArray_Get(array, l);
    (*IOSDoubleArray_GetRef(array, l++)) = IOSDoubleArray_Get(array, h);
    (*IOSDoubleArray_GetRef(array, h++)) = temp;
  }
  if ((length = b - a) > 0) {
    [JavaUtilArrays sortWithInt:start withInt:start + length withDoubleArray:array];
  }
  if ((length = d - c) > 0) {
    [JavaUtilArrays sortWithInt:end - length withInt:end withDoubleArray:array];
  }
}

+ (void)sortWithFloatArray:(IOSFloatArray *)array {
  [JavaUtilArrays sortWithFloatArray:array withInt:0 withInt:(int) [((IOSFloatArray *) nil_chk(array)) count]];
}

+ (void)sortWithFloatArray:(IOSFloatArray *)array
                   withInt:(int)start
                   withInt:(int)end {
  if (array == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  [JavaUtilArrays checkBoundsWithInt:(int) [((IOSFloatArray *) nil_chk(array)) count] withInt:start withInt:end];
  [JavaUtilArrays sortWithInt:start withInt:end withFloatArray:array];
}

+ (void)sortWithInt:(int)start
            withInt:(int)end
     withFloatArray:(IOSFloatArray *)array {
  float temp;
  int length = end - start;
  if (length < 7) {
    for (int i = start + 1; i < end; i++) {
      for (int j = i; j > start && [JavaUtilArrays lessThanWithFloat:IOSFloatArray_Get(nil_chk(array), j) withFloat:IOSFloatArray_Get(array, j - 1)]; j--) {
        temp = IOSFloatArray_Get(nil_chk(array), j);
        (*IOSFloatArray_GetRef(array, j)) = IOSFloatArray_Get(array, j - 1);
        (*IOSFloatArray_GetRef(array, j - 1)) = temp;
      }
    }
    return;
  }
  int middle = (start + end) / 2;
  if (length > 7) {
    int bottom = start;
    int top = end - 1;
    if (length > 40) {
      length /= 8;
      bottom = [JavaUtilArrays med3WithFloatArray:array withInt:bottom withInt:bottom + length withInt:bottom + (2 * length)];
      middle = [JavaUtilArrays med3WithFloatArray:array withInt:middle - length withInt:middle withInt:middle + length];
      top = [JavaUtilArrays med3WithFloatArray:array withInt:top - (2 * length) withInt:top - length withInt:top];
    }
    middle = [JavaUtilArrays med3WithFloatArray:array withInt:bottom withInt:middle withInt:top];
  }
  float partionValue = IOSFloatArray_Get(nil_chk(array), middle);
  int a, b, c, d;
  a = b = start;
  c = d = end - 1;
  while (YES) {
    while (b <= c && ![JavaUtilArrays lessThanWithFloat:partionValue withFloat:IOSFloatArray_Get(array, b)]) {
      if ([JavaUtilArrays isSameWithFloat:IOSFloatArray_Get(array, b) withFloat:partionValue]) {
        temp = IOSFloatArray_Get(array, a);
        (*IOSFloatArray_GetRef(array, a++)) = IOSFloatArray_Get(array, b);
        (*IOSFloatArray_GetRef(array, b)) = temp;
      }
      b++;
    }
    while (c >= b && ![JavaUtilArrays lessThanWithFloat:IOSFloatArray_Get(array, c) withFloat:partionValue]) {
      if ([JavaUtilArrays isSameWithFloat:IOSFloatArray_Get(array, c) withFloat:partionValue]) {
        temp = IOSFloatArray_Get(array, c);
        (*IOSFloatArray_GetRef(array, c)) = IOSFloatArray_Get(array, d);
        (*IOSFloatArray_GetRef(array, d--)) = temp;
      }
      c--;
    }
    if (b > c) {
      break;
    }
    temp = IOSFloatArray_Get(array, b);
    (*IOSFloatArray_GetRef(array, b++)) = IOSFloatArray_Get(array, c);
    (*IOSFloatArray_GetRef(array, c--)) = temp;
  }
  length = a - start < b - a ? a - start : b - a;
  int l = start;
  int h = b - length;
  while (length-- > 0) {
    temp = IOSFloatArray_Get(array, l);
    (*IOSFloatArray_GetRef(array, l++)) = IOSFloatArray_Get(array, h);
    (*IOSFloatArray_GetRef(array, h++)) = temp;
  }
  length = d - c < end - 1 - d ? d - c : end - 1 - d;
  l = b;
  h = end - length;
  while (length-- > 0) {
    temp = IOSFloatArray_Get(array, l);
    (*IOSFloatArray_GetRef(array, l++)) = IOSFloatArray_Get(array, h);
    (*IOSFloatArray_GetRef(array, h++)) = temp;
  }
  if ((length = b - a) > 0) {
    [JavaUtilArrays sortWithInt:start withInt:start + length withFloatArray:array];
  }
  if ((length = d - c) > 0) {
    [JavaUtilArrays sortWithInt:end - length withInt:end withFloatArray:array];
  }
}

+ (void)sortWithIntArray:(IOSIntArray *)array {
  [JavaUtilArrays sortWithIntArray:array withInt:0 withInt:(int) [((IOSIntArray *) nil_chk(array)) count]];
}

+ (void)sortWithIntArray:(IOSIntArray *)array
                 withInt:(int)start
                 withInt:(int)end {
  if (array == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  [JavaUtilArrays checkBoundsWithInt:(int) [((IOSIntArray *) nil_chk(array)) count] withInt:start withInt:end];
  [JavaUtilArrays sortWithInt:start withInt:end withIntArray:array];
}

+ (void)sortWithInt:(int)start
            withInt:(int)end
       withIntArray:(IOSIntArray *)array {
  int temp;
  int length = end - start;
  if (length < 7) {
    for (int i = start + 1; i < end; i++) {
      for (int j = i; j > start && IOSIntArray_Get(nil_chk(array), j - 1) > IOSIntArray_Get(array, j); j--) {
        temp = IOSIntArray_Get(nil_chk(array), j);
        (*IOSIntArray_GetRef(array, j)) = IOSIntArray_Get(array, j - 1);
        (*IOSIntArray_GetRef(array, j - 1)) = temp;
      }
    }
    return;
  }
  int middle = (start + end) / 2;
  if (length > 7) {
    int bottom = start;
    int top = end - 1;
    if (length > 40) {
      length /= 8;
      bottom = [JavaUtilArrays med3WithIntArray:array withInt:bottom withInt:bottom + length withInt:bottom + (2 * length)];
      middle = [JavaUtilArrays med3WithIntArray:array withInt:middle - length withInt:middle withInt:middle + length];
      top = [JavaUtilArrays med3WithIntArray:array withInt:top - (2 * length) withInt:top - length withInt:top];
    }
    middle = [JavaUtilArrays med3WithIntArray:array withInt:bottom withInt:middle withInt:top];
  }
  int partionValue = IOSIntArray_Get(nil_chk(array), middle);
  int a, b, c, d;
  a = b = start;
  c = d = end - 1;
  while (YES) {
    while (b <= c && IOSIntArray_Get(array, b) <= partionValue) {
      if (IOSIntArray_Get(array, b) == partionValue) {
        temp = IOSIntArray_Get(array, a);
        (*IOSIntArray_GetRef(array, a++)) = IOSIntArray_Get(array, b);
        (*IOSIntArray_GetRef(array, b)) = temp;
      }
      b++;
    }
    while (c >= b && IOSIntArray_Get(array, c) >= partionValue) {
      if (IOSIntArray_Get(array, c) == partionValue) {
        temp = IOSIntArray_Get(array, c);
        (*IOSIntArray_GetRef(array, c)) = IOSIntArray_Get(array, d);
        (*IOSIntArray_GetRef(array, d--)) = temp;
      }
      c--;
    }
    if (b > c) {
      break;
    }
    temp = IOSIntArray_Get(array, b);
    (*IOSIntArray_GetRef(array, b++)) = IOSIntArray_Get(array, c);
    (*IOSIntArray_GetRef(array, c--)) = temp;
  }
  length = a - start < b - a ? a - start : b - a;
  int l = start;
  int h = b - length;
  while (length-- > 0) {
    temp = IOSIntArray_Get(array, l);
    (*IOSIntArray_GetRef(array, l++)) = IOSIntArray_Get(array, h);
    (*IOSIntArray_GetRef(array, h++)) = temp;
  }
  length = d - c < end - 1 - d ? d - c : end - 1 - d;
  l = b;
  h = end - length;
  while (length-- > 0) {
    temp = IOSIntArray_Get(array, l);
    (*IOSIntArray_GetRef(array, l++)) = IOSIntArray_Get(array, h);
    (*IOSIntArray_GetRef(array, h++)) = temp;
  }
  if ((length = b - a) > 0) {
    [JavaUtilArrays sortWithInt:start withInt:start + length withIntArray:array];
  }
  if ((length = d - c) > 0) {
    [JavaUtilArrays sortWithInt:end - length withInt:end withIntArray:array];
  }
}

+ (void)sortWithLongArray:(IOSLongArray *)array {
  [JavaUtilArrays sortWithLongArray:array withInt:0 withInt:(int) [((IOSLongArray *) nil_chk(array)) count]];
}

+ (void)sortWithLongArray:(IOSLongArray *)array
                  withInt:(int)start
                  withInt:(int)end {
  if (array == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  [JavaUtilArrays checkBoundsWithInt:(int) [((IOSLongArray *) nil_chk(array)) count] withInt:start withInt:end];
  [JavaUtilArrays sortWithInt:start withInt:end withLongArray:array];
}

+ (void)sortWithInt:(int)start
            withInt:(int)end
      withLongArray:(IOSLongArray *)array {
  long long int temp;
  int length = end - start;
  if (length < 7) {
    for (int i = start + 1; i < end; i++) {
      for (int j = i; j > start && IOSLongArray_Get(nil_chk(array), j - 1) > IOSLongArray_Get(array, j); j--) {
        temp = IOSLongArray_Get(nil_chk(array), j);
        (*IOSLongArray_GetRef(array, j)) = IOSLongArray_Get(array, j - 1);
        (*IOSLongArray_GetRef(array, j - 1)) = temp;
      }
    }
    return;
  }
  int middle = (start + end) / 2;
  if (length > 7) {
    int bottom = start;
    int top = end - 1;
    if (length > 40) {
      length /= 8;
      bottom = [JavaUtilArrays med3WithLongArray:array withInt:bottom withInt:bottom + length withInt:bottom + (2 * length)];
      middle = [JavaUtilArrays med3WithLongArray:array withInt:middle - length withInt:middle withInt:middle + length];
      top = [JavaUtilArrays med3WithLongArray:array withInt:top - (2 * length) withInt:top - length withInt:top];
    }
    middle = [JavaUtilArrays med3WithLongArray:array withInt:bottom withInt:middle withInt:top];
  }
  long long int partionValue = IOSLongArray_Get(nil_chk(array), middle);
  int a, b, c, d;
  a = b = start;
  c = d = end - 1;
  while (YES) {
    while (b <= c && IOSLongArray_Get(array, b) <= partionValue) {
      if (IOSLongArray_Get(array, b) == partionValue) {
        temp = IOSLongArray_Get(array, a);
        (*IOSLongArray_GetRef(array, a++)) = IOSLongArray_Get(array, b);
        (*IOSLongArray_GetRef(array, b)) = temp;
      }
      b++;
    }
    while (c >= b && IOSLongArray_Get(array, c) >= partionValue) {
      if (IOSLongArray_Get(array, c) == partionValue) {
        temp = IOSLongArray_Get(array, c);
        (*IOSLongArray_GetRef(array, c)) = IOSLongArray_Get(array, d);
        (*IOSLongArray_GetRef(array, d--)) = temp;
      }
      c--;
    }
    if (b > c) {
      break;
    }
    temp = IOSLongArray_Get(array, b);
    (*IOSLongArray_GetRef(array, b++)) = IOSLongArray_Get(array, c);
    (*IOSLongArray_GetRef(array, c--)) = temp;
  }
  length = a - start < b - a ? a - start : b - a;
  int l = start;
  int h = b - length;
  while (length-- > 0) {
    temp = IOSLongArray_Get(array, l);
    (*IOSLongArray_GetRef(array, l++)) = IOSLongArray_Get(array, h);
    (*IOSLongArray_GetRef(array, h++)) = temp;
  }
  length = d - c < end - 1 - d ? d - c : end - 1 - d;
  l = b;
  h = end - length;
  while (length-- > 0) {
    temp = IOSLongArray_Get(array, l);
    (*IOSLongArray_GetRef(array, l++)) = IOSLongArray_Get(array, h);
    (*IOSLongArray_GetRef(array, h++)) = temp;
  }
  if ((length = b - a) > 0) {
    [JavaUtilArrays sortWithInt:start withInt:start + length withLongArray:array];
  }
  if ((length = d - c) > 0) {
    [JavaUtilArrays sortWithInt:end - length withInt:end withLongArray:array];
  }
}

+ (void)sortWithNSObjectArray:(IOSObjectArray *)array {
  [JavaUtilArrays sortWithNSObjectArray:array withInt:0 withInt:(int) [((IOSObjectArray *) nil_chk(array)) count]];
}

+ (void)sortWithNSObjectArray:(IOSObjectArray *)array
                      withInt:(int)start
                      withInt:(int)end {
  if (array == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  [JavaUtilArrays checkBoundsWithInt:(int) [((IOSObjectArray *) nil_chk(array)) count] withInt:start withInt:end];
  [JavaUtilArrays sortWithInt:start withInt:end withNSObjectArray:array];
}

+ (void)sortWithInt:(int)start
            withInt:(int)end
  withNSObjectArray:(IOSObjectArray *)array {
  int length = end - start;
  if (length <= 0) {
    return;
  }
  if ([[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[NSString class]]] isInstance:array]) {
    [JavaUtilArrays stableStringSortWithNSStringArray:(IOSObjectArray *) check_class_cast(array, [IOSObjectArray class]) withInt:start withInt:end];
  }
  else {
    IOSObjectArray *out = [IOSObjectArray arrayWithLength:end type:[IOSClass classWithClass:[NSObject class]]];
    [JavaLangSystem arraycopyWithId:array withInt:start withId:out withInt:start withInt:length];
    [JavaUtilArrays mergeSortWithNSObjectArray:out withNSObjectArray:array withInt:start withInt:end];
  }
}

+ (void)swapWithInt:(int)a
            withInt:(int)b
  withNSObjectArray:(IOSObjectArray *)arr {
  id tmp = IOSObjectArray_Get(nil_chk(arr), a);
  IOSObjectArray_Set(arr, a, IOSObjectArray_Get(arr, b));
  IOSObjectArray_Set(arr, b, tmp);
}

+ (void)mergeSortWithNSObjectArray:(IOSObjectArray *)inArg
                 withNSObjectArray:(IOSObjectArray *)outArg
                           withInt:(int)start
                           withInt:(int)end {
  int len = end - start;
  if (len <= JavaUtilArrays_SIMPLE_LENGTH) {
    for (int i = start + 1; i < end; i++) {
      id<JavaLangComparable> current = (id<JavaLangComparable>) check_protocol_cast(IOSObjectArray_Get(nil_chk(outArg), i), @protocol(JavaLangComparable));
      id prev = IOSObjectArray_Get(outArg, i - 1);
      if ([((id<JavaLangComparable>) nil_chk(current)) compareToWithId:prev] < 0) {
        int j = i;
        do {
          IOSObjectArray_Set(outArg, j--, prev);
        }
        while (j > start && [current compareToWithId:prev = IOSObjectArray_Get(outArg, j - 1)] < 0);
        IOSObjectArray_Set(outArg, j, current);
      }
    }
    return;
  }
  int med = (int) (((unsigned int) (end + start)) >> 1);
  [JavaUtilArrays mergeSortWithNSObjectArray:outArg withNSObjectArray:inArg withInt:start withInt:med];
  [JavaUtilArrays mergeSortWithNSObjectArray:outArg withNSObjectArray:inArg withInt:med withInt:end];
  if ([((id<JavaLangComparable>) nil_chk(IOSObjectArray_Get(nil_chk(inArg), med - 1))) compareToWithId:IOSObjectArray_Get(inArg, med)] <= 0) {
    [JavaLangSystem arraycopyWithId:inArg withInt:start withId:outArg withInt:start withInt:len];
    return;
  }
  int r = med, i = start;
  do {
    id<JavaLangComparable> fromVal = (id<JavaLangComparable>) check_protocol_cast(IOSObjectArray_Get(inArg, start), @protocol(JavaLangComparable));
    id<JavaLangComparable> rVal = (id<JavaLangComparable>) check_protocol_cast(IOSObjectArray_Get(inArg, r), @protocol(JavaLangComparable));
    if ([((id<JavaLangComparable>) nil_chk(fromVal)) compareToWithId:rVal] <= 0) {
      int l_1 = [JavaUtilArrays findWithNSObjectArray:inArg withJavaLangComparable:rVal withInt:-1 withInt:start + 1 withInt:med - 1];
      int toCopy = l_1 - start + 1;
      [JavaLangSystem arraycopyWithId:inArg withInt:start withId:outArg withInt:i withInt:toCopy];
      i += toCopy;
      IOSObjectArray_Set(nil_chk(outArg), i++, rVal);
      r++;
      start = l_1 + 1;
    }
    else {
      int r_1 = [JavaUtilArrays findWithNSObjectArray:inArg withJavaLangComparable:fromVal withInt:0 withInt:r + 1 withInt:end - 1];
      int toCopy = r_1 - r + 1;
      [JavaLangSystem arraycopyWithId:inArg withInt:r withId:outArg withInt:i withInt:toCopy];
      i += toCopy;
      IOSObjectArray_Set(nil_chk(outArg), i++, fromVal);
      start++;
      r = r_1 + 1;
    }
  }
  while ((end - r) > 0 && (med - start) > 0);
  if ((end - r) <= 0) {
    [JavaLangSystem arraycopyWithId:inArg withInt:start withId:outArg withInt:i withInt:med - start];
  }
  else {
    [JavaLangSystem arraycopyWithId:inArg withInt:r withId:outArg withInt:i withInt:end - r];
  }
}

+ (void)mergeSortWithNSObjectArray:(IOSObjectArray *)inArg
                 withNSObjectArray:(IOSObjectArray *)outArg
                           withInt:(int)start
                           withInt:(int)end
            withJavaUtilComparator:(id<JavaUtilComparator>)c {
  int len = end - start;
  if (len <= JavaUtilArrays_SIMPLE_LENGTH) {
    for (int i = start + 1; i < end; i++) {
      id current = IOSObjectArray_Get(nil_chk(outArg), i);
      id prev = IOSObjectArray_Get(outArg, i - 1);
      if ([((id<JavaUtilComparator>) nil_chk(c)) compareWithId:prev withId:current] > 0) {
        int j = i;
        do {
          IOSObjectArray_Set(outArg, j--, prev);
        }
        while (j > start && ([c compareWithId:prev = IOSObjectArray_Get(outArg, j - 1) withId:current] > 0));
        IOSObjectArray_Set(outArg, j, current);
      }
    }
    return;
  }
  int med = (int) (((unsigned int) (end + start)) >> 1);
  [JavaUtilArrays mergeSortWithNSObjectArray:outArg withNSObjectArray:inArg withInt:start withInt:med withJavaUtilComparator:c];
  [JavaUtilArrays mergeSortWithNSObjectArray:outArg withNSObjectArray:inArg withInt:med withInt:end withJavaUtilComparator:c];
  if ([((id<JavaUtilComparator>) nil_chk(c)) compareWithId:IOSObjectArray_Get(nil_chk(inArg), med - 1) withId:IOSObjectArray_Get(inArg, med)] <= 0) {
    [JavaLangSystem arraycopyWithId:inArg withInt:start withId:outArg withInt:start withInt:len];
    return;
  }
  int r = med, i = start;
  do {
    id fromVal = IOSObjectArray_Get(inArg, start);
    id rVal = IOSObjectArray_Get(inArg, r);
    if ([c compareWithId:fromVal withId:rVal] <= 0) {
      int l_1 = [JavaUtilArrays findWithNSObjectArray:inArg withId:rVal withInt:-1 withInt:start + 1 withInt:med - 1 withJavaUtilComparator:c];
      int toCopy = l_1 - start + 1;
      [JavaLangSystem arraycopyWithId:inArg withInt:start withId:outArg withInt:i withInt:toCopy];
      i += toCopy;
      IOSObjectArray_Set(nil_chk(outArg), i++, rVal);
      r++;
      start = l_1 + 1;
    }
    else {
      int r_1 = [JavaUtilArrays findWithNSObjectArray:inArg withId:fromVal withInt:0 withInt:r + 1 withInt:end - 1 withJavaUtilComparator:c];
      int toCopy = r_1 - r + 1;
      [JavaLangSystem arraycopyWithId:inArg withInt:r withId:outArg withInt:i withInt:toCopy];
      i += toCopy;
      IOSObjectArray_Set(nil_chk(outArg), i++, fromVal);
      start++;
      r = r_1 + 1;
    }
  }
  while ((end - r) > 0 && (med - start) > 0);
  if ((end - r) <= 0) {
    [JavaLangSystem arraycopyWithId:inArg withInt:start withId:outArg withInt:i withInt:med - start];
  }
  else {
    [JavaLangSystem arraycopyWithId:inArg withInt:r withId:outArg withInt:i withInt:end - r];
  }
}

+ (int)findWithNSObjectArray:(IOSObjectArray *)arr
      withJavaLangComparable:(id<JavaLangComparable>)val
                     withInt:(int)bnd
                     withInt:(int)l
                     withInt:(int)r {
  int m = l;
  int d = 1;
  while (m <= r) {
    if ([((id<JavaLangComparable>) nil_chk(val)) compareToWithId:IOSObjectArray_Get(nil_chk(arr), m)] > bnd) {
      l = m + 1;
    }
    else {
      r = m - 1;
      break;
    }
    m += d;
    d <<= 1;
  }
  while (l <= r) {
    m = (int) (((unsigned int) (l + r)) >> 1);
    if ([((id<JavaLangComparable>) nil_chk(val)) compareToWithId:IOSObjectArray_Get(nil_chk(arr), m)] > bnd) {
      l = m + 1;
    }
    else {
      r = m - 1;
    }
  }
  return l - 1;
}

+ (int)findWithNSObjectArray:(IOSObjectArray *)arr
                      withId:(id)val
                     withInt:(int)bnd
                     withInt:(int)l
                     withInt:(int)r
      withJavaUtilComparator:(id<JavaUtilComparator>)c {
  int m = l;
  int d = 1;
  while (m <= r) {
    if ([((id<JavaUtilComparator>) nil_chk(c)) compareWithId:val withId:IOSObjectArray_Get(nil_chk(arr), m)] > bnd) {
      l = m + 1;
    }
    else {
      r = m - 1;
      break;
    }
    m += d;
    d <<= 1;
  }
  while (l <= r) {
    m = (int) (((unsigned int) (l + r)) >> 1);
    if ([((id<JavaUtilComparator>) nil_chk(c)) compareWithId:val withId:IOSObjectArray_Get(nil_chk(arr), m)] > bnd) {
      l = m + 1;
    }
    else {
      r = m - 1;
    }
  }
  return l - 1;
}

+ (int)medCharWithInt:(int)a
              withInt:(int)b
              withInt:(int)c
    withNSStringArray:(IOSObjectArray *)arr
              withInt:(int)id_ {
  int ac = [JavaUtilArrays charAtWithNSString:IOSObjectArray_Get(nil_chk(arr), a) withInt:id_];
  int bc = [JavaUtilArrays charAtWithNSString:IOSObjectArray_Get(arr, b) withInt:id_];
  int cc = [JavaUtilArrays charAtWithNSString:IOSObjectArray_Get(arr, c) withInt:id_];
  return ac < bc ? (bc < cc ? b : (ac < cc ? c : a)) : (bc < cc ? (ac < cc ? a : c) : b);
}

+ (int)charAtWithNSString:(NSString *)str
                  withInt:(int)i {
  if (i >= [((NSString *) nil_chk(str)) length]) {
    return -1;
  }
  return [str charAtWithInt:i];
}

+ (void)copySwapWithNSObjectArray:(IOSObjectArray *)src
                          withInt:(int)from
                withNSObjectArray:(IOSObjectArray *)dst
                          withInt:(int)to
                          withInt:(int)len {
  if (src == dst && from + len > to) {
    int new_to = to + len - 1;
    for (; from < to; from++, new_to--, len--) {
      IOSObjectArray_Set(nil_chk(dst), new_to, IOSObjectArray_Get(nil_chk(src), from));
    }
    for (; len > 1; from++, new_to--, len -= 2) {
      [JavaUtilArrays swapWithInt:from withInt:new_to withNSObjectArray:dst];
    }
  }
  else {
    to = to + len - 1;
    for (; len > 0; from++, to--, len--) {
      IOSObjectArray_Set(nil_chk(dst), to, IOSObjectArray_Get(nil_chk(src), from));
    }
  }
}

+ (void)stableStringSortWithNSStringArray:(IOSObjectArray *)arr
                                  withInt:(int)start
                                  withInt:(int)end {
  [JavaUtilArrays stableStringSortWithNSStringArray:arr withNSStringArray:arr withNSStringArray:[IOSObjectArray arrayWithLength:end type:[IOSClass classWithClass:[NSString class]]] withInt:start withInt:end withInt:0];
}

+ (void)stableStringSortWithNSStringArray:(IOSObjectArray *)arr
                        withNSStringArray:(IOSObjectArray *)src
                        withNSStringArray:(IOSObjectArray *)dst
                                  withInt:(int)start
                                  withInt:(int)end
                                  withInt:(int)chId {
  int length = end - start;
  if (length < JavaUtilArrays_SIMPLE_LENGTH) {
    if (src == arr) {
      for (int i = start + 1; i < end; i++) {
        NSString *current = IOSObjectArray_Get(nil_chk(arr), i);
        NSString *prev = IOSObjectArray_Get(arr, i - 1);
        if ([((NSString *) nil_chk(current)) compareToWithId:prev] < 0) {
          int j = i;
          do {
            IOSObjectArray_Set(arr, j--, prev);
          }
          while (j > start && [current compareToWithId:prev = IOSObjectArray_Get(arr, j - 1)] < 0);
          IOSObjectArray_Set(arr, j, current);
        }
      }
    }
    else {
      int actualEnd = end - 1;
      IOSObjectArray_Set(nil_chk(dst), start, IOSObjectArray_Get(nil_chk(src), actualEnd--));
      for (int i = start + 1; i < end; i++, actualEnd--) {
        NSString *current = IOSObjectArray_Get(src, actualEnd);
        NSString *prev;
        int j = i;
        while (j > start && [((NSString *) nil_chk(current)) compareToWithId:prev = IOSObjectArray_Get(dst, j - 1)] < 0) {
          IOSObjectArray_Set(dst, j--, prev);
        }
        IOSObjectArray_Set(dst, j, current);
      }
    }
    return;
  }
  int s;
  int mid = start + length / 2;
  int lo = start;
  int hi = end - 1;
  if (length > 40) {
    s = length / 8;
    lo = [JavaUtilArrays medCharWithInt:lo withInt:lo + s withInt:lo + s * 2 withNSStringArray:src withInt:chId];
    mid = [JavaUtilArrays medCharWithInt:mid - s withInt:mid withInt:mid + s withNSStringArray:src withInt:chId];
    hi = [JavaUtilArrays medCharWithInt:hi withInt:hi - s withInt:hi - s * 2 withNSStringArray:src withInt:chId];
  }
  mid = [JavaUtilArrays medCharWithInt:lo withInt:mid withInt:hi withNSStringArray:src withInt:chId];
  int midVal = [JavaUtilArrays charAtWithNSString:IOSObjectArray_Get(nil_chk(src), mid) withInt:chId];
  int a, b, c;
  a = b = start;
  c = end - 1;
  int cmp;
  for (int i = start; i < end; i++) {
    NSString *el = IOSObjectArray_Get(src, i);
    cmp = [JavaUtilArrays charAtWithNSString:el withInt:chId] - midVal;
    if (cmp < 0) {
      IOSObjectArray_Set(src, a, el);
      a++;
    }
    else if (cmp > 0) {
      IOSObjectArray_Set(nil_chk(dst), c, el);
      c--;
    }
    else {
      IOSObjectArray_Set(nil_chk(dst), b, el);
      b++;
    }
  }
  s = b - start;
  if (s > 0) {
    if (arr == src) {
      [JavaLangSystem arraycopyWithId:dst withInt:start withId:arr withInt:a withInt:s];
    }
    else {
      [JavaUtilArrays copySwapWithNSObjectArray:dst withInt:start withNSObjectArray:arr withInt:a withInt:s];
    }
    if (b >= end && midVal == -1) {
      return;
    }
    [JavaUtilArrays stableStringSortWithNSStringArray:arr withNSStringArray:arr withNSStringArray:arr == dst ? src : dst withInt:a withInt:a + s withInt:chId + 1];
  }
  s = a - start;
  if (s > 0) {
    [JavaUtilArrays stableStringSortWithNSStringArray:arr withNSStringArray:src withNSStringArray:dst withInt:start withInt:a withInt:chId];
  }
  c++;
  s = end - c;
  if (s > 0) {
    [JavaUtilArrays stableStringSortWithNSStringArray:arr withNSStringArray:dst withNSStringArray:src withInt:c withInt:end withInt:chId];
  }
}

+ (void)sortWithNSObjectArray:(IOSObjectArray *)array
                      withInt:(int)start
                      withInt:(int)end
       withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  if (array == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  [JavaUtilArrays checkBoundsWithInt:(int) [((IOSObjectArray *) nil_chk(array)) count] withInt:start withInt:end];
  [JavaUtilArrays sortWithInt:start withInt:end withNSObjectArray:array withJavaUtilComparator:comparator];
}

+ (void)sortWithInt:(int)start
            withInt:(int)end
  withNSObjectArray:(IOSObjectArray *)array
withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  if (comparator == nil) {
    [JavaUtilArrays sortWithInt:start withInt:end withNSObjectArray:array];
  }
  else {
    int length = end - start;
    IOSObjectArray *out = [IOSObjectArray arrayWithLength:end type:[IOSClass classWithClass:[NSObject class]]];
    [JavaLangSystem arraycopyWithId:array withInt:start withId:out withInt:start withInt:length];
    [JavaUtilArrays mergeSortWithNSObjectArray:out withNSObjectArray:array withInt:start withInt:end withJavaUtilComparator:comparator];
  }
}

+ (void)sortWithNSObjectArray:(IOSObjectArray *)array
       withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  [JavaUtilArrays sortWithInt:0 withInt:(int) [((IOSObjectArray *) nil_chk(array)) count] withNSObjectArray:array withJavaUtilComparator:comparator];
}

+ (void)sortWithShortArray:(IOSShortArray *)array {
  [JavaUtilArrays sortWithShortArray:array withInt:0 withInt:(int) [((IOSShortArray *) nil_chk(array)) count]];
}

+ (void)sortWithShortArray:(IOSShortArray *)array
                   withInt:(int)start
                   withInt:(int)end {
  if (array == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  [JavaUtilArrays checkBoundsWithInt:(int) [((IOSShortArray *) nil_chk(array)) count] withInt:start withInt:end];
  [JavaUtilArrays sortWithInt:start withInt:end withShortArray:array];
}

+ (void)sortWithInt:(int)start
            withInt:(int)end
     withShortArray:(IOSShortArray *)array {
  short int temp;
  int length = end - start;
  if (length < 7) {
    for (int i = start + 1; i < end; i++) {
      for (int j = i; j > start && IOSShortArray_Get(nil_chk(array), j - 1) > IOSShortArray_Get(array, j); j--) {
        temp = IOSShortArray_Get(nil_chk(array), j);
        (*IOSShortArray_GetRef(array, j)) = IOSShortArray_Get(array, j - 1);
        (*IOSShortArray_GetRef(array, j - 1)) = temp;
      }
    }
    return;
  }
  int middle = (start + end) / 2;
  if (length > 7) {
    int bottom = start;
    int top = end - 1;
    if (length > 40) {
      length /= 8;
      bottom = [JavaUtilArrays med3WithShortArray:array withInt:bottom withInt:bottom + length withInt:bottom + (2 * length)];
      middle = [JavaUtilArrays med3WithShortArray:array withInt:middle - length withInt:middle withInt:middle + length];
      top = [JavaUtilArrays med3WithShortArray:array withInt:top - (2 * length) withInt:top - length withInt:top];
    }
    middle = [JavaUtilArrays med3WithShortArray:array withInt:bottom withInt:middle withInt:top];
  }
  short int partionValue = IOSShortArray_Get(nil_chk(array), middle);
  int a, b, c, d;
  a = b = start;
  c = d = end - 1;
  while (YES) {
    while (b <= c && IOSShortArray_Get(array, b) <= partionValue) {
      if (IOSShortArray_Get(array, b) == partionValue) {
        temp = IOSShortArray_Get(array, a);
        (*IOSShortArray_GetRef(array, a++)) = IOSShortArray_Get(array, b);
        (*IOSShortArray_GetRef(array, b)) = temp;
      }
      b++;
    }
    while (c >= b && IOSShortArray_Get(array, c) >= partionValue) {
      if (IOSShortArray_Get(array, c) == partionValue) {
        temp = IOSShortArray_Get(array, c);
        (*IOSShortArray_GetRef(array, c)) = IOSShortArray_Get(array, d);
        (*IOSShortArray_GetRef(array, d--)) = temp;
      }
      c--;
    }
    if (b > c) {
      break;
    }
    temp = IOSShortArray_Get(array, b);
    (*IOSShortArray_GetRef(array, b++)) = IOSShortArray_Get(array, c);
    (*IOSShortArray_GetRef(array, c--)) = temp;
  }
  length = a - start < b - a ? a - start : b - a;
  int l = start;
  int h = b - length;
  while (length-- > 0) {
    temp = IOSShortArray_Get(array, l);
    (*IOSShortArray_GetRef(array, l++)) = IOSShortArray_Get(array, h);
    (*IOSShortArray_GetRef(array, h++)) = temp;
  }
  length = d - c < end - 1 - d ? d - c : end - 1 - d;
  l = b;
  h = end - length;
  while (length-- > 0) {
    temp = IOSShortArray_Get(array, l);
    (*IOSShortArray_GetRef(array, l++)) = IOSShortArray_Get(array, h);
    (*IOSShortArray_GetRef(array, h++)) = temp;
  }
  if ((length = b - a) > 0) {
    [JavaUtilArrays sortWithInt:start withInt:start + length withShortArray:array];
  }
  if ((length = d - c) > 0) {
    [JavaUtilArrays sortWithInt:end - length withInt:end withShortArray:array];
  }
}

+ (NSString *)toStringWithBooleanArray:(IOSBooleanArray *)array {
  if (array == nil) {
    return @"null";
  }
  if ((int) [((IOSBooleanArray *) nil_chk(array)) count] == 0) {
    return @"[]";
  }
  JavaLangStringBuilder *sb = [[[JavaLangStringBuilder alloc] initWithInt:2 + (int) [array count] * 5] autorelease];
  [sb appendWithChar:'['];
  [sb appendWithBoolean:IOSBooleanArray_Get(array, 0)];
  for (int i = 1; i < (int) [array count]; i++) {
    [sb appendWithNSString:@", "];
    [sb appendWithBoolean:IOSBooleanArray_Get(array, i)];
  }
  [sb appendWithChar:']'];
  return [sb description];
}

+ (NSString *)toStringWithByteArray:(IOSByteArray *)array {
  if (array == nil) {
    return @"null";
  }
  if ((int) [((IOSByteArray *) nil_chk(array)) count] == 0) {
    return @"[]";
  }
  JavaLangStringBuilder *sb = [[[JavaLangStringBuilder alloc] initWithInt:2 + (int) [array count] * 3] autorelease];
  [sb appendWithChar:'['];
  [sb appendWithInt:IOSByteArray_Get(array, 0)];
  for (int i = 1; i < (int) [array count]; i++) {
    [sb appendWithNSString:@", "];
    [sb appendWithInt:IOSByteArray_Get(array, i)];
  }
  [sb appendWithChar:']'];
  return [sb description];
}

+ (NSString *)toStringWithCharArray:(IOSCharArray *)array {
  if (array == nil) {
    return @"null";
  }
  if ((int) [((IOSCharArray *) nil_chk(array)) count] == 0) {
    return @"[]";
  }
  JavaLangStringBuilder *sb = [[[JavaLangStringBuilder alloc] initWithInt:2 + (int) [array count] * 2] autorelease];
  [sb appendWithChar:'['];
  [sb appendWithChar:IOSCharArray_Get(array, 0)];
  for (int i = 1; i < (int) [array count]; i++) {
    [sb appendWithNSString:@", "];
    [sb appendWithChar:IOSCharArray_Get(array, i)];
  }
  [sb appendWithChar:']'];
  return [sb description];
}

+ (NSString *)toStringWithDoubleArray:(IOSDoubleArray *)array {
  if (array == nil) {
    return @"null";
  }
  if ((int) [((IOSDoubleArray *) nil_chk(array)) count] == 0) {
    return @"[]";
  }
  JavaLangStringBuilder *sb = [[[JavaLangStringBuilder alloc] initWithInt:2 + (int) [array count] * 5] autorelease];
  [sb appendWithChar:'['];
  [sb appendWithDouble:IOSDoubleArray_Get(array, 0)];
  for (int i = 1; i < (int) [array count]; i++) {
    [sb appendWithNSString:@", "];
    [sb appendWithDouble:IOSDoubleArray_Get(array, i)];
  }
  [sb appendWithChar:']'];
  return [sb description];
}

+ (NSString *)toStringWithFloatArray:(IOSFloatArray *)array {
  if (array == nil) {
    return @"null";
  }
  if ((int) [((IOSFloatArray *) nil_chk(array)) count] == 0) {
    return @"[]";
  }
  JavaLangStringBuilder *sb = [[[JavaLangStringBuilder alloc] initWithInt:2 + (int) [array count] * 5] autorelease];
  [sb appendWithChar:'['];
  [sb appendWithFloat:IOSFloatArray_Get(array, 0)];
  for (int i = 1; i < (int) [array count]; i++) {
    [sb appendWithNSString:@", "];
    [sb appendWithFloat:IOSFloatArray_Get(array, i)];
  }
  [sb appendWithChar:']'];
  return [sb description];
}

+ (NSString *)toStringWithIntArray:(IOSIntArray *)array {
  if (array == nil) {
    return @"null";
  }
  if ((int) [((IOSIntArray *) nil_chk(array)) count] == 0) {
    return @"[]";
  }
  JavaLangStringBuilder *sb = [[[JavaLangStringBuilder alloc] initWithInt:2 + (int) [array count] * 4] autorelease];
  [sb appendWithChar:'['];
  [sb appendWithInt:IOSIntArray_Get(array, 0)];
  for (int i = 1; i < (int) [array count]; i++) {
    [sb appendWithNSString:@", "];
    [sb appendWithInt:IOSIntArray_Get(array, i)];
  }
  [sb appendWithChar:']'];
  return [sb description];
}

+ (NSString *)toStringWithLongArray:(IOSLongArray *)array {
  if (array == nil) {
    return @"null";
  }
  if ((int) [((IOSLongArray *) nil_chk(array)) count] == 0) {
    return @"[]";
  }
  JavaLangStringBuilder *sb = [[[JavaLangStringBuilder alloc] initWithInt:2 + (int) [array count] * 4] autorelease];
  [sb appendWithChar:'['];
  [sb appendWithLong:IOSLongArray_Get(array, 0)];
  for (int i = 1; i < (int) [array count]; i++) {
    [sb appendWithNSString:@", "];
    [sb appendWithLong:IOSLongArray_Get(array, i)];
  }
  [sb appendWithChar:']'];
  return [sb description];
}

+ (NSString *)toStringWithShortArray:(IOSShortArray *)array {
  if (array == nil) {
    return @"null";
  }
  if ((int) [((IOSShortArray *) nil_chk(array)) count] == 0) {
    return @"[]";
  }
  JavaLangStringBuilder *sb = [[[JavaLangStringBuilder alloc] initWithInt:2 + (int) [array count] * 4] autorelease];
  [sb appendWithChar:'['];
  [sb appendWithInt:IOSShortArray_Get(array, 0)];
  for (int i = 1; i < (int) [array count]; i++) {
    [sb appendWithNSString:@", "];
    [sb appendWithInt:IOSShortArray_Get(array, i)];
  }
  [sb appendWithChar:']'];
  return [sb description];
}

+ (NSString *)toStringWithNSObjectArray:(IOSObjectArray *)array {
  if (array == nil) {
    return @"null";
  }
  if ((int) [((IOSObjectArray *) nil_chk(array)) count] == 0) {
    return @"[]";
  }
  JavaLangStringBuilder *sb = [[[JavaLangStringBuilder alloc] initWithInt:2 + (int) [array count] * 5] autorelease];
  [sb appendWithChar:'['];
  [sb appendWithId:IOSObjectArray_Get(array, 0)];
  for (int i = 1; i < (int) [array count]; i++) {
    [sb appendWithNSString:@", "];
    [sb appendWithId:IOSObjectArray_Get(array, i)];
  }
  [sb appendWithChar:']'];
  return [sb description];
}

+ (NSString *)deepToStringWithNSObjectArray:(IOSObjectArray *)array {
  if (array == nil) {
    return @"null";
  }
  JavaLangStringBuilder *buf = [[[JavaLangStringBuilder alloc] initWithInt:(int) [((IOSObjectArray *) nil_chk(array)) count] * 9] autorelease];
  [JavaUtilArrays deepToStringImplWithNSObjectArray:array withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ array } count:1 type:[IOSClass classWithClass:[NSObject class]]] withJavaLangStringBuilder:buf];
  return [buf description];
}

+ (void)deepToStringImplWithNSObjectArray:(IOSObjectArray *)array
                        withNSObjectArray:(IOSObjectArray *)origArrays
                withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  if (array == nil) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"null"];
    return;
  }
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:'['];
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(array)) count]; i++) {
    if (i != 0) {
      [sb appendWithNSString:@", "];
    }
    id elem = IOSObjectArray_Get(array, i);
    if (elem == nil) {
      [sb appendWithNSString:@"null"];
    }
    else {
      IOSClass *elemClass = [elem getClass];
      if ([elemClass isArray]) {
        IOSClass *elemElemClass = [elemClass getComponentType];
        if ([((IOSClass *) nil_chk(elemElemClass)) isPrimitive]) {
          if ([[IOSClass booleanClass] isEqual:elemElemClass]) {
            [sb appendWithNSString:[JavaUtilArrays toStringWithBooleanArray:(IOSBooleanArray *) check_class_cast(elem, [IOSBooleanArray class])]];
          }
          else if ([[IOSClass byteClass] isEqual:elemElemClass]) {
            [sb appendWithNSString:[JavaUtilArrays toStringWithByteArray:(IOSByteArray *) check_class_cast(elem, [IOSByteArray class])]];
          }
          else if ([[IOSClass charClass] isEqual:elemElemClass]) {
            [sb appendWithNSString:[JavaUtilArrays toStringWithCharArray:(IOSCharArray *) check_class_cast(elem, [IOSCharArray class])]];
          }
          else if ([[IOSClass doubleClass] isEqual:elemElemClass]) {
            [sb appendWithNSString:[JavaUtilArrays toStringWithDoubleArray:(IOSDoubleArray *) check_class_cast(elem, [IOSDoubleArray class])]];
          }
          else if ([[IOSClass floatClass] isEqual:elemElemClass]) {
            [sb appendWithNSString:[JavaUtilArrays toStringWithFloatArray:(IOSFloatArray *) check_class_cast(elem, [IOSFloatArray class])]];
          }
          else if ([[IOSClass intClass] isEqual:elemElemClass]) {
            [sb appendWithNSString:[JavaUtilArrays toStringWithIntArray:(IOSIntArray *) check_class_cast(elem, [IOSIntArray class])]];
          }
          else if ([[IOSClass longClass] isEqual:elemElemClass]) {
            [sb appendWithNSString:[JavaUtilArrays toStringWithLongArray:(IOSLongArray *) check_class_cast(elem, [IOSLongArray class])]];
          }
          else if ([[IOSClass shortClass] isEqual:elemElemClass]) {
            [sb appendWithNSString:[JavaUtilArrays toStringWithShortArray:(IOSShortArray *) check_class_cast(elem, [IOSShortArray class])]];
          }
          else {
            @throw [[[JavaLangAssertionError alloc] init] autorelease];
          }
        }
        else {
          NSAssert([[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[NSObject class]]] isInstance:elem], @"apache_harmony/classlib/modules/luni/src/main/java/java/util/Arrays.java:3434 condition failed: assert elem instanceof Object[];");
          if ([JavaUtilArrays deepToStringImplContainsWithNSObjectArray:origArrays withId:elem]) {
            [sb appendWithNSString:@"[...]"];
          }
          else {
            IOSObjectArray *newArray = (IOSObjectArray *) check_class_cast(elem, [IOSObjectArray class]);
            IOSObjectArray *newOrigArrays = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(origArrays)) count] + 1 type:[IOSClass classWithClass:[NSObject class]]];
            [JavaLangSystem arraycopyWithId:origArrays withInt:0 withId:newOrigArrays withInt:0 withInt:(int) [origArrays count]];
            IOSObjectArray_Set(newOrigArrays, (int) [origArrays count], newArray);
            [JavaUtilArrays deepToStringImplWithNSObjectArray:newArray withNSObjectArray:newOrigArrays withJavaLangStringBuilder:sb];
          }
        }
      }
      else {
        [sb appendWithId:IOSObjectArray_Get(array, i)];
      }
    }
  }
  [sb appendWithChar:']'];
}

+ (BOOL)deepToStringImplContainsWithNSObjectArray:(IOSObjectArray *)origArrays
                                           withId:(id)array {
  if (origArrays == nil || (int) [origArrays count] == 0) {
    return NO;
  }
  {
    IOSObjectArray *a__ = origArrays;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id element = (*b__++);
      if (element == array) {
        return YES;
      }
    }
  }
  return NO;
}

+ (IOSBooleanArray *)copyOfWithBooleanArray:(IOSBooleanArray *)original
                                    withInt:(int)newLength {
  if (newLength < 0) {
    @throw [[[JavaLangNegativeArraySizeException alloc] init] autorelease];
  }
  return [JavaUtilArrays copyOfRangeWithBooleanArray:original withInt:0 withInt:newLength];
}

+ (IOSByteArray *)copyOfWithByteArray:(IOSByteArray *)original
                              withInt:(int)newLength {
  if (newLength < 0) {
    @throw [[[JavaLangNegativeArraySizeException alloc] init] autorelease];
  }
  return [JavaUtilArrays copyOfRangeWithByteArray:original withInt:0 withInt:newLength];
}

+ (IOSCharArray *)copyOfWithCharArray:(IOSCharArray *)original
                              withInt:(int)newLength {
  if (newLength < 0) {
    @throw [[[JavaLangNegativeArraySizeException alloc] init] autorelease];
  }
  return [JavaUtilArrays copyOfRangeWithCharArray:original withInt:0 withInt:newLength];
}

+ (IOSDoubleArray *)copyOfWithDoubleArray:(IOSDoubleArray *)original
                                  withInt:(int)newLength {
  if (newLength < 0) {
    @throw [[[JavaLangNegativeArraySizeException alloc] init] autorelease];
  }
  return [JavaUtilArrays copyOfRangeWithDoubleArray:original withInt:0 withInt:newLength];
}

+ (IOSFloatArray *)copyOfWithFloatArray:(IOSFloatArray *)original
                                withInt:(int)newLength {
  if (newLength < 0) {
    @throw [[[JavaLangNegativeArraySizeException alloc] init] autorelease];
  }
  return [JavaUtilArrays copyOfRangeWithFloatArray:original withInt:0 withInt:newLength];
}

+ (IOSIntArray *)copyOfWithIntArray:(IOSIntArray *)original
                            withInt:(int)newLength {
  if (newLength < 0) {
    @throw [[[JavaLangNegativeArraySizeException alloc] init] autorelease];
  }
  return [JavaUtilArrays copyOfRangeWithIntArray:original withInt:0 withInt:newLength];
}

+ (IOSLongArray *)copyOfWithLongArray:(IOSLongArray *)original
                              withInt:(int)newLength {
  if (newLength < 0) {
    @throw [[[JavaLangNegativeArraySizeException alloc] init] autorelease];
  }
  return [JavaUtilArrays copyOfRangeWithLongArray:original withInt:0 withInt:newLength];
}

+ (IOSShortArray *)copyOfWithShortArray:(IOSShortArray *)original
                                withInt:(int)newLength {
  if (newLength < 0) {
    @throw [[[JavaLangNegativeArraySizeException alloc] init] autorelease];
  }
  return [JavaUtilArrays copyOfRangeWithShortArray:original withInt:0 withInt:newLength];
}

+ (IOSObjectArray *)copyOfWithNSObjectArray:(IOSObjectArray *)original
                                    withInt:(int)newLength {
  if (original == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  if (newLength < 0) {
    @throw [[[JavaLangNegativeArraySizeException alloc] init] autorelease];
  }
  return [JavaUtilArrays copyOfRangeWithNSObjectArray:original withInt:0 withInt:newLength];
}

+ (IOSObjectArray *)copyOfWithNSObjectArray:(IOSObjectArray *)original
                                    withInt:(int)newLength
                               withIOSClass:(IOSClass *)newType {
  if (newLength < 0) {
    @throw [[[JavaLangNegativeArraySizeException alloc] init] autorelease];
  }
  return [JavaUtilArrays copyOfRangeWithNSObjectArray:original withInt:0 withInt:newLength withIOSClass:newType];
}

+ (IOSBooleanArray *)copyOfRangeWithBooleanArray:(IOSBooleanArray *)original
                                         withInt:(int)start
                                         withInt:(int)end {
  if (start > end) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  int originalLength = (int) [((IOSBooleanArray *) nil_chk(original)) count];
  if (start < 0 || start > originalLength) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] init] autorelease];
  }
  int resultLength = end - start;
  int copyLength = [JavaLangMath minWithInt:resultLength withInt:originalLength - start];
  IOSBooleanArray *result = [IOSBooleanArray arrayWithLength:resultLength];
  [JavaLangSystem arraycopyWithId:original withInt:start withId:result withInt:0 withInt:copyLength];
  return result;
}

+ (IOSByteArray *)copyOfRangeWithByteArray:(IOSByteArray *)original
                                   withInt:(int)start
                                   withInt:(int)end {
  if (start > end) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  int originalLength = (int) [((IOSByteArray *) nil_chk(original)) count];
  if (start < 0 || start > originalLength) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] init] autorelease];
  }
  int resultLength = end - start;
  int copyLength = [JavaLangMath minWithInt:resultLength withInt:originalLength - start];
  IOSByteArray *result = [IOSByteArray arrayWithLength:resultLength];
  [JavaLangSystem arraycopyWithId:original withInt:start withId:result withInt:0 withInt:copyLength];
  return result;
}

+ (IOSCharArray *)copyOfRangeWithCharArray:(IOSCharArray *)original
                                   withInt:(int)start
                                   withInt:(int)end {
  if (start > end) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  int originalLength = (int) [((IOSCharArray *) nil_chk(original)) count];
  if (start < 0 || start > originalLength) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] init] autorelease];
  }
  int resultLength = end - start;
  int copyLength = [JavaLangMath minWithInt:resultLength withInt:originalLength - start];
  IOSCharArray *result = [IOSCharArray arrayWithLength:resultLength];
  [JavaLangSystem arraycopyWithId:original withInt:start withId:result withInt:0 withInt:copyLength];
  return result;
}

+ (IOSDoubleArray *)copyOfRangeWithDoubleArray:(IOSDoubleArray *)original
                                       withInt:(int)start
                                       withInt:(int)end {
  if (start > end) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  int originalLength = (int) [((IOSDoubleArray *) nil_chk(original)) count];
  if (start < 0 || start > originalLength) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] init] autorelease];
  }
  int resultLength = end - start;
  int copyLength = [JavaLangMath minWithInt:resultLength withInt:originalLength - start];
  IOSDoubleArray *result = [IOSDoubleArray arrayWithLength:resultLength];
  [JavaLangSystem arraycopyWithId:original withInt:start withId:result withInt:0 withInt:copyLength];
  return result;
}

+ (IOSFloatArray *)copyOfRangeWithFloatArray:(IOSFloatArray *)original
                                     withInt:(int)start
                                     withInt:(int)end {
  if (start > end) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  int originalLength = (int) [((IOSFloatArray *) nil_chk(original)) count];
  if (start < 0 || start > originalLength) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] init] autorelease];
  }
  int resultLength = end - start;
  int copyLength = [JavaLangMath minWithInt:resultLength withInt:originalLength - start];
  IOSFloatArray *result = [IOSFloatArray arrayWithLength:resultLength];
  [JavaLangSystem arraycopyWithId:original withInt:start withId:result withInt:0 withInt:copyLength];
  return result;
}

+ (IOSIntArray *)copyOfRangeWithIntArray:(IOSIntArray *)original
                                 withInt:(int)start
                                 withInt:(int)end {
  if (start > end) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  int originalLength = (int) [((IOSIntArray *) nil_chk(original)) count];
  if (start < 0 || start > originalLength) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] init] autorelease];
  }
  int resultLength = end - start;
  int copyLength = [JavaLangMath minWithInt:resultLength withInt:originalLength - start];
  IOSIntArray *result = [IOSIntArray arrayWithLength:resultLength];
  [JavaLangSystem arraycopyWithId:original withInt:start withId:result withInt:0 withInt:copyLength];
  return result;
}

+ (IOSLongArray *)copyOfRangeWithLongArray:(IOSLongArray *)original
                                   withInt:(int)start
                                   withInt:(int)end {
  if (start > end) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  int originalLength = (int) [((IOSLongArray *) nil_chk(original)) count];
  if (start < 0 || start > originalLength) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] init] autorelease];
  }
  int resultLength = end - start;
  int copyLength = [JavaLangMath minWithInt:resultLength withInt:originalLength - start];
  IOSLongArray *result = [IOSLongArray arrayWithLength:resultLength];
  [JavaLangSystem arraycopyWithId:original withInt:start withId:result withInt:0 withInt:copyLength];
  return result;
}

+ (IOSShortArray *)copyOfRangeWithShortArray:(IOSShortArray *)original
                                     withInt:(int)start
                                     withInt:(int)end {
  if (start > end) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  int originalLength = (int) [((IOSShortArray *) nil_chk(original)) count];
  if (start < 0 || start > originalLength) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] init] autorelease];
  }
  int resultLength = end - start;
  int copyLength = [JavaLangMath minWithInt:resultLength withInt:originalLength - start];
  IOSShortArray *result = [IOSShortArray arrayWithLength:resultLength];
  [JavaLangSystem arraycopyWithId:original withInt:start withId:result withInt:0 withInt:copyLength];
  return result;
}

+ (IOSObjectArray *)copyOfRangeWithNSObjectArray:(IOSObjectArray *)original
                                         withInt:(int)start
                                         withInt:(int)end {
  int originalLength = (int) [((IOSObjectArray *) nil_chk(original)) count];
  if (start > end) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  if (start < 0 || start > originalLength) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] init] autorelease];
  }
  int resultLength = end - start;
  int copyLength = [JavaLangMath minWithInt:resultLength withInt:originalLength - start];
  IOSObjectArray *result = (IOSObjectArray *) check_class_cast([JavaLangReflectArray newInstanceWithIOSClass:[[original getClass] getComponentType] withInt:resultLength], [IOSObjectArray class]);
  [JavaLangSystem arraycopyWithId:original withInt:start withId:result withInt:0 withInt:copyLength];
  return result;
}

+ (IOSObjectArray *)copyOfRangeWithNSObjectArray:(IOSObjectArray *)original
                                         withInt:(int)start
                                         withInt:(int)end
                                    withIOSClass:(IOSClass *)newType {
  if (start > end) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  int originalLength = (int) [((IOSObjectArray *) nil_chk(original)) count];
  if (start < 0 || start > originalLength) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] init] autorelease];
  }
  int resultLength = end - start;
  int copyLength = [JavaLangMath minWithInt:resultLength withInt:originalLength - start];
  IOSObjectArray *result = (IOSObjectArray *) check_class_cast([JavaLangReflectArray newInstanceWithIOSClass:[((IOSClass *) nil_chk(newType)) getComponentType] withInt:resultLength], [IOSObjectArray class]);
  [JavaLangSystem arraycopyWithId:original withInt:start withId:result withInt:0 withInt:copyLength];
  return result;
}

@end
@implementation JavaUtilArrays_ArrayList

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithNSObjectArray:(IOSObjectArray *)storage {
  if (self = [super init]) {
    if (storage == nil) {
      @throw [[[JavaLangNullPointerException alloc] init] autorelease];
    }
    JavaUtilArrays_ArrayList_set_a_(self, storage);
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)containsWithId:(id)object {
  if (object != nil) {
    {
      IOSObjectArray *a__ = a_;
      id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      id const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id element = (*b__++);
        if ([object isEqual:element]) {
          return YES;
        }
      }
    }
  }
  else {
    {
      IOSObjectArray *a__ = a_;
      id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      id const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id element = (*b__++);
        if (element == nil) {
          return YES;
        }
      }
    }
  }
  return NO;
}

- (id)getWithInt:(int)location {
  @try {
    return IOSObjectArray_Get(nil_chk(a_), location);
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
}

- (int)indexOfWithId:(id)object {
  if (object != nil) {
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(a_)) count]; i++) {
      if ([object isEqual:IOSObjectArray_Get(a_, i)]) {
        return i;
      }
    }
  }
  else {
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(a_)) count]; i++) {
      if (IOSObjectArray_Get(a_, i) == nil) {
        return i;
      }
    }
  }
  return -1;
}

- (int)lastIndexOfWithId:(id)object {
  if (object != nil) {
    for (int i = (int) [((IOSObjectArray *) nil_chk(a_)) count] - 1; i >= 0; i--) {
      if ([object isEqual:IOSObjectArray_Get(a_, i)]) {
        return i;
      }
    }
  }
  else {
    for (int i = (int) [((IOSObjectArray *) nil_chk(a_)) count] - 1; i >= 0; i--) {
      if (IOSObjectArray_Get(a_, i) == nil) {
        return i;
      }
    }
  }
  return -1;
}

- (id)setWithInt:(int)location
          withId:(id)object {
  @try {
    id result = IOSObjectArray_Get(nil_chk(a_), location);
    IOSObjectArray_Set(a_, location, object);
    return result;
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  @catch (JavaLangArrayStoreException *e) {
    @throw [[[JavaLangClassCastException alloc] init] autorelease];
  }
}

- (int)size {
  return (int) [((IOSObjectArray *) nil_chk(a_)) count];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilArrays_ArrayList_set_a_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilArrays_ArrayList *)other {
  [super copyAllFieldsTo:other];
  JavaUtilArrays_ArrayList_set_a_(other, a_);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:a_ name:@"a"]];
  return result;
}

@end
