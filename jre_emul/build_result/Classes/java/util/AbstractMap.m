//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/luni/src/main/java/java/util/AbstractMap.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSClass.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/AbstractMap.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@implementation JavaUtilAbstractMap

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

- (void)clear {
  [((id<JavaUtilSet>) nil_chk([self entrySet])) clear];
}

- (BOOL)containsKeyWithId:(id)key {
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([self entrySet])) iterator];
  if (key != nil) {
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      if ([key isEqual:[((id<JavaUtilMap_Entry>) nil_chk([it next])) getKey]]) {
        return YES;
      }
    }
  }
  else {
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      if ([((id<JavaUtilMap_Entry>) nil_chk([it next])) getKey] == nil) {
        return YES;
      }
    }
  }
  return NO;
}

- (BOOL)containsValueWithId:(id)value {
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([self entrySet])) iterator];
  if (value != nil) {
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      if ([value isEqual:[((id<JavaUtilMap_Entry>) nil_chk([it next])) getValue]]) {
        return YES;
      }
    }
  }
  else {
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      if ([((id<JavaUtilMap_Entry>) nil_chk([it next])) getValue] == nil) {
        return YES;
      }
    }
  }
  return NO;
}

- (id<JavaUtilSet>)entrySet {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)isEqual:(id)object {
  if (self == object) {
    return YES;
  }
  if ([object conformsToProtocol: @protocol(JavaUtilMap)]) {
    id<JavaUtilMap> map = (id<JavaUtilMap>) check_protocol_cast(object, @protocol(JavaUtilMap));
    if ([self size] != [((id<JavaUtilMap>) nil_chk(map)) size]) {
      return NO;
    }
    @try {
      for (id<JavaUtilMap_Entry> __strong entry in [self entrySet]) {
        id key = [((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey];
        id mine = [entry getValue];
        id theirs = [map getWithId:key];
        if (mine == nil) {
          if (theirs != nil || ![map containsKeyWithId:key]) {
            return NO;
          }
        }
        else if (![mine isEqual:theirs]) {
          return NO;
        }
      }
    }
    @catch (JavaLangNullPointerException *ignored) {
      return NO;
    }
    @catch (JavaLangClassCastException *ignored) {
      return NO;
    }
    return YES;
  }
  return NO;
}

- (id)getWithId:(id)key {
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([self entrySet])) iterator];
  if (key != nil) {
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      id<JavaUtilMap_Entry> entry = [it next];
      if ([key isEqual:[((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey]]) {
        return [entry getValue];
      }
    }
  }
  else {
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      id<JavaUtilMap_Entry> entry = [it next];
      if ([((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey] == nil) {
        return [entry getValue];
      }
    }
  }
  return nil;
}

- (NSUInteger)hash {
  int result = 0;
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([self entrySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    result += [((id<JavaUtilMap_Entry>) nil_chk([it next])) hash];
  }
  return result;
}

- (BOOL)isEmpty {
  return [self size] == 0;
}

- (id<JavaUtilSet>)keySet {
  if (keySet__ == nil) {
    JavaUtilAbstractMap_set_keySet__(self, [[[JavaUtilAbstractMap_KeySet alloc] initWithJavaUtilAbstractMap:self] autorelease]);
  }
  return keySet__;
}

- (id)putWithId:(id)key
         withId:(id)value {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)map {
  for (id<JavaUtilMap_Entry> __strong entry in [((id<JavaUtilMap>) nil_chk(map)) entrySet]) {
    [self putWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey] withId:[entry getValue]];
  }
}

- (id)removeWithId:(id)key {
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([self entrySet])) iterator];
  if (key != nil) {
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      id<JavaUtilMap_Entry> entry = [it next];
      if ([key isEqual:[((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey]]) {
        [it remove];
        return [entry getValue];
      }
    }
  }
  else {
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      id<JavaUtilMap_Entry> entry = [it next];
      if ([((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey] == nil) {
        [it remove];
        return [entry getValue];
      }
    }
  }
  return nil;
}

- (int)size {
  return [((id<JavaUtilSet>) nil_chk([self entrySet])) size];
}

- (NSString *)description {
  if ([self isEmpty]) {
    return @"{}";
  }
  JavaLangStringBuilder *buffer = [[[JavaLangStringBuilder alloc] initWithInt:[self size] * 28] autorelease];
  [buffer appendWithChar:'{'];
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([self entrySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    id<JavaUtilMap_Entry> entry = [it next];
    id key = [((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey];
    if (key != self) {
      [buffer appendWithId:key];
    }
    else {
      [buffer appendWithNSString:@"(this Map)"];
    }
    [buffer appendWithChar:'='];
    id value = [entry getValue];
    if (value != self) {
      [buffer appendWithId:value];
    }
    else {
      [buffer appendWithNSString:@"(this Map)"];
    }
    if ([it hasNext]) {
      [buffer appendWithNSString:@", "];
    }
  }
  [buffer appendWithChar:'}'];
  return [buffer description];
}

- (id<JavaUtilCollection>)values {
  if (valuesCollection_ == nil) {
    JavaUtilAbstractMap_set_valuesCollection_(self, [[[JavaUtilAbstractMap_ValuesCollection alloc] initWithJavaUtilAbstractMap:self] autorelease]);
  }
  return valuesCollection_;
}

- (id)clone {
  JavaUtilAbstractMap *result = (JavaUtilAbstractMap *) check_class_cast([super clone], [JavaUtilAbstractMap class]);
  JavaUtilAbstractMap_set_keySet__(nil_chk(result), nil);
  JavaUtilAbstractMap_set_valuesCollection_(result, nil);
  return result;
}

+ (IOSObjectArray *)__exceptions_clone {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangCloneNotSupportedException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilAbstractMap_set_valuesCollection_(self, nil);
  JavaUtilAbstractMap_set_keySet__(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilAbstractMap *)other {
  [super copyAllFieldsTo:other];
  JavaUtilAbstractMap_set_keySet__(other, keySet__);
  JavaUtilAbstractMap_set_valuesCollection_(other, valuesCollection_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:keySet__ name:@"keySet_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:valuesCollection_ name:@"valuesCollection"]];
  return result;
}

@end
@implementation JavaUtilAbstractMap_KeySet

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (BOOL)containsWithId:(id)object {
  return [this$0_ containsKeyWithId:object];
}

- (int)size {
  return [this$0_ size];
}

- (id<JavaUtilIterator>)iterator {
  return [[[JavaUtilAbstractMap_KeySet_$1 alloc] initWithJavaUtilAbstractMap_KeySet:self] autorelease];
}

- (id)initWithJavaUtilAbstractMap:(JavaUtilAbstractMap *)outer$ {
  this$0_ = outer$;
  return JreMemDebugAdd([super init]);
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  return result;
}

@end
@implementation JavaUtilAbstractMap_KeySet_$1

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (BOOL)hasNext {
  return [((id<JavaUtilIterator>) nil_chk(setIterator_)) hasNext];
}

- (id)next {
  return [((id<JavaUtilMap_Entry>) nil_chk([((id<JavaUtilIterator>) nil_chk(setIterator_)) next])) getKey];
}

- (void)remove {
  [((id<JavaUtilIterator>) nil_chk(setIterator_)) remove];
}

- (id)initWithJavaUtilAbstractMap_KeySet:(JavaUtilAbstractMap_KeySet *)outer$ {
  if (self = [super init]) {
    JavaUtilAbstractMap_KeySet_$1_set_setIterator_(self, [((id<JavaUtilSet>) nil_chk([outer$->this$0_ entrySet])) iterator]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilAbstractMap_KeySet_$1_set_setIterator_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilAbstractMap_KeySet_$1 *)other {
  [super copyAllFieldsTo:other];
  JavaUtilAbstractMap_KeySet_$1_set_setIterator_(other, setIterator_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:setIterator_ name:@"setIterator"]];
  return result;
}

@end
@implementation JavaUtilAbstractMap_ValuesCollection

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (int)size {
  return [this$0_ size];
}

- (BOOL)containsWithId:(id)object {
  return [this$0_ containsValueWithId:object];
}

- (id<JavaUtilIterator>)iterator {
  return [[[JavaUtilAbstractMap_ValuesCollection_$1 alloc] initWithJavaUtilAbstractMap_ValuesCollection:self] autorelease];
}

- (id)initWithJavaUtilAbstractMap:(JavaUtilAbstractMap *)outer$ {
  this$0_ = outer$;
  return JreMemDebugAdd([super init]);
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  return result;
}

@end
@implementation JavaUtilAbstractMap_ValuesCollection_$1

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (BOOL)hasNext {
  return [((id<JavaUtilIterator>) nil_chk(setIterator_)) hasNext];
}

- (id)next {
  return [((id<JavaUtilMap_Entry>) nil_chk([((id<JavaUtilIterator>) nil_chk(setIterator_)) next])) getValue];
}

- (void)remove {
  [((id<JavaUtilIterator>) nil_chk(setIterator_)) remove];
}

- (id)initWithJavaUtilAbstractMap_ValuesCollection:(JavaUtilAbstractMap_ValuesCollection *)outer$ {
  if (self = [super init]) {
    JavaUtilAbstractMap_ValuesCollection_$1_set_setIterator_(self, [((id<JavaUtilSet>) nil_chk([outer$->this$0_ entrySet])) iterator]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilAbstractMap_ValuesCollection_$1_set_setIterator_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilAbstractMap_ValuesCollection_$1 *)other {
  [super copyAllFieldsTo:other];
  JavaUtilAbstractMap_ValuesCollection_$1_set_setIterator_(other, setIterator_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:setIterator_ name:@"setIterator"]];
  return result;
}

@end
