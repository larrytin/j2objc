//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSObjectArray.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/AbstractCollection.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#import "IOSClass.h"
#import "java/lang/NullPointerException.h"

@implementation JavaUtilAbstractCollection

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

- (BOOL)addWithId:(id)object {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (BOOL)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  BOOL result = NO;
  id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk(collection)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    if ([self addWithId:[it next]]) {
      result = YES;
    }
  }
  return result;
}

- (void)clear {
  id<JavaUtilIterator> it = [self iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    [it next];
    [it remove];
  }
}

- (BOOL)containsWithId:(id)object {
  id<JavaUtilIterator> it = [self iterator];
  if (object != nil) {
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      if ([object isEqual:[it next]]) {
        return YES;
      }
    }
  }
  else {
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      if ([it next] == nil) {
        return YES;
      }
    }
  }
  return NO;
}

- (BOOL)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk(collection)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    if (![self containsWithId:[it next]]) {
      return NO;
    }
  }
  return YES;
}

- (BOOL)isEmpty {
  return [self size] == 0;
}

- (id<JavaUtilIterator>)iterator {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)removeWithId:(id)object {
  id<JavaUtilIterator> it = [self iterator];
  if (object != nil) {
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      if ([object isEqual:[it next]]) {
        [it remove];
        return YES;
      }
    }
  }
  else {
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      if ([it next] == nil) {
        [it remove];
        return YES;
      }
    }
  }
  return NO;
}

- (BOOL)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  BOOL result = NO;
  id<JavaUtilIterator> it = [self iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    if ([((id<JavaUtilCollection>) nil_chk(collection)) containsWithId:[it next]]) {
      [it remove];
      result = YES;
    }
  }
  return result;
}

- (BOOL)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  BOOL result = NO;
  id<JavaUtilIterator> it = [self iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    if (![((id<JavaUtilCollection>) nil_chk(collection)) containsWithId:[it next]]) {
      [it remove];
      result = YES;
    }
  }
  return result;
}

- (int)size {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSObjectArray *)toArray {
  IOSObjectArray *result =
  [[IOSObjectArray alloc] initWithLength:[self size]
  type:[IOSClass classWithClass:[NSObject class]]];
  #if ! __has_feature(objc_arc)
  [result autorelease];
  #endif
  return [self toArrayWithNSObjectArray:result];
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)contents {
  if (!contents) {
    id exception = [[JavaLangNullPointerException alloc] init];
    #if ! __has_feature(objc_arc)
    [exception autorelease];
    #endif
    @throw exception;
    return nil;
  }
  if ([contents count] < [self size]) {
    contents =
    [[IOSObjectArray alloc] initWithLength:[self size]
    type:[IOSClass classWithClass:[NSObject class]]];
    #if ! __has_feature(objc_arc)
    [contents autorelease];
    #endif
  }
  NSUInteger i = 0;
  id<JavaUtilIterator> it = [self iterator];
  while ([it hasNext]) {
    [contents replaceObjectAtIndex:i++ withObject:[it next]];
  }
  return contents;
}

- (NSString *)description {
  if ([self isEmpty]) {
    return @"[]";
  }
  JavaLangStringBuilder *buffer = [[[JavaLangStringBuilder alloc] initWithInt:[self size] * 16] autorelease];
  [buffer appendWithChar:'['];
  id<JavaUtilIterator> it = [self iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    id next = [it next];
    if (next != self) {
      [buffer appendWithId:next];
    }
    else {
      [buffer appendWithNSString:@"(this Collection)"];
    }
    if ([it hasNext]) {
      [buffer appendWithNSString:@", "];
    }
  }
  [buffer appendWithChar:']'];
  return [buffer description];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

@end
