//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/luni/src/main/java/java/util/MapEntry.java
//
//  Created by retechretech on 13-9-4.
//

#include "java/lang/CloneNotSupportedException.h"
#include "java/util/Map.h"
#include "java/util/MapEntry.h"

@implementation JavaUtilMapEntry

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithId:(id)theKey {
  if ((self = [super init])) {
    JavaUtilMapEntry_set_key_(self, theKey);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithId:(id)theKey
          withId:(id)theValue {
  if ((self = [super init])) {
    JavaUtilMapEntry_set_key_(self, theKey);
    JavaUtilMapEntry_set_value_(self, theValue);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)clone {
  @try {
    return [super clone];
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    return nil;
  }
}

- (BOOL)isEqual:(id)object {
  if (self == object) {
    return YES;
  }
  if ([object conformsToProtocol: @protocol(JavaUtilMap_Entry)]) {
    id<JavaUtilMap_Entry> entry = (id<JavaUtilMap_Entry>) object;
    return (key_ == nil ? [((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey] == nil : [key_ isEqual:[((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey]]) && (value_ == nil ? [entry getValue] == nil : [value_ isEqual:[entry getValue]]);
  }
  return NO;
}

- (id)getKey {
  return key_;
}

- (id)getValue {
  return value_;
}

- (NSUInteger)hash {
  return (key_ == nil ? 0 : [key_ hash]) ^ (value_ == nil ? 0 : [value_ hash]);
}

- (id)setValueWithId:(id)object {
  id result = value_;
  JavaUtilMapEntry_set_value_(self, object);
  return result;
}

- (NSString *)description {
  return [NSString stringWithFormat:@"%@=%@", key_, value_];
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilMapEntry_set_value_(self, nil);
  JavaUtilMapEntry_set_key_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilMapEntry *)other {
  [super copyAllFieldsTo:other];
  JavaUtilMapEntry_set_key_(other, key_);
  JavaUtilMapEntry_set_value_(other, value_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:key_ name:@"key"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:value_ name:@"value"]];
  return result;
}

@end
