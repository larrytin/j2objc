//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/luni/src/main/java/java/util/HugeEnumSet.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSClass.h"
#include "IOSLongArray.h"
#include "IOSObjectArray.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Long.h"
#include "java/lang/NullPointerException.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/EnumSet.h"
#include "java/util/HugeEnumSet.h"
#include "java/util/Iterator.h"
#include "java/util/NoSuchElementException.h"

@implementation JavaUtilHugeEnumSet

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithIOSClass:(IOSClass *)elementType {
  if (self = [super initWithIOSClass:elementType]) {
    JavaUtilHugeEnumSet_set_enums_(self, [((IOSClass *) nil_chk(elementType)) getEnumConstants]);
    JavaUtilHugeEnumSet_set_bits_(self, [IOSLongArray arrayWithLength:((int) [((IOSObjectArray *) nil_chk(enums_)) count] + JavaUtilHugeEnumSet_BIT_IN_LONG - 1) / JavaUtilHugeEnumSet_BIT_IN_LONG]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)addWithId:(JavaLangEnum *)element {
  if (element == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  if (!([element isKindOfClass:[JavaLangEnum class]]) || ![self isValidTypeWithIOSClass:[((JavaLangEnum *) nil_chk(element)) getDeclaringClass]]) {
    @throw [[[JavaLangClassCastException alloc] init] autorelease];
  }
  int ordinal = [((JavaLangEnum *) nil_chk(element)) ordinal];
  int index = ordinal / JavaUtilHugeEnumSet_BIT_IN_LONG;
  int inBits = ordinal % JavaUtilHugeEnumSet_BIT_IN_LONG;
  long long int oldBits = IOSLongArray_Get(nil_chk(bits_), index);
  long long int newBits = oldBits | (1LL << inBits);
  if (oldBits != newBits) {
    (*IOSLongArray_GetRef(bits_, index)) = newBits;
    size__++;
    return YES;
  }
  return NO;
}

- (BOOL)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  if (collection == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  if ([((id<JavaUtilCollection>) nil_chk(collection)) isEmpty] || collection == self) {
    return NO;
  }
  if ([(id) collection isKindOfClass:[JavaUtilEnumSet class]]) {
    JavaUtilEnumSet *set = (JavaUtilEnumSet *) check_class_cast(collection, [JavaUtilEnumSet class]);
    if (![self isValidTypeWithIOSClass:set->elementClass_]) {
      @throw [[[JavaLangClassCastException alloc] init] autorelease];
    }
    JavaUtilHugeEnumSet *hugeSet = (JavaUtilHugeEnumSet *) check_class_cast(set, [JavaUtilHugeEnumSet class]);
    BOOL changed = NO;
    for (int i = 0; i < (int) [((IOSLongArray *) nil_chk(bits_)) count]; i++) {
      long long int oldBits = IOSLongArray_Get(bits_, i);
      long long int newBits = oldBits | IOSLongArray_Get(hugeSet->bits_, i);
      if (oldBits != newBits) {
        (*IOSLongArray_GetRef(bits_, i)) = newBits;
        size__ += [JavaLangLong bitCountWithLong:newBits] - [JavaLangLong bitCountWithLong:oldBits];
        changed = YES;
      }
    }
    return changed;
  }
  return [super addAllWithJavaUtilCollection:collection];
}

- (int)size {
  return size__;
}

- (void)clear {
  [JavaUtilArrays fillWithLongArray:bits_ withLong:0];
  size__ = 0;
}

- (void)complement {
  size__ = 0;
  for (int i = 0, length = (int) [((IOSLongArray *) nil_chk(bits_)) count]; i < length; i++) {
    long long int b = ~IOSLongArray_Get(bits_, i);
    if (i == length - 1) {
      b &= (long long) (((unsigned long long) -1LL) >> (JavaUtilHugeEnumSet_BIT_IN_LONG - ((int) [((IOSObjectArray *) nil_chk(enums_)) count] % JavaUtilHugeEnumSet_BIT_IN_LONG)));
    }
    size__ += [JavaLangLong bitCountWithLong:b];
    (*IOSLongArray_GetRef(bits_, i)) = b;
  }
}

- (BOOL)containsWithId:(id)object {
  if (object == nil || ![self isValidTypeWithIOSClass:[object getClass]]) {
    return NO;
  }
  int ordinal = [((JavaLangEnum *) nil_chk(object)) ordinal];
  int index = ordinal / JavaUtilHugeEnumSet_BIT_IN_LONG;
  int inBits = ordinal % JavaUtilHugeEnumSet_BIT_IN_LONG;
  return (IOSLongArray_Get(nil_chk(bits_), index) & (1LL << inBits)) != 0;
}

- (JavaUtilHugeEnumSet *)clone {
  JavaUtilHugeEnumSet *set = (JavaUtilHugeEnumSet *) check_class_cast([super clone], [JavaUtilHugeEnumSet class]);
  JavaUtilHugeEnumSet_set_bits_(nil_chk(set), [((IOSLongArray *) nil_chk(bits_)) clone]);
  return set;
}

- (BOOL)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  if (collection == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  if ([((id<JavaUtilCollection>) nil_chk(collection)) isEmpty]) {
    return YES;
  }
  if ([(id) collection isKindOfClass:[JavaUtilHugeEnumSet class]]) {
    JavaUtilHugeEnumSet *set = (JavaUtilHugeEnumSet *) check_class_cast(collection, [JavaUtilHugeEnumSet class]);
    if ([self isValidTypeWithIOSClass:set->elementClass_]) {
      for (int i = 0; i < (int) [((IOSLongArray *) nil_chk(bits_)) count]; i++) {
        long long int setBits = IOSLongArray_Get(nil_chk(set->bits_), i);
        if ((IOSLongArray_Get(bits_, i) & setBits) != setBits) {
          return NO;
        }
      }
      return YES;
    }
  }
  return !([(id) collection isKindOfClass:[JavaUtilEnumSet class]]) && [super containsAllWithJavaUtilCollection:collection];
}

- (BOOL)isEqual:(id)object {
  if (object == nil) {
    return NO;
  }
  if (![self isValidTypeWithIOSClass:[nil_chk(object) getClass]]) {
    return [super isEqual:object];
  }
  return [JavaUtilArrays equalsWithLongArray:bits_ withLongArray:((JavaUtilHugeEnumSet *) check_class_cast(object, [JavaUtilHugeEnumSet class]))->bits_];
}

- (id<JavaUtilIterator>)iterator {
  return [[[JavaUtilHugeEnumSet_HugeEnumSetIterator alloc] initWithJavaUtilHugeEnumSet:self] autorelease];
}

- (BOOL)removeWithId:(id)object {
  if (object == nil || ![self isValidTypeWithIOSClass:[object getClass]]) {
    return NO;
  }
  int ordinal = [((JavaLangEnum *) nil_chk(object)) ordinal];
  int index = ordinal / JavaUtilHugeEnumSet_BIT_IN_LONG;
  int inBits = ordinal % JavaUtilHugeEnumSet_BIT_IN_LONG;
  long long int oldBits = IOSLongArray_Get(nil_chk(bits_), index);
  long long int newBits = oldBits & ~(1LL << inBits);
  if (oldBits != newBits) {
    (*IOSLongArray_GetRef(bits_, index)) = newBits;
    size__--;
    return YES;
  }
  return NO;
}

- (BOOL)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  if (collection == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  if ([((id<JavaUtilCollection>) nil_chk(collection)) isEmpty]) {
    return NO;
  }
  if ([(id) collection isKindOfClass:[JavaUtilEnumSet class]]) {
    JavaUtilEnumSet *set = (JavaUtilEnumSet *) check_class_cast(collection, [JavaUtilEnumSet class]);
    if (![self isValidTypeWithIOSClass:set->elementClass_]) {
      return NO;
    }
    JavaUtilHugeEnumSet *hugeSet = (JavaUtilHugeEnumSet *) check_class_cast(set, [JavaUtilHugeEnumSet class]);
    BOOL changed = NO;
    for (int i = 0; i < (int) [((IOSLongArray *) nil_chk(bits_)) count]; i++) {
      long long int oldBits = IOSLongArray_Get(bits_, i);
      long long int newBits = oldBits & ~IOSLongArray_Get(hugeSet->bits_, i);
      if (oldBits != newBits) {
        (*IOSLongArray_GetRef(bits_, i)) = newBits;
        size__ += [JavaLangLong bitCountWithLong:newBits] - [JavaLangLong bitCountWithLong:oldBits];
        changed = YES;
      }
    }
    return changed;
  }
  return [super removeAllWithJavaUtilCollection:collection];
}

- (BOOL)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  if ([(id) collection isKindOfClass:[JavaUtilEnumSet class]]) {
    JavaUtilEnumSet *set = (JavaUtilEnumSet *) check_class_cast(collection, [JavaUtilEnumSet class]);
    if (![self isValidTypeWithIOSClass:((JavaUtilEnumSet *) nil_chk(set))->elementClass_]) {
      if (size__ > 0) {
        [self clear];
        return YES;
      }
      else {
        return NO;
      }
    }
    JavaUtilHugeEnumSet *hugeSet = (JavaUtilHugeEnumSet *) check_class_cast(set, [JavaUtilHugeEnumSet class]);
    BOOL changed = NO;
    for (int i = 0; i < (int) [((IOSLongArray *) nil_chk(bits_)) count]; i++) {
      long long int oldBits = IOSLongArray_Get(bits_, i);
      long long int newBits = oldBits & IOSLongArray_Get(hugeSet->bits_, i);
      if (oldBits != newBits) {
        (*IOSLongArray_GetRef(bits_, i)) = newBits;
        size__ += [JavaLangLong bitCountWithLong:newBits] - [JavaLangLong bitCountWithLong:oldBits];
        changed = YES;
      }
    }
    return changed;
  }
  return [super retainAllWithJavaUtilCollection:collection];
}

- (void)setRangeWithId:(JavaLangEnum *)start
                withId:(JavaLangEnum *)end {
  if (start == nil || end == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  int startOrdinal = [((JavaLangEnum *) nil_chk(start)) ordinal];
  int startIndex = startOrdinal / JavaUtilHugeEnumSet_BIT_IN_LONG;
  int startInBits = startOrdinal % JavaUtilHugeEnumSet_BIT_IN_LONG;
  int endOrdinal = [((JavaLangEnum *) nil_chk(end)) ordinal];
  int endIndex = endOrdinal / JavaUtilHugeEnumSet_BIT_IN_LONG;
  int endInBits = endOrdinal % JavaUtilHugeEnumSet_BIT_IN_LONG;
  if (startIndex == endIndex) {
    long long int range = ((long long) (((unsigned long long) -1LL) >> (JavaUtilHugeEnumSet_BIT_IN_LONG - (endInBits - startInBits + 1)))) << startInBits;
    size__ -= [JavaLangLong bitCountWithLong:IOSLongArray_Get(nil_chk(bits_), startIndex)];
    (*IOSLongArray_GetRef(bits_, startIndex)) |= range;
    size__ += [JavaLangLong bitCountWithLong:IOSLongArray_Get(bits_, startIndex)];
  }
  else {
    long long int range = ((long long) (((unsigned long long) -1LL) >> startInBits)) << startInBits;
    size__ -= [JavaLangLong bitCountWithLong:IOSLongArray_Get(nil_chk(bits_), startIndex)];
    (*IOSLongArray_GetRef(bits_, startIndex)) |= range;
    size__ += [JavaLangLong bitCountWithLong:IOSLongArray_Get(bits_, startIndex)];
    range = (long long) (((unsigned long long) -1LL) >> (JavaUtilHugeEnumSet_BIT_IN_LONG - (endInBits + 1)));
    size__ -= [JavaLangLong bitCountWithLong:IOSLongArray_Get(bits_, endIndex)];
    (*IOSLongArray_GetRef(bits_, endIndex)) |= range;
    size__ += [JavaLangLong bitCountWithLong:IOSLongArray_Get(bits_, endIndex)];
    for (int i = (startIndex + 1); i <= (endIndex - 1); i++) {
      size__ -= [JavaLangLong bitCountWithLong:IOSLongArray_Get(bits_, i)];
      (*IOSLongArray_GetRef(bits_, i)) = -1LL;
      size__ += [JavaLangLong bitCountWithLong:IOSLongArray_Get(bits_, i)];
    }
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilHugeEnumSet_set_bits_(self, nil);
  JavaUtilHugeEnumSet_set_enums_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilHugeEnumSet *)other {
  [super copyAllFieldsTo:other];
  JavaUtilHugeEnumSet_set_bits_(other, bits_);
  JavaUtilHugeEnumSet_set_enums_(other, enums_);
  other->size__ = size__;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:enums_ name:@"enums"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:bits_ name:@"bits"]];
  return result;
}

@end
@implementation JavaUtilHugeEnumSet_HugeEnumSetIterator

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilHugeEnumSet:(JavaUtilHugeEnumSet *)outer$ {
  JavaUtilHugeEnumSet_HugeEnumSetIterator_set_this$0_(self, outer$);
  if (self = [super init]) {
    currentBits_ = IOSLongArray_Get(nil_chk(outer$->bits_), 0);
    [self computeNextElement];
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)computeNextElement {
  while (YES) {
    if (currentBits_ != 0) {
      mask_ = currentBits_ & -currentBits_;
      return;
    }
    else if (++index_ < (int) [((IOSLongArray *) nil_chk(this$0_->bits_)) count]) {
      currentBits_ = IOSLongArray_Get(this$0_->bits_, index_);
    }
    else {
      mask_ = 0;
      return;
    }
  }
}

- (BOOL)hasNext {
  return mask_ != 0;
}

- (id)next {
  if (mask_ == 0) {
    @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
  }
  int ordinal = [JavaLangLong numberOfTrailingZerosWithLong:mask_] + index_ * JavaUtilHugeEnumSet_BIT_IN_LONG;
  JavaUtilHugeEnumSet_HugeEnumSetIterator_set_last_(self, IOSObjectArray_Get(nil_chk(this$0_->enums_), ordinal));
  currentBits_ &= ~mask_;
  [self computeNextElement];
  return last_;
}

- (void)remove {
  if (last_ == nil) {
    @throw [[[JavaLangIllegalStateException alloc] init] autorelease];
  }
  [this$0_ removeWithId:last_];
  JavaUtilHugeEnumSet_HugeEnumSetIterator_set_last_(self, nil);
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilHugeEnumSet_HugeEnumSetIterator_set_last_(self, nil);
  JavaUtilHugeEnumSet_HugeEnumSetIterator_set_this$0_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilHugeEnumSet_HugeEnumSetIterator *)other {
  [super copyAllFieldsTo:other];
  other->currentBits_ = currentBits_;
  other->index_ = index_;
  JavaUtilHugeEnumSet_HugeEnumSetIterator_set_last_(other, last_);
  other->mask_ = mask_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:this$0_ name:@"this$0"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:last_ name:@"last"]];
  return result;
}

@end
