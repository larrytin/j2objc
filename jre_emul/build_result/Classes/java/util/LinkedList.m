//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/luni/src/main/java/java/util/LinkedList.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSClass.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/NullPointerException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/ConcurrentModificationException.h"
#include "java/util/LinkedList.h"
#include "java/util/ListIterator.h"
#include "java/util/NoSuchElementException.h"

@implementation JavaUtilLinkedList

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initJavaUtilLinkedList {
  if (self = [super init]) {
    size__ = 0;
    JavaUtilLinkedList_set_voidLink_(self, [[[JavaUtilLinkedList_Link alloc] initWithId:nil withJavaUtilLinkedList_Link:nil withJavaUtilLinkedList_Link:nil] autorelease]);
    voidLink_->previous_ = voidLink_;
    JavaUtilLinkedList_Link_set_next_(voidLink_, voidLink_);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)init {
  return [self initJavaUtilLinkedList];
}

- (id)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  if (self = [self initJavaUtilLinkedList]) {
    [self addAllWithJavaUtilCollection:collection];
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)addWithInt:(int)location
            withId:(id)object {
  if (0 <= location && location <= size__) {
    JavaUtilLinkedList_Link *link = voidLink_;
    if (location < (size__ / 2)) {
      for (int i = 0; i <= location; i++) {
        link = ((JavaUtilLinkedList_Link *) nil_chk(link))->next_;
      }
    }
    else {
      for (int i = size__; i > location; i--) {
        link = ((JavaUtilLinkedList_Link *) nil_chk(link))->previous_;
      }
    }
    JavaUtilLinkedList_Link *previous = ((JavaUtilLinkedList_Link *) nil_chk(link))->previous_;
    JavaUtilLinkedList_Link *newLink = [[[JavaUtilLinkedList_Link alloc] initWithId:object withJavaUtilLinkedList_Link:previous withJavaUtilLinkedList_Link:link] autorelease];
    JavaUtilLinkedList_Link_set_next_(nil_chk(previous), newLink);
    link->previous_ = newLink;
    size__++;
    modCount_++;
  }
  else {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
}

- (BOOL)addWithId:(id)object {
  JavaUtilLinkedList_Link *oldLast = ((JavaUtilLinkedList_Link *) nil_chk(voidLink_))->previous_;
  JavaUtilLinkedList_Link *newLink = [[[JavaUtilLinkedList_Link alloc] initWithId:object withJavaUtilLinkedList_Link:oldLast withJavaUtilLinkedList_Link:voidLink_] autorelease];
  voidLink_->previous_ = newLink;
  JavaUtilLinkedList_Link_set_next_(nil_chk(oldLast), newLink);
  size__++;
  modCount_++;
  return YES;
}

- (BOOL)addAllWithInt:(int)location
withJavaUtilCollection:(id<JavaUtilCollection>)collection {
  if (location < 0 || location > size__) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  if (collection == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  int adding = [((id<JavaUtilCollection>) nil_chk(collection)) size];
  if (adding == 0) {
    return NO;
  }
  id<JavaUtilCollection> elements = (collection == self) ? [[[JavaUtilArrayList alloc] initWithJavaUtilCollection:collection] autorelease] : ((id) collection);
  JavaUtilLinkedList_Link *previous = voidLink_;
  if (location < (size__ / 2)) {
    for (int i = 0; i < location; i++) {
      previous = ((JavaUtilLinkedList_Link *) nil_chk(previous))->next_;
    }
  }
  else {
    for (int i = size__; i >= location; i--) {
      previous = ((JavaUtilLinkedList_Link *) nil_chk(previous))->previous_;
    }
  }
  JavaUtilLinkedList_Link *next = ((JavaUtilLinkedList_Link *) nil_chk(previous))->next_;
  for (id __strong e in elements) {
    JavaUtilLinkedList_Link *newLink = [[[JavaUtilLinkedList_Link alloc] initWithId:e withJavaUtilLinkedList_Link:previous withJavaUtilLinkedList_Link:nil] autorelease];
    JavaUtilLinkedList_Link_set_next_(previous, newLink);
    previous = newLink;
  }
  JavaUtilLinkedList_Link_set_next_(previous, next);
  ((JavaUtilLinkedList_Link *) nil_chk(next))->previous_ = previous;
  size__ += adding;
  modCount_++;
  return YES;
}

- (BOOL)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  if (collection == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  int adding = [((id<JavaUtilCollection>) nil_chk(collection)) size];
  if (adding == 0) {
    return NO;
  }
  id<JavaUtilCollection> elements = (collection == self) ? [[[JavaUtilArrayList alloc] initWithJavaUtilCollection:collection] autorelease] : ((id) collection);
  JavaUtilLinkedList_Link *previous = ((JavaUtilLinkedList_Link *) nil_chk(voidLink_))->previous_;
  for (id __strong e in elements) {
    JavaUtilLinkedList_Link *newLink = [[[JavaUtilLinkedList_Link alloc] initWithId:e withJavaUtilLinkedList_Link:previous withJavaUtilLinkedList_Link:nil] autorelease];
    JavaUtilLinkedList_Link_set_next_(nil_chk(previous), newLink);
    previous = newLink;
  }
  JavaUtilLinkedList_Link_set_next_(nil_chk(previous), voidLink_);
  voidLink_->previous_ = previous;
  size__ += adding;
  modCount_++;
  return YES;
}

- (void)addFirstWithId:(id)object {
  JavaUtilLinkedList_Link *oldFirst = ((JavaUtilLinkedList_Link *) nil_chk(voidLink_))->next_;
  JavaUtilLinkedList_Link *newLink = [[[JavaUtilLinkedList_Link alloc] initWithId:object withJavaUtilLinkedList_Link:voidLink_ withJavaUtilLinkedList_Link:oldFirst] autorelease];
  JavaUtilLinkedList_Link_set_next_(voidLink_, newLink);
  ((JavaUtilLinkedList_Link *) nil_chk(oldFirst))->previous_ = newLink;
  size__++;
  modCount_++;
}

- (void)addLastWithId:(id)object {
  JavaUtilLinkedList_Link *oldLast = ((JavaUtilLinkedList_Link *) nil_chk(voidLink_))->previous_;
  JavaUtilLinkedList_Link *newLink = [[[JavaUtilLinkedList_Link alloc] initWithId:object withJavaUtilLinkedList_Link:oldLast withJavaUtilLinkedList_Link:voidLink_] autorelease];
  voidLink_->previous_ = newLink;
  JavaUtilLinkedList_Link_set_next_(nil_chk(oldLast), newLink);
  size__++;
  modCount_++;
}

- (void)clear {
  if (size__ > 0) {
    size__ = 0;
    JavaUtilLinkedList_Link_set_next_(nil_chk(voidLink_), voidLink_);
    voidLink_->previous_ = voidLink_;
    modCount_++;
  }
}

- (id)clone {
  @try {
    JavaUtilLinkedList *l = (JavaUtilLinkedList *) check_class_cast([super clone], [JavaUtilLinkedList class]);
    ((JavaUtilLinkedList *) nil_chk(l))->size__ = 0;
    JavaUtilLinkedList_set_voidLink_(l, [[[JavaUtilLinkedList_Link alloc] initWithId:nil withJavaUtilLinkedList_Link:nil withJavaUtilLinkedList_Link:nil] autorelease]);
    l->voidLink_->previous_ = l->voidLink_;
    JavaUtilLinkedList_Link_set_next_(l->voidLink_, l->voidLink_);
    [l addAllWithJavaUtilCollection:self];
    return l;
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    return nil;
  }
}

- (BOOL)containsWithId:(id)object {
  JavaUtilLinkedList_Link *link = ((JavaUtilLinkedList_Link *) nil_chk(voidLink_))->next_;
  if (object != nil) {
    while (link != voidLink_) {
      if ([object isEqual:((JavaUtilLinkedList_Link *) nil_chk(link))->data_]) {
        return YES;
      }
      link = link->next_;
    }
  }
  else {
    while (link != voidLink_) {
      if (((JavaUtilLinkedList_Link *) nil_chk(link))->data_ == nil) {
        return YES;
      }
      link = link->next_;
    }
  }
  return NO;
}

- (id)getWithInt:(int)location {
  if (0 <= location && location < size__) {
    JavaUtilLinkedList_Link *link = voidLink_;
    if (location < (size__ / 2)) {
      for (int i = 0; i <= location; i++) {
        link = ((JavaUtilLinkedList_Link *) nil_chk(link))->next_;
      }
    }
    else {
      for (int i = size__; i > location; i--) {
        link = ((JavaUtilLinkedList_Link *) nil_chk(link))->previous_;
      }
    }
    return ((JavaUtilLinkedList_Link *) nil_chk(link))->data_;
  }
  @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
}

- (id)getFirst {
  JavaUtilLinkedList_Link *first = ((JavaUtilLinkedList_Link *) nil_chk(voidLink_))->next_;
  if (first != voidLink_) {
    return ((JavaUtilLinkedList_Link *) nil_chk(first))->data_;
  }
  @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
}

- (id)getLast {
  JavaUtilLinkedList_Link *last = ((JavaUtilLinkedList_Link *) nil_chk(voidLink_))->previous_;
  if (last != voidLink_) {
    return ((JavaUtilLinkedList_Link *) nil_chk(last))->data_;
  }
  @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
}

- (int)indexOfWithId:(id)object {
  int pos = 0;
  JavaUtilLinkedList_Link *link = ((JavaUtilLinkedList_Link *) nil_chk(voidLink_))->next_;
  if (object != nil) {
    while (link != voidLink_) {
      if ([object isEqual:((JavaUtilLinkedList_Link *) nil_chk(link))->data_]) {
        return pos;
      }
      link = link->next_;
      pos++;
    }
  }
  else {
    while (link != voidLink_) {
      if (((JavaUtilLinkedList_Link *) nil_chk(link))->data_ == nil) {
        return pos;
      }
      link = link->next_;
      pos++;
    }
  }
  return -1;
}

- (int)lastIndexOfWithId:(id)object {
  int pos = size__;
  JavaUtilLinkedList_Link *link = ((JavaUtilLinkedList_Link *) nil_chk(voidLink_))->previous_;
  if (object != nil) {
    while (link != voidLink_) {
      pos--;
      if ([object isEqual:((JavaUtilLinkedList_Link *) nil_chk(link))->data_]) {
        return pos;
      }
      link = link->previous_;
    }
  }
  else {
    while (link != voidLink_) {
      pos--;
      if (((JavaUtilLinkedList_Link *) nil_chk(link))->data_ == nil) {
        return pos;
      }
      link = link->previous_;
    }
  }
  return -1;
}

- (id<JavaUtilListIterator>)listIteratorWithInt:(int)location {
  return [[[JavaUtilLinkedList_LinkIterator alloc] initWithJavaUtilLinkedList:self withInt:location] autorelease];
}

- (id)removeWithInt:(int)location {
  if (0 <= location && location < size__) {
    JavaUtilLinkedList_Link *link = voidLink_;
    if (location < (size__ / 2)) {
      for (int i = 0; i <= location; i++) {
        link = ((JavaUtilLinkedList_Link *) nil_chk(link))->next_;
      }
    }
    else {
      for (int i = size__; i > location; i--) {
        link = ((JavaUtilLinkedList_Link *) nil_chk(link))->previous_;
      }
    }
    JavaUtilLinkedList_Link *previous = ((JavaUtilLinkedList_Link *) nil_chk(link))->previous_;
    JavaUtilLinkedList_Link *next = link->next_;
    JavaUtilLinkedList_Link_set_next_(nil_chk(previous), next);
    ((JavaUtilLinkedList_Link *) nil_chk(next))->previous_ = previous;
    size__--;
    modCount_++;
    return link->data_;
  }
  @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
}

- (BOOL)removeWithId:(id)object {
  JavaUtilLinkedList_Link *link = ((JavaUtilLinkedList_Link *) nil_chk(voidLink_))->next_;
  if (object != nil) {
    while (link != voidLink_ && ![object isEqual:((JavaUtilLinkedList_Link *) nil_chk(link))->data_]) {
      link = ((JavaUtilLinkedList_Link *) nil_chk(link))->next_;
    }
  }
  else {
    while (link != voidLink_ && ((JavaUtilLinkedList_Link *) nil_chk(link))->data_ != nil) {
      link = ((JavaUtilLinkedList_Link *) nil_chk(link))->next_;
    }
  }
  if (link == voidLink_) {
    return NO;
  }
  JavaUtilLinkedList_Link *next = ((JavaUtilLinkedList_Link *) nil_chk(link))->next_;
  JavaUtilLinkedList_Link *previous = link->previous_;
  JavaUtilLinkedList_Link_set_next_(nil_chk(previous), next);
  ((JavaUtilLinkedList_Link *) nil_chk(next))->previous_ = previous;
  size__--;
  modCount_++;
  return YES;
}

- (id)removeFirst {
  JavaUtilLinkedList_Link *first = ((JavaUtilLinkedList_Link *) nil_chk(voidLink_))->next_;
  if (first != voidLink_) {
    JavaUtilLinkedList_Link *next = ((JavaUtilLinkedList_Link *) nil_chk(first))->next_;
    JavaUtilLinkedList_Link_set_next_(voidLink_, next);
    ((JavaUtilLinkedList_Link *) nil_chk(next))->previous_ = voidLink_;
    size__--;
    modCount_++;
    return first->data_;
  }
  @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
}

- (id)removeLast {
  JavaUtilLinkedList_Link *last = ((JavaUtilLinkedList_Link *) nil_chk(voidLink_))->previous_;
  if (last != voidLink_) {
    JavaUtilLinkedList_Link *previous = ((JavaUtilLinkedList_Link *) nil_chk(last))->previous_;
    voidLink_->previous_ = previous;
    JavaUtilLinkedList_Link_set_next_(nil_chk(previous), voidLink_);
    size__--;
    modCount_++;
    return last->data_;
  }
  @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
}

- (id)setWithInt:(int)location
          withId:(id)object {
  if (0 <= location && location < size__) {
    JavaUtilLinkedList_Link *link = voidLink_;
    if (location < (size__ / 2)) {
      for (int i = 0; i <= location; i++) {
        link = ((JavaUtilLinkedList_Link *) nil_chk(link))->next_;
      }
    }
    else {
      for (int i = size__; i > location; i--) {
        link = ((JavaUtilLinkedList_Link *) nil_chk(link))->previous_;
      }
    }
    id result = ((JavaUtilLinkedList_Link *) nil_chk(link))->data_;
    JavaUtilLinkedList_Link_set_data_(link, object);
    return result;
  }
  @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
}

- (int)size {
  return size__;
}

- (BOOL)offerWithId:(id)o {
  [self addWithId:o];
  return YES;
}

- (id)poll {
  return size__ == 0 ? nil : [self removeFirst];
}

- (id)remove {
  return [self removeFirst];
}

- (id)peek {
  JavaUtilLinkedList_Link *first = ((JavaUtilLinkedList_Link *) nil_chk(voidLink_))->next_;
  return first == voidLink_ ? nil : ((JavaUtilLinkedList_Link *) nil_chk(first))->data_;
}

- (id)element {
  return [self getFirst];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [self clear];
  ((JavaUtilLinkedList_Link *) nil_chk(voidLink_))->previous_ = JavaUtilLinkedList_Link_set_next_(voidLink_, nil);
  JavaUtilLinkedList_set_voidLink_(self, nil);
  [super dealloc];
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

- (void)copyAllFieldsTo:(JavaUtilLinkedList *)other {
  [super copyAllFieldsTo:other];
  other->size__ = size__;
  JavaUtilLinkedList_set_voidLink_(other, voidLink_);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:voidLink_ name:@"voidLink"]];
  return result;
}

@end
@implementation JavaUtilLinkedList_Link

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithId:(id)o
withJavaUtilLinkedList_Link:(JavaUtilLinkedList_Link *)p
withJavaUtilLinkedList_Link:(JavaUtilLinkedList_Link *)n {
  if (self = [super init]) {
    JavaUtilLinkedList_Link_set_data_(self, o);
    previous_ = p;
    JavaUtilLinkedList_Link_set_next_(self, n);
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilLinkedList_Link_set_next_(self, nil);
  JavaUtilLinkedList_Link_set_data_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilLinkedList_Link *)other {
  [super copyAllFieldsTo:other];
  JavaUtilLinkedList_Link_set_data_(other, data_);
  JavaUtilLinkedList_Link_set_next_(other, next_);
  other->previous_ = previous_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:data_ name:@"data"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:next_ name:@"next"]];
  return result;
}

@end
@implementation JavaUtilLinkedList_LinkIterator

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilLinkedList:(JavaUtilLinkedList *)object
                         withInt:(int)location {
  if (self = [super init]) {
    JavaUtilLinkedList_LinkIterator_set_list_(self, object);
    expectedModCount_ = ((JavaUtilLinkedList *) nil_chk(list_))->modCount_;
    if (0 <= location && location <= list_->size__) {
      link_ = list_->voidLink_;
      if (location < list_->size__ / 2) {
        for (pos_ = -1; pos_ + 1 < location; pos_++) {
          link_ = ((JavaUtilLinkedList_Link *) nil_chk(link_))->next_;
        }
      }
      else {
        for (pos_ = list_->size__; pos_ >= location; pos_--) {
          link_ = ((JavaUtilLinkedList_Link *) nil_chk(link_))->previous_;
        }
      }
    }
    else {
      @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
    }
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)addWithId:(id)object {
  if (expectedModCount_ == ((JavaUtilLinkedList *) nil_chk(list_))->modCount_) {
    JavaUtilLinkedList_Link *next = ((JavaUtilLinkedList_Link *) nil_chk(link_))->next_;
    JavaUtilLinkedList_Link *newLink = [[[JavaUtilLinkedList_Link alloc] initWithId:object withJavaUtilLinkedList_Link:link_ withJavaUtilLinkedList_Link:next] autorelease];
    JavaUtilLinkedList_Link_set_next_(link_, newLink);
    ((JavaUtilLinkedList_Link *) nil_chk(next))->previous_ = newLink;
    link_ = newLink;
    lastLink_ = nil;
    pos_++;
    expectedModCount_++;
    list_->size__++;
    list_->modCount_++;
  }
  else {
    @throw [[[JavaUtilConcurrentModificationException alloc] init] autorelease];
  }
}

- (BOOL)hasNext {
  return ((JavaUtilLinkedList_Link *) nil_chk(link_))->next_ != ((JavaUtilLinkedList *) nil_chk(list_))->voidLink_;
}

- (BOOL)hasPrevious {
  return link_ != ((JavaUtilLinkedList *) nil_chk(list_))->voidLink_;
}

- (id)next {
  if (expectedModCount_ == ((JavaUtilLinkedList *) nil_chk(list_))->modCount_) {
    JavaUtilLinkedList_Link *next = ((JavaUtilLinkedList_Link *) nil_chk(link_))->next_;
    if (next != list_->voidLink_) {
      lastLink_ = link_ = next;
      pos_++;
      return ((JavaUtilLinkedList_Link *) nil_chk(link_))->data_;
    }
    @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
  }
  @throw [[[JavaUtilConcurrentModificationException alloc] init] autorelease];
}

- (int)nextIndex {
  return pos_ + 1;
}

- (id)previous {
  if (expectedModCount_ == ((JavaUtilLinkedList *) nil_chk(list_))->modCount_) {
    if (link_ != list_->voidLink_) {
      lastLink_ = link_;
      link_ = ((JavaUtilLinkedList_Link *) nil_chk(link_))->previous_;
      pos_--;
      return ((JavaUtilLinkedList_Link *) nil_chk(lastLink_))->data_;
    }
    @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
  }
  @throw [[[JavaUtilConcurrentModificationException alloc] init] autorelease];
}

- (int)previousIndex {
  return pos_;
}

- (void)remove {
  if (expectedModCount_ == ((JavaUtilLinkedList *) nil_chk(list_))->modCount_) {
    if (lastLink_ != nil) {
      JavaUtilLinkedList_Link *next = lastLink_->next_;
      JavaUtilLinkedList_Link *previous = lastLink_->previous_;
      ((JavaUtilLinkedList_Link *) nil_chk(next))->previous_ = previous;
      JavaUtilLinkedList_Link_set_next_(nil_chk(previous), next);
      if (lastLink_ == link_) {
        pos_--;
      }
      link_ = previous;
      lastLink_ = nil;
      expectedModCount_++;
      list_->size__--;
      list_->modCount_++;
    }
    else {
      @throw [[[JavaLangIllegalStateException alloc] init] autorelease];
    }
  }
  else {
    @throw [[[JavaUtilConcurrentModificationException alloc] init] autorelease];
  }
}

- (void)setWithId:(id)object {
  if (expectedModCount_ == ((JavaUtilLinkedList *) nil_chk(list_))->modCount_) {
    if (lastLink_ != nil) {
      JavaUtilLinkedList_Link_set_data_(lastLink_, object);
    }
    else {
      @throw [[[JavaLangIllegalStateException alloc] init] autorelease];
    }
  }
  else {
    @throw [[[JavaUtilConcurrentModificationException alloc] init] autorelease];
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilLinkedList_LinkIterator_set_list_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilLinkedList_LinkIterator *)other {
  [super copyAllFieldsTo:other];
  other->expectedModCount_ = expectedModCount_;
  other->lastLink_ = lastLink_;
  other->link_ = link_;
  JavaUtilLinkedList_LinkIterator_set_list_(other, list_);
  other->pos_ = pos_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:list_ name:@"list"]];
  return result;
}

@end
