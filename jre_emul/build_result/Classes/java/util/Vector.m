//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/luni/src/main/java/java/util/Vector.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Enumeration.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/Vector.h"

@implementation JavaUtilVector

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)init {
  return JreMemDebugAdd([self initJavaUtilVectorWithInt:JavaUtilVector_DEFAULT_SIZE withInt:0]);
}

- (id)initWithInt:(int)capacity {
  return JreMemDebugAdd([self initJavaUtilVectorWithInt:capacity withInt:0]);
}

- (id)initJavaUtilVectorWithInt:(int)capacity
                        withInt:(int)capacityIncrement {
  if (self = [super init]) {
    if (capacity < 0) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
    JavaUtilVector_set_elementData_(self, [self newElementArrayWithInt:capacity]);
    elementCount_ = 0;
    self->capacityIncrement_ = capacityIncrement;
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithInt:(int)capacity
          withInt:(int)capacityIncrement {
  return [self initJavaUtilVectorWithInt:capacity withInt:capacityIncrement];
}

- (id)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  if (self = [self initJavaUtilVectorWithInt:[((id<JavaUtilCollection>) nil_chk(collection)) size] withInt:0]) {
    id<JavaUtilIterator> it = [collection iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      IOSObjectArray_Set(nil_chk(elementData_), elementCount_++, [it next]);
    }
    JreMemDebugAdd(self);
  }
  return self;
}

- (IOSObjectArray *)newElementArrayWithInt:(int)size {
  return (IOSObjectArray *) check_class_cast([IOSObjectArray arrayWithLength:size type:[IOSClass classWithClass:[NSObject class]]], [IOSObjectArray class]);
}

- (void)addWithInt:(int)location
            withId:(id)object {
  [self insertElementAtWithId:object withInt:location];
}

- (BOOL)addWithId:(id)object {
  @synchronized(self) {
    {
      if (elementCount_ == (int) [((IOSObjectArray *) nil_chk(elementData_)) count]) {
        [self growByOne];
      }
      IOSObjectArray_Set(elementData_, elementCount_++, object);
      modCount_++;
      return YES;
    }
  }
}

- (BOOL)addAllWithInt:(int)location
withJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @synchronized(self) {
    {
      if (0 <= location && location <= elementCount_) {
        if (collection == nil) {
          @throw [[[JavaLangNullPointerException alloc] init] autorelease];
        }
        int size = [((id<JavaUtilCollection>) nil_chk(collection)) size];
        if (size == 0) {
          return NO;
        }
        int required = size - ((int) [((IOSObjectArray *) nil_chk(elementData_)) count] - elementCount_);
        if (required > 0) {
          [self growByWithInt:required];
        }
        int count = elementCount_ - location;
        if (count > 0) {
          [JavaLangSystem arraycopyWithId:elementData_ withInt:location withId:elementData_ withInt:location + size withInt:count];
        }
        id<JavaUtilIterator> it = [collection iterator];
        while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
          IOSObjectArray_Set(elementData_, location++, [it next]);
        }
        elementCount_ += size;
        modCount_++;
        return YES;
      }
      @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithInt:location] autorelease];
    }
  }
}

- (BOOL)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @synchronized(self) {
    {
      return [self addAllWithInt:elementCount_ withJavaUtilCollection:collection];
    }
  }
}

- (void)addElementWithId:(id)object {
  @synchronized(self) {
    {
      if (elementCount_ == (int) [((IOSObjectArray *) nil_chk(elementData_)) count]) {
        [self growByOne];
      }
      IOSObjectArray_Set(elementData_, elementCount_++, object);
      modCount_++;
    }
  }
}

- (int)capacity {
  @synchronized(self) {
    {
      return (int) [((IOSObjectArray *) nil_chk(elementData_)) count];
    }
  }
}

- (void)clear {
  [self removeAllElements];
}

- (id)clone {
  @synchronized(self) {
    {
      JavaUtilVector *vector = [[[JavaUtilVector alloc] initWithInt:0 withInt:capacityIncrement_] autorelease];
      JavaUtilVector_set_elementData_(vector, [((IOSObjectArray *) nil_chk(elementData_)) clone]);
      vector->elementCount_ = elementCount_;
      return vector;
    }
  }
}

- (BOOL)containsWithId:(id)object {
  return [self indexOfWithId:object withInt:0] != -1;
}

- (BOOL)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @synchronized(self) {
    {
      return [super containsAllWithJavaUtilCollection:collection];
    }
  }
}

- (void)copyIntoWithNSObjectArray:(IOSObjectArray *)elements {
  @synchronized(self) {
    {
      [JavaLangSystem arraycopyWithId:elementData_ withInt:0 withId:elements withInt:0 withInt:elementCount_];
    }
  }
}

- (id)elementAtWithInt:(int)location {
  @synchronized(self) {
    {
      if (location < elementCount_) {
        return (id) IOSObjectArray_Get(nil_chk(elementData_), location);
      }
      @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithInt:location] autorelease];
    }
  }
}

- (id<JavaUtilEnumeration>)elements {
  return [[[JavaUtilVector_$1 alloc] initWithJavaUtilVector:self] autorelease];
}

- (void)ensureCapacityWithInt:(int)minimumCapacity {
  @synchronized(self) {
    {
      if ((int) [((IOSObjectArray *) nil_chk(elementData_)) count] < minimumCapacity) {
        int next = (capacityIncrement_ <= 0 ? (int) [elementData_ count] : capacityIncrement_) + (int) [elementData_ count];
        [self growWithInt:minimumCapacity > next ? minimumCapacity : next];
      }
    }
  }
}

- (BOOL)isEqual:(id)object {
  @synchronized(self) {
    {
      if (self == object) {
        return YES;
      }
      if ([object conformsToProtocol: @protocol(JavaUtilList)]) {
        id<JavaUtilList> list = (id<JavaUtilList>) check_protocol_cast(object, @protocol(JavaUtilList));
        if ([((id<JavaUtilList>) nil_chk(list)) size] != elementCount_) {
          return NO;
        }
        int index = 0;
        id<JavaUtilIterator> it = [list iterator];
        while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
          id e1 = IOSObjectArray_Get(nil_chk(elementData_), index++), e2 = [it next];
          if (!(e1 == nil ? e2 == nil : [e1 isEqual:e2])) {
            return NO;
          }
        }
        return YES;
      }
      return NO;
    }
  }
}

- (id)firstElement {
  @synchronized(self) {
    {
      if (elementCount_ > 0) {
        return (id) IOSObjectArray_Get(nil_chk(elementData_), 0);
      }
      @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
    }
  }
}

- (id)getWithInt:(int)location {
  return [self elementAtWithInt:location];
}

- (void)growWithInt:(int)newCapacity {
  IOSObjectArray *newData = [self newElementArrayWithInt:newCapacity];
  NSAssert(elementCount_ <= newCapacity, @"apache_harmony/classlib/modules/luni/src/main/java/java/util/Vector.java:448 condition failed: assert elementCount <= newCapacity;");
  [JavaLangSystem arraycopyWithId:elementData_ withInt:0 withId:newData withInt:0 withInt:elementCount_];
  JavaUtilVector_set_elementData_(self, newData);
}

- (void)growByOne {
  int adding = 0;
  if (capacityIncrement_ <= 0) {
    if ((adding = (int) [((IOSObjectArray *) nil_chk(elementData_)) count]) == 0) {
      adding = 1;
    }
  }
  else {
    adding = capacityIncrement_;
  }
  IOSObjectArray *newData = [self newElementArrayWithInt:(int) [((IOSObjectArray *) nil_chk(elementData_)) count] + adding];
  [JavaLangSystem arraycopyWithId:elementData_ withInt:0 withId:newData withInt:0 withInt:elementCount_];
  JavaUtilVector_set_elementData_(self, newData);
}

- (void)growByWithInt:(int)required {
  int adding = 0;
  if (capacityIncrement_ <= 0) {
    if ((adding = (int) [((IOSObjectArray *) nil_chk(elementData_)) count]) == 0) {
      adding = required;
    }
    while (adding < required) {
      adding += adding;
    }
  }
  else {
    adding = (required / capacityIncrement_) * capacityIncrement_;
    if (adding < required) {
      adding += capacityIncrement_;
    }
  }
  IOSObjectArray *newData = [self newElementArrayWithInt:(int) [((IOSObjectArray *) nil_chk(elementData_)) count] + adding];
  [JavaLangSystem arraycopyWithId:elementData_ withInt:0 withId:newData withInt:0 withInt:elementCount_];
  JavaUtilVector_set_elementData_(self, newData);
}

- (NSUInteger)hash {
  @synchronized(self) {
    {
      int result = 1;
      for (int i = 0; i < elementCount_; i++) {
        result = (31 * result) + (IOSObjectArray_Get(nil_chk(elementData_), i) == nil ? 0 : [nil_chk(IOSObjectArray_Get(elementData_, i)) hash]);
      }
      return result;
    }
  }
}

- (int)indexOfWithId:(id)object {
  return [self indexOfWithId:object withInt:0];
}

- (int)indexOfWithId:(id)object
             withInt:(int)location {
  @synchronized(self) {
    {
      if (object != nil) {
        for (int i = location; i < elementCount_; i++) {
          if ([object isEqual:IOSObjectArray_Get(nil_chk(elementData_), i)]) {
            return i;
          }
        }
      }
      else {
        for (int i = location; i < elementCount_; i++) {
          if (IOSObjectArray_Get(nil_chk(elementData_), i) == nil) {
            return i;
          }
        }
      }
      return -1;
    }
  }
}

- (void)insertElementAtWithId:(id)object
                      withInt:(int)location {
  @synchronized(self) {
    {
      if (0 <= location && location <= elementCount_) {
        if (elementCount_ == (int) [((IOSObjectArray *) nil_chk(elementData_)) count]) {
          [self growByOne];
        }
        int count = elementCount_ - location;
        if (count > 0) {
          [JavaLangSystem arraycopyWithId:elementData_ withInt:location withId:elementData_ withInt:location + 1 withInt:count];
        }
        IOSObjectArray_Set(elementData_, location, object);
        elementCount_++;
        modCount_++;
      }
      else {
        @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithInt:location] autorelease];
      }
    }
  }
}

- (BOOL)isEmpty {
  @synchronized(self) {
    {
      return elementCount_ == 0;
    }
  }
}

- (id)lastElement {
  @synchronized(self) {
    {
      @try {
        return (id) IOSObjectArray_Get(nil_chk(elementData_), elementCount_ - 1);
      }
      @catch (JavaLangIndexOutOfBoundsException *e) {
        @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
      }
    }
  }
}

- (int)lastIndexOfWithId:(id)object {
  @synchronized(self) {
    {
      return [self lastIndexOfWithId:object withInt:elementCount_ - 1];
    }
  }
}

- (int)lastIndexOfWithId:(id)object
                 withInt:(int)location {
  @synchronized(self) {
    {
      if (location < elementCount_) {
        if (object != nil) {
          for (int i = location; i >= 0; i--) {
            if ([object isEqual:IOSObjectArray_Get(nil_chk(elementData_), i)]) {
              return i;
            }
          }
        }
        else {
          for (int i = location; i >= 0; i--) {
            if (IOSObjectArray_Get(nil_chk(elementData_), i) == nil) {
              return i;
            }
          }
        }
        return -1;
      }
      @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithInt:location] autorelease];
    }
  }
}

- (id)removeWithInt:(int)location {
  @synchronized(self) {
    {
      if (location < elementCount_) {
        id result = (id) IOSObjectArray_Get(nil_chk(elementData_), location);
        elementCount_--;
        int size = elementCount_ - location;
        if (size > 0) {
          [JavaLangSystem arraycopyWithId:elementData_ withInt:location + 1 withId:elementData_ withInt:location withInt:size];
        }
        IOSObjectArray_Set(elementData_, elementCount_, nil);
        modCount_++;
        return result;
      }
      @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithInt:location] autorelease];
    }
  }
}

- (BOOL)removeWithId:(id)object {
  return [self removeElementWithId:object];
}

- (BOOL)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @synchronized(self) {
    {
      return [super removeAllWithJavaUtilCollection:collection];
    }
  }
}

- (void)removeAllElements {
  @synchronized(self) {
    {
      for (int i = 0; i < elementCount_; i++) {
        IOSObjectArray_Set(nil_chk(elementData_), i, nil);
      }
      modCount_++;
      elementCount_ = 0;
    }
  }
}

- (BOOL)removeElementWithId:(id)object {
  @synchronized(self) {
    {
      int index;
      if ((index = [self indexOfWithId:object withInt:0]) == -1) {
        return NO;
      }
      [self removeElementAtWithInt:index];
      return YES;
    }
  }
}

- (void)removeElementAtWithInt:(int)location {
  @synchronized(self) {
    {
      if (0 <= location && location < elementCount_) {
        elementCount_--;
        int size = elementCount_ - location;
        if (size > 0) {
          [JavaLangSystem arraycopyWithId:elementData_ withInt:location + 1 withId:elementData_ withInt:location withInt:size];
        }
        IOSObjectArray_Set(nil_chk(elementData_), elementCount_, nil);
        modCount_++;
      }
      else {
        @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithInt:location] autorelease];
      }
    }
  }
}

- (void)removeRangeWithInt:(int)start
                   withInt:(int)end {
  if (start >= 0 && start <= end && end <= elementCount_) {
    if (start == end) {
      return;
    }
    if (end != elementCount_) {
      [JavaLangSystem arraycopyWithId:elementData_ withInt:end withId:elementData_ withInt:start withInt:elementCount_ - end];
      int newCount = elementCount_ - (end - start);
      [JavaUtilArrays fillWithNSObjectArray:elementData_ withInt:newCount withInt:elementCount_ withId:nil];
      elementCount_ = newCount;
    }
    else {
      [JavaUtilArrays fillWithNSObjectArray:elementData_ withInt:start withInt:elementCount_ withId:nil];
      elementCount_ = start;
    }
    modCount_++;
  }
  else {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
}

- (BOOL)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @synchronized(self) {
    {
      return [super retainAllWithJavaUtilCollection:collection];
    }
  }
}

- (id)setWithInt:(int)location
          withId:(id)object {
  @synchronized(self) {
    {
      if (location < elementCount_) {
        id result = (id) IOSObjectArray_Get(nil_chk(elementData_), location);
        IOSObjectArray_Set(elementData_, location, object);
        return result;
      }
      @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithInt:location] autorelease];
    }
  }
}

- (void)setElementAtWithId:(id)object
                   withInt:(int)location {
  @synchronized(self) {
    {
      if (location < elementCount_) {
        IOSObjectArray_Set(nil_chk(elementData_), location, object);
      }
      else {
        @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithInt:location] autorelease];
      }
    }
  }
}

- (void)setSizeWithInt:(int)length {
  @synchronized(self) {
    {
      if (length == elementCount_) {
        return;
      }
      [self ensureCapacityWithInt:length];
      if (elementCount_ > length) {
        [JavaUtilArrays fillWithNSObjectArray:elementData_ withInt:length withInt:elementCount_ withId:nil];
      }
      elementCount_ = length;
      modCount_++;
    }
  }
}

- (int)size {
  @synchronized(self) {
    {
      return elementCount_;
    }
  }
}

- (id<JavaUtilList>)subListWithInt:(int)start
                           withInt:(int)end {
  @synchronized(self) {
    {
      return [[[JavaUtilCollections_SynchronizedRandomAccessList alloc] initWithJavaUtilList:[super subListWithInt:start withInt:end] withId:self] autorelease];
    }
  }
}

- (IOSObjectArray *)toArray {
  @synchronized(self) {
    {
      IOSObjectArray *result = [IOSObjectArray arrayWithLength:elementCount_ type:[IOSClass classWithClass:[NSObject class]]];
      [JavaLangSystem arraycopyWithId:elementData_ withInt:0 withId:result withInt:0 withInt:elementCount_];
      return result;
    }
  }
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)contents {
  @synchronized(self) {
    {
      if (elementCount_ > (int) [((IOSObjectArray *) nil_chk(contents)) count]) {
        contents = (IOSObjectArray *) check_class_cast([super toArrayWithNSObjectArray:contents], [IOSObjectArray class]);
      }
      [JavaLangSystem arraycopyWithId:elementData_ withInt:0 withId:contents withInt:0 withInt:elementCount_];
      if (elementCount_ < (int) [((IOSObjectArray *) nil_chk(contents)) count]) {
        IOSObjectArray_Set(contents, elementCount_, nil);
      }
      return contents;
    }
  }
}

- (NSString *)description {
  @synchronized(self) {
    {
      if (elementCount_ == 0) {
        return @"[]";
      }
      int length = elementCount_ - 1;
      JavaLangStringBuilder *buffer = [[[JavaLangStringBuilder alloc] initWithInt:elementCount_ * 16] autorelease];
      [buffer appendWithChar:'['];
      for (int i = 0; i < length; i++) {
        if (IOSObjectArray_Get(nil_chk(elementData_), i) == self) {
          [buffer appendWithNSString:@"(this Collection)"];
        }
        else {
          [buffer appendWithId:IOSObjectArray_Get(elementData_, i)];
        }
        [buffer appendWithNSString:@", "];
      }
      if (IOSObjectArray_Get(nil_chk(elementData_), length) == self) {
        [buffer appendWithNSString:@"(this Collection)"];
      }
      else {
        [buffer appendWithId:IOSObjectArray_Get(elementData_, length)];
      }
      [buffer appendWithChar:']'];
      return [buffer description];
    }
  }
}

- (void)trimToSize {
  @synchronized(self) {
    {
      if ((int) [((IOSObjectArray *) nil_chk(elementData_)) count] != elementCount_) {
        [self growWithInt:elementCount_];
      }
    }
  }
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilVector_set_elementData_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilVector *)other {
  [super copyAllFieldsTo:other];
  other->capacityIncrement_ = capacityIncrement_;
  other->elementCount_ = elementCount_;
  JavaUtilVector_set_elementData_(other, elementData_);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:elementData_ name:@"elementData"]];
  return result;
}

@end
@implementation JavaUtilVector_$1

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (BOOL)hasMoreElements {
  return pos_ < this$0_->elementCount_;
}

- (id)nextElement {
  @synchronized (this$0_) {
    if (pos_ < this$0_->elementCount_) {
      return (id) IOSObjectArray_Get(nil_chk(this$0_->elementData_), pos_++);
    }
  }
  @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
}

- (id)initWithJavaUtilVector:(JavaUtilVector *)outer$ {
  JavaUtilVector_$1_set_this$0_(self, outer$);
  if (self = [super init]) {
    pos_ = 0;
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilVector_$1_set_this$0_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilVector_$1 *)other {
  [super copyAllFieldsTo:other];
  other->pos_ = pos_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:this$0_ name:@"this$0"]];
  return result;
}

@end
