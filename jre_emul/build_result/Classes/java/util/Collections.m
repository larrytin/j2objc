//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/Collections.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Boolean.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Comparable.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/SafeVarargs.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/reflect/Array.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/Deque.h"
#include "java/util/Enumeration.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "java/util/Map.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/Queue.h"
#include "java/util/Random.h"
#include "java/util/RandomAccess.h"
#include "java/util/Set.h"
#include "java/util/SortedMap.h"
#include "java/util/SortedSet.h"

@implementation JavaUtilCollections

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilCollections_EMPTY_ITERATOR_ name:@"JavaUtilCollections_EMPTY_ITERATOR_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilCollections_EMPTY_ENUMERATION_ name:@"JavaUtilCollections_EMPTY_ENUMERATION_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilCollections_EMPTY_LIST_ name:@"JavaUtilCollections_EMPTY_LIST_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilCollections_EMPTY_SET_ name:@"JavaUtilCollections_EMPTY_SET_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilCollections_EMPTY_MAP_ name:@"JavaUtilCollections_EMPTY_MAP_"]];
  return result;
}

static id<JavaUtilIterator> JavaUtilCollections_EMPTY_ITERATOR_;
static id<JavaUtilEnumeration> JavaUtilCollections_EMPTY_ENUMERATION_;
static id<JavaUtilList> JavaUtilCollections_EMPTY_LIST_;
static id<JavaUtilSet> JavaUtilCollections_EMPTY_SET_;
static id<JavaUtilMap> JavaUtilCollections_EMPTY_MAP_;

+ (id<JavaUtilIterator>)EMPTY_ITERATOR {
  return JavaUtilCollections_EMPTY_ITERATOR_;
}

+ (id<JavaUtilEnumeration>)EMPTY_ENUMERATION {
  return JavaUtilCollections_EMPTY_ENUMERATION_;
}

+ (id<JavaUtilList>)EMPTY_LIST {
  return JavaUtilCollections_EMPTY_LIST_;
}

+ (id<JavaUtilSet>)EMPTY_SET {
  return JavaUtilCollections_EMPTY_SET_;
}

+ (id<JavaUtilMap>)EMPTY_MAP {
  return JavaUtilCollections_EMPTY_MAP_;
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

+ (int)binarySearchWithJavaUtilList:(id<JavaUtilList>)list
                             withId:(id)object {
  if (list == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"list == null"] autorelease];
  }
  if ([((id<JavaUtilList>) nil_chk(list)) isEmpty]) {
    return -1;
  }
  if (!([(id) list conformsToProtocol: @protocol(JavaUtilRandomAccess)])) {
    id<JavaUtilListIterator> it = [list listIterator];
    while ([((id<JavaUtilListIterator>) nil_chk(it)) hasNext]) {
      int result;
      if ((result = -[((id<JavaLangComparable>) nil_chk([it next])) compareToWithId:object]) <= 0) {
        if (result == 0) {
          return [it previousIndex];
        }
        return -[it previousIndex] - 1;
      }
    }
    return -[list size] - 1;
  }
  int low = 0, mid = [list size], high = mid - 1, result = -1;
  while (low <= high) {
    mid = (int) (((unsigned int) (low + high)) >> 1);
    if ((result = -[((id<JavaLangComparable>) nil_chk([list getWithInt:mid])) compareToWithId:object]) > 0) {
      low = mid + 1;
    }
    else if (result == 0) {
      return mid;
    }
    else {
      high = mid - 1;
    }
  }
  return -mid - (result < 0 ? 1 : 2);
}

+ (int)binarySearchWithJavaUtilList:(id<JavaUtilList>)list
                             withId:(id)object
             withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  if (comparator == nil) {
    return [JavaUtilCollections binarySearchWithJavaUtilList:(id<JavaUtilList>) check_protocol_cast(list, @protocol(JavaUtilList)) withId:object];
  }
  if (!([(id) list conformsToProtocol: @protocol(JavaUtilRandomAccess)])) {
    id<JavaUtilListIterator> it = [((id<JavaUtilList>) nil_chk(list)) listIterator];
    while ([((id<JavaUtilListIterator>) nil_chk(it)) hasNext]) {
      int result;
      if ((result = -[((id<JavaUtilComparator>) nil_chk(comparator)) compareWithId:[it next] withId:object]) <= 0) {
        if (result == 0) {
          return [it previousIndex];
        }
        return -[it previousIndex] - 1;
      }
    }
    return -[list size] - 1;
  }
  int low = 0, mid = [((id<JavaUtilList>) nil_chk(list)) size], high = mid - 1, result = -1;
  while (low <= high) {
    mid = (int) (((unsigned int) (low + high)) >> 1);
    if ((result = -[((id<JavaUtilComparator>) nil_chk(comparator)) compareWithId:[list getWithInt:mid] withId:object]) > 0) {
      low = mid + 1;
    }
    else if (result == 0) {
      return mid;
    }
    else {
      high = mid - 1;
    }
  }
  return -mid - (result < 0 ? 1 : 2);
}

+ (void)copy__WithJavaUtilList:(id<JavaUtilList>)destination
              withJavaUtilList:(id<JavaUtilList>)source {
  if ([((id<JavaUtilList>) nil_chk(destination)) size] < [((id<JavaUtilList>) nil_chk(source)) size]) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"destination.size() < source.size(): %d < %d", [destination size], [source size]]] autorelease];
  }
  id<JavaUtilIterator> srcIt = [source iterator];
  id<JavaUtilListIterator> destIt = [destination listIterator];
  while ([((id<JavaUtilIterator>) nil_chk(srcIt)) hasNext]) {
    @try {
      [((id<JavaUtilListIterator>) nil_chk(destIt)) next];
    }
    @catch (JavaUtilNoSuchElementException *e) {
      @throw [[[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"Source size %d does not fit into destination", [source size]]] autorelease];
    }
    [((id<JavaUtilListIterator>) nil_chk(destIt)) setWithId:[srcIt next]];
  }
}

+ (id<JavaUtilEnumeration>)enumerationWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  id<JavaUtilCollection> c = collection;
  return [[[JavaUtilCollections_$3 alloc] initWithJavaUtilCollection:c] autorelease];
}

+ (void)fillWithJavaUtilList:(id<JavaUtilList>)list
                      withId:(id)object {
  id<JavaUtilListIterator> it = [((id<JavaUtilList>) nil_chk(list)) listIterator];
  while ([((id<JavaUtilListIterator>) nil_chk(it)) hasNext]) {
    [it next];
    [it setWithId:object];
  }
}

+ (id)maxWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk(collection)) iterator];
  id<JavaLangComparable> max = [((id<JavaUtilIterator>) nil_chk(it)) next];
  while ([it hasNext]) {
    id<JavaLangComparable> next = [it next];
    if ([((id<JavaLangComparable>) nil_chk(max)) compareToWithId:next] < 0) {
      max = next;
    }
  }
  return max;
}

+ (id)maxWithJavaUtilCollection:(id<JavaUtilCollection>)collection
         withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  if (comparator == nil) {
    id result = (id) [JavaUtilCollections maxWithJavaUtilCollection:(id<JavaUtilCollection>) check_protocol_cast(collection, @protocol(JavaUtilCollection))];
    return result;
  }
  id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk(collection)) iterator];
  id max = [((id<JavaUtilIterator>) nil_chk(it)) next];
  while ([it hasNext]) {
    id next = [it next];
    if ([((id<JavaUtilComparator>) nil_chk(comparator)) compareWithId:max withId:next] < 0) {
      max = next;
    }
  }
  return max;
}

+ (id)minWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk(collection)) iterator];
  id<JavaLangComparable> min = [((id<JavaUtilIterator>) nil_chk(it)) next];
  while ([it hasNext]) {
    id<JavaLangComparable> next = [it next];
    if ([((id<JavaLangComparable>) nil_chk(min)) compareToWithId:next] > 0) {
      min = next;
    }
  }
  return min;
}

+ (id)minWithJavaUtilCollection:(id<JavaUtilCollection>)collection
         withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  if (comparator == nil) {
    id result = (id) [JavaUtilCollections minWithJavaUtilCollection:(id<JavaUtilCollection>) check_protocol_cast(collection, @protocol(JavaUtilCollection))];
    return result;
  }
  id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk(collection)) iterator];
  id min = [((id<JavaUtilIterator>) nil_chk(it)) next];
  while ([it hasNext]) {
    id next = [it next];
    if ([((id<JavaUtilComparator>) nil_chk(comparator)) compareWithId:min withId:next] > 0) {
      min = next;
    }
  }
  return min;
}

+ (id<JavaUtilList>)nCopiesWithInt:(int)length
                            withId:(id)object {
  return [[[JavaUtilCollections_CopiesList alloc] initWithInt:length withId:object] autorelease];
}

+ (void)reverseWithJavaUtilList:(id<JavaUtilList>)list {
  int size = [((id<JavaUtilList>) nil_chk(list)) size];
  id<JavaUtilListIterator> front = (id<JavaUtilListIterator>) check_protocol_cast([list listIterator], @protocol(JavaUtilListIterator));
  id<JavaUtilListIterator> back = (id<JavaUtilListIterator>) check_protocol_cast([list listIteratorWithInt:size], @protocol(JavaUtilListIterator));
  for (int i = 0; i < size / 2; i++) {
    id frontNext = [((id<JavaUtilListIterator>) nil_chk(front)) next];
    id backPrev = [((id<JavaUtilListIterator>) nil_chk(back)) previous];
    [front setWithId:backPrev];
    [back setWithId:frontNext];
  }
}

+ (id<JavaUtilComparator>)reverseOrder {
  return (id<JavaUtilComparator>) check_protocol_cast([JavaUtilCollections_ReverseComparator INSTANCE], @protocol(JavaUtilComparator));
}

+ (id<JavaUtilComparator>)reverseOrderWithJavaUtilComparator:(id<JavaUtilComparator>)c {
  if (c == nil) {
    return [JavaUtilCollections reverseOrder];
  }
  if ([(id) c isKindOfClass:[JavaUtilCollections_ReverseComparator2 class]]) {
    return ((JavaUtilCollections_ReverseComparator2 *) nil_chk(c))->cmp_;
  }
  return [[[JavaUtilCollections_ReverseComparator2 alloc] initWithJavaUtilComparator:c] autorelease];
}

+ (void)shuffleWithJavaUtilList:(id<JavaUtilList>)list {
  [JavaUtilCollections shuffleWithJavaUtilList:list withJavaUtilRandom:[[[JavaUtilRandom alloc] init] autorelease]];
}

+ (void)shuffleWithJavaUtilList:(id<JavaUtilList>)list
             withJavaUtilRandom:(JavaUtilRandom *)random {
  id<JavaUtilList> objectList = (id<JavaUtilList>) check_protocol_cast(list, @protocol(JavaUtilList));
  if ([(id) list conformsToProtocol: @protocol(JavaUtilRandomAccess)]) {
    for (int i = [((id<JavaUtilList>) nil_chk(objectList)) size] - 1; i > 0; i--) {
      int index = [((JavaUtilRandom *) nil_chk(random)) nextIntWithInt:i + 1];
      [objectList setWithInt:index withId:[objectList setWithInt:i withId:[objectList getWithInt:index]]];
    }
  }
  else {
    IOSObjectArray *array = [((id<JavaUtilList>) nil_chk(objectList)) toArray];
    for (int i = (int) [((IOSObjectArray *) nil_chk(array)) count] - 1; i > 0; i--) {
      int index = [((JavaUtilRandom *) nil_chk(random)) nextIntWithInt:i + 1];
      id temp = IOSObjectArray_Get(array, i);
      IOSObjectArray_Set(array, i, IOSObjectArray_Get(array, index));
      IOSObjectArray_Set(array, index, temp);
    }
    int i = 0;
    id<JavaUtilListIterator> it = [objectList listIterator];
    while ([((id<JavaUtilListIterator>) nil_chk(it)) hasNext]) {
      [it next];
      [it setWithId:IOSObjectArray_Get(array, i++)];
    }
  }
}

+ (id<JavaUtilSet>)singletonWithId:(id)object {
  return [[[JavaUtilCollections_SingletonSet alloc] initWithId:object] autorelease];
}

+ (id<JavaUtilList>)singletonListWithId:(id)object {
  return [[[JavaUtilCollections_SingletonList alloc] initWithId:object] autorelease];
}

+ (id<JavaUtilMap>)singletonMapWithId:(id)key
                               withId:(id)value {
  return [[[JavaUtilCollections_SingletonMap alloc] initWithId:key withId:value] autorelease];
}

+ (void)sortWithJavaUtilList:(id<JavaUtilList>)list {
  IOSObjectArray *array = [((id<JavaUtilList>) nil_chk(list)) toArray];
  [JavaUtilArrays sortWithNSObjectArray:array];
  int i = 0;
  id<JavaUtilListIterator> it = [list listIterator];
  while ([((id<JavaUtilListIterator>) nil_chk(it)) hasNext]) {
    [it next];
    [it setWithId:(id<JavaLangComparable>) IOSObjectArray_Get(nil_chk(array), i++)];
  }
}

+ (void)sortWithJavaUtilList:(id<JavaUtilList>)list
      withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  IOSObjectArray *array = [list toArrayWithNSObjectArray:(IOSObjectArray *) check_class_cast([IOSObjectArray arrayWithLength:[((id<JavaUtilList>) nil_chk(list)) size] type:[IOSClass classWithClass:[NSObject class]]], [IOSObjectArray class])];
  [JavaUtilArrays sortWithNSObjectArray:array withJavaUtilComparator:comparator];
  int i = 0;
  id<JavaUtilListIterator> it = [list listIterator];
  while ([((id<JavaUtilListIterator>) nil_chk(it)) hasNext]) {
    [it next];
    [it setWithId:IOSObjectArray_Get(nil_chk(array), i++)];
  }
}

+ (void)swapWithJavaUtilList:(id<JavaUtilList>)list
                     withInt:(int)index1
                     withInt:(int)index2 {
  if (list == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"list == null"] autorelease];
  }
  int size = [((id<JavaUtilList>) nil_chk(list)) size];
  if (index1 < 0 || index1 >= size || index2 < 0 || index2 >= size) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  if (index1 == index2) {
    return;
  }
  id<JavaUtilList> rawList = (id<JavaUtilList>) check_protocol_cast(list, @protocol(JavaUtilList));
  [rawList setWithInt:index2 withId:[rawList setWithInt:index1 withId:[rawList getWithInt:index2]]];
}

+ (BOOL)replaceAllWithJavaUtilList:(id<JavaUtilList>)list
                            withId:(id)obj
                            withId:(id)obj2 {
  int index;
  BOOL found = NO;
  while ((index = [((id<JavaUtilList>) nil_chk(list)) indexOfWithId:obj]) > -1) {
    found = YES;
    [list setWithInt:index withId:obj2];
  }
  return found;
}

+ (void)rotateWithJavaUtilList:(id<JavaUtilList>)lst
                       withInt:(int)dist {
  id<JavaUtilList> list = (id<JavaUtilList>) check_protocol_cast(lst, @protocol(JavaUtilList));
  int size = [((id<JavaUtilList>) nil_chk(list)) size];
  if (size == 0) {
    return;
  }
  int normdist;
  if (dist > 0) {
    normdist = dist % size;
  }
  else {
    normdist = size - ((dist % size) * (-1));
  }
  if (normdist == 0 || normdist == size) {
    return;
  }
  if ([(id) list conformsToProtocol: @protocol(JavaUtilRandomAccess)]) {
    id temp = [list getWithInt:0];
    int index = 0, beginIndex = 0;
    for (int i = 0; i < size; i++) {
      index = (index + normdist) % size;
      temp = [list setWithInt:index withId:temp];
      if (index == beginIndex) {
        index = ++beginIndex;
        temp = [list getWithInt:beginIndex];
      }
    }
  }
  else {
    int divideIndex = (size - normdist) % size;
    id<JavaUtilList> sublist1 = [list subListWithInt:0 withInt:divideIndex];
    id<JavaUtilList> sublist2 = [list subListWithInt:divideIndex withInt:size];
    [JavaUtilCollections reverseWithJavaUtilList:sublist1];
    [JavaUtilCollections reverseWithJavaUtilList:sublist2];
    [JavaUtilCollections reverseWithJavaUtilList:list];
  }
}

+ (int)indexOfSubListWithJavaUtilList:(id<JavaUtilList>)list
                     withJavaUtilList:(id<JavaUtilList>)sublist {
  int size = [((id<JavaUtilList>) nil_chk(list)) size];
  int sublistSize = [((id<JavaUtilList>) nil_chk(sublist)) size];
  if (sublistSize > size) {
    return -1;
  }
  if (sublistSize == 0) {
    return 0;
  }
  id firstObj = [sublist getWithInt:0];
  int index = [list indexOfWithId:firstObj];
  if (index == -1) {
    return -1;
  }
  while (index < size && (size - index >= sublistSize)) {
    id<JavaUtilListIterator> listIt = [list listIteratorWithInt:index];
    if ((firstObj == nil) ? [((id<JavaUtilListIterator>) nil_chk(listIt)) next] == nil : [firstObj isEqual:[((id<JavaUtilListIterator>) nil_chk(listIt)) next]]) {
      id<JavaUtilListIterator> sublistIt = [sublist listIteratorWithInt:1];
      BOOL difFound = NO;
      while ([((id<JavaUtilListIterator>) nil_chk(sublistIt)) hasNext]) {
        id element = [sublistIt next];
        if (![listIt hasNext]) {
          return -1;
        }
        if ((element == nil) ? [listIt next] != nil : ![element isEqual:[listIt next]]) {
          difFound = YES;
          break;
        }
      }
      if (!difFound) {
        return index;
      }
    }
    index++;
  }
  return -1;
}

+ (int)lastIndexOfSubListWithJavaUtilList:(id<JavaUtilList>)list
                         withJavaUtilList:(id<JavaUtilList>)sublist {
  int sublistSize = [((id<JavaUtilList>) nil_chk(sublist)) size];
  int size = [((id<JavaUtilList>) nil_chk(list)) size];
  if (sublistSize > size) {
    return -1;
  }
  if (sublistSize == 0) {
    return size;
  }
  id lastObj = [sublist getWithInt:sublistSize - 1];
  int index = [list lastIndexOfWithId:lastObj];
  while ((index > -1) && (index + 1 >= sublistSize)) {
    id<JavaUtilListIterator> listIt = [list listIteratorWithInt:index + 1];
    if ((lastObj == nil) ? [((id<JavaUtilListIterator>) nil_chk(listIt)) previous] == nil : [lastObj isEqual:[((id<JavaUtilListIterator>) nil_chk(listIt)) previous]]) {
      id<JavaUtilListIterator> sublistIt = [sublist listIteratorWithInt:sublistSize - 1];
      BOOL difFound = NO;
      while ([((id<JavaUtilListIterator>) nil_chk(sublistIt)) hasPrevious]) {
        id element = [sublistIt previous];
        if (![listIt hasPrevious]) {
          return -1;
        }
        if ((element == nil) ? [listIt previous] != nil : ![element isEqual:[listIt previous]]) {
          difFound = YES;
          break;
        }
      }
      if (!difFound) {
        return [listIt nextIndex];
      }
    }
    index--;
  }
  return -1;
}

+ (JavaUtilArrayList *)listWithJavaUtilEnumeration:(id<JavaUtilEnumeration>)enumeration {
  JavaUtilArrayList *list = [[[JavaUtilArrayList alloc] init] autorelease];
  while ([((id<JavaUtilEnumeration>) nil_chk(enumeration)) hasMoreElements]) {
    [list addWithId:[enumeration nextElement]];
  }
  return list;
}

+ (id<JavaUtilCollection>)synchronizedCollectionWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  if (collection == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"collection == null"] autorelease];
  }
  return [[[JavaUtilCollections_SynchronizedCollection alloc] initWithJavaUtilCollection:collection] autorelease];
}

+ (id<JavaUtilList>)synchronizedListWithJavaUtilList:(id<JavaUtilList>)list {
  if (list == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"list == null"] autorelease];
  }
  if ([(id) list conformsToProtocol: @protocol(JavaUtilRandomAccess)]) {
    return [[[JavaUtilCollections_SynchronizedRandomAccessList alloc] initWithJavaUtilList:list] autorelease];
  }
  return [[[JavaUtilCollections_SynchronizedList alloc] initWithJavaUtilList:list] autorelease];
}

+ (id<JavaUtilMap>)synchronizedMapWithJavaUtilMap:(id<JavaUtilMap>)map {
  if (map == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"map == null"] autorelease];
  }
  return [[[JavaUtilCollections_SynchronizedMap alloc] initWithJavaUtilMap:map] autorelease];
}

+ (id<JavaUtilSet>)synchronizedSetWithJavaUtilSet:(id<JavaUtilSet>)set {
  if (set == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"set == null"] autorelease];
  }
  return [[[JavaUtilCollections_SynchronizedSet alloc] initWithJavaUtilSet:set] autorelease];
}

+ (id<JavaUtilSortedMap>)synchronizedSortedMapWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)map {
  if (map == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"map == null"] autorelease];
  }
  return [[[JavaUtilCollections_SynchronizedSortedMap alloc] initWithJavaUtilSortedMap:map] autorelease];
}

+ (id<JavaUtilSortedSet>)synchronizedSortedSetWithJavaUtilSortedSet:(id<JavaUtilSortedSet>)set {
  if (set == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"set == null"] autorelease];
  }
  return [[[JavaUtilCollections_SynchronizedSortedSet alloc] initWithJavaUtilSortedSet:set] autorelease];
}

+ (id<JavaUtilCollection>)unmodifiableCollectionWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  if (collection == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"collection == null"] autorelease];
  }
  return [[[JavaUtilCollections_UnmodifiableCollection alloc] initWithJavaUtilCollection:(id<JavaUtilCollection>) check_protocol_cast(collection, @protocol(JavaUtilCollection))] autorelease];
}

+ (id<JavaUtilList>)unmodifiableListWithJavaUtilList:(id<JavaUtilList>)list {
  if (list == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"list == null"] autorelease];
  }
  if ([(id) list conformsToProtocol: @protocol(JavaUtilRandomAccess)]) {
    return [[[JavaUtilCollections_UnmodifiableRandomAccessList alloc] initWithJavaUtilList:(id<JavaUtilList>) check_protocol_cast(list, @protocol(JavaUtilList))] autorelease];
  }
  return [[[JavaUtilCollections_UnmodifiableList alloc] initWithJavaUtilList:(id<JavaUtilList>) check_protocol_cast(list, @protocol(JavaUtilList))] autorelease];
}

+ (id<JavaUtilMap>)unmodifiableMapWithJavaUtilMap:(id<JavaUtilMap>)map {
  if (map == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"map == null"] autorelease];
  }
  return [[[JavaUtilCollections_UnmodifiableMap alloc] initWithJavaUtilMap:(id<JavaUtilMap>) check_protocol_cast(map, @protocol(JavaUtilMap))] autorelease];
}

+ (id<JavaUtilSet>)unmodifiableSetWithJavaUtilSet:(id<JavaUtilSet>)set {
  if (set == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"set == null"] autorelease];
  }
  return [[[JavaUtilCollections_UnmodifiableSet alloc] initWithJavaUtilSet:(id<JavaUtilSet>) check_protocol_cast(set, @protocol(JavaUtilSet))] autorelease];
}

+ (id<JavaUtilSortedMap>)unmodifiableSortedMapWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)map {
  if (map == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"map == null"] autorelease];
  }
  return [[[JavaUtilCollections_UnmodifiableSortedMap alloc] initWithJavaUtilSortedMap:(id<JavaUtilSortedMap>) check_protocol_cast(map, @protocol(JavaUtilSortedMap))] autorelease];
}

+ (id<JavaUtilSortedSet>)unmodifiableSortedSetWithJavaUtilSortedSet:(id<JavaUtilSortedSet>)set {
  if (set == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"set == null"] autorelease];
  }
  return [[[JavaUtilCollections_UnmodifiableSortedSet alloc] initWithJavaUtilSortedSet:set] autorelease];
}

+ (int)frequencyWithJavaUtilCollection:(id<JavaUtilCollection>)c
                                withId:(id)o {
  if (c == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"c == null"] autorelease];
  }
  if ([((id<JavaUtilCollection>) nil_chk(c)) isEmpty]) {
    return 0;
  }
  int result = 0;
  id<JavaUtilIterator> itr = [c iterator];
  while ([((id<JavaUtilIterator>) nil_chk(itr)) hasNext]) {
    id e = [itr next];
    if (o == nil ? e == nil : [o isEqual:e]) {
      result++;
    }
  }
  return result;
}

+ (id<JavaUtilList>)emptyList {
  return JavaUtilCollections_EMPTY_LIST_;
}

+ (id<JavaUtilSet>)emptySet {
  return JavaUtilCollections_EMPTY_SET_;
}

+ (id<JavaUtilMap>)emptyMap {
  return JavaUtilCollections_EMPTY_MAP_;
}

+ (id<JavaUtilEnumeration>)emptyEnumeration {
  return (id<JavaUtilEnumeration>) check_protocol_cast(JavaUtilCollections_EMPTY_ENUMERATION_, @protocol(JavaUtilEnumeration));
}

+ (id<JavaUtilIterator>)emptyIterator {
  return (id<JavaUtilIterator>) check_protocol_cast(JavaUtilCollections_EMPTY_ITERATOR_, @protocol(JavaUtilIterator));
}

+ (id<JavaUtilListIterator>)emptyListIterator {
  return [((id<JavaUtilList>) nil_chk([JavaUtilCollections emptyList])) listIterator];
}

+ (id<JavaUtilCollection>)checkedCollectionWithJavaUtilCollection:(id<JavaUtilCollection>)c
                                                     withIOSClass:(IOSClass *)type {
  return [[[JavaUtilCollections_CheckedCollection alloc] initWithJavaUtilCollection:c withIOSClass:type] autorelease];
}

+ (id<JavaUtilMap>)checkedMapWithJavaUtilMap:(id<JavaUtilMap>)m
                                withIOSClass:(IOSClass *)keyType
                                withIOSClass:(IOSClass *)valueType {
  return [[[JavaUtilCollections_CheckedMap alloc] initWithJavaUtilMap:m withIOSClass:keyType withIOSClass:valueType] autorelease];
}

+ (id<JavaUtilList>)checkedListWithJavaUtilList:(id<JavaUtilList>)list
                                   withIOSClass:(IOSClass *)type {
  if ([(id) list conformsToProtocol: @protocol(JavaUtilRandomAccess)]) {
    return [[[JavaUtilCollections_CheckedRandomAccessList alloc] initWithJavaUtilList:list withIOSClass:type] autorelease];
  }
  return [[[JavaUtilCollections_CheckedList alloc] initWithJavaUtilList:list withIOSClass:type] autorelease];
}

+ (id<JavaUtilSet>)checkedSetWithJavaUtilSet:(id<JavaUtilSet>)s
                                withIOSClass:(IOSClass *)type {
  return [[[JavaUtilCollections_CheckedSet alloc] initWithJavaUtilSet:s withIOSClass:type] autorelease];
}

+ (id<JavaUtilSortedMap>)checkedSortedMapWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)m
                                                  withIOSClass:(IOSClass *)keyType
                                                  withIOSClass:(IOSClass *)valueType {
  return [[[JavaUtilCollections_CheckedSortedMap alloc] initWithJavaUtilSortedMap:m withIOSClass:keyType withIOSClass:valueType] autorelease];
}

+ (id<JavaUtilSortedSet>)checkedSortedSetWithJavaUtilSortedSet:(id<JavaUtilSortedSet>)s
                                                  withIOSClass:(IOSClass *)type {
  return [[[JavaUtilCollections_CheckedSortedSet alloc] initWithJavaUtilSortedSet:s withIOSClass:type] autorelease];
}

+ (BOOL)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)c
                   withNSObjectArray:(IOSObjectArray *)a {
  BOOL modified = NO;
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(a)) count]; i++) {
    modified |= [((id<JavaUtilCollection>) nil_chk(c)) addWithId:IOSObjectArray_Get(a, i)];
  }
  return modified;
}

+ (BOOL)disjointWithJavaUtilCollection:(id<JavaUtilCollection>)c1
                withJavaUtilCollection:(id<JavaUtilCollection>)c2 {
  if ((([(id) c1 conformsToProtocol: @protocol(JavaUtilSet)]) && !([(id) c2 conformsToProtocol: @protocol(JavaUtilSet)])) || ([((id<JavaUtilCollection>) nil_chk(c2)) size]) > [((id<JavaUtilCollection>) nil_chk(c1)) size]) {
    id<JavaUtilCollection> tmp = c1;
    c1 = c2;
    c2 = tmp;
  }
  id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk(c1)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    if ([((id<JavaUtilCollection>) nil_chk(c2)) containsWithId:[it next]]) {
      return NO;
    }
  }
  return YES;
}

+ (id)checkTypeWithId:(id)obj
         withIOSClass:(IOSClass *)type {
  if (obj != nil && ![((IOSClass *) nil_chk(type)) isInstance:obj]) {
    @throw [[[JavaLangClassCastException alloc] initWithNSString:[NSString stringWithFormat:@"Attempt to insert element of type %@ into collection of type %@", [obj getClass], type]] autorelease];
  }
  return obj;
}

+ (id<JavaUtilSet>)newSetFromMapWithJavaUtilMap:(id<JavaUtilMap>)map {
  if ([((id<JavaUtilMap>) nil_chk(map)) isEmpty]) {
    return [[[JavaUtilCollections_SetFromMap alloc] initWithJavaUtilMap:map] autorelease];
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"map not empty"] autorelease];
}

+ (id<JavaUtilQueue>)asLifoQueueWithJavaUtilDeque:(id<JavaUtilDeque>)deque {
  return [[[JavaUtilCollections_AsLIFOQueue alloc] initWithJavaUtilDeque:deque] autorelease];
}

+ (int)secondaryHashWithId:(id)key {
  return [JavaUtilCollections secondaryHashWithInt:[nil_chk(key) hash]];
}

+ (int)secondaryIdentityHashWithId:(id)key {
  return [JavaUtilCollections secondaryHashWithInt:[JavaLangSystem identityHashCodeWithId:key]];
}

+ (int)secondaryHashWithInt:(int)h {
  h += (h << 15) ^ (int) 0xffffcd7d;
  h ^= ((int) (((unsigned int) h) >> 10));
  h += (h << 3);
  h ^= ((int) (((unsigned int) h) >> 6));
  h += (h << 2) + (h << 14);
  return h ^ ((int) (((unsigned int) h) >> 16));
}

+ (int)roundUpToPowerOfTwoWithInt:(int)i {
  i--;
  i |= (int) (((unsigned int) i) >> 1);
  i |= (int) (((unsigned int) i) >> 2);
  i |= (int) (((unsigned int) i) >> 4);
  i |= (int) (((unsigned int) i) >> 8);
  i |= (int) (((unsigned int) i) >> 16);
  return i + 1;
}

+ (void)initialize {
  if (self == [JavaUtilCollections class]) {
    JreOperatorRetainedAssign(&JavaUtilCollections_EMPTY_ITERATOR_, nil, [[[JavaUtilCollections_$1 alloc] init] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilCollections_EMPTY_ENUMERATION_, nil, [[[JavaUtilCollections_$2 alloc] init] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilCollections_EMPTY_LIST_, nil, [[[JavaUtilCollections_EmptyList alloc] init] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilCollections_EMPTY_SET_, nil, [[[JavaUtilCollections_EmptySet alloc] init] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilCollections_EMPTY_MAP_, nil, [[[JavaUtilCollections_EmptyMap alloc] init] autorelease]);
  }
}

+ (IOSObjectArray *)__annotations_addAllWithJavaUtilCollection_withNSObjectArray_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangSafeVarargsImpl alloc] init] autorelease] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

@end
@implementation JavaUtilCollections_CopiesList

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithInt:(int)length
           withId:(id)object {
  if (self = [super init]) {
    if (length < 0) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"length < 0: %d", length]] autorelease];
    }
    n_ = length;
    JavaUtilCollections_CopiesList_set_element_(self, object);
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)containsWithId:(id)object {
  return element_ == nil ? object == nil : [element_ isEqual:object];
}

- (int)size {
  return n_;
}

- (id)getWithInt:(int)location {
  if (location >= 0 && location < n_) {
    return element_;
  }
  @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilCollections_CopiesList_set_element_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilCollections_CopiesList *)other {
  [super copyAllFieldsTo:other];
  JavaUtilCollections_CopiesList_set_element_(other, element_);
  other->n_ = n_;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:element_ name:@"element"]];
  return result;
}

@end
@implementation JavaUtilCollections_EmptyList

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (BOOL)containsWithId:(id)object {
  return NO;
}

- (int)size {
  return 0;
}

- (id)getWithInt:(int)location {
  @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

@end
@implementation JavaUtilCollections_EmptySet

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (BOOL)containsWithId:(id)object {
  return NO;
}

- (int)size {
  return 0;
}

- (id<JavaUtilIterator>)iterator {
  return [JavaUtilCollections EMPTY_ITERATOR];
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

@end
@implementation JavaUtilCollections_EmptyMap

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (BOOL)containsKeyWithId:(id)key {
  return NO;
}

- (BOOL)containsValueWithId:(id)value {
  return NO;
}

- (id<JavaUtilSet>)entrySet {
  return [JavaUtilCollections EMPTY_SET];
}

- (id)getWithId:(id)key {
  return nil;
}

- (id<JavaUtilSet>)keySet {
  return [JavaUtilCollections EMPTY_SET];
}

- (id<JavaUtilCollection>)values {
  return [JavaUtilCollections EMPTY_LIST];
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

@end
@implementation JavaUtilCollections_ReverseComparator

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilCollections_ReverseComparator_INSTANCE_ name:@"JavaUtilCollections_ReverseComparator_INSTANCE_"]];
  return result;
}

static JavaUtilCollections_ReverseComparator * JavaUtilCollections_ReverseComparator_INSTANCE_;

+ (JavaUtilCollections_ReverseComparator *)INSTANCE {
  return JavaUtilCollections_ReverseComparator_INSTANCE_;
}

- (int)compareWithId:(id)o1
              withId:(id)o2 {
  id<JavaLangComparable> c2 = (id<JavaLangComparable>) check_protocol_cast(o2, @protocol(JavaLangComparable));
  return [((id<JavaLangComparable>) nil_chk(c2)) compareToWithId:o1];
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

+ (void)initialize {
  if (self == [JavaUtilCollections_ReverseComparator class]) {
    JreOperatorRetainedAssign(&JavaUtilCollections_ReverseComparator_INSTANCE_, nil, [[[JavaUtilCollections_ReverseComparator alloc] init] autorelease]);
  }
}

@end
@implementation JavaUtilCollections_ReverseComparator2

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  if (self = [super init]) {
    JavaUtilCollections_ReverseComparator2_set_cmp_(self, comparator);
    JreMemDebugAdd(self);
  }
  return self;
}

- (int)compareWithId:(id)o1
              withId:(id)o2 {
  return [((id<JavaUtilComparator>) nil_chk(cmp_)) compareWithId:o2 withId:o1];
}

- (BOOL)isEqual:(id)o {
  return [o isKindOfClass:[JavaUtilCollections_ReverseComparator2 class]] && [((id<JavaUtilComparator>) nil_chk(((JavaUtilCollections_ReverseComparator2 *) nil_chk(o))->cmp_)) isEqual:cmp_];
}

- (NSUInteger)hash {
  return ~[((id<JavaUtilComparator>) nil_chk(cmp_)) hash];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilCollections_ReverseComparator2_set_cmp_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilCollections_ReverseComparator2 *)other {
  [super copyAllFieldsTo:other];
  JavaUtilCollections_ReverseComparator2_set_cmp_(other, cmp_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:cmp_ name:@"cmp"]];
  return result;
}

@end
@implementation JavaUtilCollections_SingletonSet

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithId:(id)object {
  if (self = [super init]) {
    JavaUtilCollections_SingletonSet_set_element_(self, object);
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)containsWithId:(id)object {
  return element_ == nil ? object == nil : [element_ isEqual:object];
}

- (int)size {
  return 1;
}

- (id<JavaUtilIterator>)iterator {
  return [[[JavaUtilCollections_SingletonSet_$1 alloc] initWithJavaUtilCollections_SingletonSet:self] autorelease];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilCollections_SingletonSet_set_element_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilCollections_SingletonSet *)other {
  [super copyAllFieldsTo:other];
  JavaUtilCollections_SingletonSet_set_element_(other, element_);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:element_ name:@"element"]];
  return result;
}

@end
@implementation JavaUtilCollections_SingletonSet_$1

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (BOOL)hasNext {
  return hasNext__;
}

- (id)next {
  if (hasNext__) {
    hasNext__ = NO;
    return this$0_->element_;
  }
  @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
}

- (void)remove {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (id)initWithJavaUtilCollections_SingletonSet:(JavaUtilCollections_SingletonSet *)outer$ {
  JavaUtilCollections_SingletonSet_$1_set_this$0_(self, outer$);
  if (self = [super init]) {
    hasNext__ = YES;
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilCollections_SingletonSet_$1_set_this$0_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilCollections_SingletonSet_$1 *)other {
  [super copyAllFieldsTo:other];
  other->hasNext__ = hasNext__;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:this$0_ name:@"this$0"]];
  return result;
}

@end
@implementation JavaUtilCollections_SingletonList

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithId:(id)object {
  if (self = [super init]) {
    JavaUtilCollections_SingletonList_set_element_(self, object);
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)containsWithId:(id)object {
  return element_ == nil ? object == nil : [element_ isEqual:object];
}

- (id)getWithInt:(int)location {
  if (location == 0) {
    return element_;
  }
  @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
}

- (int)size {
  return 1;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilCollections_SingletonList_set_element_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilCollections_SingletonList *)other {
  [super copyAllFieldsTo:other];
  JavaUtilCollections_SingletonList_set_element_(other, element_);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:element_ name:@"element"]];
  return result;
}

@end
@implementation JavaUtilCollections_SingletonMap

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithId:(id)key
          withId:(id)value {
  if (self = [super init]) {
    JavaUtilCollections_SingletonMap_set_k_(self, key);
    JavaUtilCollections_SingletonMap_set_v_(self, value);
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)containsKeyWithId:(id)key {
  return k_ == nil ? key == nil : [k_ isEqual:key];
}

- (BOOL)containsValueWithId:(id)value {
  return v_ == nil ? value == nil : [v_ isEqual:value];
}

- (id)getWithId:(id)key {
  if ([self containsKeyWithId:key]) {
    return v_;
  }
  return nil;
}

- (int)size {
  return 1;
}

- (id<JavaUtilSet>)entrySet {
  return [[[JavaUtilCollections_SingletonMap_$1 alloc] initWithJavaUtilCollections_SingletonMap:self] autorelease];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilCollections_SingletonMap_set_v_(self, nil);
  JavaUtilCollections_SingletonMap_set_k_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilCollections_SingletonMap *)other {
  [super copyAllFieldsTo:other];
  JavaUtilCollections_SingletonMap_set_k_(other, k_);
  JavaUtilCollections_SingletonMap_set_v_(other, v_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:k_ name:@"k"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:v_ name:@"v"]];
  return result;
}

@end
@implementation JavaUtilCollections_SingletonMap_$1

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (BOOL)containsWithId:(id)object {
  if ([object conformsToProtocol: @protocol(JavaUtilMap_Entry)]) {
    id<JavaUtilMap_Entry> entry = (id<JavaUtilMap_Entry>) check_protocol_cast(object, @protocol(JavaUtilMap_Entry));
    return [this$0_ containsKeyWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey]] && [this$0_ containsValueWithId:[entry getValue]];
  }
  return NO;
}

- (int)size {
  return 1;
}

- (id<JavaUtilIterator>)iterator {
  return [[[JavaUtilCollections_SingletonMap_$1_$1 alloc] initWithJavaUtilCollections_SingletonMap_$1:self] autorelease];
}

- (id)initWithJavaUtilCollections_SingletonMap:(JavaUtilCollections_SingletonMap *)outer$ {
  JavaUtilCollections_SingletonMap_$1_set_this$0_(self, outer$);
  return JreMemDebugAdd([super init]);
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilCollections_SingletonMap_$1_set_this$0_(self, nil);
  [super dealloc];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:this$0_ name:@"this$0"]];
  return result;
}

@end
@implementation JavaUtilCollections_SingletonMap_$1_$1

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (BOOL)hasNext {
  return hasNext__;
}

- (id<JavaUtilMap_Entry>)next {
  if (!hasNext__) {
    @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
  }
  hasNext__ = NO;
  return [[[JavaUtilCollections_SingletonMap_$1_$1_$1 alloc] initWithId:this$0_->this$0_->k_ withId:this$0_->this$0_->v_] autorelease];
}

- (void)remove {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (id)initWithJavaUtilCollections_SingletonMap_$1:(JavaUtilCollections_SingletonMap_$1 *)outer$ {
  JavaUtilCollections_SingletonMap_$1_$1_set_this$0_(self, outer$);
  if (self = [super init]) {
    hasNext__ = YES;
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilCollections_SingletonMap_$1_$1_set_this$0_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilCollections_SingletonMap_$1_$1 *)other {
  [super copyAllFieldsTo:other];
  other->hasNext__ = hasNext__;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:this$0_ name:@"this$0"]];
  return result;
}

@end
@implementation JavaUtilCollections_SingletonMap_$1_$1_$1

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)setValueWithId:(id)value {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (id)initWithId:(id)arg$0
          withId:(id)arg$1 {
  return JreMemDebugAdd([super initWithId:arg$0 withId:arg$1]);
}

@end
@implementation JavaUtilCollections_SynchronizedCollection

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  if (self = [super init]) {
    JavaUtilCollections_SynchronizedCollection_set_c_(self, collection);
    JavaUtilCollections_SynchronizedCollection_set_mutex_(self, self);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection
                          withId:(id)mutex {
  if (self = [super init]) {
    JavaUtilCollections_SynchronizedCollection_set_c_(self, collection);
    JavaUtilCollections_SynchronizedCollection_set_mutex_(self, mutex);
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)addWithId:(id)object {
  @synchronized (mutex_) {
    return [((id<JavaUtilCollection>) nil_chk(c_)) addWithId:object];
  }
}

- (BOOL)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @synchronized (mutex_) {
    return [((id<JavaUtilCollection>) nil_chk(c_)) addAllWithJavaUtilCollection:collection];
  }
}

- (void)clear {
  @synchronized (mutex_) {
    [((id<JavaUtilCollection>) nil_chk(c_)) clear];
  }
}

- (BOOL)containsWithId:(id)object {
  @synchronized (mutex_) {
    return [((id<JavaUtilCollection>) nil_chk(c_)) containsWithId:object];
  }
}

- (BOOL)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @synchronized (mutex_) {
    return [((id<JavaUtilCollection>) nil_chk(c_)) containsAllWithJavaUtilCollection:collection];
  }
}

- (BOOL)isEmpty {
  @synchronized (mutex_) {
    return [((id<JavaUtilCollection>) nil_chk(c_)) isEmpty];
  }
}

- (id<JavaUtilIterator>)iterator {
  @synchronized (mutex_) {
    return [((id<JavaUtilCollection>) nil_chk(c_)) iterator];
  }
}

- (BOOL)removeWithId:(id)object {
  @synchronized (mutex_) {
    return [((id<JavaUtilCollection>) nil_chk(c_)) removeWithId:object];
  }
}

- (BOOL)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @synchronized (mutex_) {
    return [((id<JavaUtilCollection>) nil_chk(c_)) removeAllWithJavaUtilCollection:collection];
  }
}

- (BOOL)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @synchronized (mutex_) {
    return [((id<JavaUtilCollection>) nil_chk(c_)) retainAllWithJavaUtilCollection:collection];
  }
}

- (int)size {
  @synchronized (mutex_) {
    return [((id<JavaUtilCollection>) nil_chk(c_)) size];
  }
}

- (IOSObjectArray *)toArray {
  @synchronized (mutex_) {
    return [((id<JavaUtilCollection>) nil_chk(c_)) toArray];
  }
}

- (NSString *)description {
  @synchronized (mutex_) {
    return [((id<JavaUtilCollection>) nil_chk(c_)) description];
  }
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)array {
  @synchronized (mutex_) {
    return [((id<JavaUtilCollection>) nil_chk(c_)) toArrayWithNSObjectArray:array];
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilCollections_SynchronizedCollection_set_mutex_(self, nil);
  JavaUtilCollections_SynchronizedCollection_set_c_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilCollections_SynchronizedCollection *)other {
  [super copyAllFieldsTo:other];
  JavaUtilCollections_SynchronizedCollection_set_c_(other, c_);
  JavaUtilCollections_SynchronizedCollection_set_mutex_(other, mutex_);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:c_ name:@"c"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:mutex_ name:@"mutex"]];
  return result;
}

@end
@implementation JavaUtilCollections_SynchronizedList

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilList:(id<JavaUtilList>)l {
  if (self = [super initWithJavaUtilCollection:l]) {
    JavaUtilCollections_SynchronizedList_set_list_(self, l);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaUtilList:(id<JavaUtilList>)l
                    withId:(id)mutex {
  if (self = [super initWithJavaUtilCollection:l withId:mutex]) {
    JavaUtilCollections_SynchronizedList_set_list_(self, l);
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)addWithInt:(int)location
            withId:(id)object {
  @synchronized (mutex_) {
    [((id<JavaUtilList>) nil_chk(list_)) addWithInt:location withId:object];
  }
}

- (BOOL)addAllWithInt:(int)location
withJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @synchronized (mutex_) {
    return [((id<JavaUtilList>) nil_chk(list_)) addAllWithInt:location withJavaUtilCollection:collection];
  }
}

- (BOOL)isEqual:(id)object {
  @synchronized (mutex_) {
    return [((id<JavaUtilList>) nil_chk(list_)) isEqual:object];
  }
}

- (id)getWithInt:(int)location {
  @synchronized (mutex_) {
    return [((id<JavaUtilList>) nil_chk(list_)) getWithInt:location];
  }
}

- (NSUInteger)hash {
  @synchronized (mutex_) {
    return [((id<JavaUtilList>) nil_chk(list_)) hash];
  }
}

- (int)indexOfWithId:(id)object {
  int size;
  IOSObjectArray *array;
  @synchronized (mutex_) {
    size = [((id<JavaUtilList>) nil_chk(list_)) size];
    array = [IOSObjectArray arrayWithLength:size type:[IOSClass classWithClass:[NSObject class]]];
    [list_ toArrayWithNSObjectArray:array];
  }
  if (object != nil) {
    for (int i = 0; i < size; i++) {
      if ([object isEqual:IOSObjectArray_Get(array, i)]) {
        return i;
      }
    }
  }
  else {
    for (int i = 0; i < size; i++) {
      if (IOSObjectArray_Get(array, i) == nil) {
        return i;
      }
    }
  }
  return -1;
}

- (int)lastIndexOfWithId:(id)object {
  int size;
  IOSObjectArray *array;
  @synchronized (mutex_) {
    size = [((id<JavaUtilList>) nil_chk(list_)) size];
    array = [IOSObjectArray arrayWithLength:size type:[IOSClass classWithClass:[NSObject class]]];
    [list_ toArrayWithNSObjectArray:array];
  }
  if (object != nil) {
    for (int i = size - 1; i >= 0; i--) {
      if ([object isEqual:IOSObjectArray_Get(array, i)]) {
        return i;
      }
    }
  }
  else {
    for (int i = size - 1; i >= 0; i--) {
      if (IOSObjectArray_Get(array, i) == nil) {
        return i;
      }
    }
  }
  return -1;
}

- (id<JavaUtilListIterator>)listIterator {
  @synchronized (mutex_) {
    return [((id<JavaUtilList>) nil_chk(list_)) listIterator];
  }
}

- (id<JavaUtilListIterator>)listIteratorWithInt:(int)location {
  @synchronized (mutex_) {
    return [((id<JavaUtilList>) nil_chk(list_)) listIteratorWithInt:location];
  }
}

- (id)removeWithInt:(int)location {
  @synchronized (mutex_) {
    return [((id<JavaUtilList>) nil_chk(list_)) removeWithInt:location];
  }
}

- (id)setWithInt:(int)location
          withId:(id)object {
  @synchronized (mutex_) {
    return [((id<JavaUtilList>) nil_chk(list_)) setWithInt:location withId:object];
  }
}

- (id<JavaUtilList>)subListWithInt:(int)start
                           withInt:(int)end {
  @synchronized (mutex_) {
    return [[[JavaUtilCollections_SynchronizedList alloc] initWithJavaUtilList:[((id<JavaUtilList>) nil_chk(list_)) subListWithInt:start withInt:end] withId:mutex_] autorelease];
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilCollections_SynchronizedList_set_list_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilCollections_SynchronizedList *)other {
  [super copyAllFieldsTo:other];
  JavaUtilCollections_SynchronizedList_set_list_(other, list_);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:list_ name:@"list"]];
  return result;
}

@end
@implementation JavaUtilCollections_SynchronizedRandomAccessList

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilList:(id<JavaUtilList>)l {
  return JreMemDebugAdd([super initWithJavaUtilList:l]);
}

- (id)initWithJavaUtilList:(id<JavaUtilList>)l
                    withId:(id)mutex {
  return JreMemDebugAdd([super initWithJavaUtilList:l withId:mutex]);
}

- (id<JavaUtilList>)subListWithInt:(int)start
                           withInt:(int)end {
  @synchronized (mutex_) {
    return [[[JavaUtilCollections_SynchronizedRandomAccessList alloc] initWithJavaUtilList:[((id<JavaUtilList>) nil_chk(list_)) subListWithInt:start withInt:end] withId:mutex_] autorelease];
  }
}

- (id)writeReplace {
  return [[[JavaUtilCollections_SynchronizedList alloc] initWithJavaUtilList:list_] autorelease];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

@end
@implementation JavaUtilCollections_SynchronizedMap

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilMap:(id<JavaUtilMap>)map {
  if (self = [super init]) {
    JavaUtilCollections_SynchronizedMap_set_m_(self, map);
    JavaUtilCollections_SynchronizedMap_set_mutex_(self, self);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaUtilMap:(id<JavaUtilMap>)map
                   withId:(id)mutex {
  if (self = [super init]) {
    JavaUtilCollections_SynchronizedMap_set_m_(self, map);
    JavaUtilCollections_SynchronizedMap_set_mutex_(self, mutex);
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)clear {
  @synchronized (mutex_) {
    [((id<JavaUtilMap>) nil_chk(m_)) clear];
  }
}

- (BOOL)containsKeyWithId:(id)key {
  @synchronized (mutex_) {
    return [((id<JavaUtilMap>) nil_chk(m_)) containsKeyWithId:key];
  }
}

- (BOOL)containsValueWithId:(id)value {
  @synchronized (mutex_) {
    return [((id<JavaUtilMap>) nil_chk(m_)) containsValueWithId:value];
  }
}

- (id<JavaUtilSet>)entrySet {
  @synchronized (mutex_) {
    return [[[JavaUtilCollections_SynchronizedSet alloc] initWithJavaUtilSet:[((id<JavaUtilMap>) nil_chk(m_)) entrySet] withId:mutex_] autorelease];
  }
}

- (BOOL)isEqual:(id)object {
  @synchronized (mutex_) {
    return [((id<JavaUtilMap>) nil_chk(m_)) isEqual:object];
  }
}

- (id)getWithId:(id)key {
  @synchronized (mutex_) {
    return [((id<JavaUtilMap>) nil_chk(m_)) getWithId:key];
  }
}

- (NSUInteger)hash {
  @synchronized (mutex_) {
    return [((id<JavaUtilMap>) nil_chk(m_)) hash];
  }
}

- (BOOL)isEmpty {
  @synchronized (mutex_) {
    return [((id<JavaUtilMap>) nil_chk(m_)) isEmpty];
  }
}

- (id<JavaUtilSet>)keySet {
  @synchronized (mutex_) {
    return [[[JavaUtilCollections_SynchronizedSet alloc] initWithJavaUtilSet:[((id<JavaUtilMap>) nil_chk(m_)) keySet] withId:mutex_] autorelease];
  }
}

- (id)putWithId:(id)key
         withId:(id)value {
  @synchronized (mutex_) {
    return [((id<JavaUtilMap>) nil_chk(m_)) putWithId:key withId:value];
  }
}

- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)map {
  @synchronized (mutex_) {
    [((id<JavaUtilMap>) nil_chk(m_)) putAllWithJavaUtilMap:map];
  }
}

- (id)removeWithId:(id)key {
  @synchronized (mutex_) {
    return [((id<JavaUtilMap>) nil_chk(m_)) removeWithId:key];
  }
}

- (int)size {
  @synchronized (mutex_) {
    return [((id<JavaUtilMap>) nil_chk(m_)) size];
  }
}

- (id<JavaUtilCollection>)values {
  @synchronized (mutex_) {
    return [[[JavaUtilCollections_SynchronizedCollection alloc] initWithJavaUtilCollection:[((id<JavaUtilMap>) nil_chk(m_)) values] withId:mutex_] autorelease];
  }
}

- (NSString *)description {
  @synchronized (mutex_) {
    return [((id<JavaUtilMap>) nil_chk(m_)) description];
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilCollections_SynchronizedMap_set_mutex_(self, nil);
  JavaUtilCollections_SynchronizedMap_set_m_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilCollections_SynchronizedMap *)other {
  [super copyAllFieldsTo:other];
  JavaUtilCollections_SynchronizedMap_set_m_(other, m_);
  JavaUtilCollections_SynchronizedMap_set_mutex_(other, mutex_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:m_ name:@"m"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:mutex_ name:@"mutex"]];
  return result;
}

@end
@implementation JavaUtilCollections_SynchronizedSortedMap

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)map {
  if (self = [super initWithJavaUtilMap:map]) {
    JavaUtilCollections_SynchronizedSortedMap_set_sm_(self, map);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)map
                         withId:(id)mutex {
  if (self = [super initWithJavaUtilMap:map withId:mutex]) {
    JavaUtilCollections_SynchronizedSortedMap_set_sm_(self, map);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id<JavaUtilComparator>)comparator {
  @synchronized (mutex_) {
    return [((id<JavaUtilSortedMap>) nil_chk(sm_)) comparator];
  }
}

- (id)firstKey {
  @synchronized (mutex_) {
    return [((id<JavaUtilSortedMap>) nil_chk(sm_)) firstKey];
  }
}

- (id<JavaUtilSortedMap>)headMapWithId:(id)endKey {
  @synchronized (mutex_) {
    return [[[JavaUtilCollections_SynchronizedSortedMap alloc] initWithJavaUtilSortedMap:[((id<JavaUtilSortedMap>) nil_chk(sm_)) headMapWithId:endKey] withId:mutex_] autorelease];
  }
}

- (id)lastKey {
  @synchronized (mutex_) {
    return [((id<JavaUtilSortedMap>) nil_chk(sm_)) lastKey];
  }
}

- (id<JavaUtilSortedMap>)subMapWithId:(id)startKey
                               withId:(id)endKey {
  @synchronized (mutex_) {
    return [[[JavaUtilCollections_SynchronizedSortedMap alloc] initWithJavaUtilSortedMap:[((id<JavaUtilSortedMap>) nil_chk(sm_)) subMapWithId:startKey withId:endKey] withId:mutex_] autorelease];
  }
}

- (id<JavaUtilSortedMap>)tailMapWithId:(id)startKey {
  @synchronized (mutex_) {
    return [[[JavaUtilCollections_SynchronizedSortedMap alloc] initWithJavaUtilSortedMap:[((id<JavaUtilSortedMap>) nil_chk(sm_)) tailMapWithId:startKey] withId:mutex_] autorelease];
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilCollections_SynchronizedSortedMap_set_sm_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilCollections_SynchronizedSortedMap *)other {
  [super copyAllFieldsTo:other];
  JavaUtilCollections_SynchronizedSortedMap_set_sm_(other, sm_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:sm_ name:@"sm"]];
  return result;
}

@end
@implementation JavaUtilCollections_SynchronizedSet

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilSet:(id<JavaUtilSet>)set {
  return JreMemDebugAdd([super initWithJavaUtilCollection:set]);
}

- (id)initWithJavaUtilSet:(id<JavaUtilSet>)set
                   withId:(id)mutex {
  return JreMemDebugAdd([super initWithJavaUtilCollection:set withId:mutex]);
}

- (BOOL)isEqual:(id)object {
  @synchronized (mutex_) {
    return [((id<JavaUtilCollection>) nil_chk(c_)) isEqual:object];
  }
}

- (NSUInteger)hash {
  @synchronized (mutex_) {
    return [((id<JavaUtilCollection>) nil_chk(c_)) hash];
  }
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

@end
@implementation JavaUtilCollections_SynchronizedSortedSet

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilSortedSet:(id<JavaUtilSortedSet>)set {
  if (self = [super initWithJavaUtilSet:set]) {
    JavaUtilCollections_SynchronizedSortedSet_set_ss_(self, set);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaUtilSortedSet:(id<JavaUtilSortedSet>)set
                         withId:(id)mutex {
  if (self = [super initWithJavaUtilSet:set withId:mutex]) {
    JavaUtilCollections_SynchronizedSortedSet_set_ss_(self, set);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id<JavaUtilComparator>)comparator {
  @synchronized (mutex_) {
    return [((id<JavaUtilSortedSet>) nil_chk(ss_)) comparator];
  }
}

- (id)first {
  @synchronized (mutex_) {
    return [((id<JavaUtilSortedSet>) nil_chk(ss_)) first];
  }
}

- (id<JavaUtilSortedSet>)headSetWithId:(id)end {
  @synchronized (mutex_) {
    return [[[JavaUtilCollections_SynchronizedSortedSet alloc] initWithJavaUtilSortedSet:[((id<JavaUtilSortedSet>) nil_chk(ss_)) headSetWithId:end] withId:mutex_] autorelease];
  }
}

- (id)last {
  @synchronized (mutex_) {
    return [((id<JavaUtilSortedSet>) nil_chk(ss_)) last];
  }
}

- (id<JavaUtilSortedSet>)subSetWithId:(id)start
                               withId:(id)end {
  @synchronized (mutex_) {
    return [[[JavaUtilCollections_SynchronizedSortedSet alloc] initWithJavaUtilSortedSet:[((id<JavaUtilSortedSet>) nil_chk(ss_)) subSetWithId:start withId:end] withId:mutex_] autorelease];
  }
}

- (id<JavaUtilSortedSet>)tailSetWithId:(id)start {
  @synchronized (mutex_) {
    return [[[JavaUtilCollections_SynchronizedSortedSet alloc] initWithJavaUtilSortedSet:[((id<JavaUtilSortedSet>) nil_chk(ss_)) tailSetWithId:start] withId:mutex_] autorelease];
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilCollections_SynchronizedSortedSet_set_ss_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilCollections_SynchronizedSortedSet *)other {
  [super copyAllFieldsTo:other];
  JavaUtilCollections_SynchronizedSortedSet_set_ss_(other, ss_);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:ss_ name:@"ss"]];
  return result;
}

@end
@implementation JavaUtilCollections_UnmodifiableCollection_$1

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (BOOL)hasNext {
  return [((id<JavaUtilIterator>) nil_chk(iterator_)) hasNext];
}

- (id)next {
  return [((id<JavaUtilIterator>) nil_chk(iterator_)) next];
}

- (void)remove {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (id)initWithJavaUtilCollections_UnmodifiableCollection:(JavaUtilCollections_UnmodifiableCollection *)outer$ {
  if (self = [super init]) {
    JavaUtilCollections_UnmodifiableCollection_$1_set_iterator_(self, [((id<JavaUtilCollection>) nil_chk(outer$->c_)) iterator]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilCollections_UnmodifiableCollection_$1_set_iterator_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilCollections_UnmodifiableCollection_$1 *)other {
  [super copyAllFieldsTo:other];
  JavaUtilCollections_UnmodifiableCollection_$1_set_iterator_(other, iterator_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:iterator_ name:@"iterator"]];
  return result;
}

@end
@implementation JavaUtilCollections_UnmodifiableCollection

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  if (self = [super init]) {
    JavaUtilCollections_UnmodifiableCollection_set_c_(self, collection);
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)addWithId:(id)object {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (BOOL)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (void)clear {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (BOOL)containsWithId:(id)object {
  return [((id<JavaUtilCollection>) nil_chk(c_)) containsWithId:object];
}

- (BOOL)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  return [((id<JavaUtilCollection>) nil_chk(c_)) containsAllWithJavaUtilCollection:collection];
}

- (BOOL)isEmpty {
  return [((id<JavaUtilCollection>) nil_chk(c_)) isEmpty];
}

- (id<JavaUtilIterator>)iterator {
  return [[[JavaUtilCollections_UnmodifiableCollection_$1 alloc] initWithJavaUtilCollections_UnmodifiableCollection:self] autorelease];
}

- (BOOL)removeWithId:(id)object {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (BOOL)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (BOOL)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (int)size {
  return [((id<JavaUtilCollection>) nil_chk(c_)) size];
}

- (IOSObjectArray *)toArray {
  return [((id<JavaUtilCollection>) nil_chk(c_)) toArray];
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)array {
  return [((id<JavaUtilCollection>) nil_chk(c_)) toArrayWithNSObjectArray:array];
}

- (NSString *)description {
  return [((id<JavaUtilCollection>) nil_chk(c_)) description];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilCollections_UnmodifiableCollection_set_c_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilCollections_UnmodifiableCollection *)other {
  [super copyAllFieldsTo:other];
  JavaUtilCollections_UnmodifiableCollection_set_c_(other, c_);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:c_ name:@"c"]];
  return result;
}

@end
@implementation JavaUtilCollections_UnmodifiableList

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilList:(id<JavaUtilList>)l {
  if (self = [super initWithJavaUtilCollection:l]) {
    JavaUtilCollections_UnmodifiableList_set_list_(self, l);
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)addWithInt:(int)location
            withId:(id)object {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (BOOL)addAllWithInt:(int)location
withJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (BOOL)isEqual:(id)object {
  return [((id<JavaUtilList>) nil_chk(list_)) isEqual:object];
}

- (id)getWithInt:(int)location {
  return [((id<JavaUtilList>) nil_chk(list_)) getWithInt:location];
}

- (NSUInteger)hash {
  return [((id<JavaUtilList>) nil_chk(list_)) hash];
}

- (int)indexOfWithId:(id)object {
  return [((id<JavaUtilList>) nil_chk(list_)) indexOfWithId:object];
}

- (int)lastIndexOfWithId:(id)object {
  return [((id<JavaUtilList>) nil_chk(list_)) lastIndexOfWithId:object];
}

- (id<JavaUtilListIterator>)listIterator {
  return [self listIteratorWithInt:0];
}

- (id<JavaUtilListIterator>)listIteratorWithInt:(int)location {
  return [[[JavaUtilCollections_UnmodifiableList_$1 alloc] initWithJavaUtilCollections_UnmodifiableList:self withInt:location] autorelease];
}

- (id)removeWithInt:(int)location {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (id)setWithInt:(int)location
          withId:(id)object {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (id<JavaUtilList>)subListWithInt:(int)start
                           withInt:(int)end {
  return [[[JavaUtilCollections_UnmodifiableList alloc] initWithJavaUtilList:[((id<JavaUtilList>) nil_chk(list_)) subListWithInt:start withInt:end]] autorelease];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilCollections_UnmodifiableList_set_list_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilCollections_UnmodifiableList *)other {
  [super copyAllFieldsTo:other];
  JavaUtilCollections_UnmodifiableList_set_list_(other, list_);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:list_ name:@"list"]];
  return result;
}

@end
@implementation JavaUtilCollections_UnmodifiableRandomAccessList

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilList:(id<JavaUtilList>)l {
  return JreMemDebugAdd([super initWithJavaUtilList:l]);
}

- (id<JavaUtilList>)subListWithInt:(int)start
                           withInt:(int)end {
  return [[[JavaUtilCollections_UnmodifiableRandomAccessList alloc] initWithJavaUtilList:[((id<JavaUtilList>) nil_chk(list_)) subListWithInt:start withInt:end]] autorelease];
}

- (id)writeReplace {
  return [[[JavaUtilCollections_UnmodifiableList alloc] initWithJavaUtilList:list_] autorelease];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

@end
@implementation JavaUtilCollections_UnmodifiableList_$1

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (void)addWithId:(id)object {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (BOOL)hasNext {
  return [((id<JavaUtilListIterator>) nil_chk(iterator_)) hasNext];
}

- (BOOL)hasPrevious {
  return [((id<JavaUtilListIterator>) nil_chk(iterator_)) hasPrevious];
}

- (id)next {
  return [((id<JavaUtilListIterator>) nil_chk(iterator_)) next];
}

- (int)nextIndex {
  return [((id<JavaUtilListIterator>) nil_chk(iterator_)) nextIndex];
}

- (id)previous {
  return [((id<JavaUtilListIterator>) nil_chk(iterator_)) previous];
}

- (int)previousIndex {
  return [((id<JavaUtilListIterator>) nil_chk(iterator_)) previousIndex];
}

- (void)remove {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (void)setWithId:(id)object {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (id)initWithJavaUtilCollections_UnmodifiableList:(JavaUtilCollections_UnmodifiableList *)outer$
                                           withInt:(int)capture$0 {
  val$location_ = capture$0;
  if (self = [super init]) {
    JavaUtilCollections_UnmodifiableList_$1_set_iterator_(self, [((id<JavaUtilList>) nil_chk(outer$->list_)) listIteratorWithInt:val$location_]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilCollections_UnmodifiableList_$1_set_iterator_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilCollections_UnmodifiableList_$1 *)other {
  [super copyAllFieldsTo:other];
  JavaUtilCollections_UnmodifiableList_$1_set_iterator_(other, iterator_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:iterator_ name:@"iterator"]];
  return result;
}

@end
@implementation JavaUtilCollections_UnmodifiableSet

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilSet:(id<JavaUtilSet>)set {
  return JreMemDebugAdd([super initWithJavaUtilCollection:set]);
}

- (BOOL)isEqual:(id)object {
  return [((id<JavaUtilCollection>) nil_chk(c_)) isEqual:object];
}

- (NSUInteger)hash {
  return [((id<JavaUtilCollection>) nil_chk(c_)) hash];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

@end
@implementation JavaUtilCollections_UnmodifiableMap_UnmodifiableEntrySet

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilSet:(id<JavaUtilSet>)set {
  return JreMemDebugAdd([super initWithJavaUtilSet:set]);
}

- (id<JavaUtilIterator>)iterator {
  return [[[JavaUtilCollections_UnmodifiableMap_UnmodifiableEntrySet_$1 alloc] initWithJavaUtilCollections_UnmodifiableMap_UnmodifiableEntrySet:self] autorelease];
}

- (IOSObjectArray *)toArray {
  int length = [((id<JavaUtilCollection>) nil_chk(c_)) size];
  IOSObjectArray *result = [IOSObjectArray arrayWithLength:length type:[IOSClass classWithClass:[NSObject class]]];
  id<JavaUtilIterator> it = [self iterator];
  for (int i = length; --i >= 0; ) {
    IOSObjectArray_Set(result, i, [((id<JavaUtilIterator>) nil_chk(it)) next]);
  }
  return result;
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)contents {
  int size = [((id<JavaUtilCollection>) nil_chk(c_)) size], index = 0;
  id<JavaUtilIterator> it = [self iterator];
  if (size > (int) [((IOSObjectArray *) nil_chk(contents)) count]) {
    IOSClass *ct = [[contents getClass] getComponentType];
    contents = (IOSObjectArray *) check_class_cast([JavaLangReflectArray newInstanceWithIOSClass:ct withInt:size], [IOSObjectArray class]);
  }
  while (index < size) {
    IOSObjectArray_Set(nil_chk(contents), index++, (id) [((id<JavaUtilIterator>) nil_chk(it)) next]);
  }
  if (index < (int) [((IOSObjectArray *) nil_chk(contents)) count]) {
    IOSObjectArray_Set(contents, index, nil);
  }
  return contents;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

@end
@implementation JavaUtilCollections_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableMapEntry

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilMap_Entry:(id<JavaUtilMap_Entry>)entry {
  if (self = [super init]) {
    JavaUtilCollections_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableMapEntry_set_mapEntry_(self, entry);
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)isEqual:(id)object {
  return [((id<JavaUtilMap_Entry>) nil_chk(mapEntry_)) isEqual:object];
}

- (id)getKey {
  return [((id<JavaUtilMap_Entry>) nil_chk(mapEntry_)) getKey];
}

- (id)getValue {
  return [((id<JavaUtilMap_Entry>) nil_chk(mapEntry_)) getValue];
}

- (NSUInteger)hash {
  return [((id<JavaUtilMap_Entry>) nil_chk(mapEntry_)) hash];
}

- (id)setValueWithId:(id)object {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (NSString *)description {
  return [((id<JavaUtilMap_Entry>) nil_chk(mapEntry_)) description];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilCollections_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableMapEntry_set_mapEntry_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilCollections_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableMapEntry *)other {
  [super copyAllFieldsTo:other];
  JavaUtilCollections_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableMapEntry_set_mapEntry_(other, mapEntry_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:mapEntry_ name:@"mapEntry"]];
  return result;
}

@end
@implementation JavaUtilCollections_UnmodifiableMap_UnmodifiableEntrySet_$1

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (BOOL)hasNext {
  return [((id<JavaUtilIterator>) nil_chk(iterator_)) hasNext];
}

- (id<JavaUtilMap_Entry>)next {
  return [[[JavaUtilCollections_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableMapEntry alloc] initWithJavaUtilMap_Entry:[((id<JavaUtilIterator>) nil_chk(iterator_)) next]] autorelease];
}

- (void)remove {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (id)initWithJavaUtilCollections_UnmodifiableMap_UnmodifiableEntrySet:(JavaUtilCollections_UnmodifiableMap_UnmodifiableEntrySet *)outer$ {
  if (self = [super init]) {
    JavaUtilCollections_UnmodifiableMap_UnmodifiableEntrySet_$1_set_iterator_(self, [((id<JavaUtilCollection>) nil_chk(outer$->c_)) iterator]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilCollections_UnmodifiableMap_UnmodifiableEntrySet_$1_set_iterator_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilCollections_UnmodifiableMap_UnmodifiableEntrySet_$1 *)other {
  [super copyAllFieldsTo:other];
  JavaUtilCollections_UnmodifiableMap_UnmodifiableEntrySet_$1_set_iterator_(other, iterator_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:iterator_ name:@"iterator"]];
  return result;
}

@end
@implementation JavaUtilCollections_UnmodifiableMap

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilMap:(id<JavaUtilMap>)map {
  if (self = [super init]) {
    JavaUtilCollections_UnmodifiableMap_set_m_(self, map);
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)clear {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (BOOL)containsKeyWithId:(id)key {
  return [((id<JavaUtilMap>) nil_chk(m_)) containsKeyWithId:key];
}

- (BOOL)containsValueWithId:(id)value {
  return [((id<JavaUtilMap>) nil_chk(m_)) containsValueWithId:value];
}

- (id<JavaUtilSet>)entrySet {
  return [[[JavaUtilCollections_UnmodifiableMap_UnmodifiableEntrySet alloc] initWithJavaUtilSet:[((id<JavaUtilMap>) nil_chk(m_)) entrySet]] autorelease];
}

- (BOOL)isEqual:(id)object {
  return [((id<JavaUtilMap>) nil_chk(m_)) isEqual:object];
}

- (id)getWithId:(id)key {
  return [((id<JavaUtilMap>) nil_chk(m_)) getWithId:key];
}

- (NSUInteger)hash {
  return [((id<JavaUtilMap>) nil_chk(m_)) hash];
}

- (BOOL)isEmpty {
  return [((id<JavaUtilMap>) nil_chk(m_)) isEmpty];
}

- (id<JavaUtilSet>)keySet {
  return [[[JavaUtilCollections_UnmodifiableSet alloc] initWithJavaUtilSet:[((id<JavaUtilMap>) nil_chk(m_)) keySet]] autorelease];
}

- (id)putWithId:(id)key
         withId:(id)value {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)map {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (id)removeWithId:(id)key {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (int)size {
  return [((id<JavaUtilMap>) nil_chk(m_)) size];
}

- (id<JavaUtilCollection>)values {
  return [[[JavaUtilCollections_UnmodifiableCollection alloc] initWithJavaUtilCollection:[((id<JavaUtilMap>) nil_chk(m_)) values]] autorelease];
}

- (NSString *)description {
  return [((id<JavaUtilMap>) nil_chk(m_)) description];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilCollections_UnmodifiableMap_set_m_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilCollections_UnmodifiableMap *)other {
  [super copyAllFieldsTo:other];
  JavaUtilCollections_UnmodifiableMap_set_m_(other, m_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:m_ name:@"m"]];
  return result;
}

@end
@implementation JavaUtilCollections_UnmodifiableSortedMap

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)map {
  if (self = [super initWithJavaUtilMap:map]) {
    JavaUtilCollections_UnmodifiableSortedMap_set_sm_(self, map);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id<JavaUtilComparator>)comparator {
  return [((id<JavaUtilSortedMap>) nil_chk(sm_)) comparator];
}

- (id)firstKey {
  return [((id<JavaUtilSortedMap>) nil_chk(sm_)) firstKey];
}

- (id<JavaUtilSortedMap>)headMapWithId:(id)before {
  return [[[JavaUtilCollections_UnmodifiableSortedMap alloc] initWithJavaUtilSortedMap:[((id<JavaUtilSortedMap>) nil_chk(sm_)) headMapWithId:before]] autorelease];
}

- (id)lastKey {
  return [((id<JavaUtilSortedMap>) nil_chk(sm_)) lastKey];
}

- (id<JavaUtilSortedMap>)subMapWithId:(id)start
                               withId:(id)end {
  return [[[JavaUtilCollections_UnmodifiableSortedMap alloc] initWithJavaUtilSortedMap:[((id<JavaUtilSortedMap>) nil_chk(sm_)) subMapWithId:start withId:end]] autorelease];
}

- (id<JavaUtilSortedMap>)tailMapWithId:(id)after {
  return [[[JavaUtilCollections_UnmodifiableSortedMap alloc] initWithJavaUtilSortedMap:[((id<JavaUtilSortedMap>) nil_chk(sm_)) tailMapWithId:after]] autorelease];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilCollections_UnmodifiableSortedMap_set_sm_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilCollections_UnmodifiableSortedMap *)other {
  [super copyAllFieldsTo:other];
  JavaUtilCollections_UnmodifiableSortedMap_set_sm_(other, sm_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:sm_ name:@"sm"]];
  return result;
}

@end
@implementation JavaUtilCollections_UnmodifiableSortedSet

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilSortedSet:(id<JavaUtilSortedSet>)set {
  if (self = [super initWithJavaUtilSet:set]) {
    JavaUtilCollections_UnmodifiableSortedSet_set_ss_(self, set);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id<JavaUtilComparator>)comparator {
  return [((id<JavaUtilSortedSet>) nil_chk(ss_)) comparator];
}

- (id)first {
  return [((id<JavaUtilSortedSet>) nil_chk(ss_)) first];
}

- (id<JavaUtilSortedSet>)headSetWithId:(id)before {
  return [[[JavaUtilCollections_UnmodifiableSortedSet alloc] initWithJavaUtilSortedSet:[((id<JavaUtilSortedSet>) nil_chk(ss_)) headSetWithId:before]] autorelease];
}

- (id)last {
  return [((id<JavaUtilSortedSet>) nil_chk(ss_)) last];
}

- (id<JavaUtilSortedSet>)subSetWithId:(id)start
                               withId:(id)end {
  return [[[JavaUtilCollections_UnmodifiableSortedSet alloc] initWithJavaUtilSortedSet:[((id<JavaUtilSortedSet>) nil_chk(ss_)) subSetWithId:start withId:end]] autorelease];
}

- (id<JavaUtilSortedSet>)tailSetWithId:(id)after {
  return [[[JavaUtilCollections_UnmodifiableSortedSet alloc] initWithJavaUtilSortedSet:[((id<JavaUtilSortedSet>) nil_chk(ss_)) tailSetWithId:after]] autorelease];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilCollections_UnmodifiableSortedSet_set_ss_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilCollections_UnmodifiableSortedSet *)other {
  [super copyAllFieldsTo:other];
  JavaUtilCollections_UnmodifiableSortedSet_set_ss_(other, ss_);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:ss_ name:@"ss"]];
  return result;
}

@end
@implementation JavaUtilCollections_SetFromMap

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilMap:(id<JavaUtilMap>)map {
  if (self = [super init]) {
    JavaUtilCollections_SetFromMap_set_m_(self, map);
    JavaUtilCollections_SetFromMap_set_backingSet_(self, [((id<JavaUtilMap>) nil_chk(map)) keySet]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)isEqual:(id)object {
  return [((id<JavaUtilSet>) nil_chk(backingSet_)) isEqual:object];
}

- (NSUInteger)hash {
  return [((id<JavaUtilSet>) nil_chk(backingSet_)) hash];
}

- (BOOL)addWithId:(id)object {
  return [((id<JavaUtilMap>) nil_chk(m_)) putWithId:object withId:[JavaLangBoolean getTRUE]] == nil;
}

- (void)clear {
  [((id<JavaUtilMap>) nil_chk(m_)) clear];
}

- (NSString *)description {
  return [((id<JavaUtilSet>) nil_chk(backingSet_)) description];
}

- (BOOL)containsWithId:(id)object {
  return [((id<JavaUtilSet>) nil_chk(backingSet_)) containsWithId:object];
}

- (BOOL)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  return [((id<JavaUtilSet>) nil_chk(backingSet_)) containsAllWithJavaUtilCollection:collection];
}

- (BOOL)isEmpty {
  return [((id<JavaUtilMap>) nil_chk(m_)) isEmpty];
}

- (BOOL)removeWithId:(id)object {
  return [((id<JavaUtilMap>) nil_chk(m_)) removeWithId:object] != nil;
}

- (BOOL)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  return [((id<JavaUtilSet>) nil_chk(backingSet_)) retainAllWithJavaUtilCollection:collection];
}

- (IOSObjectArray *)toArray {
  return [((id<JavaUtilSet>) nil_chk(backingSet_)) toArray];
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)contents {
  return [((id<JavaUtilSet>) nil_chk(backingSet_)) toArrayWithNSObjectArray:contents];
}

- (id<JavaUtilIterator>)iterator {
  return [((id<JavaUtilSet>) nil_chk(backingSet_)) iterator];
}

- (int)size {
  return [((id<JavaUtilMap>) nil_chk(m_)) size];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilCollections_SetFromMap_set_backingSet_(self, nil);
  JavaUtilCollections_SetFromMap_set_m_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilCollections_SetFromMap *)other {
  [super copyAllFieldsTo:other];
  JavaUtilCollections_SetFromMap_set_backingSet_(other, backingSet_);
  JavaUtilCollections_SetFromMap_set_m_(other, m_);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:m_ name:@"m"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:backingSet_ name:@"backingSet"]];
  return result;
}

@end
@implementation JavaUtilCollections_AsLIFOQueue

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilDeque:(id<JavaUtilDeque>)deque {
  if (self = [super init]) {
    JavaUtilCollections_AsLIFOQueue_set_q_(self, deque);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id<JavaUtilIterator>)iterator {
  return [((id<JavaUtilDeque>) nil_chk(q_)) iterator];
}

- (int)size {
  return [((id<JavaUtilDeque>) nil_chk(q_)) size];
}

- (BOOL)offerWithId:(id)o {
  return [((id<JavaUtilDeque>) nil_chk(q_)) offerFirstWithId:o];
}

- (id)peek {
  return [((id<JavaUtilDeque>) nil_chk(q_)) peekFirst];
}

- (id)poll {
  return [((id<JavaUtilDeque>) nil_chk(q_)) pollFirst];
}

- (BOOL)addWithId:(id)o {
  [((id<JavaUtilDeque>) nil_chk(q_)) pushWithId:o];
  return YES;
}

- (void)clear {
  [((id<JavaUtilDeque>) nil_chk(q_)) clear];
}

- (id)element {
  return [((id<JavaUtilDeque>) nil_chk(q_)) getFirst];
}

- (id)remove {
  return [((id<JavaUtilDeque>) nil_chk(q_)) pop];
}

- (BOOL)containsWithId:(id)object {
  return [((id<JavaUtilDeque>) nil_chk(q_)) containsWithId:object];
}

- (BOOL)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  return [((id<JavaUtilDeque>) nil_chk(q_)) containsAllWithJavaUtilCollection:collection];
}

- (BOOL)isEmpty {
  return [((id<JavaUtilDeque>) nil_chk(q_)) isEmpty];
}

- (BOOL)removeWithId:(id)object {
  return [((id<JavaUtilDeque>) nil_chk(q_)) removeWithId:object];
}

- (BOOL)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  return [((id<JavaUtilDeque>) nil_chk(q_)) removeAllWithJavaUtilCollection:collection];
}

- (BOOL)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  return [((id<JavaUtilDeque>) nil_chk(q_)) retainAllWithJavaUtilCollection:collection];
}

- (IOSObjectArray *)toArray {
  return [((id<JavaUtilDeque>) nil_chk(q_)) toArray];
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)contents {
  return [((id<JavaUtilDeque>) nil_chk(q_)) toArrayWithNSObjectArray:contents];
}

- (NSString *)description {
  return [((id<JavaUtilDeque>) nil_chk(q_)) description];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilCollections_AsLIFOQueue_set_q_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilCollections_AsLIFOQueue *)other {
  [super copyAllFieldsTo:other];
  JavaUtilCollections_AsLIFOQueue_set_q_(other, q_);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:q_ name:@"q"]];
  return result;
}

@end
@implementation JavaUtilCollections_CheckedListIterator

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilListIterator:(id<JavaUtilListIterator>)i
                      withIOSClass:(IOSClass *)type {
  if (self = [super init]) {
    JavaUtilCollections_CheckedListIterator_set_i_(self, i);
    JavaUtilCollections_CheckedListIterator_set_type_(self, type);
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)hasNext {
  return [((id<JavaUtilListIterator>) nil_chk(i_)) hasNext];
}

- (id)next {
  return [((id<JavaUtilListIterator>) nil_chk(i_)) next];
}

- (void)remove {
  [((id<JavaUtilListIterator>) nil_chk(i_)) remove];
}

- (BOOL)hasPrevious {
  return [((id<JavaUtilListIterator>) nil_chk(i_)) hasPrevious];
}

- (id)previous {
  return [((id<JavaUtilListIterator>) nil_chk(i_)) previous];
}

- (int)nextIndex {
  return [((id<JavaUtilListIterator>) nil_chk(i_)) nextIndex];
}

- (int)previousIndex {
  return [((id<JavaUtilListIterator>) nil_chk(i_)) previousIndex];
}

- (void)setWithId:(id)obj {
  [((id<JavaUtilListIterator>) nil_chk(i_)) setWithId:[JavaUtilCollections checkTypeWithId:obj withIOSClass:type_]];
}

- (void)addWithId:(id)obj {
  [((id<JavaUtilListIterator>) nil_chk(i_)) addWithId:[JavaUtilCollections checkTypeWithId:obj withIOSClass:type_]];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilCollections_CheckedListIterator_set_type_(self, nil);
  JavaUtilCollections_CheckedListIterator_set_i_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilCollections_CheckedListIterator *)other {
  [super copyAllFieldsTo:other];
  JavaUtilCollections_CheckedListIterator_set_i_(other, i_);
  JavaUtilCollections_CheckedListIterator_set_type_(other, type_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:i_ name:@"i"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:type_ name:@"type"]];
  return result;
}

@end
@implementation JavaUtilCollections_CheckedCollection

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilCollection:(id<JavaUtilCollection>)c
                    withIOSClass:(IOSClass *)type {
  if (self = [super init]) {
    if (c == nil) {
      @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"c == null"] autorelease];
    }
    else if (type == nil) {
      @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"type == null"] autorelease];
    }
    JavaUtilCollections_CheckedCollection_set_c_(self, c);
    JavaUtilCollections_CheckedCollection_set_type_(self, type);
    JreMemDebugAdd(self);
  }
  return self;
}

- (int)size {
  return [((id<JavaUtilCollection>) nil_chk(c_)) size];
}

- (BOOL)isEmpty {
  return [((id<JavaUtilCollection>) nil_chk(c_)) isEmpty];
}

- (BOOL)containsWithId:(id)obj {
  return [((id<JavaUtilCollection>) nil_chk(c_)) containsWithId:obj];
}

- (id<JavaUtilIterator>)iterator {
  id<JavaUtilIterator> i = [((id<JavaUtilCollection>) nil_chk(c_)) iterator];
  if ([(id) i conformsToProtocol: @protocol(JavaUtilListIterator)]) {
    i = [[[JavaUtilCollections_CheckedListIterator alloc] initWithJavaUtilListIterator:(id<JavaUtilListIterator>) check_protocol_cast(i, @protocol(JavaUtilListIterator)) withIOSClass:type_] autorelease];
  }
  return i;
}

- (IOSObjectArray *)toArray {
  return [((id<JavaUtilCollection>) nil_chk(c_)) toArray];
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)arr {
  return [((id<JavaUtilCollection>) nil_chk(c_)) toArrayWithNSObjectArray:arr];
}

- (BOOL)addWithId:(id)obj {
  return [((id<JavaUtilCollection>) nil_chk(c_)) addWithId:[JavaUtilCollections checkTypeWithId:obj withIOSClass:type_]];
}

- (BOOL)removeWithId:(id)obj {
  return [((id<JavaUtilCollection>) nil_chk(c_)) removeWithId:obj];
}

- (BOOL)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)c1 {
  return [((id<JavaUtilCollection>) nil_chk(c_)) containsAllWithJavaUtilCollection:c1];
}

- (BOOL)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)c1 {
  IOSObjectArray *array = [((id<JavaUtilCollection>) nil_chk(c1)) toArray];
  {
    IOSObjectArray *a__ = array;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id o = (*b__++);
      [JavaUtilCollections checkTypeWithId:o withIOSClass:type_];
    }
  }
  return [((id<JavaUtilCollection>) nil_chk(c_)) addAllWithJavaUtilCollection:(id<JavaUtilList>) check_protocol_cast([JavaUtilArrays asListWithNSObjectArray:array], @protocol(JavaUtilList))];
}

- (BOOL)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)c1 {
  return [((id<JavaUtilCollection>) nil_chk(c_)) removeAllWithJavaUtilCollection:c1];
}

- (BOOL)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)c1 {
  return [((id<JavaUtilCollection>) nil_chk(c_)) retainAllWithJavaUtilCollection:c1];
}

- (void)clear {
  [((id<JavaUtilCollection>) nil_chk(c_)) clear];
}

- (NSString *)description {
  return [((id<JavaUtilCollection>) nil_chk(c_)) description];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilCollections_CheckedCollection_set_type_(self, nil);
  JavaUtilCollections_CheckedCollection_set_c_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilCollections_CheckedCollection *)other {
  [super copyAllFieldsTo:other];
  JavaUtilCollections_CheckedCollection_set_c_(other, c_);
  JavaUtilCollections_CheckedCollection_set_type_(other, type_);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:c_ name:@"c"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:type_ name:@"type"]];
  return result;
}

@end
@implementation JavaUtilCollections_CheckedList

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilList:(id<JavaUtilList>)l
              withIOSClass:(IOSClass *)type {
  if (self = [super initWithJavaUtilCollection:l withIOSClass:type]) {
    JavaUtilCollections_CheckedList_set_l_(self, l);
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)addAllWithInt:(int)index
withJavaUtilCollection:(id<JavaUtilCollection>)c1 {
  IOSObjectArray *array = [((id<JavaUtilCollection>) nil_chk(c1)) toArray];
  {
    IOSObjectArray *a__ = array;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id o = (*b__++);
      [JavaUtilCollections checkTypeWithId:o withIOSClass:type_];
    }
  }
  return [((id<JavaUtilList>) nil_chk(l_)) addAllWithInt:index withJavaUtilCollection:(id<JavaUtilList>) check_protocol_cast([JavaUtilArrays asListWithNSObjectArray:array], @protocol(JavaUtilList))];
}

- (id)getWithInt:(int)index {
  return [((id<JavaUtilList>) nil_chk(l_)) getWithInt:index];
}

- (id)setWithInt:(int)index
          withId:(id)obj {
  return [((id<JavaUtilList>) nil_chk(l_)) setWithInt:index withId:[JavaUtilCollections checkTypeWithId:obj withIOSClass:type_]];
}

- (void)addWithInt:(int)index
            withId:(id)obj {
  [((id<JavaUtilList>) nil_chk(l_)) addWithInt:index withId:[JavaUtilCollections checkTypeWithId:obj withIOSClass:type_]];
}

- (id)removeWithInt:(int)index {
  return [((id<JavaUtilList>) nil_chk(l_)) removeWithInt:index];
}

- (int)indexOfWithId:(id)obj {
  return [((id<JavaUtilList>) nil_chk(l_)) indexOfWithId:obj];
}

- (int)lastIndexOfWithId:(id)obj {
  return [((id<JavaUtilList>) nil_chk(l_)) lastIndexOfWithId:obj];
}

- (id<JavaUtilListIterator>)listIterator {
  return [[[JavaUtilCollections_CheckedListIterator alloc] initWithJavaUtilListIterator:[((id<JavaUtilList>) nil_chk(l_)) listIterator] withIOSClass:type_] autorelease];
}

- (id<JavaUtilListIterator>)listIteratorWithInt:(int)index {
  return [[[JavaUtilCollections_CheckedListIterator alloc] initWithJavaUtilListIterator:[((id<JavaUtilList>) nil_chk(l_)) listIteratorWithInt:index] withIOSClass:type_] autorelease];
}

- (id<JavaUtilList>)subListWithInt:(int)fromIndex
                           withInt:(int)toIndex {
  return [JavaUtilCollections checkedListWithJavaUtilList:[((id<JavaUtilList>) nil_chk(l_)) subListWithInt:fromIndex withInt:toIndex] withIOSClass:type_];
}

- (BOOL)isEqual:(id)obj {
  return [((id<JavaUtilList>) nil_chk(l_)) isEqual:obj];
}

- (NSUInteger)hash {
  return [((id<JavaUtilList>) nil_chk(l_)) hash];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilCollections_CheckedList_set_l_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilCollections_CheckedList *)other {
  [super copyAllFieldsTo:other];
  JavaUtilCollections_CheckedList_set_l_(other, l_);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:l_ name:@"l"]];
  return result;
}

@end
@implementation JavaUtilCollections_CheckedRandomAccessList

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilList:(id<JavaUtilList>)l
              withIOSClass:(IOSClass *)type {
  return JreMemDebugAdd([super initWithJavaUtilList:l withIOSClass:type]);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

@end
@implementation JavaUtilCollections_CheckedMap_CheckedEntry

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilMap_Entry:(id<JavaUtilMap_Entry>)e
                   withIOSClass:(IOSClass *)valueType {
  if (self = [super init]) {
    if (e == nil) {
      @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"e == null"] autorelease];
    }
    JavaUtilCollections_CheckedMap_CheckedEntry_set_e_(self, e);
    JavaUtilCollections_CheckedMap_CheckedEntry_set_valueType_(self, valueType);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)getKey {
  return [((id<JavaUtilMap_Entry>) nil_chk(e_)) getKey];
}

- (id)getValue {
  return [((id<JavaUtilMap_Entry>) nil_chk(e_)) getValue];
}

- (id)setValueWithId:(id)obj {
  return [((id<JavaUtilMap_Entry>) nil_chk(e_)) setValueWithId:[JavaUtilCollections checkTypeWithId:obj withIOSClass:valueType_]];
}

- (BOOL)isEqual:(id)obj {
  return [((id<JavaUtilMap_Entry>) nil_chk(e_)) isEqual:obj];
}

- (NSUInteger)hash {
  return [((id<JavaUtilMap_Entry>) nil_chk(e_)) hash];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilCollections_CheckedMap_CheckedEntry_set_valueType_(self, nil);
  JavaUtilCollections_CheckedMap_CheckedEntry_set_e_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilCollections_CheckedMap_CheckedEntry *)other {
  [super copyAllFieldsTo:other];
  JavaUtilCollections_CheckedMap_CheckedEntry_set_e_(other, e_);
  JavaUtilCollections_CheckedMap_CheckedEntry_set_valueType_(other, valueType_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:e_ name:@"e"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:valueType_ name:@"valueType"]];
  return result;
}

@end
@implementation JavaUtilCollections_CheckedMap_CheckedEntrySet

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilSet:(id<JavaUtilSet>)s
             withIOSClass:(IOSClass *)valueType {
  if (self = [super init]) {
    JavaUtilCollections_CheckedMap_CheckedEntrySet_set_s_(self, s);
    JavaUtilCollections_CheckedMap_CheckedEntrySet_set_valueType_(self, valueType);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id<JavaUtilIterator>)iterator {
  return [[[JavaUtilCollections_CheckedMap_CheckedEntrySet_CheckedEntryIterator alloc] initWithJavaUtilIterator:[((id<JavaUtilSet>) nil_chk(s_)) iterator] withIOSClass:valueType_] autorelease];
}

- (IOSObjectArray *)toArray {
  int thisSize = [self size];
  IOSObjectArray *array = [IOSObjectArray arrayWithLength:thisSize type:[IOSClass classWithClass:[NSObject class]]];
  id<JavaUtilIterator> it = [self iterator];
  for (int i = 0; i < thisSize; i++) {
    IOSObjectArray_Set(array, i, [((id<JavaUtilIterator>) nil_chk(it)) next]);
  }
  return array;
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)array {
  int thisSize = [self size];
  if ((int) [((IOSObjectArray *) nil_chk(array)) count] < thisSize) {
    IOSClass *ct = [[array getClass] getComponentType];
    array = (IOSObjectArray *) check_class_cast([JavaLangReflectArray newInstanceWithIOSClass:ct withInt:thisSize], [IOSObjectArray class]);
  }
  id<JavaUtilIterator> it = [self iterator];
  for (int i = 0; i < thisSize; i++) {
    IOSObjectArray_Set(nil_chk(array), i, (id) [((id<JavaUtilIterator>) nil_chk(it)) next]);
  }
  if (thisSize < (int) [((IOSObjectArray *) nil_chk(array)) count]) {
    IOSObjectArray_Set(array, thisSize, nil);
  }
  return array;
}

- (BOOL)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  return [((id<JavaUtilSet>) nil_chk(s_)) retainAllWithJavaUtilCollection:c];
}

- (BOOL)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  return [((id<JavaUtilSet>) nil_chk(s_)) removeAllWithJavaUtilCollection:c];
}

- (BOOL)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  return [((id<JavaUtilSet>) nil_chk(s_)) containsAllWithJavaUtilCollection:c];
}

- (BOOL)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (BOOL)removeWithId:(id)o {
  return [((id<JavaUtilSet>) nil_chk(s_)) removeWithId:o];
}

- (BOOL)containsWithId:(id)o {
  return [((id<JavaUtilSet>) nil_chk(s_)) containsWithId:o];
}

- (BOOL)addWithId:(id<JavaUtilMap_Entry>)o {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (BOOL)isEmpty {
  return [((id<JavaUtilSet>) nil_chk(s_)) isEmpty];
}

- (void)clear {
  [((id<JavaUtilSet>) nil_chk(s_)) clear];
}

- (int)size {
  return [((id<JavaUtilSet>) nil_chk(s_)) size];
}

- (NSUInteger)hash {
  return [((id<JavaUtilSet>) nil_chk(s_)) hash];
}

- (BOOL)isEqual:(id)object {
  return [((id<JavaUtilSet>) nil_chk(s_)) isEqual:object];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilCollections_CheckedMap_CheckedEntrySet_set_valueType_(self, nil);
  JavaUtilCollections_CheckedMap_CheckedEntrySet_set_s_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilCollections_CheckedMap_CheckedEntrySet *)other {
  [super copyAllFieldsTo:other];
  JavaUtilCollections_CheckedMap_CheckedEntrySet_set_s_(other, s_);
  JavaUtilCollections_CheckedMap_CheckedEntrySet_set_valueType_(other, valueType_);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:s_ name:@"s"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:valueType_ name:@"valueType"]];
  return result;
}

@end
@implementation JavaUtilCollections_CheckedMap_CheckedEntrySet_CheckedEntryIterator

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilIterator:(id<JavaUtilIterator>)i
                  withIOSClass:(IOSClass *)valueType {
  if (self = [super init]) {
    JavaUtilCollections_CheckedMap_CheckedEntrySet_CheckedEntryIterator_set_i_(self, i);
    JavaUtilCollections_CheckedMap_CheckedEntrySet_CheckedEntryIterator_set_valueType_(self, valueType);
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)hasNext {
  return [((id<JavaUtilIterator>) nil_chk(i_)) hasNext];
}

- (void)remove {
  [((id<JavaUtilIterator>) nil_chk(i_)) remove];
}

- (id<JavaUtilMap_Entry>)next {
  return [[[JavaUtilCollections_CheckedMap_CheckedEntry alloc] initWithJavaUtilMap_Entry:[((id<JavaUtilIterator>) nil_chk(i_)) next] withIOSClass:valueType_] autorelease];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilCollections_CheckedMap_CheckedEntrySet_CheckedEntryIterator_set_valueType_(self, nil);
  JavaUtilCollections_CheckedMap_CheckedEntrySet_CheckedEntryIterator_set_i_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilCollections_CheckedMap_CheckedEntrySet_CheckedEntryIterator *)other {
  [super copyAllFieldsTo:other];
  JavaUtilCollections_CheckedMap_CheckedEntrySet_CheckedEntryIterator_set_i_(other, i_);
  JavaUtilCollections_CheckedMap_CheckedEntrySet_CheckedEntryIterator_set_valueType_(other, valueType_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:i_ name:@"i"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:valueType_ name:@"valueType"]];
  return result;
}

@end
@implementation JavaUtilCollections_CheckedSet

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilSet:(id<JavaUtilSet>)s
             withIOSClass:(IOSClass *)type {
  return JreMemDebugAdd([super initWithJavaUtilCollection:s withIOSClass:type]);
}

- (BOOL)isEqual:(id)obj {
  return [((id<JavaUtilCollection>) nil_chk(c_)) isEqual:obj];
}

- (NSUInteger)hash {
  return [((id<JavaUtilCollection>) nil_chk(c_)) hash];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

@end
@implementation JavaUtilCollections_CheckedSortedSet

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilSortedSet:(id<JavaUtilSortedSet>)s
                   withIOSClass:(IOSClass *)type {
  if (self = [super initWithJavaUtilSet:s withIOSClass:type]) {
    JavaUtilCollections_CheckedSortedSet_set_ss_(self, s);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id<JavaUtilComparator>)comparator {
  return [((id<JavaUtilSortedSet>) nil_chk(ss_)) comparator];
}

- (id<JavaUtilSortedSet>)subSetWithId:(id)fromElement
                               withId:(id)toElement {
  return [[[JavaUtilCollections_CheckedSortedSet alloc] initWithJavaUtilSortedSet:[((id<JavaUtilSortedSet>) nil_chk(ss_)) subSetWithId:fromElement withId:toElement] withIOSClass:type_] autorelease];
}

- (id<JavaUtilSortedSet>)headSetWithId:(id)toElement {
  return [[[JavaUtilCollections_CheckedSortedSet alloc] initWithJavaUtilSortedSet:[((id<JavaUtilSortedSet>) nil_chk(ss_)) headSetWithId:toElement] withIOSClass:type_] autorelease];
}

- (id<JavaUtilSortedSet>)tailSetWithId:(id)fromElement {
  return [[[JavaUtilCollections_CheckedSortedSet alloc] initWithJavaUtilSortedSet:[((id<JavaUtilSortedSet>) nil_chk(ss_)) tailSetWithId:fromElement] withIOSClass:type_] autorelease];
}

- (id)first {
  return [((id<JavaUtilSortedSet>) nil_chk(ss_)) first];
}

- (id)last {
  return [((id<JavaUtilSortedSet>) nil_chk(ss_)) last];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilCollections_CheckedSortedSet_set_ss_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilCollections_CheckedSortedSet *)other {
  [super copyAllFieldsTo:other];
  JavaUtilCollections_CheckedSortedSet_set_ss_(other, ss_);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:ss_ name:@"ss"]];
  return result;
}

@end
@implementation JavaUtilCollections_CheckedMap

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilMap:(id<JavaUtilMap>)m
             withIOSClass:(IOSClass *)keyType
             withIOSClass:(IOSClass *)valueType {
  if (self = [super init]) {
    if (m == nil) {
      @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"m == null"] autorelease];
    }
    else if (keyType == nil) {
      @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"keyType == null"] autorelease];
    }
    else if (valueType == nil) {
      @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"valueType == null"] autorelease];
    }
    JavaUtilCollections_CheckedMap_set_m_(self, m);
    JavaUtilCollections_CheckedMap_set_keyType_(self, keyType);
    JavaUtilCollections_CheckedMap_set_valueType_(self, valueType);
    JreMemDebugAdd(self);
  }
  return self;
}

- (int)size {
  return [((id<JavaUtilMap>) nil_chk(m_)) size];
}

- (BOOL)isEmpty {
  return [((id<JavaUtilMap>) nil_chk(m_)) isEmpty];
}

- (BOOL)containsKeyWithId:(id)key {
  return [((id<JavaUtilMap>) nil_chk(m_)) containsKeyWithId:key];
}

- (BOOL)containsValueWithId:(id)value {
  return [((id<JavaUtilMap>) nil_chk(m_)) containsValueWithId:value];
}

- (id)getWithId:(id)key {
  return [((id<JavaUtilMap>) nil_chk(m_)) getWithId:key];
}

- (id)putWithId:(id)key
         withId:(id)value {
  return [((id<JavaUtilMap>) nil_chk(m_)) putWithId:[JavaUtilCollections checkTypeWithId:key withIOSClass:keyType_] withId:[JavaUtilCollections checkTypeWithId:value withIOSClass:valueType_]];
}

- (id)removeWithId:(id)key {
  return [((id<JavaUtilMap>) nil_chk(m_)) removeWithId:key];
}

- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)map {
  int size = [((id<JavaUtilMap>) nil_chk(map)) size];
  if (size == 0) {
    return;
  }
  IOSObjectArray *entries = [IOSObjectArray arrayWithLength:size type:[IOSClass classWithProtocol:@protocol(JavaUtilMap_Entry)]];
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([map entrySet])) iterator];
  for (int i = 0; i < size; i++) {
    id<JavaUtilMap_Entry> e = [((id<JavaUtilIterator>) nil_chk(it)) next];
    [JavaUtilCollections checkTypeWithId:[((id<JavaUtilMap_Entry>) nil_chk(e)) getKey] withIOSClass:keyType_];
    [JavaUtilCollections checkTypeWithId:[e getValue] withIOSClass:valueType_];
    IOSObjectArray_Set(entries, i, e);
  }
  for (int i = 0; i < size; i++) {
    [((id<JavaUtilMap>) nil_chk(m_)) putWithId:[((id<JavaUtilMap_Entry>) nil_chk(IOSObjectArray_Get(entries, i))) getKey] withId:[((id<JavaUtilMap_Entry>) nil_chk(IOSObjectArray_Get(entries, i))) getValue]];
  }
}

- (void)clear {
  [((id<JavaUtilMap>) nil_chk(m_)) clear];
}

- (id<JavaUtilSet>)keySet {
  return [((id<JavaUtilMap>) nil_chk(m_)) keySet];
}

- (id<JavaUtilCollection>)values {
  return [((id<JavaUtilMap>) nil_chk(m_)) values];
}

- (id<JavaUtilSet>)entrySet {
  return [[[JavaUtilCollections_CheckedMap_CheckedEntrySet alloc] initWithJavaUtilSet:[((id<JavaUtilMap>) nil_chk(m_)) entrySet] withIOSClass:valueType_] autorelease];
}

- (BOOL)isEqual:(id)obj {
  return [((id<JavaUtilMap>) nil_chk(m_)) isEqual:obj];
}

- (NSUInteger)hash {
  return [((id<JavaUtilMap>) nil_chk(m_)) hash];
}

- (NSString *)description {
  return [((id<JavaUtilMap>) nil_chk(m_)) description];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilCollections_CheckedMap_set_valueType_(self, nil);
  JavaUtilCollections_CheckedMap_set_keyType_(self, nil);
  JavaUtilCollections_CheckedMap_set_m_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilCollections_CheckedMap *)other {
  [super copyAllFieldsTo:other];
  JavaUtilCollections_CheckedMap_set_keyType_(other, keyType_);
  JavaUtilCollections_CheckedMap_set_m_(other, m_);
  JavaUtilCollections_CheckedMap_set_valueType_(other, valueType_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:m_ name:@"m"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:keyType_ name:@"keyType"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:valueType_ name:@"valueType"]];
  return result;
}

@end
@implementation JavaUtilCollections_CheckedSortedMap

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)m
                   withIOSClass:(IOSClass *)keyType
                   withIOSClass:(IOSClass *)valueType {
  if (self = [super initWithJavaUtilMap:m withIOSClass:keyType withIOSClass:valueType]) {
    JavaUtilCollections_CheckedSortedMap_set_sm_(self, m);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id<JavaUtilComparator>)comparator {
  return [((id<JavaUtilSortedMap>) nil_chk(sm_)) comparator];
}

- (id<JavaUtilSortedMap>)subMapWithId:(id)fromKey
                               withId:(id)toKey {
  return [[[JavaUtilCollections_CheckedSortedMap alloc] initWithJavaUtilSortedMap:[((id<JavaUtilSortedMap>) nil_chk(sm_)) subMapWithId:fromKey withId:toKey] withIOSClass:keyType_ withIOSClass:valueType_] autorelease];
}

- (id<JavaUtilSortedMap>)headMapWithId:(id)toKey {
  return [[[JavaUtilCollections_CheckedSortedMap alloc] initWithJavaUtilSortedMap:[((id<JavaUtilSortedMap>) nil_chk(sm_)) headMapWithId:toKey] withIOSClass:keyType_ withIOSClass:valueType_] autorelease];
}

- (id<JavaUtilSortedMap>)tailMapWithId:(id)fromKey {
  return [[[JavaUtilCollections_CheckedSortedMap alloc] initWithJavaUtilSortedMap:[((id<JavaUtilSortedMap>) nil_chk(sm_)) tailMapWithId:fromKey] withIOSClass:keyType_ withIOSClass:valueType_] autorelease];
}

- (id)firstKey {
  return [((id<JavaUtilSortedMap>) nil_chk(sm_)) firstKey];
}

- (id)lastKey {
  return [((id<JavaUtilSortedMap>) nil_chk(sm_)) lastKey];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilCollections_CheckedSortedMap_set_sm_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilCollections_CheckedSortedMap *)other {
  [super copyAllFieldsTo:other];
  JavaUtilCollections_CheckedSortedMap_set_sm_(other, sm_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:sm_ name:@"sm"]];
  return result;
}

@end
@implementation JavaUtilCollections_$1

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (BOOL)hasNext {
  return NO;
}

- (id)next {
  @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
}

- (void)remove {
  @throw [[[JavaLangIllegalStateException alloc] init] autorelease];
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

@end
@implementation JavaUtilCollections_$2

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (BOOL)hasMoreElements {
  return NO;
}

- (id)nextElement {
  @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

@end
@implementation JavaUtilCollections_$3

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (BOOL)hasMoreElements {
  return [((id<JavaUtilIterator>) nil_chk(it_)) hasNext];
}

- (id)nextElement {
  return [((id<JavaUtilIterator>) nil_chk(it_)) next];
}

- (id)initWithJavaUtilCollection:(id<JavaUtilCollection>)capture$0 {
  JavaUtilCollections_$3_set_val$c_(self, capture$0);
  if (self = [super init]) {
    JavaUtilCollections_$3_set_it_(self, [((id<JavaUtilCollection>) nil_chk(val$c_)) iterator]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilCollections_$3_set_val$c_(self, nil);
  JavaUtilCollections_$3_set_it_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilCollections_$3 *)other {
  [super copyAllFieldsTo:other];
  JavaUtilCollections_$3_set_it_(other, it_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:it_ name:@"it"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:val$c_ name:@"val$c"]];
  return result;
}

@end
