//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/NullPointerException.h"
#include "java/util/Enumeration.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/ListResourceBundle.h"
#include "java/util/ResourceBundle.h"
#include "java/util/Set.h"

@implementation JavaUtilListResourceBundle

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

- (IOSObjectArray *)getContents {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaUtilEnumeration>)getKeys {
  [self initializeTable];
  if (parent_ != nil) {
    return [[[JavaUtilListResourceBundle_$1 alloc] initWithJavaUtilListResourceBundle:self] autorelease];
  }
  else {
    return [[[JavaUtilListResourceBundle_$2 alloc] initWithJavaUtilListResourceBundle:self] autorelease];
  }
}

- (id)handleGetObjectWithNSString:(NSString *)key {
  [self initializeTable];
  if (key == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"key == null"] autorelease];
  }
  return [((JavaUtilHashMap *) nil_chk(table_)) getWithId:key];
}

- (void)initializeTable {
  @synchronized(self) {
    {
      if (table_ == nil) {
        IOSObjectArray *contents = [self getContents];
        JavaUtilListResourceBundle_set_table_(self, [[[JavaUtilHashMap alloc] initWithInt:(int) [((IOSObjectArray *) nil_chk(contents)) count] / 3 * 4 + 3] autorelease]);
        {
          IOSObjectArray *a__ = contents;
          id const *b__ = a__->buffer_;
          id const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            IOSObjectArray *content = (*b__++);
            if (IOSObjectArray_Get(nil_chk(content), 0) == nil || IOSObjectArray_Get(content, 1) == nil) {
              @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"null entry"] autorelease];
            }
            [table_ putWithId:(NSString *) check_class_cast(IOSObjectArray_Get(content, 0), [NSString class]) withId:IOSObjectArray_Get(content, 1)];
          }
        }
      }
    }
  }
}

- (id<JavaUtilSet>)handleKeySet {
  [self initializeTable];
  return [((JavaUtilHashMap *) nil_chk(table_)) keySet];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilListResourceBundle_set_table_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilListResourceBundle *)other {
  [super copyAllFieldsTo:other];
  JavaUtilListResourceBundle_set_table_(other, table_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:table_ name:@"table"]];
  return result;
}

@end
@implementation JavaUtilListResourceBundle_$1

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (BOOL)findNext {
  if (nextElement__ != nil) {
    return YES;
  }
  while ([((id<JavaUtilEnumeration>) nil_chk(pEnum_)) hasMoreElements]) {
    NSString *next = [pEnum_ nextElement];
    if (![((JavaUtilHashMap *) nil_chk(this$0_->table_)) containsKeyWithId:next]) {
      JavaUtilListResourceBundle_$1_set_nextElement__(self, next);
      return YES;
    }
  }
  return NO;
}

- (BOOL)hasMoreElements {
  if ([((id<JavaUtilIterator>) nil_chk(local_)) hasNext]) {
    return YES;
  }
  return [self findNext];
}

- (NSString *)nextElement {
  if ([((id<JavaUtilIterator>) nil_chk(local_)) hasNext]) {
    return [local_ next];
  }
  if ([self findNext]) {
    NSString *result = nextElement__;
    JavaUtilListResourceBundle_$1_set_nextElement__(self, nil);
    return result;
  }
  return [((id<JavaUtilEnumeration>) nil_chk(pEnum_)) nextElement];
}

- (id)initWithJavaUtilListResourceBundle:(JavaUtilListResourceBundle *)outer$ {
  JavaUtilListResourceBundle_$1_set_this$0_(self, outer$);
  if (self = [super init]) {
    JavaUtilListResourceBundle_$1_set_local_(self, [((id<JavaUtilSet>) nil_chk([((JavaUtilHashMap *) nil_chk(outer$->table_)) keySet])) iterator]);
    JavaUtilListResourceBundle_$1_set_pEnum_(self, [((JavaUtilResourceBundle *) nil_chk(outer$->parent_)) getKeys]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilListResourceBundle_$1_set_nextElement__(self, nil);
  JavaUtilListResourceBundle_$1_set_pEnum_(self, nil);
  JavaUtilListResourceBundle_$1_set_local_(self, nil);
  JavaUtilListResourceBundle_$1_set_this$0_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilListResourceBundle_$1 *)other {
  [super copyAllFieldsTo:other];
  JavaUtilListResourceBundle_$1_set_local_(other, local_);
  JavaUtilListResourceBundle_$1_set_nextElement__(other, nextElement__);
  JavaUtilListResourceBundle_$1_set_pEnum_(other, pEnum_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:this$0_ name:@"this$0"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:local_ name:@"local"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:pEnum_ name:@"pEnum"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:nextElement__ name:@"nextElement_"]];
  return result;
}

@end
@implementation JavaUtilListResourceBundle_$2

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (BOOL)hasMoreElements {
  return [((id<JavaUtilIterator>) nil_chk(it_)) hasNext];
}

- (NSString *)nextElement {
  return [((id<JavaUtilIterator>) nil_chk(it_)) next];
}

- (id)initWithJavaUtilListResourceBundle:(JavaUtilListResourceBundle *)outer$ {
  if (self = [super init]) {
    JavaUtilListResourceBundle_$2_set_it_(self, [((id<JavaUtilSet>) nil_chk([((JavaUtilHashMap *) nil_chk(outer$->table_)) keySet])) iterator]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilListResourceBundle_$2_set_it_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilListResourceBundle_$2 *)other {
  [super copyAllFieldsTo:other];
  JavaUtilListResourceBundle_$2_set_it_(other, it_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:it_ name:@"it"]];
  return result;
}

@end
