//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSObjectArray.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Currency.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/Locale.h"
#include "java/util/Set.h"
#include "libcore/icu/ICU.h"
#include "libcore/icu/LocaleData.h"

@implementation JavaUtilCurrency

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilCurrency_codesToCurrencies_ name:@"JavaUtilCurrency_codesToCurrencies_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilCurrency_localesToCurrencies_ name:@"JavaUtilCurrency_localesToCurrencies_"]];
  return result;
}

static JavaUtilHashMap * JavaUtilCurrency_codesToCurrencies_;
static JavaUtilHashMap * JavaUtilCurrency_localesToCurrencies_;

+ (JavaUtilHashMap *)codesToCurrencies {
  return JavaUtilCurrency_codesToCurrencies_;
}

+ (JavaUtilHashMap *)localesToCurrencies {
  return JavaUtilCurrency_localesToCurrencies_;
}

- (id)initWithNSString:(NSString *)currencyCode {
  if (self = [super init]) {
    JavaUtilCurrency_set_currencyCode_(self, currencyCode);
    JreMemDebugAdd(self);
  }
  return self;
}

+ (JavaUtilCurrency *)getInstanceWithNSString:(NSString *)currencyCode {
  @synchronized (JavaUtilCurrency_codesToCurrencies_) {
    JavaUtilCurrency *currency = [((JavaUtilHashMap *) nil_chk(JavaUtilCurrency_codesToCurrencies_)) getWithId:currencyCode];
    if (currency == nil) {
      currency = [[[JavaUtilCurrency alloc] initWithNSString:currencyCode] autorelease];
      [JavaUtilCurrency_codesToCurrencies_ putWithId:currencyCode withId:currency];
    }
    return currency;
  }
}

+ (JavaUtilCurrency *)getInstanceWithJavaUtilLocale:(JavaUtilLocale *)locale {
  @synchronized (JavaUtilCurrency_localesToCurrencies_) {
    JavaUtilCurrency *currency = [((JavaUtilHashMap *) nil_chk(JavaUtilCurrency_localesToCurrencies_)) getWithId:locale];
    if (currency != nil) {
      return currency;
    }
    NSString *country = [((JavaUtilLocale *) nil_chk(locale)) getCountry];
    NSString *variant = [locale getVariant];
    if (![((NSString *) nil_chk(variant)) isEmpty] && ([variant isEqual:@"EURO"] || [variant isEqual:@"HK"] || [variant isEqual:@"PREEURO"])) {
      country = [NSString stringWithFormat:@"%@_%@", country, variant];
    }
    NSString *currencyCode = [LibcoreIcuICU getCurrencyCodeWithNSString:[locale description]];
    if (currencyCode == nil) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Unsupported ISO 3166 country: %@", locale]] autorelease];
    }
    else if ([currencyCode isEqual:@"XXX"]) {
      return nil;
    }
    JavaUtilCurrency *result = [JavaUtilCurrency getInstanceWithNSString:currencyCode];
    [JavaUtilCurrency_localesToCurrencies_ putWithId:locale withId:result];
    return result;
  }
}

+ (id<JavaUtilSet>)getAvailableCurrencies {
  id<JavaUtilSet> result = [[[JavaUtilLinkedHashSet alloc] init] autorelease];
  IOSObjectArray *currencyCodes = [LibcoreIcuICU getAvailableCurrencyCodes];
  {
    IOSObjectArray *a__ = currencyCodes;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *currencyCode = (*b__++);
      [result addWithId:[JavaUtilCurrency getInstanceWithNSString:currencyCode]];
    }
  }
  return result;
}

- (NSString *)getCurrencyCode {
  return currencyCode_;
}

- (NSString *)getSymbol {
  return [self getSymbolWithJavaUtilLocale:[JavaUtilLocale getDefault]];
}

- (NSString *)getSymbolWithJavaUtilLocale:(JavaUtilLocale *)locale {
  if ([((NSString *) nil_chk([((JavaUtilLocale *) nil_chk(locale)) getCountry])) length] == 0) {
    return currencyCode_;
  }
  LibcoreIcuLocaleData *localeData = [LibcoreIcuLocaleData getWithJavaUtilLocale:locale];
  if ([((NSString *) nil_chk(((LibcoreIcuLocaleData *) nil_chk(localeData))->internationalCurrencySymbol_)) isEqual:currencyCode_]) {
    return localeData->currencySymbol_;
  }
  NSString *symbol = [LibcoreIcuICU getCurrencySymbolWithNSString:[locale description]];
  return symbol != nil ? symbol : currencyCode_;
}

- (int)getDefaultFractionDigits {
  if ([((NSString *) nil_chk(currencyCode_)) isEqual:@"XXX"]) {
    return -1;
  }
  return [LibcoreIcuICU getCurrencyFractionDigitsWithNSString:currencyCode_];
}

- (NSString *)description {
  return currencyCode_;
}

+ (void)initialize {
  if (self == [JavaUtilCurrency class]) {
    JreOperatorRetainedAssign(&JavaUtilCurrency_codesToCurrencies_, nil, [[[JavaUtilHashMap alloc] init] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilCurrency_localesToCurrencies_, nil, [[[JavaUtilHashMap alloc] init] autorelease]);
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilCurrency_set_currencyCode_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilCurrency *)other {
  [super copyAllFieldsTo:other];
  JavaUtilCurrency_set_currencyCode_(other, currencyCode_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:currencyCode_ name:@"currencyCode"]];
  return result;
}

@end
