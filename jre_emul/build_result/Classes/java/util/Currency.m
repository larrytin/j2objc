//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/Currency.java
//
//  Created by retechretech on 13-9-4.
//

#include "java/lang/IllegalArgumentException.h"
#include "java/util/Currency.h"
#include "java/util/HashMap.h"
#include "java/util/Locale.h"

@implementation JavaUtilCurrency

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilCurrency_codesToCurrencies_ name:@"JavaUtilCurrency_codesToCurrencies_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilCurrency_localesToCurrencies_ name:@"JavaUtilCurrency_localesToCurrencies_"]];
  return result;
}

static JavaUtilHashMap * JavaUtilCurrency_codesToCurrencies_;
static JavaUtilHashMap * JavaUtilCurrency_localesToCurrencies_;

+ (JavaUtilHashMap *)codesToCurrencies {
  return JavaUtilCurrency_codesToCurrencies_;
}

+ (JavaUtilHashMap *)localesToCurrencies {
  return JavaUtilCurrency_localesToCurrencies_;
}

- (id)initWithNSString:(NSString *)currencyCode {
  if ((self = [super init])) {
    JavaUtilCurrency_set_currencyCode_(self, currencyCode);
    JreMemDebugAdd(self);
  }
  return self;
}

+ (JavaUtilCurrency *)getInstanceWithNSString:(NSString *)currencyCode {
  @synchronized (JavaUtilCurrency_codesToCurrencies_) {
    JavaUtilCurrency *currency = [((JavaUtilHashMap *) nil_chk(JavaUtilCurrency_codesToCurrencies_)) getWithId:currencyCode];
    if (currency == nil) {
      currency = [[[JavaUtilCurrency alloc] initWithNSString:currencyCode] autorelease];
      [JavaUtilCurrency_codesToCurrencies_ putWithId:currencyCode withId:currency];
    }
    return currency;
  }
}

+ (JavaUtilCurrency *)getInstanceWithJavaUtilLocale:(JavaUtilLocale *)locale {
  @synchronized (JavaUtilCurrency_localesToCurrencies_) {
    JavaUtilCurrency *currency = [((JavaUtilHashMap *) nil_chk(JavaUtilCurrency_localesToCurrencies_)) getWithId:locale];
    if (currency != nil) {
      return currency;
    }
    NSString *currencyCode = [JavaUtilCurrency getCurrencyCodeForLocaleWithJavaUtilLocale:locale];
    if (currencyCode == nil) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Unsupported ISO 3166 country: %@", locale]] autorelease];
    }
    else if ([currencyCode isEqual:@"XXX"]) {
      return nil;
    }
    JavaUtilCurrency *result = [JavaUtilCurrency getInstanceWithNSString:currencyCode];
    [JavaUtilCurrency_localesToCurrencies_ putWithId:locale withId:result];
    return result;
  }
}

+ (NSString *)getCurrencyCodeForLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale   {
    NSLocale *nativeLocale =
    AUTORELEASE([[NSLocale alloc] initWithLocaleIdentifier:[locale description]]);
    NSNumberFormatter *formatter = AUTORELEASE([[NSNumberFormatter alloc] init]);
    [formatter setNumberStyle:NSNumberFormatterCurrencyStyle];
    [formatter setLocale:nativeLocale];
    return [formatter currencyCode];
  }

+ (NSString *)getCurrencySymbolForLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale   {
    NSLocale *nativeLocale =
    AUTORELEASE([[NSLocale alloc] initWithLocaleIdentifier:[locale description]]);
    NSNumberFormatter *formatter = AUTORELEASE([[NSNumberFormatter alloc] init]);
    [formatter setNumberStyle:NSNumberFormatterCurrencyStyle];
    [formatter setLocale:nativeLocale];
    return [formatter currencySymbol];
  }

- (NSString *)getCurrencyCode {
  return currencyCode_;
}

- (NSString *)getSymbol {
  return [self getSymbolWithJavaUtilLocale:[JavaUtilLocale getDefault]];
}

- (NSString *)getSymbolWithJavaUtilLocale:(JavaUtilLocale *)locale {
  if ([((NSString *) nil_chk([((JavaUtilLocale *) nil_chk(locale)) getCountry])) length] == 0) {
    return currencyCode_;
  }
  NSString *symbol = [JavaUtilCurrency getCurrencySymbolForLocaleWithJavaUtilLocale:locale];
  return symbol != nil ? symbol : currencyCode_;
}

- (NSString *)description {
  return currencyCode_;
}

+ (void)initialize {
  if (self == [JavaUtilCurrency class]) {
    JreOperatorRetainedAssign(&JavaUtilCurrency_codesToCurrencies_, nil, [[[JavaUtilHashMap alloc] init] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilCurrency_localesToCurrencies_, nil, [[[JavaUtilHashMap alloc] init] autorelease]);
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilCurrency_set_currencyCode_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilCurrency *)other {
  [super copyAllFieldsTo:other];
  JavaUtilCurrency_set_currencyCode_(other, currencyCode_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:currencyCode_ name:@"currencyCode"]];
  return result;
}

@end
