//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/TimerTask.java
//
//  Created by retechretech on 13-9-25.
//

#include "java/util/TimerTask.h"

@implementation JavaUtilTimerTask

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (long long int)getWhen {
  @synchronized (lock_) {
    return when_;
  }
}

- (void)setScheduledTimeWithLong:(long long int)time {
  @synchronized (lock_) {
    scheduledTime_ = time;
  }
}

- (BOOL)isScheduled {
  @synchronized (lock_) {
    return when_ > 0 || scheduledTime_ > 0;
  }
}

- (id)init {
  if (self = [super init]) {
    JavaUtilTimerTask_set_lock_(self, [[[NSObject alloc] init] autorelease]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)cancel {
  @synchronized (lock_) {
    BOOL willRun = !cancelled_ && when_ > 0;
    cancelled_ = YES;
    return willRun;
  }
}

- (long long int)scheduledExecutionTime {
  @synchronized (lock_) {
    return scheduledTime_;
  }
}

- (void)run {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilTimerTask_set_lock_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilTimerTask *)other {
  [super copyAllFieldsTo:other];
  other->cancelled_ = cancelled_;
  other->fixedRate_ = fixedRate_;
  JavaUtilTimerTask_set_lock_(other, lock_);
  other->period_ = period_;
  other->scheduledTime_ = scheduledTime_;
  other->when_ = when_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:lock_ name:@"lock"]];
  return result;
}

@end
