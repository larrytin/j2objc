//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSObjectArray.h"
#include "java/lang/AssertionError.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/Locale.h"
#include "java/util/MissingResourceException.h"
#include "libcore/icu/ICU.h"

@implementation JavaUtilLocale

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_CANADA_ name:@"JavaUtilLocale_CANADA_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_CANADA_FRENCH_ name:@"JavaUtilLocale_CANADA_FRENCH_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_CHINA_ name:@"JavaUtilLocale_CHINA_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_CHINESE_ name:@"JavaUtilLocale_CHINESE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_ENGLISH_ name:@"JavaUtilLocale_ENGLISH_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_FRANCE_ name:@"JavaUtilLocale_FRANCE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_FRENCH_ name:@"JavaUtilLocale_FRENCH_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_GERMAN_ name:@"JavaUtilLocale_GERMAN_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_GERMANY_ name:@"JavaUtilLocale_GERMANY_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_ITALIAN_ name:@"JavaUtilLocale_ITALIAN_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_ITALY_ name:@"JavaUtilLocale_ITALY_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_JAPAN_ name:@"JavaUtilLocale_JAPAN_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_JAPANESE_ name:@"JavaUtilLocale_JAPANESE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_KOREA_ name:@"JavaUtilLocale_KOREA_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_KOREAN_ name:@"JavaUtilLocale_KOREAN_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_PRC_ name:@"JavaUtilLocale_PRC_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_ROOT_ name:@"JavaUtilLocale_ROOT_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_SIMPLIFIED_CHINESE_ name:@"JavaUtilLocale_SIMPLIFIED_CHINESE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_TAIWAN_ name:@"JavaUtilLocale_TAIWAN_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_TRADITIONAL_CHINESE_ name:@"JavaUtilLocale_TRADITIONAL_CHINESE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_UK_ name:@"JavaUtilLocale_UK_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_US_ name:@"JavaUtilLocale_US_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_defaultLocale_ name:@"JavaUtilLocale_defaultLocale_"]];
  return result;
}

static JavaUtilLocale * JavaUtilLocale_CANADA_;
static JavaUtilLocale * JavaUtilLocale_CANADA_FRENCH_;
static JavaUtilLocale * JavaUtilLocale_CHINA_;
static JavaUtilLocale * JavaUtilLocale_CHINESE_;
static JavaUtilLocale * JavaUtilLocale_ENGLISH_;
static JavaUtilLocale * JavaUtilLocale_FRANCE_;
static JavaUtilLocale * JavaUtilLocale_FRENCH_;
static JavaUtilLocale * JavaUtilLocale_GERMAN_;
static JavaUtilLocale * JavaUtilLocale_GERMANY_;
static JavaUtilLocale * JavaUtilLocale_ITALIAN_;
static JavaUtilLocale * JavaUtilLocale_ITALY_;
static JavaUtilLocale * JavaUtilLocale_JAPAN_;
static JavaUtilLocale * JavaUtilLocale_JAPANESE_;
static JavaUtilLocale * JavaUtilLocale_KOREA_;
static JavaUtilLocale * JavaUtilLocale_KOREAN_;
static JavaUtilLocale * JavaUtilLocale_PRC_;
static JavaUtilLocale * JavaUtilLocale_ROOT_;
static JavaUtilLocale * JavaUtilLocale_SIMPLIFIED_CHINESE_;
static JavaUtilLocale * JavaUtilLocale_TAIWAN_;
static JavaUtilLocale * JavaUtilLocale_TRADITIONAL_CHINESE_;
static JavaUtilLocale * JavaUtilLocale_UK_;
static JavaUtilLocale * JavaUtilLocale_US_;
static JavaUtilLocale * JavaUtilLocale_defaultLocale_;

+ (JavaUtilLocale *)CANADA {
  return JavaUtilLocale_CANADA_;
}

+ (JavaUtilLocale *)CANADA_FRENCH {
  return JavaUtilLocale_CANADA_FRENCH_;
}

+ (JavaUtilLocale *)CHINA {
  return JavaUtilLocale_CHINA_;
}

+ (JavaUtilLocale *)CHINESE {
  return JavaUtilLocale_CHINESE_;
}

+ (JavaUtilLocale *)ENGLISH {
  return JavaUtilLocale_ENGLISH_;
}

+ (JavaUtilLocale *)FRANCE {
  return JavaUtilLocale_FRANCE_;
}

+ (JavaUtilLocale *)FRENCH {
  return JavaUtilLocale_FRENCH_;
}

+ (JavaUtilLocale *)GERMAN {
  return JavaUtilLocale_GERMAN_;
}

+ (JavaUtilLocale *)GERMANY {
  return JavaUtilLocale_GERMANY_;
}

+ (JavaUtilLocale *)ITALIAN {
  return JavaUtilLocale_ITALIAN_;
}

+ (JavaUtilLocale *)ITALY {
  return JavaUtilLocale_ITALY_;
}

+ (JavaUtilLocale *)JAPAN {
  return JavaUtilLocale_JAPAN_;
}

+ (JavaUtilLocale *)JAPANESE {
  return JavaUtilLocale_JAPANESE_;
}

+ (JavaUtilLocale *)KOREA {
  return JavaUtilLocale_KOREA_;
}

+ (JavaUtilLocale *)KOREAN {
  return JavaUtilLocale_KOREAN_;
}

+ (JavaUtilLocale *)PRC {
  return JavaUtilLocale_PRC_;
}

+ (JavaUtilLocale *)ROOT {
  return JavaUtilLocale_ROOT_;
}

+ (JavaUtilLocale *)SIMPLIFIED_CHINESE {
  return JavaUtilLocale_SIMPLIFIED_CHINESE_;
}

+ (JavaUtilLocale *)TAIWAN {
  return JavaUtilLocale_TAIWAN_;
}

+ (JavaUtilLocale *)TRADITIONAL_CHINESE {
  return JavaUtilLocale_TRADITIONAL_CHINESE_;
}

+ (JavaUtilLocale *)UK {
  return JavaUtilLocale_UK_;
}

+ (JavaUtilLocale *)US {
  return JavaUtilLocale_US_;
}

+ (JavaUtilLocale *)defaultLocale {
  return JavaUtilLocale_defaultLocale_;
}

+ (void)setDefaultLocale:(JavaUtilLocale *)defaultLocale {
  JreOperatorRetainedAssign(&JavaUtilLocale_defaultLocale_, nil, defaultLocale);
}

- (id)initWithBoolean:(BOOL)unused
         withNSString:(NSString *)lowerCaseLanguageCode
         withNSString:(NSString *)upperCaseCountryCode {
  if (self = [super init]) {
    JavaUtilLocale_set_languageCode_(self, lowerCaseLanguageCode);
    JavaUtilLocale_set_countryCode_(self, upperCaseCountryCode);
    JavaUtilLocale_set_variantCode_(self, @"");
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithNSString:(NSString *)language {
  return JreMemDebugAdd([self initJavaUtilLocaleWithNSString:language withNSString:@"" withNSString:@""]);
}

- (id)initWithNSString:(NSString *)language
          withNSString:(NSString *)country {
  return JreMemDebugAdd([self initJavaUtilLocaleWithNSString:language withNSString:country withNSString:@""]);
}

- (id)initJavaUtilLocaleWithNSString:(NSString *)language
                        withNSString:(NSString *)country
                        withNSString:(NSString *)variant {
  if (self = [super init]) {
    if (language == nil || country == nil || variant == nil) {
      @throw [[[JavaLangNullPointerException alloc] initWithNSString:[NSString stringWithFormat:@"language=%@,country=%@,variant=%@", language, country, variant]] autorelease];
    }
    if ([((NSString *) nil_chk(language)) isEmpty] && [((NSString *) nil_chk(country)) isEmpty]) {
      JavaUtilLocale_set_languageCode_(self, @"");
      JavaUtilLocale_set_countryCode_(self, @"");
      JavaUtilLocale_set_variantCode_(self, variant);
      return self;
    }
    JavaUtilLocale_set_languageCode_(self, [language lowercaseStringWithJRELocale:JavaUtilLocale_US_]);
    if ([((NSString *) nil_chk(languageCode_)) isEqual:@"he"]) {
      JavaUtilLocale_set_languageCode_(self, @"iw");
    }
    else if ([languageCode_ isEqual:@"id"]) {
      JavaUtilLocale_set_languageCode_(self, @"in");
    }
    else if ([languageCode_ isEqual:@"yi"]) {
      JavaUtilLocale_set_languageCode_(self, @"ji");
    }
    JavaUtilLocale_set_countryCode_(self, [((NSString *) nil_chk(country)) uppercaseStringWithJRELocale:JavaUtilLocale_US_]);
    JavaUtilLocale_set_variantCode_(self, variant);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithNSString:(NSString *)language
          withNSString:(NSString *)country
          withNSString:(NSString *)variant {
  return [self initJavaUtilLocaleWithNSString:language withNSString:country withNSString:variant];
}

- (id)clone {
  @try {
    return [super clone];
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw [[[JavaLangAssertionError alloc] initWithId:e] autorelease];
  }
}

- (BOOL)isEqual:(id)object {
  if (object == self) {
    return YES;
  }
  if ([object isKindOfClass:[JavaUtilLocale class]]) {
    JavaUtilLocale *o = (JavaUtilLocale *) check_class_cast(object, [JavaUtilLocale class]);
    return [((NSString *) nil_chk(languageCode_)) isEqual:((JavaUtilLocale *) nil_chk(o))->languageCode_] && [((NSString *) nil_chk(countryCode_)) isEqual:o->countryCode_] && [((NSString *) nil_chk(variantCode_)) isEqual:o->variantCode_];
  }
  return NO;
}

+ (IOSObjectArray *)getAvailableLocales {
  return [LibcoreIcuICU getAvailableLocales];
}

- (NSString *)getCountry {
  return countryCode_;
}

+ (JavaUtilLocale *)getDefault {
  return JavaUtilLocale_defaultLocale_;
}

- (NSString *)getDisplayCountry {
  return [self getDisplayCountryWithJavaUtilLocale:[JavaUtilLocale getDefault]];
}

- (NSString *)getDisplayCountryWithJavaUtilLocale:(JavaUtilLocale *)locale {
  if ([((NSString *) nil_chk(countryCode_)) isEmpty]) {
    return @"";
  }
  NSString *result = [LibcoreIcuICU getDisplayCountryNativeWithNSString:[self description] withNSString:[((JavaUtilLocale *) nil_chk(locale)) description]];
  if (result == nil) {
    result = [LibcoreIcuICU getDisplayCountryNativeWithNSString:[self description] withNSString:[((JavaUtilLocale *) nil_chk([JavaUtilLocale getDefault])) description]];
  }
  return result;
}

- (NSString *)getDisplayLanguage {
  return [self getDisplayLanguageWithJavaUtilLocale:[JavaUtilLocale getDefault]];
}

- (NSString *)getDisplayLanguageWithJavaUtilLocale:(JavaUtilLocale *)locale {
  if ([((NSString *) nil_chk(languageCode_)) isEmpty]) {
    return @"";
  }
  NSString *localeString = [self description];
  if ([languageCode_ isEqual:@"tl"]) {
    localeString = [JavaUtilLocale toNewStringWithNSString:@"fil" withNSString:countryCode_ withNSString:variantCode_];
  }
  NSString *result = [LibcoreIcuICU getDisplayLanguageNativeWithNSString:localeString withNSString:[((JavaUtilLocale *) nil_chk(locale)) description]];
  if (result == nil) {
    result = [LibcoreIcuICU getDisplayLanguageNativeWithNSString:localeString withNSString:[((JavaUtilLocale *) nil_chk([JavaUtilLocale getDefault])) description]];
  }
  return result;
}

- (NSString *)getDisplayName {
  return [self getDisplayNameWithJavaUtilLocale:[JavaUtilLocale getDefault]];
}

- (NSString *)getDisplayNameWithJavaUtilLocale:(JavaUtilLocale *)locale {
  int count = 0;
  JavaLangStringBuilder *buffer = [[[JavaLangStringBuilder alloc] init] autorelease];
  if (![((NSString *) nil_chk(languageCode_)) isEmpty]) {
    NSString *displayLanguage = [self getDisplayLanguageWithJavaUtilLocale:locale];
    [buffer appendWithNSString:[((NSString *) nil_chk(displayLanguage)) isEmpty] ? languageCode_ : displayLanguage];
    ++count;
  }
  if (![((NSString *) nil_chk(countryCode_)) isEmpty]) {
    if (count == 1) {
      [buffer appendWithNSString:@" ("];
    }
    NSString *displayCountry = [self getDisplayCountryWithJavaUtilLocale:locale];
    [buffer appendWithNSString:[((NSString *) nil_chk(displayCountry)) isEmpty] ? countryCode_ : displayCountry];
    ++count;
  }
  if (![((NSString *) nil_chk(variantCode_)) isEmpty]) {
    if (count == 1) {
      [buffer appendWithNSString:@" ("];
    }
    else if (count == 2) {
      [buffer appendWithNSString:@","];
    }
    NSString *displayVariant = [self getDisplayVariantWithJavaUtilLocale:locale];
    [buffer appendWithNSString:[((NSString *) nil_chk(displayVariant)) isEmpty] ? variantCode_ : displayVariant];
    ++count;
  }
  if (count > 1) {
    [buffer appendWithNSString:@")"];
  }
  return [buffer description];
}

- (NSString *)getDisplayVariant {
  return [self getDisplayVariantWithJavaUtilLocale:[JavaUtilLocale getDefault]];
}

- (NSString *)getDisplayVariantWithJavaUtilLocale:(JavaUtilLocale *)locale {
  if ([((NSString *) nil_chk(variantCode_)) length] == 0) {
    return variantCode_;
  }
  NSString *result = [LibcoreIcuICU getDisplayVariantNativeWithNSString:[self description] withNSString:[((JavaUtilLocale *) nil_chk(locale)) description]];
  if (result == nil) {
    result = [LibcoreIcuICU getDisplayVariantNativeWithNSString:[self description] withNSString:[((JavaUtilLocale *) nil_chk([JavaUtilLocale getDefault])) description]];
  }
  return result;
}

- (NSString *)getISO3Country {
  NSString *code = [LibcoreIcuICU getISO3CountryNativeWithNSString:[self description]];
  if (![((NSString *) nil_chk(countryCode_)) isEmpty] && [((NSString *) nil_chk(code)) isEmpty]) {
    @throw [[[JavaUtilMissingResourceException alloc] initWithNSString:[NSString stringWithFormat:@"No 3-letter country code for locale: %@", self] withNSString:[NSString stringWithFormat:@"FormatData_%@", self] withNSString:@"ShortCountry"] autorelease];
  }
  return code;
}

- (NSString *)getISO3Language {
  NSString *code = [LibcoreIcuICU getISO3LanguageNativeWithNSString:[self description]];
  if (![((NSString *) nil_chk(languageCode_)) isEmpty] && [((NSString *) nil_chk(code)) isEmpty]) {
    @throw [[[JavaUtilMissingResourceException alloc] initWithNSString:[NSString stringWithFormat:@"No 3-letter language code for locale: %@", self] withNSString:[NSString stringWithFormat:@"FormatData_%@", self] withNSString:@"ShortLanguage"] autorelease];
  }
  return code;
}

+ (IOSObjectArray *)getISOCountries {
  return [LibcoreIcuICU getISOCountries];
}

+ (IOSObjectArray *)getISOLanguages {
  return [LibcoreIcuICU getISOLanguages];
}

- (NSString *)getLanguage {
  return languageCode_;
}

- (NSString *)getVariant {
  return variantCode_;
}

- (NSUInteger)hash {
  @synchronized(self) {
    {
      return [((NSString *) nil_chk(countryCode_)) hash] + [((NSString *) nil_chk(languageCode_)) hash] + [((NSString *) nil_chk(variantCode_)) hash];
    }
  }
}

+ (void)setDefaultWithJavaUtilLocale:(JavaUtilLocale *)locale {
  @synchronized([self class]) {
    {
      if (locale == nil) {
        @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"locale == null"] autorelease];
      }
      JreOperatorRetainedAssign(&JavaUtilLocale_defaultLocale_, nil, locale);
    }
  }
}

- (NSString *)description {
  NSString *result = cachedToStringResult_;
  if (result == nil) {
    result = JavaUtilLocale_set_cachedToStringResult_(self, [JavaUtilLocale toNewStringWithNSString:languageCode_ withNSString:countryCode_ withNSString:variantCode_]);
  }
  return result;
}

+ (NSString *)toNewStringWithNSString:(NSString *)languageCode
                         withNSString:(NSString *)countryCode
                         withNSString:(NSString *)variantCode {
  if ([((NSString *) nil_chk(languageCode)) length] == 0 && [((NSString *) nil_chk(countryCode)) length] == 0) {
    return @"";
  }
  JavaLangStringBuilder *result = [[[JavaLangStringBuilder alloc] initWithInt:11] autorelease];
  [result appendWithNSString:languageCode];
  if ([((NSString *) nil_chk(countryCode)) length] > 0 || [((NSString *) nil_chk(variantCode)) length] > 0) {
    [result appendWithChar:'_'];
  }
  [result appendWithNSString:countryCode];
  if ([((NSString *) nil_chk(variantCode)) length] > 0) {
    [result appendWithChar:'_'];
  }
  [result appendWithNSString:variantCode];
  return [result description];
}

+ (void)initialize {
  if (self == [JavaUtilLocale class]) {
    JreOperatorRetainedAssign(&JavaUtilLocale_CANADA_, nil, [[[JavaUtilLocale alloc] initWithBoolean:YES withNSString:@"en" withNSString:@"CA"] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_CANADA_FRENCH_, nil, [[[JavaUtilLocale alloc] initWithBoolean:YES withNSString:@"fr" withNSString:@"CA"] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_CHINA_, nil, [[[JavaUtilLocale alloc] initWithBoolean:YES withNSString:@"zh" withNSString:@"CN"] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_CHINESE_, nil, [[[JavaUtilLocale alloc] initWithBoolean:YES withNSString:@"zh" withNSString:@""] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_ENGLISH_, nil, [[[JavaUtilLocale alloc] initWithBoolean:YES withNSString:@"en" withNSString:@""] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_FRANCE_, nil, [[[JavaUtilLocale alloc] initWithBoolean:YES withNSString:@"fr" withNSString:@"FR"] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_FRENCH_, nil, [[[JavaUtilLocale alloc] initWithBoolean:YES withNSString:@"fr" withNSString:@""] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_GERMAN_, nil, [[[JavaUtilLocale alloc] initWithBoolean:YES withNSString:@"de" withNSString:@""] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_GERMANY_, nil, [[[JavaUtilLocale alloc] initWithBoolean:YES withNSString:@"de" withNSString:@"DE"] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_ITALIAN_, nil, [[[JavaUtilLocale alloc] initWithBoolean:YES withNSString:@"it" withNSString:@""] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_ITALY_, nil, [[[JavaUtilLocale alloc] initWithBoolean:YES withNSString:@"it" withNSString:@"IT"] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_JAPAN_, nil, [[[JavaUtilLocale alloc] initWithBoolean:YES withNSString:@"ja" withNSString:@"JP"] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_JAPANESE_, nil, [[[JavaUtilLocale alloc] initWithBoolean:YES withNSString:@"ja" withNSString:@""] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_KOREA_, nil, [[[JavaUtilLocale alloc] initWithBoolean:YES withNSString:@"ko" withNSString:@"KR"] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_KOREAN_, nil, [[[JavaUtilLocale alloc] initWithBoolean:YES withNSString:@"ko" withNSString:@""] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_PRC_, nil, [[[JavaUtilLocale alloc] initWithBoolean:YES withNSString:@"zh" withNSString:@"CN"] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_ROOT_, nil, [[[JavaUtilLocale alloc] initWithBoolean:YES withNSString:@"" withNSString:@""] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_SIMPLIFIED_CHINESE_, nil, [[[JavaUtilLocale alloc] initWithBoolean:YES withNSString:@"zh" withNSString:@"CN"] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_TAIWAN_, nil, [[[JavaUtilLocale alloc] initWithBoolean:YES withNSString:@"zh" withNSString:@"TW"] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_TRADITIONAL_CHINESE_, nil, [[[JavaUtilLocale alloc] initWithBoolean:YES withNSString:@"zh" withNSString:@"TW"] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_UK_, nil, [[[JavaUtilLocale alloc] initWithBoolean:YES withNSString:@"en" withNSString:@"GB"] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_US_, nil, [[[JavaUtilLocale alloc] initWithBoolean:YES withNSString:@"en" withNSString:@"US"] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_defaultLocale_, nil, JavaUtilLocale_US_);
    {
      NSString *language = [JavaLangSystem getPropertyWithNSString:@"user.language" withNSString:@"en"];
      NSString *region = [JavaLangSystem getPropertyWithNSString:@"user.region" withNSString:@"US"];
      NSString *variant = [JavaLangSystem getPropertyWithNSString:@"user.variant" withNSString:@""];
      JreOperatorRetainedAssign(&JavaUtilLocale_defaultLocale_, nil, [[[JavaUtilLocale alloc] initWithNSString:language withNSString:region withNSString:variant] autorelease]);
    }
  }
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilLocale_set_cachedToStringResult_(self, nil);
  JavaUtilLocale_set_variantCode_(self, nil);
  JavaUtilLocale_set_languageCode_(self, nil);
  JavaUtilLocale_set_countryCode_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilLocale *)other {
  [super copyAllFieldsTo:other];
  JavaUtilLocale_set_cachedToStringResult_(other, cachedToStringResult_);
  JavaUtilLocale_set_countryCode_(other, countryCode_);
  JavaUtilLocale_set_languageCode_(other, languageCode_);
  JavaUtilLocale_set_variantCode_(other, variantCode_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:countryCode_ name:@"countryCode"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:languageCode_ name:@"languageCode"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:variantCode_ name:@"variantCode"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:cachedToStringResult_ name:@"cachedToStringResult"]];
  return result;
}

@end
