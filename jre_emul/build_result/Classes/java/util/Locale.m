//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/luni/src/main/java/java/util/Locale.java
//
//  Created by retechretech on 13-9-4.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/AssertionError.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Locale.h"
#include "java/util/MissingResourceException.h"
#import "IOSClass.h"

@implementation JavaUtilLocale

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_defaultLocale_ name:@"JavaUtilLocale_defaultLocale_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_CANADA_ name:@"JavaUtilLocale_CANADA_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_CANADA_FRENCH_ name:@"JavaUtilLocale_CANADA_FRENCH_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_CHINA_ name:@"JavaUtilLocale_CHINA_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_CHINESE_ name:@"JavaUtilLocale_CHINESE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_ENGLISH_ name:@"JavaUtilLocale_ENGLISH_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_FRANCE_ name:@"JavaUtilLocale_FRANCE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_FRENCH_ name:@"JavaUtilLocale_FRENCH_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_GERMAN_ name:@"JavaUtilLocale_GERMAN_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_GERMANY_ name:@"JavaUtilLocale_GERMANY_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_ITALIAN_ name:@"JavaUtilLocale_ITALIAN_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_ITALY_ name:@"JavaUtilLocale_ITALY_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_JAPAN_ name:@"JavaUtilLocale_JAPAN_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_JAPANESE_ name:@"JavaUtilLocale_JAPANESE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_KOREA_ name:@"JavaUtilLocale_KOREA_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_KOREAN_ name:@"JavaUtilLocale_KOREAN_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_PRC_ name:@"JavaUtilLocale_PRC_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_ROOT_ name:@"JavaUtilLocale_ROOT_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_SIMPLIFIED_CHINESE_ name:@"JavaUtilLocale_SIMPLIFIED_CHINESE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_TAIWAN_ name:@"JavaUtilLocale_TAIWAN_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_TRADITIONAL_CHINESE_ name:@"JavaUtilLocale_TRADITIONAL_CHINESE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_UK_ name:@"JavaUtilLocale_UK_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLocale_US_ name:@"JavaUtilLocale_US_"]];
  return result;
}

static JavaUtilLocale * JavaUtilLocale_defaultLocale_;
static JavaUtilLocale * JavaUtilLocale_CANADA_;
static JavaUtilLocale * JavaUtilLocale_CANADA_FRENCH_;
static JavaUtilLocale * JavaUtilLocale_CHINA_;
static JavaUtilLocale * JavaUtilLocale_CHINESE_;
static JavaUtilLocale * JavaUtilLocale_ENGLISH_;
static JavaUtilLocale * JavaUtilLocale_FRANCE_;
static JavaUtilLocale * JavaUtilLocale_FRENCH_;
static JavaUtilLocale * JavaUtilLocale_GERMAN_;
static JavaUtilLocale * JavaUtilLocale_GERMANY_;
static JavaUtilLocale * JavaUtilLocale_ITALIAN_;
static JavaUtilLocale * JavaUtilLocale_ITALY_;
static JavaUtilLocale * JavaUtilLocale_JAPAN_;
static JavaUtilLocale * JavaUtilLocale_JAPANESE_;
static JavaUtilLocale * JavaUtilLocale_KOREA_;
static JavaUtilLocale * JavaUtilLocale_KOREAN_;
static JavaUtilLocale * JavaUtilLocale_PRC_;
static JavaUtilLocale * JavaUtilLocale_ROOT_;
static JavaUtilLocale * JavaUtilLocale_SIMPLIFIED_CHINESE_;
static JavaUtilLocale * JavaUtilLocale_TAIWAN_;
static JavaUtilLocale * JavaUtilLocale_TRADITIONAL_CHINESE_;
static JavaUtilLocale * JavaUtilLocale_UK_;
static JavaUtilLocale * JavaUtilLocale_US_;

+ (JavaUtilLocale *)defaultLocale {
  return JavaUtilLocale_defaultLocale_;
}

+ (void)setDefaultLocale:(JavaUtilLocale *)defaultLocale {
  JreOperatorRetainedAssign(&JavaUtilLocale_defaultLocale_, nil, defaultLocale);
}

+ (JavaUtilLocale *)CANADA {
  return JavaUtilLocale_CANADA_;
}

+ (JavaUtilLocale *)CANADA_FRENCH {
  return JavaUtilLocale_CANADA_FRENCH_;
}

+ (JavaUtilLocale *)CHINA {
  return JavaUtilLocale_CHINA_;
}

+ (JavaUtilLocale *)CHINESE {
  return JavaUtilLocale_CHINESE_;
}

+ (JavaUtilLocale *)ENGLISH {
  return JavaUtilLocale_ENGLISH_;
}

+ (JavaUtilLocale *)FRANCE {
  return JavaUtilLocale_FRANCE_;
}

+ (JavaUtilLocale *)FRENCH {
  return JavaUtilLocale_FRENCH_;
}

+ (JavaUtilLocale *)GERMAN {
  return JavaUtilLocale_GERMAN_;
}

+ (JavaUtilLocale *)GERMANY {
  return JavaUtilLocale_GERMANY_;
}

+ (JavaUtilLocale *)ITALIAN {
  return JavaUtilLocale_ITALIAN_;
}

+ (JavaUtilLocale *)ITALY {
  return JavaUtilLocale_ITALY_;
}

+ (JavaUtilLocale *)JAPAN {
  return JavaUtilLocale_JAPAN_;
}

+ (JavaUtilLocale *)JAPANESE {
  return JavaUtilLocale_JAPANESE_;
}

+ (JavaUtilLocale *)KOREA {
  return JavaUtilLocale_KOREA_;
}

+ (JavaUtilLocale *)KOREAN {
  return JavaUtilLocale_KOREAN_;
}

+ (JavaUtilLocale *)PRC {
  return JavaUtilLocale_PRC_;
}

+ (JavaUtilLocale *)ROOT {
  return JavaUtilLocale_ROOT_;
}

+ (JavaUtilLocale *)SIMPLIFIED_CHINESE {
  return JavaUtilLocale_SIMPLIFIED_CHINESE_;
}

+ (JavaUtilLocale *)TAIWAN {
  return JavaUtilLocale_TAIWAN_;
}

+ (JavaUtilLocale *)TRADITIONAL_CHINESE {
  return JavaUtilLocale_TRADITIONAL_CHINESE_;
}

+ (JavaUtilLocale *)UK {
  return JavaUtilLocale_UK_;
}

+ (JavaUtilLocale *)US {
  return JavaUtilLocale_US_;
}

+ (NSString *)getUserLanguageWithNSString:(NSString *)defaultLanguage   {
    NSString *language = [[NSLocale currentLocale] objectForKey:NSLocaleLanguageCode];
    if (language == nil) {
      language = @"";
    }
    return language;
  }

+ (NSString *)getUserRegionWithNSString:(NSString *)defaultRegion   {
    NSString *region = [[NSLocale currentLocale] objectForKey:NSLocaleCountryCode];
    if (region == nil) {
      region = @"";
    }
    return region;
  }

+ (NSString *)getUserVariantWithNSString:(NSString *)defaultVariant   {
    NSString *variant = [[NSLocale currentLocale] objectForKey:NSLocaleVariantCode];
    if (variant == nil) {
      variant = @"";
    }
    return variant;
  }

- (id)init {
  if ((self = [super init])) {
    JavaUtilLocale_set_languageCode_(self, @"en");
    JavaUtilLocale_set_countryCode_(self, @"US");
    JavaUtilLocale_set_variantCode_(self, @"");
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithNSString:(NSString *)language {
  return JreMemDebugAdd([self initJavaUtilLocaleWithNSString:language withNSString:@"" withNSString:@""]);
}

- (id)initWithNSString:(NSString *)language
          withNSString:(NSString *)country {
  return JreMemDebugAdd([self initJavaUtilLocaleWithNSString:language withNSString:country withNSString:@""]);
}

- (id)initJavaUtilLocaleWithNSString:(NSString *)language
                        withNSString:(NSString *)country
                        withNSString:(NSString *)variant {
  if ((self = [super init])) {
    if (language == nil || country == nil || variant == nil) {
      @throw [[[JavaLangNullPointerException alloc] init] autorelease];
    }
    if ([((NSString *) nil_chk(language)) length] == 0 && [((NSString *) nil_chk(country)) length] == 0) {
      JavaUtilLocale_set_languageCode_(self, @"");
      JavaUtilLocale_set_countryCode_(self, @"");
      JavaUtilLocale_set_variantCode_(self, variant);
    }
    else {
      JavaUtilLocale_set_languageCode_(self, language);
      if ([languageCode_ isEqual:@"he"]) {
        JavaUtilLocale_set_languageCode_(self, @"iw");
      }
      else if ([languageCode_ isEqual:@"id"]) {
        JavaUtilLocale_set_languageCode_(self, @"in");
      }
      else if ([languageCode_ isEqual:@"yi"]) {
        JavaUtilLocale_set_languageCode_(self, @"ji");
      }
      JavaUtilLocale_set_countryCode_(self, country);
      JavaUtilLocale_set_variantCode_(self, variant);
    }
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithNSString:(NSString *)language
          withNSString:(NSString *)country
          withNSString:(NSString *)variant {
  return [self initJavaUtilLocaleWithNSString:language withNSString:country withNSString:variant];
}

- (id)clone {
  return [[[JavaUtilLocale alloc] initWithNSString:languageCode_ withNSString:countryCode_ withNSString:variantCode_] autorelease];
}

- (BOOL)isEqual:(id)object {
  if (object == self) {
    return YES;
  }
  if ([object isKindOfClass:[JavaUtilLocale class]]) {
    JavaUtilLocale *o = (JavaUtilLocale *) object;
    return [((NSString *) nil_chk(languageCode_)) isEqual:((JavaUtilLocale *) nil_chk(o))->languageCode_] && [((NSString *) nil_chk(countryCode_)) isEqual:o->countryCode_] && [((NSString *) nil_chk(variantCode_)) isEqual:o->variantCode_];
  }
  return NO;
}

+ (IOSObjectArray *)getAvailableLocales   {
    NSArray *locales = [NSLocale availableLocaleIdentifiers];
    NSUInteger n = [locales count];
    IOSClass *localeType = [IOSClass classWithClass:[JavaUtilLocale class]];
    IOSObjectArray *result = [[IOSObjectArray alloc] initWithLength:n type:localeType];
    for (NSUInteger i = 0; i < n; i++) {
      NSString *localeIdentifier = [locales objectAtIndex:i];
      NSDictionary *parts = [NSLocale componentsFromLocaleIdentifier:localeIdentifier];
      NSString *language = [parts objectForKey:NSLocaleLanguageCode];
      if (!language) {
        language = @"";
      }
      NSString *country = [parts objectForKey:NSLocaleCountryCode];
      if (!country) {
        country = @"";
      }
      NSString *variant = [parts objectForKey:NSLocaleVariantCode];
      if (!variant) {
        variant = @"";
      }
      JavaUtilLocale *javaLocale = [[JavaUtilLocale alloc] initWithNSString:language
      withNSString:country
      withNSString:variant];
      #if ! __has_feature(objc_arc)
      [javaLocale autorelease];
      #endif
      [result replaceObjectAtIndex:i withObject:javaLocale];
    }
    #if ! __has_feature(objc_arc)
    [result autorelease];
    #endif
    return result;
  }

- (NSString *)getCountry {
  return countryCode_;
}

+ (JavaUtilLocale *)getDefault {
  return JavaUtilLocale_defaultLocale_;
}

- (NSString *)getDisplayCountry {
  return [self getDisplayCountryWithJavaUtilLocale:[JavaUtilLocale getDefault]];
}

- (NSString *)getDisplayCountryWithJavaUtilLocale:(JavaUtilLocale *)locale {
  @throw [[[JavaLangAssertionError alloc] initWithId:@"not implemented"] autorelease];
}

- (NSString *)getDisplayLanguage {
  return [self getDisplayLanguageWithJavaUtilLocale:[JavaUtilLocale getDefault]];
}

- (NSString *)getDisplayLanguageWithJavaUtilLocale:(JavaUtilLocale *)locale {
  @throw [[[JavaLangAssertionError alloc] initWithId:@"not implemented"] autorelease];
}

- (NSString *)getDisplayName {
  return [self getDisplayNameWithJavaUtilLocale:[JavaUtilLocale getDefault]];
}

- (NSString *)getDisplayNameWithJavaUtilLocale:(JavaUtilLocale *)locale {
  int count = 0;
  JavaLangStringBuilder *buffer = [[[JavaLangStringBuilder alloc] init] autorelease];
  if ([((NSString *) nil_chk(languageCode_)) length] > 0) {
    [buffer appendWithNSString:[self getDisplayLanguageWithJavaUtilLocale:locale]];
    count++;
  }
  if ([((NSString *) nil_chk(countryCode_)) length] > 0) {
    if (count == 1) {
      [buffer appendWithNSString:@" ("];
    }
    [buffer appendWithNSString:[self getDisplayCountryWithJavaUtilLocale:locale]];
    count++;
  }
  if ([((NSString *) nil_chk(variantCode_)) length] > 0) {
    if (count == 1) {
      [buffer appendWithNSString:@" ("];
    }
    else if (count == 2) {
      [buffer appendWithNSString:@","];
    }
    [buffer appendWithNSString:[self getDisplayVariantWithJavaUtilLocale:locale]];
    count++;
  }
  if (count > 1) {
    [buffer appendWithNSString:@")"];
  }
  return [buffer description];
}

- (NSString *)getDisplayVariant {
  return [self getDisplayVariantWithJavaUtilLocale:[JavaUtilLocale getDefault]];
}

- (NSString *)getDisplayVariantWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return [self getVariant];
}

- (NSString *)getISO3Country {
  @throw [[[JavaLangAssertionError alloc] initWithId:@"not implemented"] autorelease];
}

+ (IOSObjectArray *)__exceptions_getISO3Country {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaUtilMissingResourceException getClass] } count:1 type:[IOSClass getClass]];
}

- (NSString *)getISO3Language {
  @throw [[[JavaLangAssertionError alloc] initWithId:@"not implemented"] autorelease];
}

+ (IOSObjectArray *)__exceptions_getISO3Language {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaUtilMissingResourceException getClass] } count:1 type:[IOSClass getClass]];
}

+ (IOSObjectArray *)getISOCountries   {
    NSArray *countries = [NSLocale ISOCountryCodes];
    NSUInteger count = [countries count];
    NSMutableData* data = [NSMutableData dataWithLength: count * sizeof(id)];
    NSRange range = NSMakeRange(0, count);
    [countries getObjects:(__unsafe_unretained id *) data.mutableBytes range:range];
    IOSObjectArray * result =
    [IOSObjectArray arrayWithObjects:(__unsafe_unretained id *) data.mutableBytes
    count:count
    type:[IOSClass classWithClass:[NSString class]]];
    return result;
  }

+ (IOSObjectArray *)getISOLanguages   {
    NSArray *languages = [NSLocale ISOLanguageCodes];
    NSUInteger count = [languages count];
    NSMutableData* data = [NSMutableData dataWithLength: count * sizeof(id)];
    NSRange range = NSMakeRange(0, count);
    [languages getObjects:(__unsafe_unretained id *) data.mutableBytes range:range];
    IOSObjectArray * result =
    [IOSObjectArray arrayWithObjects:(__unsafe_unretained id *) data.mutableBytes
    count:count
    type:[IOSClass classWithClass:[NSString class]]];
    return result;
  }

- (NSString *)getLanguage {
  return languageCode_;
}

- (NSString *)getVariant {
  return variantCode_;
}

- (NSUInteger)hash {
  @synchronized(self) {
    {
      return [((NSString *) nil_chk(countryCode_)) hash] + [((NSString *) nil_chk(languageCode_)) hash] + [((NSString *) nil_chk(variantCode_)) hash];
    }
  }
}

+ (void)setDefaultWithJavaUtilLocale:(JavaUtilLocale *)locale {
  @synchronized([self class]) {
    {
      if (locale != nil) {
        JreOperatorRetainedAssign(&JavaUtilLocale_defaultLocale_, nil, locale);
      }
      else {
        @throw [[[JavaLangNullPointerException alloc] init] autorelease];
      }
    }
  }
}

- (NSString *)description {
  JavaLangStringBuilder *result = [[[JavaLangStringBuilder alloc] init] autorelease];
  [result appendWithNSString:languageCode_];
  if ([((NSString *) nil_chk(countryCode_)) length] > 0) {
    [result appendWithUnichar:'_'];
    [result appendWithNSString:countryCode_];
  }
  if ([((NSString *) nil_chk(variantCode_)) length] > 0 && [result sequenceLength] > 0) {
    if (0 == [countryCode_ length]) {
      [result appendWithNSString:@"__"];
    }
    else {
      [result appendWithUnichar:'_'];
    }
    [result appendWithNSString:variantCode_];
  }
  return [result description];
}

+ (void)initialize {
  if (self == [JavaUtilLocale class]) {
    JreOperatorRetainedAssign(&JavaUtilLocale_defaultLocale_, nil, [[[JavaUtilLocale alloc] init] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_CANADA_, nil, [[[JavaUtilLocale alloc] initWithNSString:@"en" withNSString:@"CA"] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_CANADA_FRENCH_, nil, [[[JavaUtilLocale alloc] initWithNSString:@"fr" withNSString:@"CA"] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_CHINA_, nil, [[[JavaUtilLocale alloc] initWithNSString:@"zh" withNSString:@"CN"] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_CHINESE_, nil, [[[JavaUtilLocale alloc] initWithNSString:@"zh" withNSString:@""] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_ENGLISH_, nil, [[[JavaUtilLocale alloc] initWithNSString:@"en" withNSString:@""] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_FRANCE_, nil, [[[JavaUtilLocale alloc] initWithNSString:@"fr" withNSString:@"FR"] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_FRENCH_, nil, [[[JavaUtilLocale alloc] initWithNSString:@"fr" withNSString:@""] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_GERMAN_, nil, [[[JavaUtilLocale alloc] initWithNSString:@"de" withNSString:@""] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_GERMANY_, nil, [[[JavaUtilLocale alloc] initWithNSString:@"de" withNSString:@"DE"] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_ITALIAN_, nil, [[[JavaUtilLocale alloc] initWithNSString:@"it" withNSString:@""] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_ITALY_, nil, [[[JavaUtilLocale alloc] initWithNSString:@"it" withNSString:@"IT"] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_JAPAN_, nil, [[[JavaUtilLocale alloc] initWithNSString:@"ja" withNSString:@"JP"] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_JAPANESE_, nil, [[[JavaUtilLocale alloc] initWithNSString:@"ja" withNSString:@""] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_KOREA_, nil, [[[JavaUtilLocale alloc] initWithNSString:@"ko" withNSString:@"KR"] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_KOREAN_, nil, [[[JavaUtilLocale alloc] initWithNSString:@"ko" withNSString:@""] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_PRC_, nil, [[[JavaUtilLocale alloc] initWithNSString:@"zh" withNSString:@"CN"] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_ROOT_, nil, [[[JavaUtilLocale alloc] initWithNSString:@"" withNSString:@""] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_SIMPLIFIED_CHINESE_, nil, [[[JavaUtilLocale alloc] initWithNSString:@"zh" withNSString:@"CN"] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_TAIWAN_, nil, [[[JavaUtilLocale alloc] initWithNSString:@"zh" withNSString:@"TW"] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_TRADITIONAL_CHINESE_, nil, [[[JavaUtilLocale alloc] initWithNSString:@"zh" withNSString:@"TW"] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_UK_, nil, [[[JavaUtilLocale alloc] initWithNSString:@"en" withNSString:@"GB"] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilLocale_US_, nil, [[[JavaUtilLocale alloc] initWithNSString:@"en" withNSString:@"US"] autorelease]);
    {
      NSString *language = [JavaUtilLocale getUserLanguageWithNSString:@"en"];
      NSString *region = [JavaUtilLocale getUserRegionWithNSString:@"US"];
      NSString *variant = [JavaUtilLocale getUserVariantWithNSString:@""];
      JreOperatorRetainedAssign(&JavaUtilLocale_defaultLocale_, nil, [[[JavaUtilLocale alloc] initWithNSString:language withNSString:region withNSString:variant] autorelease]);
    }
  }
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilLocale_set_variantCode_(self, nil);
  JavaUtilLocale_set_languageCode_(self, nil);
  JavaUtilLocale_set_countryCode_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilLocale *)other {
  [super copyAllFieldsTo:other];
  JavaUtilLocale_set_countryCode_(other, countryCode_);
  JavaUtilLocale_set_languageCode_(other, languageCode_);
  JavaUtilLocale_set_variantCode_(other, variantCode_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:countryCode_ name:@"countryCode"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:languageCode_ name:@"languageCode"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:variantCode_ name:@"variantCode"]];
  return result;
}

@end
