//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/luni/src/main/java/java/util/HashSet.java
//
//  Created by retechretech on 13-9-4.
//

#include "java/lang/CloneNotSupportedException.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/Set.h"

@implementation JavaUtilHashSet

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)init {
  return JreMemDebugAdd([self initJavaUtilHashSetWithJavaUtilHashMap:[[[JavaUtilHashMap alloc] init] autorelease]]);
}

- (id)initWithInt:(int)capacity {
  return JreMemDebugAdd([self initJavaUtilHashSetWithJavaUtilHashMap:[[[JavaUtilHashMap alloc] initWithInt:capacity] autorelease]]);
}

- (id)initWithInt:(int)capacity
        withFloat:(float)loadFactor {
  return JreMemDebugAdd([self initJavaUtilHashSetWithJavaUtilHashMap:[[[JavaUtilHashMap alloc] initWithInt:capacity withFloat:loadFactor] autorelease]]);
}

- (id)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  if ((self = [self initJavaUtilHashSetWithJavaUtilHashMap:[[[JavaUtilHashMap alloc] initWithInt:[((id<JavaUtilCollection>) nil_chk(collection)) size] < 6 ? 11 : [collection size] * 2] autorelease]])) {
    {
      id<JavaUtilIterator> iter__ = [collection iterator];
      while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
        id e = [iter__ next];
        [self addWithId:e];
      }
    }
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initJavaUtilHashSetWithJavaUtilHashMap:(JavaUtilHashMap *)backingMap {
  if ((self = [super init])) {
    JavaUtilHashSet_set_dummyKey_(self, (JavaUtilHashSet *) [[[NSObject alloc] init] autorelease]);
    JavaUtilHashSet_set_backingMap_(self, backingMap);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaUtilHashMap:(JavaUtilHashMap *)backingMap {
  return [self initJavaUtilHashSetWithJavaUtilHashMap:backingMap];
}

- (BOOL)addWithId:(id)object {
  return [((JavaUtilHashMap *) nil_chk(backingMap_)) putWithId:object withId:dummyKey_] == nil;
}

- (void)clear {
  [((JavaUtilHashMap *) nil_chk(backingMap_)) clear];
}

- (id)clone {
  @try {
    JavaUtilHashSet *clone = (JavaUtilHashSet *) [super clone];
    JavaUtilHashSet_set_backingMap_(nil_chk(clone), (JavaUtilHashMap *) [((JavaUtilHashMap *) nil_chk(backingMap_)) clone]);
    return clone;
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    return nil;
  }
}

- (BOOL)containsWithId:(id)object {
  return [((JavaUtilHashMap *) nil_chk(backingMap_)) containsKeyWithId:object];
}

- (BOOL)isEmpty {
  return [((JavaUtilHashMap *) nil_chk(backingMap_)) isEmpty];
}

- (id<JavaUtilIterator>)iterator {
  return [((id<JavaUtilSet>) nil_chk([((JavaUtilHashMap *) nil_chk(backingMap_)) keySet])) iterator];
}

- (BOOL)removeWithId:(id)object {
  return [((JavaUtilHashMap *) nil_chk(backingMap_)) removeWithId:object] != nil;
}

- (int)size {
  return [((JavaUtilHashMap *) nil_chk(backingMap_)) size];
}

- (JavaUtilHashMap *)createBackingMapWithInt:(int)capacity
                                   withFloat:(float)loadFactor {
  return [[[JavaUtilHashMap alloc] initWithInt:capacity withFloat:loadFactor] autorelease];
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilHashSet_set_backingMap_(self, nil);
  JavaUtilHashSet_set_dummyKey_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilHashSet *)other {
  [super copyAllFieldsTo:other];
  JavaUtilHashSet_set_backingMap_(other, backingMap_);
  JavaUtilHashSet_set_dummyKey_(other, dummyKey_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:dummyKey_ name:@"dummyKey"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:backingMap_ name:@"backingMap"]];
  return result;
}

@end
