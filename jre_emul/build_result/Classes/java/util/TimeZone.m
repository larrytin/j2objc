//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSObjectArray.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Character.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Date.h"
#include "java/util/Locale.h"
#include "java/util/SimpleTimeZone.h"
#include "java/util/TimeZone.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"
#import "IOSClass.h"
#import "java/util/SimpleTimeZone.h"

@implementation JavaUtilTimeZone

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilTimeZone_CUSTOM_ZONE_ID_PATTERN_ name:@"JavaUtilTimeZone_CUSTOM_ZONE_ID_PATTERN_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilTimeZone_GMT_ name:@"JavaUtilTimeZone_GMT_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilTimeZone_UTC_ name:@"JavaUtilTimeZone_UTC_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilTimeZone_defaultTimeZone_ name:@"JavaUtilTimeZone_defaultTimeZone_"]];
  return result;
}

static JavaUtilRegexPattern * JavaUtilTimeZone_CUSTOM_ZONE_ID_PATTERN_;
static JavaUtilTimeZone * JavaUtilTimeZone_GMT_;
static JavaUtilTimeZone * JavaUtilTimeZone_UTC_;
static JavaUtilTimeZone * JavaUtilTimeZone_defaultTimeZone_;

+ (JavaUtilRegexPattern *)CUSTOM_ZONE_ID_PATTERN {
  return JavaUtilTimeZone_CUSTOM_ZONE_ID_PATTERN_;
}

+ (int)SHORT {
  return JavaUtilTimeZone_SHORT;
}

+ (int)LONG {
  return JavaUtilTimeZone_LONG;
}

+ (JavaUtilTimeZone *)GMT {
  return JavaUtilTimeZone_GMT_;
}

+ (JavaUtilTimeZone *)UTC {
  return JavaUtilTimeZone_UTC_;
}

+ (JavaUtilTimeZone *)defaultTimeZone {
  return JavaUtilTimeZone_defaultTimeZone_;
}

+ (void)setDefaultTimeZone:(JavaUtilTimeZone *)defaultTimeZone {
  JreOperatorRetainedAssign(&JavaUtilTimeZone_defaultTimeZone_, nil, defaultTimeZone);
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

- (id)initWithId:(id)nativeTimeZone {
  if (self = [super init]) {
    JavaUtilTimeZone_set_nativeTimeZone_(self, nativeTimeZone);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)clone {
  @try {
    return [super clone];
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw [[[JavaLangAssertionError alloc] initWithId:e] autorelease];
  }
}

+ (IOSObjectArray *)getAvailableIDs {
  NSArray *timeZones = [NSTimeZone knownTimeZoneNames];
  return [IOSObjectArray arrayWithNSArray:timeZones
  type:[IOSClass classWithClass:[NSString class]]];
}

+ (IOSObjectArray *)getAvailableIDsWithInt:(int)offsetMillis {
  NSInteger secondsOffset = offsetMillis / 1000;
  NSArray *timeZones = [NSTimeZone knownTimeZoneNames];
  NSMutableArray *results = [NSMutableArray array];
  for (NSString *id in timeZones) {
    NSTimeZone *tz = [NSTimeZone timeZoneWithName:id];
    if ([tz secondsFromGMT] == secondsOffset) {
      [results addObject:id];
    }
  }
  return [IOSObjectArray arrayWithNSArray:results
  type:[IOSClass classWithClass:[NSString class]]];
}

+ (JavaUtilTimeZone *)getDefault {
  @synchronized([self class]) {
    {
      if (JavaUtilTimeZone_defaultTimeZone_ == nil) {
        JreOperatorRetainedAssign(&JavaUtilTimeZone_defaultTimeZone_, nil, [JavaUtilTimeZone getDefaultNativeTimeZone]);
      }
      return (JavaUtilTimeZone *) check_class_cast([((JavaUtilTimeZone *) nil_chk(JavaUtilTimeZone_defaultTimeZone_)) clone], [JavaUtilTimeZone class]);
    }
  }
}

+ (JavaUtilTimeZone *)getDefaultNativeTimeZone {
  NSTimeZone *tz = [NSTimeZone defaultTimeZone];
  NSInteger offsetMillis = [tz secondsFromGMT] * 1000;
  JavaUtilTimeZone *result = [[JavaUtilSimpleTimeZone alloc] initWithInt:offsetMillis
  withNSString:[tz name]];
  return AUTORELEASE(result);
}

- (NSString *)getDisplayName {
  return [self getDisplayNameWithBoolean:NO withInt:JavaUtilTimeZone_LONG withJavaUtilLocale:[JavaUtilLocale getDefault]];
}

- (NSString *)getDisplayNameWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return [self getDisplayNameWithBoolean:NO withInt:JavaUtilTimeZone_LONG withJavaUtilLocale:locale];
}

- (NSString *)getDisplayNameWithBoolean:(BOOL)daylightTime
                                withInt:(int)style {
  return [self getDisplayNameWithBoolean:daylightTime withInt:style withJavaUtilLocale:[JavaUtilLocale getDefault]];
}

- (NSString *)getDisplayNameWithBoolean:(BOOL)daylightTime
                                withInt:(int)style
                     withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (style != JavaUtilTimeZone_SHORT && style != JavaUtilTimeZone_LONG) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  BOOL useDaylight = daylightTime && [self useDaylightTime];
  NSString *result = [self displayNameWithBoolean:useDaylight withBoolean:style == JavaUtilTimeZone_SHORT withJavaUtilLocale:locale];
  if (result != nil) {
    return result;
  }
  int offset = [self getRawOffset];
  if (useDaylight) {
    offset += [self getDSTSavings];
  }
  offset /= 60000;
  unichar sign = '+';
  if (offset < 0) {
    sign = '-';
    offset = -offset;
  }
  JavaLangStringBuilder *builder = [[[JavaLangStringBuilder alloc] initWithInt:9] autorelease];
  [builder appendWithNSString:@"GMT"];
  [builder appendWithChar:sign];
  [self appendNumberWithJavaLangStringBuilder:builder withInt:2 withInt:offset / 60];
  [builder appendWithChar:':'];
  [self appendNumberWithJavaLangStringBuilder:builder withInt:2 withInt:offset % 60];
  return [builder description];
}

- (NSString *)displayNameWithBoolean:(BOOL)daylightTime
                         withBoolean:(BOOL)shortName
                  withJavaUtilLocale:(JavaUtilLocale *)locale {
  NSTimeZoneNameStyle zoneStyle;
  if (daylightTime) {
    zoneStyle = shortName ?
    NSTimeZoneNameStyleShortDaylightSaving : NSTimeZoneNameStyleDaylightSaving;
  } else {
    zoneStyle = shortName ?
    NSTimeZoneNameStyleShortStandard : NSTimeZoneNameStyleStandard;
  }
  
  // Find native locale.
  NSLocale *nativeLocale;
  if (locale) {
    NSMutableDictionary *components = [NSMutableDictionary dictionary];
    [components setObject:[locale getLanguage] forKey:NSLocaleLanguageCode];
    [components setObject:[locale getCountry]  forKey:NSLocaleCountryCode];
    [components setObject:[locale getVariant]  forKey:NSLocaleVariantCode];
    NSString *localeId = [NSLocale localeIdentifierFromComponents:components];
    nativeLocale = AUTORELEASE([[NSLocale alloc] initWithLocaleIdentifier:localeId]);
  } else {
    nativeLocale = [NSLocale currentLocale];
  }
  
  return [(NSTimeZone *) nativeTimeZone_ localizedName:zoneStyle locale:nativeLocale];
}

- (void)appendNumberWithJavaLangStringBuilder:(JavaLangStringBuilder *)builder
                                      withInt:(int)count
                                      withInt:(int)value {
  NSString *string = [JavaLangInteger toStringWithInt:value];
  for (int i = 0; i < count - [((NSString *) nil_chk(string)) length]; i++) {
    [((JavaLangStringBuilder *) nil_chk(builder)) appendWithChar:'0'];
  }
  [((JavaLangStringBuilder *) nil_chk(builder)) appendWithNSString:string];
}

- (NSString *)getID {
  return ID_;
}

- (int)getDSTSavings {
  return [self useDaylightTime] ? 3600000 : 0;
}

- (int)getOffsetWithLong:(long long int)time {
  if ([self inDaylightTimeWithJavaUtilDate:[[[JavaUtilDate alloc] initWithLong:time] autorelease]]) {
    return [self getRawOffset] + [self getDSTSavings];
  }
  return [self getRawOffset];
}

- (int)getOffsetWithInt:(int)era
                withInt:(int)year
                withInt:(int)month
                withInt:(int)day
                withInt:(int)dayOfWeek
                withInt:(int)timeOfDayMillis {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)getRawOffset {
  return (int) [(NSTimeZone *) nativeTimeZone_ secondsFromGMT] * 1000;
}

+ (JavaUtilTimeZone *)getTimeZoneWithNSString:(NSString *)id_ {
  @synchronized([self class]) {
    {
      if (id_ == nil) {
        @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"id == null"] autorelease];
      }
      if ([((NSString *) nil_chk(id_)) length] == 3) {
        if ([id_ isEqual:@"GMT"]) {
          return (JavaUtilTimeZone *) check_class_cast([((JavaUtilTimeZone *) nil_chk(JavaUtilTimeZone_GMT_)) clone], [JavaUtilTimeZone class]);
        }
        if ([id_ isEqual:@"UTC"]) {
          return (JavaUtilTimeZone *) check_class_cast([((JavaUtilTimeZone *) nil_chk(JavaUtilTimeZone_UTC_)) clone], [JavaUtilTimeZone class]);
        }
      }
      JavaUtilTimeZone *zone = [JavaUtilTimeZone getNativeTimeZoneWithNSString:id_];
      if (zone == nil && [id_ length] > 3 && [id_ hasPrefix:@"GMT"]) {
        zone = [JavaUtilTimeZone getCustomTimeZoneWithNSString:id_];
      }
      return (zone != nil) ? zone : (JavaUtilTimeZone *) check_class_cast([((JavaUtilTimeZone *) nil_chk(JavaUtilTimeZone_GMT_)) clone], [JavaUtilTimeZone class]);
    }
  }
}

+ (JavaUtilTimeZone *)getNativeTimeZoneWithNSString:(NSString *)id_ {
  NSTimeZone *tz = [NSTimeZone timeZoneWithAbbreviation:id_];
  if (!tz) {
    tz = [NSTimeZone timeZoneWithName:id_];
  }
  if (!tz) {
    return nil;
  }
  int offset = [tz secondsFromGMT] * 1000; // convert to milliseconds
  
  // Figure out the dates that daylight savings time starts and ends.
  NSDate *toDaylightSaving, *toStandard;
  if ([tz isDaylightSavingTime]) {
    toStandard = [tz nextDaylightSavingTimeTransition];
    toDaylightSaving =
    [tz nextDaylightSavingTimeTransitionAfterDate:toStandard];
  } else {
    toDaylightSaving = [tz nextDaylightSavingTimeTransition];
    toStandard = [tz nextDaylightSavingTimeTransitionAfterDate:toDaylightSaving];
  }
  if (toStandard && toDaylightSaving) {
    NSUInteger savingsOffset =
    [tz daylightSavingTimeOffsetForDate:toDaylightSaving] * 1000;
    if ([tz isDaylightSavingTime]) {
      // iOS returns current seconds, not the zone difference.
      offset -= savingsOffset;
    }
    
    // Fetch each date's components.
    NSCalendar *calendar = [NSCalendar currentCalendar];
    NSUInteger units = NSMonthCalendarUnit | NSDayCalendarUnit |
    NSHourCalendarUnit | NSMinuteCalendarUnit | NSSecondCalendarUnit;
    NSDateComponents *daylight = [calendar components:units
    fromDate:toDaylightSaving];
    NSDateComponents *standard = [calendar components:units
    fromDate:toStandard];
    
    // Convert each day's date components to milliseconds since midnight.
    int daylightTime = (([daylight hour] * 60 * 60) +
    ([daylight minute] * 60) +
    [daylight second]) * 1000;
    int standardTime = (([standard hour] * 60 * 60) +
    ([standard minute] * 60) +
    [standard second]) * 1000;
    
    return AUTORELEASE([[JavaUtilSimpleTimeZone alloc]
    initWithInt:offset
    withNSString:[tz name]
    withInt:[daylight month] - 1
    withInt:[daylight day] - 1
    withInt:0
    withInt:daylightTime
    withInt:[standard month] - 1
    withInt:[standard day] - 1
    withInt:0
    withInt:standardTime
    withInt:savingsOffset]);
  } else {
    return AUTORELEASE([[JavaUtilSimpleTimeZone alloc]
    initWithInt:offset withNSString:[tz name]]);
  }
}

+ (JavaUtilTimeZone *)getCustomTimeZoneWithNSString:(NSString *)id_ {
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(JavaUtilTimeZone_CUSTOM_ZONE_ID_PATTERN_)) matcherWithJavaLangCharSequence:id_];
  if (![((JavaUtilRegexMatcher *) nil_chk(m)) matches]) {
    return JavaUtilTimeZone_GMT_;
  }
  if ([((NSString *) nil_chk(id_)) isEqual:@"GMT-00"]) {
    return JavaUtilTimeZone_GMT_;
  }
  int hour;
  int minute = 0;
  @try {
    hour = [JavaLangInteger parseIntWithNSString:[m groupWithInt:1]];
    if ([m groupWithInt:3] != nil) {
      minute = [JavaLangInteger parseIntWithNSString:[m groupWithInt:3]];
    }
  }
  @catch (JavaLangNumberFormatException *impossible) {
    @throw [[[JavaLangAssertionError alloc] initWithId:impossible] autorelease];
  }
  if (hour < 0 || hour > 23 || minute < 0 || minute > 59) {
    return nil;
  }
  unichar sign = [id_ charAtWithInt:3];
  int raw = (hour * 3600000) + (minute * 60000);
  if (sign == '-') {
    raw = -raw;
  }
  NSString *fmt = [m groupWithInt:2] != nil && ![JavaLangCharacter isDigitWithChar:[((NSString *) nil_chk([m groupWithInt:2])) charAtWithInt:0]] ? @"GMT%c%02d%02d" : @"GMT%c%02d:%02d";
  NSString *cleanId = [NSString stringWithFormat:fmt , sign, hour, minute, nil];
  return [[[JavaUtilSimpleTimeZone alloc] initWithInt:raw withNSString:cleanId] autorelease];
}

- (BOOL)hasSameRulesWithJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone {
  if (timeZone == nil) {
    return NO;
  }
  return [self getRawOffset] == [((JavaUtilTimeZone *) nil_chk(timeZone)) getRawOffset];
}

- (BOOL)inDaylightTimeWithJavaUtilDate:(JavaUtilDate *)time {
  return [(NSTimeZone *) nativeTimeZone_ isDaylightSavingTime];
}

+ (void)setDefaultWithJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone {
  @synchronized([self class]) {
    {
      JreOperatorRetainedAssign(&JavaUtilTimeZone_defaultTimeZone_, nil, timeZone != nil ? (JavaUtilTimeZone *) check_class_cast([timeZone clone], [JavaUtilTimeZone class]) : nil);
    }
  }
}

- (void)setIDWithNSString:(NSString *)id_ {
  if (!id_) {
    JavaLangNullPointerException *npe = [[JavaLangNullPointerException alloc] init];
    @throw AUTORELEASE(npe);
  }
  JavaUtilTimeZone_set_ID_(self, id_);
  NSTimeZone *tz = [NSTimeZone timeZoneWithAbbreviation:id_];
  if (!tz) {
    tz = [NSTimeZone timeZoneWithName:id_];
  }
  if (tz) {
    JavaUtilTimeZone_set_nativeTimeZone_(self, tz);
  }
}

- (void)setRawOffsetWithInt:(int)offsetMillis {
}

- (BOOL)useDaylightTime {
  return [(NSTimeZone *) nativeTimeZone_ nextDaylightSavingTimeTransition] != nil;
}

+ (void)initialize {
  if (self == [JavaUtilTimeZone class]) {
    JreOperatorRetainedAssign(&JavaUtilTimeZone_CUSTOM_ZONE_ID_PATTERN_, nil, [JavaUtilRegexPattern compileWithNSString:@"^GMT[-+](\\d{1,2})([:.]?(\\d\\d))?$"]);
    JreOperatorRetainedAssign(&JavaUtilTimeZone_GMT_, nil, [[[JavaUtilSimpleTimeZone alloc] initWithInt:0 withNSString:@"GMT"] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilTimeZone_UTC_, nil, [[[JavaUtilSimpleTimeZone alloc] initWithInt:0 withNSString:@"UTC"] autorelease]);
  }
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaUtilTimeZone_set_nativeTimeZone_(self, nil);
  JavaUtilTimeZone_set_ID_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaUtilTimeZone *)other {
  [super copyAllFieldsTo:other];
  JavaUtilTimeZone_set_ID_(other, ID_);
  JavaUtilTimeZone_set_nativeTimeZone_(other, nativeTimeZone_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:ID_ name:@"ID"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:nativeTimeZone_ name:@"nativeTimeZone"]];
  return result;
}

@end
