//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/luni/src/main/java/java/io/FileDescriptor.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSClass.h"
#include "java/io/FileDescriptor.h"
#include "java/io/SyncFailedException.h"
#import <fcntl.h>

@implementation JavaIoFileDescriptor

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaIoFileDescriptor_in_ name:@"JavaIoFileDescriptor_in_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaIoFileDescriptor_out_ name:@"JavaIoFileDescriptor_out_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaIoFileDescriptor_err_ name:@"JavaIoFileDescriptor_err_"]];
  return result;
}

static JavaIoFileDescriptor * JavaIoFileDescriptor_in_;
static JavaIoFileDescriptor * JavaIoFileDescriptor_out_;
static JavaIoFileDescriptor * JavaIoFileDescriptor_err_;

+ (JavaIoFileDescriptor *)in {
  return JavaIoFileDescriptor_in_;
}

+ (JavaIoFileDescriptor *)out {
  return JavaIoFileDescriptor_out_;
}

+ (JavaIoFileDescriptor *)err {
  return JavaIoFileDescriptor_err_;
}

+ (long long int)getStdInDescriptor {
  return (long) fcntl(STDIN_FILENO, F_DUPFD, 0);
}

+ (long long int)getStdOutDescriptor {
  return (long) fcntl(STDOUT_FILENO, F_DUPFD, 0);
}

+ (long long int)getStdErrDescriptor {
  return (long) fcntl(STDERR_FILENO, F_DUPFD, 0);
}

- (id)init {
  if (self = [super init]) {
    descriptor_ = -1;
    readOnly_ = NO;
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)sync {
  if (!readOnly_) {
    [self syncImpl];
  }
}

+ (IOSObjectArray *)__exceptions_sync {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoSyncFailedException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)syncImpl {
  fsync((int) descriptor_);
}

+ (IOSObjectArray *)__exceptions_syncImpl {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoSyncFailedException getClass] } count:1 type:[IOSClass getClass]];
}

- (BOOL)valid {
  return descriptor_ != -1;
}

+ (void)initialize {
  if (self == [JavaIoFileDescriptor class]) {
    JreOperatorRetainedAssign(&JavaIoFileDescriptor_in_, nil, [[[JavaIoFileDescriptor alloc] init] autorelease]);
    JreOperatorRetainedAssign(&JavaIoFileDescriptor_out_, nil, [[[JavaIoFileDescriptor alloc] init] autorelease]);
    JreOperatorRetainedAssign(&JavaIoFileDescriptor_err_, nil, [[[JavaIoFileDescriptor alloc] init] autorelease]);
    {
      JavaIoFileDescriptor_in_->descriptor_ = [JavaIoFileDescriptor getStdInDescriptor];
      JavaIoFileDescriptor_out_->descriptor_ = [JavaIoFileDescriptor getStdOutDescriptor];
      JavaIoFileDescriptor_err_->descriptor_ = [JavaIoFileDescriptor getStdErrDescriptor];
    }
  }
}

- (void)copyAllFieldsTo:(JavaIoFileDescriptor *)other {
  [super copyAllFieldsTo:other];
  other->descriptor_ = descriptor_;
  other->readOnly_ = readOnly_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  return result;
}

@end
