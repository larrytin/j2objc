//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/luni/src/main/java/java/io/InputStreamReader.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSByteArray.h"
#include "IOSCharArray.h"
#include "IOSClass.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Throwable.h"
#include "java/nio/Buffer.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/CharBuffer.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/CharsetDecoder.h"
#include "java/nio/charset/CoderResult.h"
#include "java/nio/charset/CodingErrorAction.h"
#include "java/nio/charset/IOSCharsetDecoder.h"
#include "java/nio/charset/MalformedInputException.h"
#include "java/nio/charset/UnmappableCharacterException.h"
#include "org/apache/harmony/luni/util/HistoricalNamesUtil.h"

@implementation JavaIoInputStreamReader

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  if (self = [super initWithId:inArg]) {
    endOfInput_ = NO;
    JavaIoInputStreamReader_set_bytes_(self, [JavaNioByteBuffer allocateWithInt:JavaIoInputStreamReader_BUFFER_SIZE]);
    JavaIoInputStreamReader_set_in_(self, inArg);
    JavaIoInputStreamReader_set_decoder_(self, [((JavaNioCharsetCharsetDecoder *) nil_chk([((JavaNioCharsetCharsetDecoder *) nil_chk([((JavaNioCharsetCharset *) nil_chk([JavaNioCharsetCharset forNameWithNSString:@"ISO8859_1"])) newDecoder])) onMalformedInputWithJavaNioCharsetCodingErrorAction:[JavaNioCharsetCodingErrorAction REPLACE]])) onUnmappableCharacterWithJavaNioCharsetCodingErrorAction:[JavaNioCharsetCodingErrorAction REPLACE]]);
    [((JavaNioByteBuffer *) nil_chk(bytes_)) limitWithInt:0];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaIoInputStream:(JavaIoInputStream *)inArg
                   withNSString:(NSString *)enc {
  if (self = [super initWithId:inArg]) {
    endOfInput_ = NO;
    JavaIoInputStreamReader_set_bytes_(self, [JavaNioByteBuffer allocateWithInt:JavaIoInputStreamReader_BUFFER_SIZE]);
    if (enc == nil) {
      @throw [[[JavaLangNullPointerException alloc] init] autorelease];
    }
    JavaIoInputStreamReader_set_in_(self, inArg);
    @try {
      JavaIoInputStreamReader_set_decoder_(self, [((JavaNioCharsetCharsetDecoder *) nil_chk([((JavaNioCharsetCharsetDecoder *) nil_chk([((JavaNioCharsetCharset *) nil_chk([JavaNioCharsetCharset forNameWithNSString:enc])) newDecoder])) onMalformedInputWithJavaNioCharsetCodingErrorAction:[JavaNioCharsetCodingErrorAction REPLACE]])) onUnmappableCharacterWithJavaNioCharsetCodingErrorAction:[JavaNioCharsetCodingErrorAction REPLACE]]);
    }
    @catch (JavaLangIllegalArgumentException *e) {
      @throw (JavaIoUnsupportedEncodingException *) check_class_cast([((JavaIoUnsupportedEncodingException *) [[[JavaIoUnsupportedEncodingException alloc] initWithNSString:enc] autorelease]) initCauseWithJavaLangThrowable:e], [JavaIoUnsupportedEncodingException class]);
    }
    [((JavaNioByteBuffer *) nil_chk(bytes_)) limitWithInt:0];
    JreMemDebugAdd(self);
  }
  return self;
}

+ (IOSObjectArray *)__exceptions_JavaIoInputStreamReaderWithJavaIoInputStream_withNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoUnsupportedEncodingException getClass] } count:1 type:[IOSClass getClass]];
}

- (id)initWithJavaIoInputStream:(JavaIoInputStream *)inArg
withJavaNioCharsetCharsetDecoder:(JavaNioCharsetCharsetDecoder *)dec {
  if (self = [super initWithId:inArg]) {
    endOfInput_ = NO;
    JavaIoInputStreamReader_set_bytes_(self, [JavaNioByteBuffer allocateWithInt:JavaIoInputStreamReader_BUFFER_SIZE]);
    [((JavaNioCharsetCharsetDecoder *) nil_chk(dec)) averageCharsPerByte];
    JavaIoInputStreamReader_set_in_(self, inArg);
    JavaIoInputStreamReader_set_decoder_(self, dec);
    [((JavaNioByteBuffer *) nil_chk(bytes_)) limitWithInt:0];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaIoInputStream:(JavaIoInputStream *)inArg
      withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset {
  if (self = [super initWithId:inArg]) {
    endOfInput_ = NO;
    JavaIoInputStreamReader_set_bytes_(self, [JavaNioByteBuffer allocateWithInt:JavaIoInputStreamReader_BUFFER_SIZE]);
    JavaIoInputStreamReader_set_in_(self, inArg);
    JavaIoInputStreamReader_set_decoder_(self, [((JavaNioCharsetCharsetDecoder *) nil_chk([((JavaNioCharsetCharsetDecoder *) nil_chk([((JavaNioCharsetCharset *) nil_chk(charset)) newDecoder])) onMalformedInputWithJavaNioCharsetCodingErrorAction:[JavaNioCharsetCodingErrorAction REPLACE]])) onUnmappableCharacterWithJavaNioCharsetCodingErrorAction:[JavaNioCharsetCodingErrorAction REPLACE]]);
    [((JavaNioByteBuffer *) nil_chk(bytes_)) limitWithInt:0];
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)close {
  @synchronized (lock_) {
    JavaIoInputStreamReader_set_decoder_(self, nil);
    if (in_ != nil) {
      [in_ close];
      JavaIoInputStreamReader_set_in_(self, nil);
    }
  }
}

+ (IOSObjectArray *)__exceptions_close {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (NSString *)getEncoding {
  if (![self isOpen]) {
    return nil;
  }
  return [OrgApacheHarmonyLuniUtilHistoricalNamesUtil getHistoricalNameWithNSString:[((JavaNioCharsetCharset *) nil_chk([((JavaNioCharsetCharsetDecoder *) nil_chk(decoder_)) charset])) name]];
}

- (int)read {
  @synchronized (lock_) {
    if (![self isOpen]) {
      @throw [[[JavaIoIOException alloc] initWithNSString:@"InputStreamReader is closed."] autorelease];
    }
    IOSCharArray *buf = [IOSCharArray arrayWithLength:1];
    return [self readWithCharArray:buf withInt:0 withInt:1] != -1 ? IOSCharArray_Get(buf, 0) : -1;
  }
}

+ (IOSObjectArray *)__exceptions_read {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (int)readWithCharArray:(IOSCharArray *)buf
                 withInt:(int)offset
                 withInt:(int)length {
  @synchronized (lock_) {
    if (![self isOpen]) {
      @throw [[[JavaIoIOException alloc] initWithNSString:@"InputStreamReader is closed."] autorelease];
    }
    if (offset < 0 || offset > (int) [((IOSCharArray *) nil_chk(buf)) count] - length || length < 0) {
      @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
    }
    if (length == 0) {
      return 0;
    }
    JavaNioCharBuffer *out = [JavaNioCharBuffer wrapWithCharArray:buf withInt:offset withInt:length];
    JavaNioCharsetCoderResult *result = [JavaNioCharsetCoderResult getUNDERFLOW];
    BOOL needInput = ![((JavaNioByteBuffer *) nil_chk(bytes_)) hasRemaining];
    while ([((JavaNioCharBuffer *) nil_chk(out)) hasRemaining]) {
      if (needInput) {
        @try {
          if (([((JavaIoInputStream *) nil_chk(in_)) available] == 0) && ([out position] > offset)) {
            break;
          }
        }
        @catch (JavaIoIOException *e) {
        }
        int to_read = [bytes_ capacity] - [bytes_ limit];
        int off = [bytes_ arrayOffset] + [bytes_ limit];
        int was_red = [((JavaIoInputStream *) nil_chk(in_)) readWithByteArray:[bytes_ array] withInt:off withInt:to_read];
        if (was_red == -1) {
          endOfInput_ = YES;
          break;
        }
        else if (was_red == 0) {
          break;
        }
        [bytes_ limitWithInt:[bytes_ limit] + was_red];
        needInput = NO;
      }
      result = [((JavaNioCharsetCharsetDecoder *) nil_chk(decoder_)) decodeWithJavaNioByteBuffer:bytes_ withJavaNioCharBuffer:out withBoolean:NO];
      if ([((JavaNioCharsetCoderResult *) nil_chk(result)) isUnderflow]) {
        if ([bytes_ limit] == [bytes_ capacity]) {
          [bytes_ compact];
          [bytes_ limitWithInt:[bytes_ position]];
          [bytes_ positionWithInt:0];
        }
        needInput = YES;
      }
      else {
        break;
      }
    }
    if (result == [JavaNioCharsetCoderResult getUNDERFLOW] && endOfInput_) {
      result = [((JavaNioCharsetCharsetDecoder *) nil_chk(decoder_)) decodeWithJavaNioByteBuffer:bytes_ withJavaNioCharBuffer:out withBoolean:YES];
      [decoder_ flushWithJavaNioCharBuffer:out];
      [decoder_ reset];
    }
    if ([((JavaNioCharsetCoderResult *) nil_chk(result)) isMalformed]) {
      @throw [[[JavaNioCharsetMalformedInputException alloc] initWithInt:[result length]] autorelease];
    }
    else if ([result isUnmappable]) {
      @throw [[[JavaNioCharsetUnmappableCharacterException alloc] initWithInt:[result length]] autorelease];
    }
    return [out position] - offset == 0 ? -1 : [out position] - offset;
  }
}

+ (IOSObjectArray *)__exceptions_readWithCharArray_withInt_withInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (BOOL)isOpen {
  return in_ != nil;
}

- (BOOL)ready {
  @synchronized (lock_) {
    if (in_ == nil) {
      @throw [[[JavaIoIOException alloc] initWithNSString:@"InputStreamReader is closed."] autorelease];
    }
    @try {
      if ([decoder_ isKindOfClass:[JavaNioCharsetIOSCharsetDecoder class]]) {
        if ([((JavaNioCharsetIOSCharsetDecoder *) nil_chk(decoder_)) available] > 0) {
          return YES;
        }
      }
      return [((JavaNioByteBuffer *) nil_chk(bytes_)) hasRemaining] || [((JavaIoInputStream *) nil_chk(in_)) available] > 0;
    }
    @catch (JavaIoIOException *e) {
      return NO;
    }
  }
}

+ (IOSObjectArray *)__exceptions_ready {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaIoInputStreamReader_set_bytes_(self, nil);
  JavaIoInputStreamReader_set_decoder_(self, nil);
  JavaIoInputStreamReader_set_in_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaIoInputStreamReader *)other {
  [super copyAllFieldsTo:other];
  JavaIoInputStreamReader_set_bytes_(other, bytes_);
  JavaIoInputStreamReader_set_decoder_(other, decoder_);
  other->endOfInput_ = endOfInput_;
  JavaIoInputStreamReader_set_in_(other, in_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:in_ name:@"in"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:decoder_ name:@"decoder"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:bytes_ name:@"bytes"]];
  return result;
}

@end
