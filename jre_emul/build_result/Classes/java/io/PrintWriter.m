//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSCharArray.h"
#include "IOSClass.h"
#include "java/io/BufferedOutputStream.h"
#include "java/io/File.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/PrintWriter.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/io/Writer.h"
#include "java/lang/CharSequence.h"
#import "java/lang/NullPointerException.h"

@implementation JavaIoPrintWriter

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  return JreMemDebugAdd([self initJavaIoPrintWriterWithJavaIoWriter:[[[JavaIoOutputStreamWriter alloc] initWithJavaIoOutputStream:outArg] autorelease] withBoolean:NO]);
}

- (id)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                     withBoolean:(BOOL)autoflush {
  return JreMemDebugAdd([self initJavaIoPrintWriterWithJavaIoWriter:[[[JavaIoOutputStreamWriter alloc] initWithJavaIoOutputStream:outArg] autorelease] withBoolean:autoflush]);
}

- (id)initWithJavaIoWriter:(JavaIoWriter *)wr {
  return JreMemDebugAdd([self initJavaIoPrintWriterWithJavaIoWriter:wr withBoolean:NO]);
}

- (id)initJavaIoPrintWriterWithJavaIoWriter:(JavaIoWriter *)wr
                                withBoolean:(BOOL)autoflush {
  if (self = [super initWithId:wr]) {
    JavaIoPrintWriter_set_lineSeparator_(self, @"\n");
    self->autoflush_ = autoflush;
    JavaIoPrintWriter_set_out_(self, wr);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaIoWriter:(JavaIoWriter *)wr
               withBoolean:(BOOL)autoflush {
  return [self initJavaIoPrintWriterWithJavaIoWriter:wr withBoolean:autoflush];
}

- (id)initWithJavaIoFile:(JavaIoFile *)file {
  return JreMemDebugAdd([self initJavaIoPrintWriterWithJavaIoWriter:[[[JavaIoOutputStreamWriter alloc] initWithJavaIoOutputStream:[[[JavaIoBufferedOutputStream alloc] initWithJavaIoOutputStream:[[[JavaIoFileOutputStream alloc] initWithJavaIoFile:file] autorelease]] autorelease]] autorelease] withBoolean:NO]);
}

+ (IOSObjectArray *)__exceptions_JavaIoPrintWriterWithJavaIoFile_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoFileNotFoundException getClass] } count:1 type:[IOSClass getClass]];
}

- (id)initWithJavaIoFile:(JavaIoFile *)file
            withNSString:(NSString *)csn {
  return JreMemDebugAdd([self initJavaIoPrintWriterWithJavaIoWriter:[[[JavaIoOutputStreamWriter alloc] initWithJavaIoOutputStream:[[[JavaIoBufferedOutputStream alloc] initWithJavaIoOutputStream:[[[JavaIoFileOutputStream alloc] initWithJavaIoFile:file] autorelease]] autorelease] withNSString:csn] autorelease] withBoolean:NO]);
}

+ (IOSObjectArray *)__exceptions_JavaIoPrintWriterWithJavaIoFile_withNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoFileNotFoundException getClass], [JavaIoUnsupportedEncodingException getClass] } count:2 type:[IOSClass getClass]];
}

- (id)initWithNSString:(NSString *)fileName {
  return JreMemDebugAdd([self initJavaIoPrintWriterWithJavaIoWriter:[[[JavaIoOutputStreamWriter alloc] initWithJavaIoOutputStream:[[[JavaIoBufferedOutputStream alloc] initWithJavaIoOutputStream:[[[JavaIoFileOutputStream alloc] initWithNSString:fileName] autorelease]] autorelease]] autorelease] withBoolean:NO]);
}

+ (IOSObjectArray *)__exceptions_JavaIoPrintWriterWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoFileNotFoundException getClass] } count:1 type:[IOSClass getClass]];
}

- (id)initWithNSString:(NSString *)fileName
          withNSString:(NSString *)csn {
  return JreMemDebugAdd([self initJavaIoPrintWriterWithJavaIoWriter:[[[JavaIoOutputStreamWriter alloc] initWithJavaIoOutputStream:[[[JavaIoBufferedOutputStream alloc] initWithJavaIoOutputStream:[[[JavaIoFileOutputStream alloc] initWithNSString:fileName] autorelease]] autorelease] withNSString:csn] autorelease] withBoolean:NO]);
}

+ (IOSObjectArray *)__exceptions_JavaIoPrintWriterWithNSString_withNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoFileNotFoundException getClass], [JavaIoUnsupportedEncodingException getClass] } count:2 type:[IOSClass getClass]];
}

- (BOOL)checkError {
  JavaIoWriter *delegate = out_;
  if (delegate == nil) {
    return ioError_;
  }
  [self flush];
  return ioError_ || [((JavaIoWriter *) nil_chk(delegate)) checkError];
}

- (void)close {
  @synchronized (lock_) {
    if (out_ != nil) {
      @try {
        [out_ close];
      }
      @catch (JavaIoIOException *e) {
        [self setError];
      }
      JavaIoPrintWriter_set_out_(self, nil);
    }
  }
}

- (void)flush {
  @synchronized (lock_) {
    if (out_ != nil) {
      @try {
        [out_ flush];
      }
      @catch (JavaIoIOException *e) {
        [self setError];
      }
    }
    else {
      [self setError];
    }
  }
}

- (void)printWithCharArray:(IOSCharArray *)charArray {
  [self printWithNSString:[NSString stringWithCharacters:charArray offset:0 length:(int) [((IOSCharArray *) nil_chk(charArray)) count]]];
}

- (void)printWithChar:(unichar)ch {
  [self printWithNSString:[NSString valueOfChar:ch]];
}

- (void)printWithDouble:(double)dnum {
  [self printWithNSString:[NSString valueOfDouble:dnum]];
}

- (void)printWithFloat:(float)fnum {
  [self printWithNSString:[NSString valueOfFloat:fnum]];
}

- (void)printWithInt:(int)inum {
  [self printWithNSString:[NSString valueOfInt:inum]];
}

- (void)printWithLong:(long long int)lnum {
  [self printWithNSString:[NSString valueOfLong:lnum]];
}

- (void)printWithId:(id)obj {
  [self printWithNSString:[NSString valueOf:obj]];
}

- (void)printWithNSString:(NSString *)str {
  [self writeWithNSString:str != nil ? str : [NSString valueOf:(id) check_class_cast(nil, [NSObject class])]];
}

- (void)printWithBoolean:(BOOL)bool_ {
  [self printWithNSString:[NSString valueOfBool:bool_]];
}

- (void)println {
  @synchronized (lock_) {
    [self printWithNSString:lineSeparator_];
    if (autoflush_) {
      [self flush];
    }
  }
}

- (void)printlnWithCharArray:(IOSCharArray *)charArray {
  [self printlnWithNSString:[NSString stringWithCharacters:charArray offset:0 length:(int) [((IOSCharArray *) nil_chk(charArray)) count]]];
}

- (void)printlnWithChar:(unichar)ch {
  [self printlnWithNSString:[NSString valueOfChar:ch]];
}

- (void)printlnWithDouble:(double)dnum {
  [self printlnWithNSString:[NSString valueOfDouble:dnum]];
}

- (void)printlnWithFloat:(float)fnum {
  [self printlnWithNSString:[NSString valueOfFloat:fnum]];
}

- (void)printlnWithInt:(int)inum {
  [self printlnWithNSString:[NSString valueOfInt:inum]];
}

- (void)printlnWithLong:(long long int)lnum {
  [self printlnWithNSString:[NSString valueOfLong:lnum]];
}

- (void)printlnWithId:(id)obj {
  [self printlnWithNSString:[NSString valueOf:obj]];
}

- (void)printlnWithNSString:(NSString *)str {
  @synchronized (lock_) {
    [self printWithNSString:str];
    [self println];
  }
}

- (void)printlnWithBoolean:(BOOL)bool_ {
  [self printlnWithNSString:[NSString valueOfBool:bool_]];
}

- (void)setError {
  @synchronized (lock_) {
    ioError_ = YES;
  }
}

- (void)writeWithCharArray:(IOSCharArray *)buf {
  [self writeWithCharArray:buf withInt:0 withInt:(int) [((IOSCharArray *) nil_chk(buf)) count]];
}

- (void)writeWithCharArray:(IOSCharArray *)buf
                   withInt:(int)offset
                   withInt:(int)count {
  [self doWriteWithCharArray:buf withInt:offset withInt:count];
}

- (void)writeWithInt:(int)oneChar {
  [self doWriteWithCharArray:[IOSCharArray arrayWithCharacters:(unichar[]){ (unichar) oneChar } count:1] withInt:0 withInt:1];
}

- (void)doWriteWithCharArray:(IOSCharArray *)buf
                     withInt:(int)offset
                     withInt:(int)count {
  @synchronized (lock_) {
    if (out_ != nil) {
      @try {
        [out_ writeWithCharArray:buf withInt:offset withInt:count];
      }
      @catch (JavaIoIOException *e) {
        [self setError];
      }
    }
    else {
      [self setError];
    }
  }
}

- (void)writeWithNSString:(NSString *)str {
  [self writeWithCharArray:[((NSString *) nil_chk(str)) toCharArray]];
}

- (void)writeWithNSString:(NSString *)str
                  withInt:(int)offset
                  withInt:(int)count {
  [self writeWithCharArray:[((NSString *) nil_chk([((NSString *) nil_chk(str)) substring:offset endIndex:offset + count])) toCharArray]];
}

- (JavaIoPrintWriter *)appendWithChar:(unichar)c {
  [self writeWithInt:c];
  return self;
}

- (JavaIoPrintWriter *)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)csq {
  if (nil == csq) {
    [self appendWithJavaLangCharSequence:[JavaIoWriter TOKEN_NULL] withInt:0 withInt:[((NSString *) nil_chk([JavaIoWriter TOKEN_NULL])) length]];
  }
  else {
    [self appendWithJavaLangCharSequence:csq withInt:0 withInt:[csq sequenceLength]];
  }
  return self;
}

- (JavaIoPrintWriter *)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)csq
                                              withInt:(int)start
                                              withInt:(int)end {
  if (nil == csq) {
    csq = [JavaIoWriter TOKEN_NULL];
  }
  NSString *output = [((id<JavaLangCharSequence>) nil_chk([((id<JavaLangCharSequence>) nil_chk(csq)) subSequenceFrom:start to:end])) sequenceDescription];
  [self writeWithNSString:output withInt:0 withInt:[((NSString *) nil_chk(output)) length]];
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaIoPrintWriter_set_lineSeparator_(self, nil);
  JavaIoPrintWriter_set_out_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaIoPrintWriter *)other {
  [super copyAllFieldsTo:other];
  other->autoflush_ = autoflush_;
  other->ioError_ = ioError_;
  JavaIoPrintWriter_set_lineSeparator_(other, lineSeparator_);
  JavaIoPrintWriter_set_out_(other, out_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:out_ name:@"out"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:lineSeparator_ name:@"lineSeparator"]];
  return result;
}

@end
