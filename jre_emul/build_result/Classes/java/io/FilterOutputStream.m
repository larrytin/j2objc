//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSByteArray.h"
#include "IOSClass.h"
#include "java/io/FilterOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"

@implementation JavaIoFilterOutputStream

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  if (self = [super init]) {
    JavaIoFilterOutputStream_set_out_(self, outArg);
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)close {
  JavaIoIOException *thrown = nil;
  @try {
    [self flush];
  }
  @catch (JavaIoIOException *e) {
    thrown = e;
  }
  @try {
    [((JavaIoOutputStream *) nil_chk(out_)) close];
  }
  @catch (JavaIoIOException *e) {
    if (thrown == nil) {
      thrown = e;
    }
  }
  if (thrown != nil) {
    @throw thrown;
  }
}

+ (IOSObjectArray *)__exceptions_close {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)flush {
  [((JavaIoOutputStream *) nil_chk(out_)) flush];
}

+ (IOSObjectArray *)__exceptions_flush {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)writeWithByteArray:(IOSByteArray *)buffer {
  [self writeWithByteArray:buffer withInt:0 withInt:(int) [((IOSByteArray *) nil_chk(buffer)) count]];
}

+ (IOSObjectArray *)__exceptions_writeWithByteArray_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)writeWithByteArray:(IOSByteArray *)buffer
                   withInt:(int)offset
                   withInt:(int)length {
  if (offset > (int) [((IOSByteArray *) nil_chk(buffer)) count] || offset < 0) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"Offset out of bounds: %d", offset]] autorelease];
  }
  if (length < 0 || length > (int) [buffer count] - offset) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"Length out of bounds: %d", length]] autorelease];
  }
  for (int i = 0; i < length; i++) {
    [self writeWithInt:IOSByteArray_Get(buffer, offset + i)];
  }
}

+ (IOSObjectArray *)__exceptions_writeWithByteArray_withInt_withInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)writeWithInt:(int)oneByte {
  [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:oneByte];
}

+ (IOSObjectArray *)__exceptions_writeWithInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaIoFilterOutputStream_set_out_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaIoFilterOutputStream *)other {
  [super copyAllFieldsTo:other];
  JavaIoFilterOutputStream_set_out_(other, out_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:out_ name:@"out"]];
  return result;
}

@end
