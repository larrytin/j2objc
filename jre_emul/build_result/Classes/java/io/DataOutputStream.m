//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/luni/src/main/java/java/io/DataOutputStream.java
//
//  Created by retechretech on 13-9-4.
//

#include "IOSByteArray.h"
#include "IOSClass.h"
#include "java/io/DataOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/io/UTFDataFormatException.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"

@implementation JavaIoDataOutputStream

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  if ((self = [super initWithJavaIoOutputStream:outArg])) {
    JavaIoDataOutputStream_set_buff_(self, [IOSByteArray arrayWithLength:8]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)flush {
  [super flush];
}

+ (IOSObjectArray *)__exceptions_flush {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (int)size {
  if (written_ < 0) {
    written_ = JavaLangInteger_MAX_VALUE;
  }
  return written_;
}

- (void)writeWithByteArray:(IOSByteArray *)buffer
                   withInt:(int)offset
                   withInt:(int)count {
  if (buffer == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"buffer is null"] autorelease];
  }
  [((JavaIoOutputStream *) nil_chk(out_)) writeWithByteArray:buffer withInt:offset withInt:count];
  written_ += count;
}

+ (IOSObjectArray *)__exceptions_writeWithByteArray_withInt_withInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)writeWithInt:(int)oneByte {
  [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:oneByte];
  written_++;
}

+ (IOSObjectArray *)__exceptions_writeWithInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)writeBooleanWithBOOL:(BOOL)val {
  [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:val ? 1 : 0];
  written_++;
}

+ (IOSObjectArray *)__exceptions_writeBooleanWithBOOL_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)writeByteWithInt:(int)val {
  [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:val];
  written_++;
}

+ (IOSObjectArray *)__exceptions_writeByteWithInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)writeBytesWithNSString:(NSString *)str {
  if ([((NSString *) nil_chk(str)) length] == 0) {
    return;
  }
  IOSByteArray *bytes = [IOSByteArray arrayWithLength:[str length]];
  for (int index = 0; index < [str length]; index++) {
    (*[bytes byteRefAtIndex:index]) = (char) [str charAtWithInt:index];
  }
  [((JavaIoOutputStream *) nil_chk(out_)) writeWithByteArray:bytes];
  written_ += (int) [bytes count];
}

+ (IOSObjectArray *)__exceptions_writeBytesWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)writeCharWithInt:(int)val {
  (*[((IOSByteArray *) nil_chk(buff_)) byteRefAtIndex:0]) = (char) (val >> 8);
  (*[buff_ byteRefAtIndex:1]) = (char) val;
  [((JavaIoOutputStream *) nil_chk(out_)) writeWithByteArray:buff_ withInt:0 withInt:2];
  written_ += 2;
}

+ (IOSObjectArray *)__exceptions_writeCharWithInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)writeCharsWithNSString:(NSString *)str {
  IOSByteArray *newBytes = [IOSByteArray arrayWithLength:[((NSString *) nil_chk(str)) length] * 2];
  for (int index = 0; index < [str length]; index++) {
    int newIndex = index == 0 ? index : index * 2;
    (*[newBytes byteRefAtIndex:newIndex]) = (char) ([str charAtWithInt:index] >> 8);
    (*[newBytes byteRefAtIndex:newIndex + 1]) = (char) [str charAtWithInt:index];
  }
  [((JavaIoOutputStream *) nil_chk(out_)) writeWithByteArray:newBytes];
  written_ += (int) [newBytes count];
}

+ (IOSObjectArray *)__exceptions_writeCharsWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)writeDoubleWithDouble:(double)val {
  [self writeLongWithLongInt:[JavaLangDouble doubleToLongBitsWithDouble:val]];
}

+ (IOSObjectArray *)__exceptions_writeDoubleWithDouble_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)writeFloatWithFloat:(float)val {
  [self writeIntWithInt:[JavaLangFloat floatToIntBitsWithFloat:val]];
}

+ (IOSObjectArray *)__exceptions_writeFloatWithFloat_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)writeIntWithInt:(int)val {
  (*[((IOSByteArray *) nil_chk(buff_)) byteRefAtIndex:0]) = (char) (val >> 24);
  (*[buff_ byteRefAtIndex:1]) = (char) (val >> 16);
  (*[buff_ byteRefAtIndex:2]) = (char) (val >> 8);
  (*[buff_ byteRefAtIndex:3]) = (char) val;
  [((JavaIoOutputStream *) nil_chk(out_)) writeWithByteArray:buff_ withInt:0 withInt:4];
  written_ += 4;
}

+ (IOSObjectArray *)__exceptions_writeIntWithInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)writeLongWithLongInt:(long long int)val {
  (*[((IOSByteArray *) nil_chk(buff_)) byteRefAtIndex:0]) = (char) (val >> 56);
  (*[buff_ byteRefAtIndex:1]) = (char) (val >> 48);
  (*[buff_ byteRefAtIndex:2]) = (char) (val >> 40);
  (*[buff_ byteRefAtIndex:3]) = (char) (val >> 32);
  (*[buff_ byteRefAtIndex:4]) = (char) (val >> 24);
  (*[buff_ byteRefAtIndex:5]) = (char) (val >> 16);
  (*[buff_ byteRefAtIndex:6]) = (char) (val >> 8);
  (*[buff_ byteRefAtIndex:7]) = (char) val;
  [((JavaIoOutputStream *) nil_chk(out_)) writeWithByteArray:buff_ withInt:0 withInt:8];
  written_ += 8;
}

+ (IOSObjectArray *)__exceptions_writeLongWithLongInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (int)writeLongToBufferWithLongInt:(long long int)val
                      withByteArray:(IOSByteArray *)buffer
                            withInt:(int)offset {
  (*[((IOSByteArray *) nil_chk(buffer)) byteRefAtIndex:offset++]) = (char) (val >> 56);
  (*[buffer byteRefAtIndex:offset++]) = (char) (val >> 48);
  (*[buffer byteRefAtIndex:offset++]) = (char) (val >> 40);
  (*[buffer byteRefAtIndex:offset++]) = (char) (val >> 32);
  (*[buffer byteRefAtIndex:offset++]) = (char) (val >> 24);
  (*[buffer byteRefAtIndex:offset++]) = (char) (val >> 16);
  (*[buffer byteRefAtIndex:offset++]) = (char) (val >> 8);
  (*[buffer byteRefAtIndex:offset++]) = (char) val;
  return offset;
}

+ (IOSObjectArray *)__exceptions_writeLongToBufferWithLongInt_withByteArray_withInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)writeShortWithInt:(int)val {
  (*[((IOSByteArray *) nil_chk(buff_)) byteRefAtIndex:0]) = (char) (val >> 8);
  (*[buff_ byteRefAtIndex:1]) = (char) val;
  [((JavaIoOutputStream *) nil_chk(out_)) writeWithByteArray:buff_ withInt:0 withInt:2];
  written_ += 2;
}

+ (IOSObjectArray *)__exceptions_writeShortWithInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (int)writeShortToBufferWithInt:(int)val
                   withByteArray:(IOSByteArray *)buffer
                         withInt:(int)offset {
  (*[((IOSByteArray *) nil_chk(buffer)) byteRefAtIndex:offset++]) = (char) (val >> 8);
  (*[buffer byteRefAtIndex:offset++]) = (char) val;
  return offset;
}

+ (IOSObjectArray *)__exceptions_writeShortToBufferWithInt_withByteArray_withInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)writeUTFWithNSString:(NSString *)str {
  long long int utfCount = [self countUTFBytesWithNSString:str];
  if (utfCount > 65535) {
    @throw [[[JavaIoUTFDataFormatException alloc] initWithNSString:@"String is too long"] autorelease];
  }
  IOSByteArray *buffer = [IOSByteArray arrayWithLength:(int) utfCount + 2];
  int offset = 0;
  offset = [self writeShortToBufferWithInt:(int) utfCount withByteArray:buffer withInt:offset];
  offset = [self writeUTFBytesToBufferWithNSString:str withLongInt:(int) utfCount withByteArray:buffer withInt:offset];
  [self writeWithByteArray:buffer withInt:0 withInt:offset];
}

+ (IOSObjectArray *)__exceptions_writeUTFWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (long long int)countUTFBytesWithNSString:(NSString *)str {
  int utfCount = 0, length = [((NSString *) nil_chk(str)) length];
  for (int i = 0; i < length; i++) {
    int charValue = [str charAtWithInt:i];
    if (charValue > 0 && charValue <= 127) {
      utfCount++;
    }
    else if (charValue <= 2047) {
      utfCount += 2;
    }
    else {
      utfCount += 3;
    }
  }
  return utfCount;
}

- (int)writeUTFBytesToBufferWithNSString:(NSString *)str
                             withLongInt:(long long int)count
                           withByteArray:(IOSByteArray *)buffer
                                 withInt:(int)offset {
  int length = [((NSString *) nil_chk(str)) length];
  for (int i = 0; i < length; i++) {
    int charValue = [str charAtWithInt:i];
    if (charValue > 0 && charValue <= 127) {
      (*[((IOSByteArray *) nil_chk(buffer)) byteRefAtIndex:offset++]) = (char) charValue;
    }
    else if (charValue <= 2047) {
      (*[((IOSByteArray *) nil_chk(buffer)) byteRefAtIndex:offset++]) = (char) ((int) 0xc0 | ((int) 0x1f & (charValue >> 6)));
      (*[buffer byteRefAtIndex:offset++]) = (char) ((int) 0x80 | ((int) 0x3f & charValue));
    }
    else {
      (*[((IOSByteArray *) nil_chk(buffer)) byteRefAtIndex:offset++]) = (char) ((int) 0xe0 | ((int) 0x0f & (charValue >> 12)));
      (*[buffer byteRefAtIndex:offset++]) = (char) ((int) 0x80 | ((int) 0x3f & (charValue >> 6)));
      (*[buffer byteRefAtIndex:offset++]) = (char) ((int) 0x80 | ((int) 0x3f & charValue));
    }
  }
  return offset;
}

+ (IOSObjectArray *)__exceptions_writeUTFBytesToBufferWithNSString_withLongInt_withByteArray_withInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaIoDataOutputStream_set_buff_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaIoDataOutputStream *)other {
  [super copyAllFieldsTo:other];
  JavaIoDataOutputStream_set_buff_(other, buff_);
  other->written_ = written_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:buff_ name:@"buff"]];
  return result;
}

@end
