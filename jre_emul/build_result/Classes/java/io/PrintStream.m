//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/luni/src/main/java/java/io/PrintStream.java
//
//  Created by retechretech on 13-9-4.
//

#include "IOSByteArray.h"
#include "IOSCharArray.h"
#include "IOSClass.h"
#include "java/io/File.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/FileOutputStream.h"
#include "java/io/FilterOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/io/PrintStream.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/CharSequence.h"
#include "java/lang/NullPointerException.h"

@implementation JavaIoPrintStream

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaIoPrintStream_TOKEN_NULL_ name:@"JavaIoPrintStream_TOKEN_NULL_"]];
  return result;
}

static NSString * JavaIoPrintStream_TOKEN_NULL_ = @"null";

+ (NSString *)TOKEN_NULL {
  return JavaIoPrintStream_TOKEN_NULL_;
}

- (id)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  if ((self = [super initWithJavaIoOutputStream:outArg])) {
    JavaIoPrintStream_set_lineSeparator_(self, @"\n");
    if (outArg == nil) {
      @throw [[[JavaLangNullPointerException alloc] init] autorelease];
    }
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                        withBOOL:(BOOL)autoflush {
  if ((self = [super initWithJavaIoOutputStream:outArg])) {
    JavaIoPrintStream_set_lineSeparator_(self, @"\n");
    if (outArg == nil) {
      @throw [[[JavaLangNullPointerException alloc] init] autorelease];
    }
    self->autoflush_ = autoflush;
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                        withBOOL:(BOOL)autoflush
                    withNSString:(NSString *)enc {
  if ((self = [super initWithJavaIoOutputStream:outArg])) {
    JavaIoPrintStream_set_lineSeparator_(self, @"\n");
    if (outArg == nil || enc == nil) {
      @throw [[[JavaLangNullPointerException alloc] init] autorelease];
    }
    self->autoflush_ = autoflush;
    JavaIoPrintStream_set_encoding_(self, enc);
    JreMemDebugAdd(self);
  }
  return self;
}

+ (IOSObjectArray *)__exceptions_JavaIoPrintStreamWithJavaIoOutputStream_withBOOL_withNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoUnsupportedEncodingException getClass] } count:1 type:[IOSClass getClass]];
}

- (id)initJavaIoPrintStreamWithJavaIoFile:(JavaIoFile *)file {
  if ((self = [super initWithJavaIoOutputStream:[[[JavaIoFileOutputStream alloc] initWithJavaIoFile:file] autorelease]])) {
    JavaIoPrintStream_set_lineSeparator_(self, @"\n");
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaIoFile:(JavaIoFile *)file {
  return [self initJavaIoPrintStreamWithJavaIoFile:file];
}

- (id)initJavaIoPrintStreamWithJavaIoFile:(JavaIoFile *)file
                             withNSString:(NSString *)csn {
  if ((self = [super initWithJavaIoOutputStream:[[[JavaIoFileOutputStream alloc] initWithJavaIoFile:file] autorelease]])) {
    JavaIoPrintStream_set_lineSeparator_(self, @"\n");
    if (csn == nil) {
      @throw [[[JavaLangNullPointerException alloc] init] autorelease];
    }
    JavaIoPrintStream_set_encoding_(self, csn);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaIoFile:(JavaIoFile *)file
            withNSString:(NSString *)csn {
  return [self initJavaIoPrintStreamWithJavaIoFile:file withNSString:csn];
}

- (id)initWithNSString:(NSString *)fileName {
  return JreMemDebugAdd([self initJavaIoPrintStreamWithJavaIoFile:[[[JavaIoFile alloc] initWithNSString:fileName] autorelease]]);
}

+ (IOSObjectArray *)__exceptions_JavaIoPrintStreamWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoFileNotFoundException getClass] } count:1 type:[IOSClass getClass]];
}

- (id)initWithNSString:(NSString *)fileName
          withNSString:(NSString *)csn {
  return JreMemDebugAdd([self initJavaIoPrintStreamWithJavaIoFile:[[[JavaIoFile alloc] initWithNSString:fileName] autorelease] withNSString:csn]);
}

+ (IOSObjectArray *)__exceptions_JavaIoPrintStreamWithNSString_withNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoFileNotFoundException getClass], [JavaIoUnsupportedEncodingException getClass] } count:2 type:[IOSClass getClass]];
}

- (BOOL)checkError {
  JavaIoOutputStream *delegate = out_;
  if (delegate == nil) {
    return ioError_;
  }
  [self flush];
  return ioError_ || [((JavaIoOutputStream *) nil_chk(delegate)) checkError];
}

- (void)close {
  @synchronized(self) {
    {
      [self flush];
      if (out_ != nil) {
        @try {
          [out_ close];
          JavaIoFilterOutputStream_set_out_(self, nil);
        }
        @catch (JavaIoIOException *e) {
          [self setError];
        }
      }
    }
  }
}

- (void)flush {
  @synchronized(self) {
    {
      if (out_ != nil) {
        @try {
          [out_ flush];
          return;
        }
        @catch (JavaIoIOException *e) {
        }
      }
      [self setError];
    }
  }
}

- (void)newline {
  [self printWithNSString:lineSeparator_];
}

- (void)printWithCharArray:(IOSCharArray *)charArray {
  [self printWithNSString:[NSString stringWithCharacters:charArray offset:0 length:(int) [((IOSCharArray *) nil_chk(charArray)) count]]];
}

- (void)printWithUnichar:(unichar)ch {
  [self printWithNSString:[NSString valueOfChar:ch]];
}

- (void)printWithDouble:(double)dnum {
  [self printWithNSString:[NSString valueOfDouble:dnum]];
}

- (void)printWithFloat:(float)fnum {
  [self printWithNSString:[NSString valueOfFloat:fnum]];
}

- (void)printWithInt:(int)inum {
  [self printWithNSString:[NSString valueOfInt:inum]];
}

- (void)printWithLongInt:(long long int)lnum {
  [self printWithNSString:[NSString valueOfLong:lnum]];
}

- (void)printWithId:(id)obj {
  [self printWithNSString:[NSString valueOf:obj]];
}

- (void)printWithNSString:(NSString *)str {
  @synchronized(self) {
    {
      if (out_ == nil) {
        [self setError];
        return;
      }
      if (str == nil) {
        [self printWithNSString:@"null"];
        return;
      }
      @try {
        [self writeWithByteArray:[((NSString *) nil_chk(str)) getBytes]];
      }
      @catch (JavaIoIOException *e) {
        [self setError];
      }
    }
  }
}

- (void)printWithBOOL:(BOOL)bool_ {
  [self printWithNSString:[NSString valueOfBool:bool_]];
}

- (void)println {
  [self newline];
}

- (void)printlnWithCharArray:(IOSCharArray *)charArray {
  [self printlnWithNSString:[NSString stringWithCharacters:charArray offset:0 length:(int) [((IOSCharArray *) nil_chk(charArray)) count]]];
}

- (void)printlnWithUnichar:(unichar)ch {
  [self printlnWithNSString:[NSString valueOfChar:ch]];
}

- (void)printlnWithDouble:(double)dnum {
  [self printlnWithNSString:[NSString valueOfDouble:dnum]];
}

- (void)printlnWithFloat:(float)fnum {
  [self printlnWithNSString:[NSString valueOfFloat:fnum]];
}

- (void)printlnWithInt:(int)inum {
  [self printlnWithNSString:[NSString valueOfInt:inum]];
}

- (void)printlnWithLongInt:(long long int)lnum {
  [self printlnWithNSString:[NSString valueOfLong:lnum]];
}

- (void)printlnWithId:(id)obj {
  [self printlnWithNSString:[NSString valueOf:obj]];
}

- (void)printlnWithNSString:(NSString *)str {
  @synchronized(self) {
    {
      [self printWithNSString:str];
      [self newline];
    }
  }
}

- (void)printlnWithBOOL:(BOOL)bool_ {
  [self printlnWithNSString:[NSString valueOfBool:bool_]];
}

- (void)setError {
  ioError_ = YES;
}

- (void)writeWithByteArray:(IOSByteArray *)buffer
                   withInt:(int)offset
                   withInt:(int)length {
  if (offset > (int) [((IOSByteArray *) nil_chk(buffer)) count] || offset < 0) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"Offset out of bounds: %d", offset]] autorelease];
  }
  if (length < 0 || length > (int) [buffer count] - offset) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"Length out of bounds: %d", length]] autorelease];
  }
  @synchronized (self) {
    if (out_ == nil) {
      [self setError];
      return;
    }
    @try {
      [((JavaIoOutputStream *) nil_chk(out_)) writeWithByteArray:buffer withInt:offset withInt:length];
      if (autoflush_) {
        [self flush];
      }
    }
    @catch (JavaIoIOException *e) {
      [self setError];
    }
  }
}

- (void)writeWithInt:(int)oneByte {
  @synchronized(self) {
    {
      if (out_ == nil) {
        [self setError];
        return;
      }
      @try {
        [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:oneByte];
        int b = oneByte & (int) 0xFF;
        BOOL isNewline = b == (int) 0x0A || b == (int) 0x15;
        if (autoflush_ && isNewline) {
          [self flush];
        }
      }
      @catch (JavaIoIOException *e) {
        [self setError];
      }
    }
  }
}

- (JavaIoPrintStream *)appendWithUnichar:(unichar)c {
  [self printWithUnichar:c];
  return self;
}

- (JavaIoPrintStream *)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)csq {
  if (nil == csq) {
    [self printWithNSString:JavaIoPrintStream_TOKEN_NULL_];
  }
  else {
    [self printWithNSString:[csq sequenceDescription]];
  }
  return self;
}

- (JavaIoPrintStream *)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)csq
                                              withInt:(int)start
                                              withInt:(int)end {
  if (nil == csq) {
    [self printWithNSString:[((NSString *) nil_chk(JavaIoPrintStream_TOKEN_NULL_)) substring:start endIndex:end]];
  }
  else {
    [self printWithNSString:[((id<JavaLangCharSequence>) nil_chk([csq subSequenceFrom:start to:end])) sequenceDescription]];
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaIoPrintStream_set_lineSeparator_(self, nil);
  JavaIoPrintStream_set_encoding_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaIoPrintStream *)other {
  [super copyAllFieldsTo:other];
  other->autoflush_ = autoflush_;
  JavaIoPrintStream_set_encoding_(other, encoding_);
  other->ioError_ = ioError_;
  JavaIoPrintStream_set_lineSeparator_(other, lineSeparator_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:encoding_ name:@"encoding"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:lineSeparator_ name:@"lineSeparator"]];
  return result;
}

@end
