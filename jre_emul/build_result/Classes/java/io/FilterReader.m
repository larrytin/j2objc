//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSCharArray.h"
#include "IOSClass.h"
#include "java/io/FilterReader.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"

@implementation JavaIoFilterReader

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaIoReader:(JavaIoReader *)inArg {
  if (self = [super initWithId:inArg]) {
    JavaIoFilterReader_set_in_(self, inArg);
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)close {
  @synchronized (lock_) {
    [((JavaIoReader *) nil_chk(in_)) close];
  }
}

+ (IOSObjectArray *)__exceptions_close {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)markWithInt:(int)readlimit {
  @synchronized(self) {
    {
      @synchronized (lock_) {
        [((JavaIoReader *) nil_chk(in_)) markWithInt:readlimit];
      }
    }
  }
}

+ (IOSObjectArray *)__exceptions_markWithInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (BOOL)markSupported {
  @synchronized (lock_) {
    return [((JavaIoReader *) nil_chk(in_)) markSupported];
  }
}

- (int)read {
  @synchronized (lock_) {
    return [((JavaIoReader *) nil_chk(in_)) read];
  }
}

+ (IOSObjectArray *)__exceptions_read {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (int)readWithCharArray:(IOSCharArray *)buffer
                 withInt:(int)offset
                 withInt:(int)count {
  @synchronized (lock_) {
    return [((JavaIoReader *) nil_chk(in_)) readWithCharArray:buffer withInt:offset withInt:count];
  }
}

+ (IOSObjectArray *)__exceptions_readWithCharArray_withInt_withInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (BOOL)ready {
  @synchronized (lock_) {
    return [((JavaIoReader *) nil_chk(in_)) ready];
  }
}

+ (IOSObjectArray *)__exceptions_ready {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)reset {
  @synchronized (lock_) {
    [((JavaIoReader *) nil_chk(in_)) reset];
  }
}

+ (IOSObjectArray *)__exceptions_reset {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (long long int)skipWithLong:(long long int)count {
  @synchronized (lock_) {
    return [((JavaIoReader *) nil_chk(in_)) skipWithLong:count];
  }
}

+ (IOSObjectArray *)__exceptions_skipWithLong_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaIoFilterReader_set_in_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaIoFilterReader *)other {
  [super copyAllFieldsTo:other];
  JavaIoFilterReader_set_in_(other, in_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:in_ name:@"in"]];
  return result;
}

@end
