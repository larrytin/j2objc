//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSByteArray.h"
#include "IOSClass.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/Reader.h"
#include "java/io/StreamTokenizer.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Double.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Locale.h"

@implementation JavaIoStreamTokenizer

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

+ (int)TT_EOF {
  return JavaIoStreamTokenizer_TT_EOF;
}

+ (int)TT_EOL {
  return JavaIoStreamTokenizer_TT_EOL;
}

+ (int)TT_NUMBER {
  return JavaIoStreamTokenizer_TT_NUMBER;
}

+ (int)TT_WORD {
  return JavaIoStreamTokenizer_TT_WORD;
}

- (id)initJavaIoStreamTokenizer {
  if (self = [super init]) {
    ttype_ = JavaIoStreamTokenizer_TT_UNKNOWN;
    JavaIoStreamTokenizer_set_tokenTypes_(self, [IOSByteArray arrayWithLength:256]);
    lineNumber_ = 1;
    peekChar_ = -2;
    [self wordCharsWithInt:'A' withInt:'Z'];
    [self wordCharsWithInt:'a' withInt:'z'];
    [self wordCharsWithInt:160 withInt:255];
    [self whitespaceCharsWithInt:0 withInt:32];
    [self commentCharWithInt:'/'];
    [self quoteCharWithInt:'"'];
    [self quoteCharWithInt:'\''];
    [self parseNumbers];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)init {
  return [self initJavaIoStreamTokenizer];
}

- (id)initWithJavaIoInputStream:(JavaIoInputStream *)is {
  if (self = [self initJavaIoStreamTokenizer]) {
    if (is == nil) {
      @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"is == null"] autorelease];
    }
    JavaIoStreamTokenizer_set_inStream_(self, is);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaIoReader:(JavaIoReader *)r {
  if (self = [self initJavaIoStreamTokenizer]) {
    if (r == nil) {
      @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"r == null"] autorelease];
    }
    JavaIoStreamTokenizer_set_inReader_(self, r);
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)commentCharWithInt:(int)ch {
  if (ch >= 0 && ch < (int) [((IOSByteArray *) nil_chk(tokenTypes_)) count]) {
    (*IOSByteArray_GetRef(tokenTypes_, ch)) = JavaIoStreamTokenizer_TOKEN_COMMENT;
  }
}

- (void)eolIsSignificantWithBoolean:(BOOL)flag {
  isEOLSignificant_ = flag;
}

- (int)lineno {
  return lineNumber_;
}

- (void)lowerCaseModeWithBoolean:(BOOL)flag {
  forceLowercase_ = flag;
}

- (int)nextToken {
  if (pushBackToken_) {
    pushBackToken_ = NO;
    if (ttype_ != JavaIoStreamTokenizer_TT_UNKNOWN) {
      return ttype_;
    }
  }
  JavaIoStreamTokenizer_set_sval_(self, nil);
  int currentChar = peekChar_ == -2 ? [self read] : peekChar_;
  if (lastCr_ && currentChar == 0x000a) {
    lastCr_ = NO;
    currentChar = [self read];
  }
  if (currentChar == -1) {
    return (ttype_ = JavaIoStreamTokenizer_TT_EOF);
  }
  char currentType = currentChar > 255 ? JavaIoStreamTokenizer_TOKEN_WORD : IOSByteArray_Get(nil_chk(tokenTypes_), currentChar);
  while ((currentType & JavaIoStreamTokenizer_TOKEN_WHITE) != 0) {
    if (currentChar == 0x000d) {
      lineNumber_++;
      if (isEOLSignificant_) {
        lastCr_ = YES;
        peekChar_ = -2;
        return (ttype_ = JavaIoStreamTokenizer_TT_EOL);
      }
      if ((currentChar = [self read]) == 0x000a) {
        currentChar = [self read];
      }
    }
    else if (currentChar == 0x000a) {
      lineNumber_++;
      if (isEOLSignificant_) {
        peekChar_ = -2;
        return (ttype_ = JavaIoStreamTokenizer_TT_EOL);
      }
      currentChar = [self read];
    }
    else {
      currentChar = [self read];
    }
    if (currentChar == -1) {
      return (ttype_ = JavaIoStreamTokenizer_TT_EOF);
    }
    currentType = currentChar > 255 ? JavaIoStreamTokenizer_TOKEN_WORD : IOSByteArray_Get(nil_chk(tokenTypes_), currentChar);
  }
  if ((currentType & JavaIoStreamTokenizer_TOKEN_DIGIT) != 0) {
    JavaLangStringBuilder *digits = [[[JavaLangStringBuilder alloc] initWithInt:20] autorelease];
    BOOL haveDecimal = NO, checkJustNegative = currentChar == '-';
    while (YES) {
      if (currentChar == '.') {
        haveDecimal = YES;
      }
      [digits appendWithChar:(unichar) currentChar];
      currentChar = [self read];
      if ((currentChar < '0' || currentChar > '9') && (haveDecimal || currentChar != '.')) {
        break;
      }
    }
    peekChar_ = currentChar;
    if (checkJustNegative && [digits sequenceLength] == 1) {
      return (ttype_ = '-');
    }
    @try {
      nval_ = [[JavaLangDouble valueOfWithNSString:[digits description]] doubleValue];
    }
    @catch (JavaLangNumberFormatException *e) {
      nval_ = 0;
    }
    return (ttype_ = JavaIoStreamTokenizer_TT_NUMBER);
  }
  if ((currentType & JavaIoStreamTokenizer_TOKEN_WORD) != 0) {
    JavaLangStringBuilder *word = [[[JavaLangStringBuilder alloc] initWithInt:20] autorelease];
    while (YES) {
      [word appendWithChar:(unichar) currentChar];
      currentChar = [self read];
      if (currentChar == -1 || (currentChar < 256 && (IOSByteArray_Get(nil_chk(tokenTypes_), currentChar) & (JavaIoStreamTokenizer_TOKEN_WORD | JavaIoStreamTokenizer_TOKEN_DIGIT)) == 0)) {
        break;
      }
    }
    peekChar_ = currentChar;
    JavaIoStreamTokenizer_set_sval_(self, [word description]);
    if (forceLowercase_) {
      JavaIoStreamTokenizer_set_sval_(self, [((NSString *) nil_chk(sval_)) lowercaseStringWithJRELocale:[JavaUtilLocale getDefault]]);
    }
    return (ttype_ = JavaIoStreamTokenizer_TT_WORD);
  }
  if (currentType == JavaIoStreamTokenizer_TOKEN_QUOTE) {
    int matchQuote = currentChar;
    JavaLangStringBuilder *quoteString = [[[JavaLangStringBuilder alloc] init] autorelease];
    int peekOne = [self read];
    while (peekOne >= 0 && peekOne != matchQuote && peekOne != 0x000d && peekOne != 0x000a) {
      BOOL readPeek = YES;
      if (peekOne == '\\') {
        int c1 = [self read];
        if (c1 <= '7' && c1 >= '0') {
          int digitValue = c1 - '0';
          c1 = [self read];
          if (c1 > '7' || c1 < '0') {
            readPeek = NO;
          }
          else {
            digitValue = digitValue * 8 + (c1 - '0');
            c1 = [self read];
            if (digitValue > 037 || c1 > '7' || c1 < '0') {
              readPeek = NO;
            }
            else {
              digitValue = digitValue * 8 + (c1 - '0');
            }
          }
          if (!readPeek) {
            [quoteString appendWithChar:(unichar) digitValue];
            peekOne = c1;
          }
          else {
            peekOne = digitValue;
          }
        }
        else {
          switch (c1) {
            case 'a':
            peekOne = (int) 0x7;
            break;
            case 'b':
            peekOne = (int) 0x8;
            break;
            case 'f':
            peekOne = (int) 0xc;
            break;
            case 'n':
            peekOne = (int) 0xA;
            break;
            case 'r':
            peekOne = (int) 0xD;
            break;
            case 't':
            peekOne = (int) 0x9;
            break;
            case 'v':
            peekOne = (int) 0xB;
            break;
            default:
            peekOne = c1;
          }
        }
      }
      if (readPeek) {
        [quoteString appendWithChar:(unichar) peekOne];
        peekOne = [self read];
      }
    }
    if (peekOne == matchQuote) {
      peekOne = [self read];
    }
    peekChar_ = peekOne;
    ttype_ = matchQuote;
    JavaIoStreamTokenizer_set_sval_(self, [quoteString description]);
    return ttype_;
  }
  if (currentChar == '/' && (slashSlashComments__ || slashStarComments__)) {
    if ((currentChar = [self read]) == '*' && slashStarComments__) {
      int peekOne = [self read];
      while (YES) {
        currentChar = peekOne;
        peekOne = [self read];
        if (currentChar == -1) {
          peekChar_ = -1;
          return (ttype_ = JavaIoStreamTokenizer_TT_EOF);
        }
        if (currentChar == 0x000d) {
          if (peekOne == 0x000a) {
            peekOne = [self read];
          }
          lineNumber_++;
        }
        else if (currentChar == 0x000a) {
          lineNumber_++;
        }
        else if (currentChar == '*' && peekOne == '/') {
          peekChar_ = [self read];
          return [self nextToken];
        }
      }
    }
    else if (currentChar == '/' && slashSlashComments__) {
      while ((currentChar = [self read]) >= 0 && currentChar != 0x000d && currentChar != 0x000a) {
      }
      peekChar_ = currentChar;
      return [self nextToken];
    }
    else if (currentType != JavaIoStreamTokenizer_TOKEN_COMMENT) {
      peekChar_ = currentChar;
      return (ttype_ = '/');
    }
  }
  if (currentType == JavaIoStreamTokenizer_TOKEN_COMMENT) {
    while ((currentChar = [self read]) >= 0 && currentChar != 0x000d && currentChar != 0x000a) {
    }
    peekChar_ = currentChar;
    return [self nextToken];
  }
  peekChar_ = [self read];
  return (ttype_ = currentChar);
}

+ (IOSObjectArray *)__exceptions_nextToken {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)ordinaryCharWithInt:(int)ch {
  if (ch >= 0 && ch < (int) [((IOSByteArray *) nil_chk(tokenTypes_)) count]) {
    (*IOSByteArray_GetRef(tokenTypes_, ch)) = 0;
  }
}

- (void)ordinaryCharsWithInt:(int)low
                     withInt:(int)hi {
  if (low < 0) {
    low = 0;
  }
  if (hi > (int) [((IOSByteArray *) nil_chk(tokenTypes_)) count]) {
    hi = (int) [tokenTypes_ count] - 1;
  }
  for (int i = low; i <= hi; i++) {
    (*IOSByteArray_GetRef(tokenTypes_, i)) = 0;
  }
}

- (void)parseNumbers {
  for (int i = '0'; i <= '9'; i++) {
    (*IOSByteArray_GetRef(nil_chk(tokenTypes_), i)) |= JavaIoStreamTokenizer_TOKEN_DIGIT;
  }
  (*IOSByteArray_GetRef(nil_chk(tokenTypes_), '.')) |= JavaIoStreamTokenizer_TOKEN_DIGIT;
  (*IOSByteArray_GetRef(tokenTypes_, '-')) |= JavaIoStreamTokenizer_TOKEN_DIGIT;
}

- (void)pushBack {
  pushBackToken_ = YES;
}

- (void)quoteCharWithInt:(int)ch {
  if (ch >= 0 && ch < (int) [((IOSByteArray *) nil_chk(tokenTypes_)) count]) {
    (*IOSByteArray_GetRef(tokenTypes_, ch)) = JavaIoStreamTokenizer_TOKEN_QUOTE;
  }
}

- (int)read {
  if (inStream_ == nil) {
    return [((JavaIoReader *) nil_chk(inReader_)) read];
  }
  return [((JavaIoInputStream *) nil_chk(inStream_)) read];
}

+ (IOSObjectArray *)__exceptions_read {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)resetSyntax {
  for (int i = 0; i < 256; i++) {
    (*IOSByteArray_GetRef(nil_chk(tokenTypes_), i)) = 0;
  }
}

- (void)slashSlashCommentsWithBoolean:(BOOL)flag {
  slashSlashComments__ = flag;
}

- (void)slashStarCommentsWithBoolean:(BOOL)flag {
  slashStarComments__ = flag;
}

- (NSString *)description {
  JavaLangStringBuilder *result = [[[JavaLangStringBuilder alloc] init] autorelease];
  [result appendWithNSString:@"Token["];
  switch (ttype_) {
    case JavaIoStreamTokenizer_TT_EOF:
    [result appendWithNSString:@"EOF"];
    break;
    case JavaIoStreamTokenizer_TT_EOL:
    [result appendWithNSString:@"EOL"];
    break;
    case JavaIoStreamTokenizer_TT_NUMBER:
    [result appendWithNSString:@"n="];
    [result appendWithDouble:nval_];
    break;
    case JavaIoStreamTokenizer_TT_WORD:
    [result appendWithNSString:sval_];
    break;
    default:
    if (ttype_ == JavaIoStreamTokenizer_TT_UNKNOWN || IOSByteArray_Get(nil_chk(tokenTypes_), ttype_) == JavaIoStreamTokenizer_TOKEN_QUOTE) {
      [result appendWithNSString:sval_];
    }
    else {
      [result appendWithChar:'\''];
      [result appendWithChar:(unichar) ttype_];
      [result appendWithChar:'\''];
    }
  }
  [result appendWithNSString:@"], line "];
  [result appendWithInt:lineNumber_];
  return [result description];
}

- (void)whitespaceCharsWithInt:(int)low
                       withInt:(int)hi {
  if (low < 0) {
    low = 0;
  }
  if (hi > (int) [((IOSByteArray *) nil_chk(tokenTypes_)) count]) {
    hi = (int) [tokenTypes_ count] - 1;
  }
  for (int i = low; i <= hi; i++) {
    (*IOSByteArray_GetRef(tokenTypes_, i)) = JavaIoStreamTokenizer_TOKEN_WHITE;
  }
}

- (void)wordCharsWithInt:(int)low
                 withInt:(int)hi {
  if (low < 0) {
    low = 0;
  }
  if (hi > (int) [((IOSByteArray *) nil_chk(tokenTypes_)) count]) {
    hi = (int) [tokenTypes_ count] - 1;
  }
  for (int i = low; i <= hi; i++) {
    (*IOSByteArray_GetRef(tokenTypes_, i)) |= JavaIoStreamTokenizer_TOKEN_WORD;
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaIoStreamTokenizer_set_inReader_(self, nil);
  JavaIoStreamTokenizer_set_inStream_(self, nil);
  JavaIoStreamTokenizer_set_tokenTypes_(self, nil);
  JavaIoStreamTokenizer_set_sval_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaIoStreamTokenizer *)other {
  [super copyAllFieldsTo:other];
  other->forceLowercase_ = forceLowercase_;
  JavaIoStreamTokenizer_set_inReader_(other, inReader_);
  JavaIoStreamTokenizer_set_inStream_(other, inStream_);
  other->isEOLSignificant_ = isEOLSignificant_;
  other->lastCr_ = lastCr_;
  other->lineNumber_ = lineNumber_;
  other->nval_ = nval_;
  other->peekChar_ = peekChar_;
  other->pushBackToken_ = pushBackToken_;
  other->slashSlashComments__ = slashSlashComments__;
  other->slashStarComments__ = slashStarComments__;
  JavaIoStreamTokenizer_set_sval_(other, sval_);
  JavaIoStreamTokenizer_set_tokenTypes_(other, tokenTypes_);
  other->ttype_ = ttype_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:sval_ name:@"sval"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:tokenTypes_ name:@"tokenTypes"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:inStream_ name:@"inStream"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:inReader_ name:@"inReader"]];
  return result;
}

+ (IOSObjectArray *)__annotations_JavaIoStreamTokenizerWithJavaIoInputStream_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecatedImpl alloc] init] autorelease] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

@end
