//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/luni/src/main/java/java/io/CharArrayWriter.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSCharArray.h"
#include "IOSClass.h"
#include "java/io/CharArrayWriter.h"
#include "java/io/IOException.h"
#include "java/io/Writer.h"
#include "java/lang/CharSequence.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringIndexOutOfBoundsException.h"
#include "java/lang/System.h"

@implementation JavaIoCharArrayWriter

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)init {
  if (self = [super init]) {
    JavaIoCharArrayWriter_set_buf_(self, [IOSCharArray arrayWithLength:32]);
    JavaIoWriter_set_lock_(self, buf_);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithInt:(int)initialSize {
  if (self = [super init]) {
    if (initialSize < 0) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"size must be >= 0"] autorelease];
    }
    JavaIoCharArrayWriter_set_buf_(self, [IOSCharArray arrayWithLength:initialSize]);
    JavaIoWriter_set_lock_(self, buf_);
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)close {
}

- (void)expandWithInt:(int)i {
  if (count_ + i <= (int) [((IOSCharArray *) nil_chk(buf_)) count]) {
    return;
  }
  int newLen = [JavaLangMath maxWithInt:2 * (int) [buf_ count] withInt:count_ + i];
  IOSCharArray *newbuf = [IOSCharArray arrayWithLength:newLen];
  [JavaLangSystem arraycopyWithId:buf_ withInt:0 withId:newbuf withInt:0 withInt:count_];
  JavaIoCharArrayWriter_set_buf_(self, newbuf);
}

- (void)flush {
}

- (void)reset {
  @synchronized (lock_) {
    count_ = 0;
  }
}

- (int)size {
  @synchronized (lock_) {
    return count_;
  }
}

- (IOSCharArray *)toCharArray {
  @synchronized (lock_) {
    IOSCharArray *result = [IOSCharArray arrayWithLength:count_];
    [JavaLangSystem arraycopyWithId:buf_ withInt:0 withId:result withInt:0 withInt:count_];
    return result;
  }
}

- (NSString *)description {
  @synchronized (lock_) {
    return [NSString stringWithCharacters:buf_ offset:0 length:count_];
  }
}

- (void)writeWithCharArray:(IOSCharArray *)c
                   withInt:(int)offset
                   withInt:(int)len {
  if (offset < 0 || offset > (int) [((IOSCharArray *) nil_chk(c)) count] || len < 0 || len > (int) [c count] - offset) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  @synchronized (lock_) {
    [self expandWithInt:len];
    [JavaLangSystem arraycopyWithId:c withInt:offset withId:self->buf_ withInt:self->count_ withInt:len];
    self->count_ += len;
  }
}

- (void)writeWithInt:(int)oneChar {
  @synchronized (lock_) {
    [self expandWithInt:1];
    (*IOSCharArray_GetRef(nil_chk(buf_), count_++)) = (unichar) oneChar;
  }
}

- (void)writeWithNSString:(NSString *)str
                  withInt:(int)offset
                  withInt:(int)len {
  if (str == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"buffer is null"] autorelease];
  }
  if (offset < 0 || offset > [((NSString *) nil_chk(str)) length] || len < 0 || len > [str length] - offset) {
    @throw [[[JavaLangStringIndexOutOfBoundsException alloc] init] autorelease];
  }
  @synchronized (lock_) {
    [self expandWithInt:len];
    [((NSString *) nil_chk(str)) getChars:offset sourceEnd:offset + len destination:buf_ destinationBegin:self->count_];
    self->count_ += len;
  }
}

- (void)writeToWithJavaIoWriter:(JavaIoWriter *)outArg {
  @synchronized (lock_) {
    [((JavaIoWriter *) nil_chk(outArg)) writeWithCharArray:buf_ withInt:0 withInt:count_];
  }
}

+ (IOSObjectArray *)__exceptions_writeToWithJavaIoWriter_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (JavaIoCharArrayWriter *)appendWithChar:(unichar)c {
  [self writeWithInt:c];
  return self;
}

- (JavaIoCharArrayWriter *)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)csq {
  if (nil == csq) {
    [self appendWithJavaLangCharSequence:[JavaIoWriter TOKEN_NULL] withInt:0 withInt:[((NSString *) nil_chk([JavaIoWriter TOKEN_NULL])) length]];
  }
  else {
    [self appendWithJavaLangCharSequence:csq withInt:0 withInt:[csq sequenceLength]];
  }
  return self;
}

- (JavaIoCharArrayWriter *)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)csq
                                                  withInt:(int)start
                                                  withInt:(int)end {
  if (nil == csq) {
    csq = [JavaIoWriter TOKEN_NULL];
  }
  NSString *output = [((id<JavaLangCharSequence>) nil_chk([((id<JavaLangCharSequence>) nil_chk(csq)) subSequenceFrom:start to:end])) sequenceDescription];
  [self writeWithNSString:output withInt:0 withInt:[((NSString *) nil_chk(output)) length]];
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaIoCharArrayWriter_set_buf_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaIoCharArrayWriter *)other {
  [super copyAllFieldsTo:other];
  JavaIoCharArrayWriter_set_buf_(other, buf_);
  other->count_ = count_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:buf_ name:@"buf"]];
  return result;
}

@end
