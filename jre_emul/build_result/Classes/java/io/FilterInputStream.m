//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/luni/src/main/java/java/io/FilterInputStream.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSByteArray.h"
#include "IOSClass.h"
#include "java/io/FilterInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"

@implementation JavaIoFilterInputStream

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  if (self = [super init]) {
    JavaIoFilterInputStream_set_in_(self, inArg);
    JreMemDebugAdd(self);
  }
  return self;
}

- (int)available {
  return [((JavaIoInputStream *) nil_chk(in_)) available];
}

+ (IOSObjectArray *)__exceptions_available {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)close {
  [((JavaIoInputStream *) nil_chk(in_)) close];
}

+ (IOSObjectArray *)__exceptions_close {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)markWithInt:(int)readlimit {
  @synchronized(self) {
    {
      [((JavaIoInputStream *) nil_chk(in_)) markWithInt:readlimit];
    }
  }
}

- (BOOL)markSupported {
  return [((JavaIoInputStream *) nil_chk(in_)) markSupported];
}

- (int)read {
  return [((JavaIoInputStream *) nil_chk(in_)) read];
}

+ (IOSObjectArray *)__exceptions_read {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (int)readWithByteArray:(IOSByteArray *)buffer {
  return [self readWithByteArray:buffer withInt:0 withInt:(int) [((IOSByteArray *) nil_chk(buffer)) count]];
}

+ (IOSObjectArray *)__exceptions_readWithByteArray_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (int)readWithByteArray:(IOSByteArray *)buffer
                 withInt:(int)offset
                 withInt:(int)count {
  return [((JavaIoInputStream *) nil_chk(in_)) readWithByteArray:buffer withInt:offset withInt:count];
}

+ (IOSObjectArray *)__exceptions_readWithByteArray_withInt_withInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)reset {
  @synchronized(self) {
    {
      [((JavaIoInputStream *) nil_chk(in_)) reset];
    }
  }
}

+ (IOSObjectArray *)__exceptions_reset {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (long long int)skipWithLong:(long long int)count {
  return [((JavaIoInputStream *) nil_chk(in_)) skipWithLong:count];
}

+ (IOSObjectArray *)__exceptions_skipWithLong_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaIoFilterInputStream_set_in_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaIoFilterInputStream *)other {
  [super copyAllFieldsTo:other];
  JavaIoFilterInputStream_set_in_(other, in_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:in_ name:@"in"]];
  return result;
}

@end
