//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/luni/src/main/java/java/io/OutputStreamWriter.java
//
//  Created by retechretech on 13-9-4.
//

#include "IOSCharArray.h"
#include "IOSClass.h"
#include "java/io/IOException.h"
#include "java/io/InputStreamReader.h"
#include "java/io/OutputStream.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringIndexOutOfBoundsException.h"

@implementation JavaIoOutputStreamWriter

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  if ((self = [super initWithId:outArg])) {
    JavaIoOutputStreamWriter_set_out_(self, outArg);
    encoding_ = 5;
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                    withNSString:(NSString *)enc {
  if ((self = [super initWithId:outArg])) {
    if (enc == nil) {
      @throw [[[JavaLangNullPointerException alloc] init] autorelease];
    }
    JavaIoOutputStreamWriter_set_out_(self, outArg);
    encoding_ = [JavaIoInputStreamReader getOSXEncodingWithNSString:enc];
    if (encoding_ == -1) {
      @throw [[[JavaIoUnsupportedEncodingException alloc] initWithNSString:enc] autorelease];
    }
    JreMemDebugAdd(self);
  }
  return self;
}

+ (IOSObjectArray *)__exceptions_JavaIoOutputStreamWriterWithJavaIoOutputStream_withNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoUnsupportedEncodingException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)close {
  if (out_ == nil) {
    return;
  }
  @synchronized (lock_) {
    [self flush];
    [((JavaIoOutputStream *) nil_chk(out_)) flush];
    [out_ close];
    JavaIoOutputStreamWriter_set_out_(self, nil);
  }
}

+ (IOSObjectArray *)__exceptions_close {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)flush {
  [self checkStatus];
}

+ (IOSObjectArray *)__exceptions_flush {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (NSString *)getEncoding {
  return out_ != nil ? [JavaIoInputStreamReader nativeEncodingNameWithInt:encoding_] : nil;
}

- (void)writeWithCharArray:(IOSCharArray *)buf
                   withInt:(int)offset
                   withInt:(int)count {
  [self checkStatus];
  @synchronized (lock_) {
    if (offset < 0 || offset > (int) [((IOSCharArray *) nil_chk(buf)) count] - count || count < 0) {
      @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
    }
    [self convertWithCharArray:buf withInt:offset withInt:count];
  }
}

+ (IOSObjectArray *)__exceptions_writeWithCharArray_withInt_withInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)convertWithCharArray:(IOSCharArray *)buf
                     withInt:(int)offset
                     withInt:(int)count   {
    unichar *chars = [buf getChars];
    NSString *s = [[NSString alloc] initWithCharacters:(chars + offset) length:count];
    #if ! __has_feature(objc_arc)
    [s autorelease];
    #endif
    free(chars);
    NSUInteger nBytes = [s lengthOfBytesUsingEncoding:NSUTF8StringEncoding];
    void *bytes = malloc(nBytes);
    if (![s getBytes:bytes
    maxLength:nBytes
    usedLength:NULL
    encoding:NSUTF8StringEncoding
    options:0
    range:NSMakeRange(0, count)
    remainingRange:NULL]) {
      JavaIoIOException *e = [[JavaIoIOException alloc] init];
      #if ! __has_feature(objc_arc)
      [e autorelease];
      #endif
      free(bytes);
      @throw e;
    }
    IOSByteArray *array = [[IOSByteArray alloc] initWithBytes:bytes count:nBytes];
    free(bytes);
    [out_ writeWithByteArray:array];
    #if ! __has_feature(objc_arc)
    [array release];
    #endif
  }

- (void)writeWithInt:(int)oneChar {
  [self checkStatus];
  @synchronized (lock_) {
    IOSCharArray *buf = [IOSCharArray arrayWithLength:1];
    (*[buf charRefAtIndex:0]) = (unichar) oneChar;
    [self convertWithCharArray:buf withInt:0 withInt:1];
  }
}

+ (IOSObjectArray *)__exceptions_writeWithInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)writeWithNSString:(NSString *)str
                  withInt:(int)offset
                  withInt:(int)count {
  @synchronized (lock_) {
    if (count < 0) {
      @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
    }
    if (offset + count > [((NSString *) nil_chk(str)) length] || offset < 0) {
      @throw [[[JavaLangStringIndexOutOfBoundsException alloc] init] autorelease];
    }
    [self checkStatus];
    IOSCharArray *chars = [str toCharArray];
    [self convertWithCharArray:chars withInt:offset withInt:count];
  }
}

+ (IOSObjectArray *)__exceptions_writeWithNSString_withInt_withInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)checkStatus {
  if (out_ == nil) {
    @throw [[[JavaIoIOException alloc] initWithNSString:@"Writer is closed."] autorelease];
  }
}

+ (IOSObjectArray *)__exceptions_checkStatus {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (BOOL)checkError {
  return [((JavaIoOutputStream *) nil_chk(out_)) checkError];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaIoOutputStreamWriter_set_out_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaIoOutputStreamWriter *)other {
  [super copyAllFieldsTo:other];
  other->encoding_ = encoding_;
  JavaIoOutputStreamWriter_set_out_(other, out_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:out_ name:@"out"]];
  return result;
}

@end
