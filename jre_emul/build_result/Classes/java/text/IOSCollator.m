//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: Classes/java/text/IOSCollator.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSByteArray.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/text/CollationKey.h"
#include "java/text/Collator.h"
#include "java/text/IOSCollator.h"
#include "java/util/Locale.h"

@implementation JavaTextIOSCollator

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilLocale:(JavaUtilLocale *)locale {
  if (self = [super init]) {
    [self initNativeLocaleWithJavaUtilLocale:locale];
    strength_ = JavaTextCollator_PRIMARY;
    decomposition_ = JavaTextCollator_NO_DECOMPOSITION;
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)initNativeLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale {
  nsLocale_ = [[NSLocale alloc] initWithLocaleIdentifier:[locale description]];
}

- (int)compareWithNSString:(NSString *)string1
              withNSString:(NSString *)string2 {
  return [string1 compare:string2
  options:NSLiteralSearch
  range:NSMakeRange(0, [string1 length])
  locale:nsLocale_];
}

- (int)getDecomposition {
  return decomposition_;
}

- (int)getStrength {
  return strength_;
}

- (void)setDecompositionWithInt:(int)value {
  if (value < JavaTextCollator_NO_DECOMPOSITION || value > JavaTextCollator_FULL_DECOMPOSITION) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  decomposition_ = value;
}

- (void)setStrengthWithInt:(int)value {
  if (value < JavaTextCollator_PRIMARY || value > JavaTextCollator_IDENTICAL) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  strength_ = value;
}

- (NSUInteger)hash {
  return [(NSLocale *) nsLocale_ hash];
}

- (BOOL)isEqual:(id)obj {
  if (self == obj) {
    return YES;
  }
  if (obj == nil) {
    return NO;
  }
  if (!([obj isKindOfClass:[JavaTextIOSCollator class]])) {
    return NO;
  }
  JavaTextIOSCollator *other = (JavaTextIOSCollator *) check_class_cast(obj, [JavaTextIOSCollator class]);
  return [JavaTextIOSCollator nativeLocalesEqualWithId:nsLocale_ withId:((JavaTextIOSCollator *) nil_chk(other))->nsLocale_] && strength_ == other->strength_ && decomposition_ == other->decomposition_;
}

+ (BOOL)nativeLocalesEqualWithId:(id)locale1
                          withId:(id)locale2 {
  return [(NSLocale *) locale1 isEqual:(NSLocale *) locale2];
}

- (JavaTextCollationKey *)getCollationKeyWithNSString:(NSString *)string {
  return [[[JavaTextIOSCollator_IOSCollationKey alloc] initWithNSString:string] autorelease];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaTextIOSCollator_set_nsLocale_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaTextIOSCollator *)other {
  [super copyAllFieldsTo:other];
  other->decomposition_ = decomposition_;
  JavaTextIOSCollator_set_nsLocale_(other, nsLocale_);
  other->strength_ = strength_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:nsLocale_ name:@"nsLocale"]];
  return result;
}

@end
@implementation JavaTextIOSCollator_IOSCollationKey

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithNSString:(NSString *)source {
  return JreMemDebugAdd([super initWithNSString:source]);
}

- (int)compareToWithId:(JavaTextCollationKey *)value {
  if (value != nil && ![value isKindOfClass:[JavaTextCollationKey class]]) {
    @throw [[[JavaLangClassCastException alloc] init] autorelease];
  }
  return 0;
}

- (IOSByteArray *)toByteArray {
  const char *utf = [source_ UTF8String];
  return [IOSByteArray arrayWithBytes:utf count:strlen(utf) + 1];  // Include null terminator.
}

@end
