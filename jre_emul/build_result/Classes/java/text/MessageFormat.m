//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "java/lang/Character.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/text/AttributedCharacterIterator.h"
#include "java/text/AttributedString.h"
#include "java/text/ChoiceFormat.h"
#include "java/text/DateFormat.h"
#include "java/text/DecimalFormat.h"
#include "java/text/DecimalFormatSymbols.h"
#include "java/text/FieldPosition.h"
#include "java/text/Format.h"
#include "java/text/MessageFormat.h"
#include "java/text/NumberFormat.h"
#include "java/text/ParseException.h"
#include "java/text/ParsePosition.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Date.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "libcore/util/EmptyArray.h"

@implementation JavaTextMessageFormat

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initJavaTextMessageFormatWithNSString:(NSString *)template_
                         withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (self = [super init]) {
    JavaTextMessageFormat_set_locale_(self, locale);
    [self applyPatternWithNSString:template_];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithNSString:(NSString *)template_
    withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [self initJavaTextMessageFormatWithNSString:template_ withJavaUtilLocale:locale];
}

- (id)initWithNSString:(NSString *)template_ {
  return JreMemDebugAdd([self initJavaTextMessageFormatWithNSString:template_ withJavaUtilLocale:[JavaUtilLocale getDefault]]);
}

- (void)applyPatternWithNSString:(NSString *)template_ {
  int length = [((NSString *) nil_chk(template_)) length];
  JavaLangStringBuffer *buffer = [[[JavaLangStringBuffer alloc] init] autorelease];
  JavaTextParsePosition *position = [[[JavaTextParsePosition alloc] initWithInt:0] autorelease];
  JavaUtilArrayList *localStrings = [[[JavaUtilArrayList alloc] init] autorelease];
  int argCount = 0;
  IOSIntArray *args = [IOSIntArray arrayWithLength:10];
  int maxArg = -1;
  JavaUtilArrayList *localFormats = [[[JavaUtilArrayList alloc] init] autorelease];
  while ([position getIndex] < length) {
    if ([JavaTextFormat upToWithNSString:template_ withJavaTextParsePosition:position withJavaLangStringBuffer:buffer withChar:'{']) {
      int arg = 0;
      int offset = [position getIndex];
      if (offset >= length) {
        @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Invalid argument number"] autorelease];
      }
      unichar ch;
      while ((ch = [template_ charAtWithInt:offset++]) != '}' && ch != ',') {
        if (ch < '0' && ch > '9') {
          @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Invalid argument number"] autorelease];
        }
        arg = arg * 10 + (ch - '0');
        if (arg < 0 || offset >= length) {
          @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Invalid argument number"] autorelease];
        }
      }
      offset--;
      [position setIndexWithInt:offset];
      [localFormats addWithId:[self parseVariableWithNSString:template_ withJavaTextParsePosition:position]];
      if (argCount >= (int) [args count]) {
        IOSIntArray *newArgs = [IOSIntArray arrayWithLength:(int) [args count] * 2];
        [JavaLangSystem arraycopyWithId:args withInt:0 withId:newArgs withInt:0 withInt:(int) [args count]];
        args = newArgs;
      }
      (*IOSIntArray_GetRef(args, argCount++)) = arg;
      if (arg > maxArg) {
        maxArg = arg;
      }
    }
    [localStrings addWithId:[buffer description]];
    [buffer setLengthWithInt:0];
  }
  JavaTextMessageFormat_set_strings_(self, [localStrings toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[localStrings size] type:[IOSClass classWithClass:[NSString class]]]]);
  JavaTextMessageFormat_set_argumentNumbers_(self, args);
  JavaTextMessageFormat_set_formats_(self, [localFormats toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:argCount type:[IOSClass classWithClass:[JavaTextFormat class]]]]);
  maxOffset_ = argCount - 1;
  maxArgumentIndex_ = maxArg;
}

- (id)clone {
  JavaTextMessageFormat *clone = (JavaTextMessageFormat *) check_class_cast([super clone], [JavaTextMessageFormat class]);
  IOSObjectArray *array = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(formats_)) count] type:[IOSClass classWithClass:[JavaTextFormat class]]];
  for (int i = (int) [formats_ count]; --i >= 0; ) {
    if (IOSObjectArray_Get(formats_, i) != nil) {
      IOSObjectArray_Set(array, i, (JavaTextFormat *) check_class_cast([((JavaTextFormat *) nil_chk(IOSObjectArray_Get(formats_, i))) clone], [JavaTextFormat class]));
    }
  }
  JavaTextMessageFormat_set_formats_(nil_chk(clone), array);
  return clone;
}

- (BOOL)isEqual:(id)object {
  if (self == object) {
    return YES;
  }
  if (!([object isKindOfClass:[JavaTextMessageFormat class]])) {
    return NO;
  }
  JavaTextMessageFormat *format = (JavaTextMessageFormat *) check_class_cast(object, [JavaTextMessageFormat class]);
  if (maxOffset_ != ((JavaTextMessageFormat *) nil_chk(format))->maxOffset_) {
    return NO;
  }
  for (int i = 0; i <= maxOffset_; i++) {
    if (IOSIntArray_Get(nil_chk(argumentNumbers_), i) != IOSIntArray_Get(format->argumentNumbers_, i)) {
      return NO;
    }
  }
  return [((JavaUtilLocale *) nil_chk(locale_)) isEqual:format->locale_] && [JavaUtilArrays equalsWithNSObjectArray:strings_ withNSObjectArray:format->strings_] && [JavaUtilArrays equalsWithNSObjectArray:formats_ withNSObjectArray:format->formats_];
}

- (id<JavaTextAttributedCharacterIterator>)formatToCharacterIteratorWithId:(id)object {
  if (object == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"object == null"] autorelease];
  }
  JavaLangStringBuffer *buffer = [[[JavaLangStringBuffer alloc] init] autorelease];
  JavaUtilArrayList *fields = [[[JavaUtilArrayList alloc] init] autorelease];
  [self formatImplWithNSObjectArray:(IOSObjectArray *) check_class_cast(object, [IOSObjectArray class]) withJavaLangStringBuffer:buffer withJavaTextFieldPosition:[[[JavaTextFieldPosition alloc] initWithInt:0] autorelease] withJavaUtilList:fields];
  JavaTextAttributedString *as = [[[JavaTextAttributedString alloc] initWithNSString:[buffer description]] autorelease];
  for (JavaTextMessageFormat_FieldContainer * __strong fc in fields) {
    [as addAttributeWithJavaTextAttributedCharacterIterator_Attribute:((JavaTextMessageFormat_FieldContainer *) nil_chk(fc))->attribute_ withId:fc->value_ withInt:fc->start_ withInt:fc->end_];
  }
  return [as getIterator];
}

- (JavaLangStringBuffer *)formatWithNSObjectArray:(IOSObjectArray *)objects
                         withJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                        withJavaTextFieldPosition:(JavaTextFieldPosition *)field {
  return [self formatImplWithNSObjectArray:objects withJavaLangStringBuffer:buffer withJavaTextFieldPosition:field withJavaUtilList:nil];
}

- (JavaLangStringBuffer *)formatImplWithNSObjectArray:(IOSObjectArray *)objects
                             withJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                            withJavaTextFieldPosition:(JavaTextFieldPosition *)position
                                     withJavaUtilList:(id<JavaUtilList>)fields {
  JavaTextFieldPosition *passedField = [[[JavaTextFieldPosition alloc] initWithInt:0] autorelease];
  for (int i = 0; i <= maxOffset_; i++) {
    [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithNSString:IOSObjectArray_Get(nil_chk(strings_), i)];
    int begin = [buffer sequenceLength];
    id arg;
    if (objects != nil && IOSIntArray_Get(nil_chk(argumentNumbers_), i) < (int) [objects count]) {
      arg = IOSObjectArray_Get(objects, IOSIntArray_Get(argumentNumbers_, i));
    }
    else {
      [buffer appendWithChar:'{'];
      [buffer appendWithInt:IOSIntArray_Get(nil_chk(argumentNumbers_), i)];
      [buffer appendWithChar:'}'];
      [self handleArgumentFieldWithInt:begin withInt:[buffer sequenceLength] withInt:IOSIntArray_Get(argumentNumbers_, i) withJavaTextFieldPosition:position withJavaUtilList:fields];
      continue;
    }
    JavaTextFormat *format = IOSObjectArray_Get(nil_chk(formats_), i);
    if (format == nil || arg == nil) {
      if ([arg isKindOfClass:[NSNumber class]]) {
        format = [JavaTextNumberFormat getInstance];
      }
      else if ([arg isKindOfClass:[JavaUtilDate class]]) {
        format = [JavaTextDateFormat getInstance];
      }
      else {
        [buffer appendWithId:arg];
        [self handleArgumentFieldWithInt:begin withInt:[buffer sequenceLength] withInt:IOSIntArray_Get(nil_chk(argumentNumbers_), i) withJavaTextFieldPosition:position withJavaUtilList:fields];
        continue;
      }
    }
    if ([format isKindOfClass:[JavaTextChoiceFormat class]]) {
      NSString *result = [((JavaTextFormat *) nil_chk(format)) formatWithId:arg];
      JavaTextMessageFormat *mf = [[[JavaTextMessageFormat alloc] initWithNSString:result] autorelease];
      [mf setLocaleWithJavaUtilLocale:locale_];
      [mf formatWithNSObjectArray:objects withJavaLangStringBuffer:buffer withJavaTextFieldPosition:passedField];
      [self handleArgumentFieldWithInt:begin withInt:[buffer sequenceLength] withInt:IOSIntArray_Get(nil_chk(argumentNumbers_), i) withJavaTextFieldPosition:position withJavaUtilList:fields];
      [self handleFormatWithJavaTextFormat:format withId:arg withInt:begin withJavaUtilList:fields];
    }
    else {
      [((JavaTextFormat *) nil_chk(format)) formatWithId:arg withJavaLangStringBuffer:buffer withJavaTextFieldPosition:passedField];
      [self handleArgumentFieldWithInt:begin withInt:[buffer sequenceLength] withInt:IOSIntArray_Get(nil_chk(argumentNumbers_), i) withJavaTextFieldPosition:position withJavaUtilList:fields];
      [self handleFormatWithJavaTextFormat:format withId:arg withInt:begin withJavaUtilList:fields];
    }
  }
  if (maxOffset_ + 1 < (int) [((IOSObjectArray *) nil_chk(strings_)) count]) {
    [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithNSString:IOSObjectArray_Get(strings_, maxOffset_ + 1)];
  }
  return buffer;
}

- (void)handleArgumentFieldWithInt:(int)begin
                           withInt:(int)end
                           withInt:(int)argIndex
         withJavaTextFieldPosition:(JavaTextFieldPosition *)position
                  withJavaUtilList:(id<JavaUtilList>)fields {
  if (fields != nil) {
    [fields addWithId:[[[JavaTextMessageFormat_FieldContainer alloc] initWithInt:begin withInt:end withJavaTextAttributedCharacterIterator_Attribute:[JavaTextMessageFormat_Field ARGUMENT] withId:[JavaLangInteger valueOfWithInt:argIndex]] autorelease]];
  }
  else {
    if (position != nil && [position getFieldAttribute] == [JavaTextMessageFormat_Field ARGUMENT] && [position getEndIndex] == 0) {
      [position setBeginIndexWithInt:begin];
      [position setEndIndexWithInt:end];
    }
  }
}

- (void)handleFormatWithJavaTextFormat:(JavaTextFormat *)format
                                withId:(id)arg
                               withInt:(int)begin
                      withJavaUtilList:(id<JavaUtilList>)fields {
  if (fields == nil) {
    return;
  }
  id<JavaTextAttributedCharacterIterator> iterator = [((JavaTextFormat *) nil_chk(format)) formatToCharacterIteratorWithId:arg];
  while ([((id<JavaTextAttributedCharacterIterator>) nil_chk(iterator)) getIndex] != [iterator getEndIndex]) {
    int start = [iterator getRunStart];
    int end = [iterator getRunLimit];
    id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk([iterator getAttributes])) keySet])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      JavaTextAttributedCharacterIterator_Attribute *attribute = (JavaTextAttributedCharacterIterator_Attribute *) check_class_cast([it next], [JavaTextAttributedCharacterIterator_Attribute class]);
      id value = [iterator getAttributeWithJavaTextAttributedCharacterIterator_Attribute:attribute];
      [((id<JavaUtilList>) nil_chk(fields)) addWithId:[[[JavaTextMessageFormat_FieldContainer alloc] initWithInt:begin + start withInt:begin + end withJavaTextAttributedCharacterIterator_Attribute:attribute withId:value] autorelease]];
    }
    [iterator setIndexWithInt:end];
  }
}

- (JavaLangStringBuffer *)formatWithId:(id)object
              withJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
             withJavaTextFieldPosition:(JavaTextFieldPosition *)field {
  return [self formatWithNSObjectArray:(IOSObjectArray *) check_class_cast(object, [IOSObjectArray class]) withJavaLangStringBuffer:buffer withJavaTextFieldPosition:field];
}

+ (NSString *)formatWithNSString:(NSString *)format
               withNSObjectArray:(IOSObjectArray *)args {
  if (args != nil) {
    for (int i = 0; i < (int) [args count]; i++) {
      if (IOSObjectArray_Get(args, i) == nil) {
        IOSObjectArray_Set(args, i, @"null");
      }
    }
  }
  return [((JavaTextMessageFormat *) [[[JavaTextMessageFormat alloc] initWithNSString:format] autorelease]) formatWithId:args];
}

- (IOSObjectArray *)getFormats {
  return [((IOSObjectArray *) nil_chk(formats_)) clone];
}

- (IOSObjectArray *)getFormatsByArgumentIndex {
  IOSObjectArray *answer = [IOSObjectArray arrayWithLength:maxArgumentIndex_ + 1 type:[IOSClass classWithClass:[JavaTextFormat class]]];
  for (int i = 0; i < maxOffset_ + 1; i++) {
    IOSObjectArray_Set(answer, IOSIntArray_Get(nil_chk(argumentNumbers_), i), IOSObjectArray_Get(nil_chk(formats_), i));
  }
  return answer;
}

- (void)setFormatByArgumentIndexWithInt:(int)argIndex
                     withJavaTextFormat:(JavaTextFormat *)format {
  for (int i = 0; i < maxOffset_ + 1; i++) {
    if (IOSIntArray_Get(nil_chk(argumentNumbers_), i) == argIndex) {
      IOSObjectArray_Set(nil_chk(formats_), i, format);
    }
  }
}

- (void)setFormatsByArgumentIndexWithJavaTextFormatArray:(IOSObjectArray *)formats {
  for (int j = 0; j < (int) [((IOSObjectArray *) nil_chk(formats)) count]; j++) {
    for (int i = 0; i < maxOffset_ + 1; i++) {
      if (IOSIntArray_Get(nil_chk(argumentNumbers_), i) == j) {
        IOSObjectArray_Set(nil_chk(self->formats_), i, IOSObjectArray_Get(formats, j));
      }
    }
  }
}

- (JavaUtilLocale *)getLocale {
  return locale_;
}

- (NSUInteger)hash {
  int hashCode = 0;
  for (int i = 0; i <= maxOffset_; i++) {
    hashCode += IOSIntArray_Get(nil_chk(argumentNumbers_), i) + [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(strings_), i))) hash];
    if (IOSObjectArray_Get(nil_chk(formats_), i) != nil) {
      hashCode += [((JavaTextFormat *) nil_chk(IOSObjectArray_Get(formats_, i))) hash];
    }
  }
  if (maxOffset_ + 1 < (int) [((IOSObjectArray *) nil_chk(strings_)) count]) {
    hashCode += [((NSString *) nil_chk(IOSObjectArray_Get(strings_, maxOffset_ + 1))) hash];
  }
  if (locale_ != nil) {
    return hashCode + [locale_ hash];
  }
  return hashCode;
}

- (IOSObjectArray *)parseWithNSString:(NSString *)string {
  JavaTextParsePosition *position = [[[JavaTextParsePosition alloc] initWithInt:0] autorelease];
  IOSObjectArray *result = [self parseWithNSString:string withJavaTextParsePosition:position];
  if ([position getIndex] == 0) {
    @throw [[[JavaTextParseException alloc] initWithNSString:@"Parse failure" withInt:[position getErrorIndex]] autorelease];
  }
  return result;
}

+ (IOSObjectArray *)__exceptions_parseWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaTextParseException getClass] } count:1 type:[IOSClass getClass]];
}

- (IOSObjectArray *)parseWithNSString:(NSString *)string
            withJavaTextParsePosition:(JavaTextParsePosition *)position {
  if (string == nil) {
    return [LibcoreUtilEmptyArray OBJECT];
  }
  JavaTextParsePosition *internalPos = [[[JavaTextParsePosition alloc] initWithInt:0] autorelease];
  int offset = [((JavaTextParsePosition *) nil_chk(position)) getIndex];
  IOSObjectArray *result = [IOSObjectArray arrayWithLength:maxArgumentIndex_ + 1 type:[IOSClass classWithClass:[NSObject class]]];
  for (int i = 0; i <= maxOffset_; i++) {
    NSString *sub = IOSObjectArray_Get(nil_chk(strings_), i);
    if (![((NSString *) nil_chk(string)) hasPrefix:sub offset:offset]) {
      [position setErrorIndexWithInt:offset];
      return nil;
    }
    offset += [((NSString *) nil_chk(sub)) length];
    id parse;
    JavaTextFormat *format = IOSObjectArray_Get(nil_chk(formats_), i);
    if (format == nil) {
      if (i + 1 < (int) [strings_ count]) {
        int next = [string indexOfString:IOSObjectArray_Get(strings_, i + 1) fromIndex:offset];
        if (next == -1) {
          [position setErrorIndexWithInt:offset];
          return nil;
        }
        parse = [string substring:offset endIndex:next];
        offset = next;
      }
      else {
        parse = [string substring:offset];
        offset = [string length];
      }
    }
    else {
      [internalPos setIndexWithInt:offset];
      parse = [format parseObjectWithNSString:string withJavaTextParsePosition:internalPos];
      if ([internalPos getErrorIndex] != -1) {
        [position setErrorIndexWithInt:offset];
        return nil;
      }
      offset = [internalPos getIndex];
    }
    IOSObjectArray_Set(result, IOSIntArray_Get(nil_chk(argumentNumbers_), i), parse);
  }
  if (maxOffset_ + 1 < (int) [((IOSObjectArray *) nil_chk(strings_)) count]) {
    NSString *sub = IOSObjectArray_Get(strings_, maxOffset_ + 1);
    if (![((NSString *) nil_chk(string)) hasPrefix:sub offset:offset]) {
      [position setErrorIndexWithInt:offset];
      return nil;
    }
    offset += [((NSString *) nil_chk(sub)) length];
  }
  [position setIndexWithInt:offset];
  return result;
}

- (id)parseObjectWithNSString:(NSString *)string
    withJavaTextParsePosition:(JavaTextParsePosition *)position {
  return [self parseWithNSString:string withJavaTextParsePosition:position];
}

- (int)matchWithNSString:(NSString *)string
withJavaTextParsePosition:(JavaTextParsePosition *)position
             withBoolean:(BOOL)last
       withNSStringArray:(IOSObjectArray *)tokens {
  int length = [((NSString *) nil_chk(string)) length], offset = [((JavaTextParsePosition *) nil_chk(position)) getIndex], token = -1;
  while (offset < length && [JavaLangCharacter isWhitespaceWithChar:[string charAtWithInt:offset]]) {
    offset++;
  }
  for (int i = (int) [((IOSObjectArray *) nil_chk(tokens)) count]; --i >= 0; ) {
    if ([string regionMatches:YES thisOffset:offset aString:IOSObjectArray_Get(tokens, i) otherOffset:0 count:[((NSString *) nil_chk(IOSObjectArray_Get(tokens, i))) length]]) {
      token = i;
      break;
    }
  }
  if (token == -1) {
    return -1;
  }
  offset += [((NSString *) nil_chk(IOSObjectArray_Get(tokens, token))) length];
  while (offset < length && [JavaLangCharacter isWhitespaceWithChar:[string charAtWithInt:offset]]) {
    offset++;
  }
  unichar ch;
  if (offset < length && ((ch = [string charAtWithInt:offset]) == '}' || (!last && ch == ','))) {
    [position setIndexWithInt:offset + 1];
    return token;
  }
  return -1;
}

- (JavaTextFormat *)parseVariableWithNSString:(NSString *)string
                    withJavaTextParsePosition:(JavaTextParsePosition *)position {
  int length = [((NSString *) nil_chk(string)) length], offset = [((JavaTextParsePosition *) nil_chk(position)) getIndex];
  unichar ch;
  if (offset >= length || ((ch = [string charAtWithInt:offset++]) != '}' && ch != ',')) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Missing element format"] autorelease];
  }
  [position setIndexWithInt:offset];
  if (ch == '}') {
    return nil;
  }
  int type = [self matchWithNSString:string withJavaTextParsePosition:position withBoolean:NO withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"time", @"date", @"number", @"choice" } count:4 type:[IOSClass classWithClass:[NSString class]]]];
  if (type == -1) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Unknown element format"] autorelease];
  }
  JavaLangStringBuffer *buffer = [[[JavaLangStringBuffer alloc] init] autorelease];
  ch = [string charAtWithInt:[position getIndex] - 1];
  {
    int dateStyle;
    int numberStyle;
    switch (type) {
      case 0:
      case 1:
      if (ch == '}') {
        return type == 1 ? [JavaTextDateFormat getDateInstanceWithInt:JavaTextDateFormat_DEFAULT withJavaUtilLocale:locale_] : [JavaTextDateFormat getTimeInstanceWithInt:JavaTextDateFormat_DEFAULT withJavaUtilLocale:locale_];
      }
      dateStyle = [self matchWithNSString:string withJavaTextParsePosition:position withBoolean:YES withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"full", @"long", @"medium", @"short" } count:4 type:[IOSClass classWithClass:[NSString class]]]];
      if (dateStyle == -1) {
        [JavaTextFormat upToWithQuotesWithNSString:string withJavaTextParsePosition:position withJavaLangStringBuffer:buffer withChar:'}' withChar:'{'];
        return [[[JavaTextSimpleDateFormat alloc] initWithNSString:[buffer description] withJavaUtilLocale:locale_] autorelease];
      }
      switch (dateStyle) {
        case 0:
        dateStyle = JavaTextDateFormat_FULL;
        break;
        case 1:
        dateStyle = JavaTextDateFormat_LONG;
        break;
        case 2:
        dateStyle = JavaTextDateFormat_MEDIUM;
        break;
        case 3:
        dateStyle = JavaTextDateFormat_SHORT;
        break;
      }
      return type == 1 ? [JavaTextDateFormat getDateInstanceWithInt:dateStyle withJavaUtilLocale:locale_] : [JavaTextDateFormat getTimeInstanceWithInt:dateStyle withJavaUtilLocale:locale_];
      case 2:
      if (ch == '}') {
        return [JavaTextNumberFormat getInstanceWithJavaUtilLocale:locale_];
      }
      numberStyle = [self matchWithNSString:string withJavaTextParsePosition:position withBoolean:YES withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"currency", @"percent", @"integer" } count:3 type:[IOSClass classWithClass:[NSString class]]]];
      if (numberStyle == -1) {
        [JavaTextFormat upToWithQuotesWithNSString:string withJavaTextParsePosition:position withJavaLangStringBuffer:buffer withChar:'}' withChar:'{'];
        return [[[JavaTextDecimalFormat alloc] initWithNSString:[buffer description] withJavaTextDecimalFormatSymbols:[[[JavaTextDecimalFormatSymbols alloc] initWithJavaUtilLocale:locale_] autorelease]] autorelease];
      }
      switch (numberStyle) {
        case 0:
        return [JavaTextNumberFormat getCurrencyInstanceWithJavaUtilLocale:locale_];
        case 1:
        return [JavaTextNumberFormat getPercentInstanceWithJavaUtilLocale:locale_];
      }
      return [JavaTextNumberFormat getIntegerInstanceWithJavaUtilLocale:locale_];
    }
  }
  @try {
    [JavaTextFormat upToWithQuotesWithNSString:string withJavaTextParsePosition:position withJavaLangStringBuffer:buffer withChar:'}' withChar:'{'];
  }
  @catch (JavaLangIllegalArgumentException *e) {
  }
  return [[[JavaTextChoiceFormat alloc] initWithNSString:[buffer description]] autorelease];
}

- (void)setFormatWithInt:(int)offset
      withJavaTextFormat:(JavaTextFormat *)format {
  IOSObjectArray_Set(nil_chk(formats_), offset, format);
}

- (void)setFormatsWithJavaTextFormatArray:(IOSObjectArray *)formats {
  int min = (int) [((IOSObjectArray *) nil_chk(self->formats_)) count];
  if ((int) [((IOSObjectArray *) nil_chk(formats)) count] < min) {
    min = (int) [formats count];
  }
  for (int i = 0; i < min; i++) {
    IOSObjectArray_Set(self->formats_, i, IOSObjectArray_Get(formats, i));
  }
}

- (void)setLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale {
  JavaTextMessageFormat_set_locale_(self, locale);
  for (int i = 0; i <= maxOffset_; i++) {
    JavaTextFormat *format = IOSObjectArray_Get(nil_chk(formats_), i);
    if ([format isKindOfClass:[JavaTextDecimalFormat class]]) {
      @try {
        IOSObjectArray_Set(formats_, i, [[[JavaTextDecimalFormat alloc] initWithNSString:[((JavaTextDecimalFormat *) nil_chk(format)) toPattern] withJavaTextDecimalFormatSymbols:[[[JavaTextDecimalFormatSymbols alloc] initWithJavaUtilLocale:locale] autorelease]] autorelease]);
      }
      @catch (JavaLangNullPointerException *npe) {
        IOSObjectArray_Set(formats_, i, nil);
      }
    }
    else if ([format isKindOfClass:[JavaTextSimpleDateFormat class]]) {
      @try {
        IOSObjectArray_Set(formats_, i, [[[JavaTextSimpleDateFormat alloc] initWithNSString:[((JavaTextSimpleDateFormat *) nil_chk(format)) toPattern] withJavaUtilLocale:locale] autorelease]);
      }
      @catch (JavaLangNullPointerException *npe) {
        IOSObjectArray_Set(formats_, i, nil);
      }
    }
  }
}

- (NSString *)decodeDecimalFormatWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                                       withJavaTextFormat:(JavaTextFormat *)format {
  [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithNSString:@",number"];
  if ([((JavaTextFormat *) nil_chk(format)) isEqual:[JavaTextNumberFormat getNumberInstanceWithJavaUtilLocale:locale_]]) {
  }
  else if ([format isEqual:[JavaTextNumberFormat getIntegerInstanceWithJavaUtilLocale:locale_]]) {
    [buffer appendWithNSString:@",integer"];
  }
  else if ([format isEqual:[JavaTextNumberFormat getCurrencyInstanceWithJavaUtilLocale:locale_]]) {
    [buffer appendWithNSString:@",currency"];
  }
  else if ([format isEqual:[JavaTextNumberFormat getPercentInstanceWithJavaUtilLocale:locale_]]) {
    [buffer appendWithNSString:@",percent"];
  }
  else {
    [buffer appendWithChar:','];
    return [((JavaTextDecimalFormat *) check_class_cast(format, [JavaTextDecimalFormat class])) toPattern];
  }
  return nil;
}

- (NSString *)decodeSimpleDateFormatWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                                          withJavaTextFormat:(JavaTextFormat *)format {
  if ([((JavaTextFormat *) nil_chk(format)) isEqual:[JavaTextDateFormat getTimeInstanceWithInt:JavaTextDateFormat_DEFAULT withJavaUtilLocale:locale_]]) {
    [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithNSString:@",time"];
  }
  else if ([format isEqual:[JavaTextDateFormat getDateInstanceWithInt:JavaTextDateFormat_DEFAULT withJavaUtilLocale:locale_]]) {
    [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithNSString:@",date"];
  }
  else if ([format isEqual:[JavaTextDateFormat getTimeInstanceWithInt:JavaTextDateFormat_SHORT withJavaUtilLocale:locale_]]) {
    [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithNSString:@",time,short"];
  }
  else if ([format isEqual:[JavaTextDateFormat getDateInstanceWithInt:JavaTextDateFormat_SHORT withJavaUtilLocale:locale_]]) {
    [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithNSString:@",date,short"];
  }
  else if ([format isEqual:[JavaTextDateFormat getTimeInstanceWithInt:JavaTextDateFormat_LONG withJavaUtilLocale:locale_]]) {
    [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithNSString:@",time,long"];
  }
  else if ([format isEqual:[JavaTextDateFormat getDateInstanceWithInt:JavaTextDateFormat_LONG withJavaUtilLocale:locale_]]) {
    [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithNSString:@",date,long"];
  }
  else if ([format isEqual:[JavaTextDateFormat getTimeInstanceWithInt:JavaTextDateFormat_FULL withJavaUtilLocale:locale_]]) {
    [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithNSString:@",time,full"];
  }
  else if ([format isEqual:[JavaTextDateFormat getDateInstanceWithInt:JavaTextDateFormat_FULL withJavaUtilLocale:locale_]]) {
    [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithNSString:@",date,full"];
  }
  else {
    [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithNSString:@",date,"];
    return [((JavaTextSimpleDateFormat *) check_class_cast(format, [JavaTextSimpleDateFormat class])) toPattern];
  }
  return nil;
}

- (NSString *)toPattern {
  JavaLangStringBuffer *buffer = [[[JavaLangStringBuffer alloc] init] autorelease];
  for (int i = 0; i <= maxOffset_; i++) {
    [self appendQuotedWithJavaLangStringBuffer:buffer withNSString:IOSObjectArray_Get(nil_chk(strings_), i)];
    [buffer appendWithChar:'{'];
    [buffer appendWithInt:IOSIntArray_Get(nil_chk(argumentNumbers_), i)];
    JavaTextFormat *format = IOSObjectArray_Get(nil_chk(formats_), i);
    NSString *pattern = nil;
    if ([format isKindOfClass:[JavaTextChoiceFormat class]]) {
      [buffer appendWithNSString:@",choice,"];
      pattern = [((JavaTextChoiceFormat *) nil_chk(format)) toPattern];
    }
    else if ([format isKindOfClass:[JavaTextDecimalFormat class]]) {
      pattern = [self decodeDecimalFormatWithJavaLangStringBuffer:buffer withJavaTextFormat:format];
    }
    else if ([format isKindOfClass:[JavaTextSimpleDateFormat class]]) {
      pattern = [self decodeSimpleDateFormatWithJavaLangStringBuffer:buffer withJavaTextFormat:format];
    }
    else if (format != nil) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Unknown format"] autorelease];
    }
    if (pattern != nil) {
      BOOL quote = NO;
      int index = 0, length = [pattern length], count = 0;
      while (index < length) {
        unichar ch = [pattern charAtWithInt:index++];
        if (ch == '\'') {
          quote = !quote;
        }
        if (!quote) {
          if (ch == '{') {
            count++;
          }
          if (ch == '}') {
            if (count > 0) {
              count--;
            }
            else {
              [buffer appendWithNSString:@"'}"];
              ch = '\'';
            }
          }
        }
        [buffer appendWithChar:ch];
      }
    }
    [buffer appendWithChar:'}'];
  }
  if (maxOffset_ + 1 < (int) [((IOSObjectArray *) nil_chk(strings_)) count]) {
    [self appendQuotedWithJavaLangStringBuffer:buffer withNSString:IOSObjectArray_Get(strings_, maxOffset_ + 1)];
  }
  return [buffer description];
}

- (void)appendQuotedWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                                withNSString:(NSString *)string {
  int length = [((NSString *) nil_chk(string)) length];
  for (int i = 0; i < length; i++) {
    unichar ch = [string charAtWithInt:i];
    if (ch == '{' || ch == '}') {
      [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithChar:'\''];
      [buffer appendWithChar:ch];
      [buffer appendWithChar:'\''];
    }
    else {
      [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithChar:ch];
    }
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaTextMessageFormat_set_formats_(self, nil);
  JavaTextMessageFormat_set_argumentNumbers_(self, nil);
  JavaTextMessageFormat_set_strings_(self, nil);
  JavaTextMessageFormat_set_locale_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaTextMessageFormat *)other {
  [super copyAllFieldsTo:other];
  JavaTextMessageFormat_set_argumentNumbers_(other, argumentNumbers_);
  JavaTextMessageFormat_set_formats_(other, formats_);
  JavaTextMessageFormat_set_locale_(other, locale_);
  other->maxArgumentIndex_ = maxArgumentIndex_;
  other->maxOffset_ = maxOffset_;
  JavaTextMessageFormat_set_strings_(other, strings_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:locale_ name:@"locale"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:strings_ name:@"strings"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:argumentNumbers_ name:@"argumentNumbers"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:formats_ name:@"formats"]];
  return result;
}

@end
@implementation JavaTextMessageFormat_FieldContainer

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithInt:(int)start
          withInt:(int)end
withJavaTextAttributedCharacterIterator_Attribute:(JavaTextAttributedCharacterIterator_Attribute *)attribute
           withId:(id)value {
  if (self = [super init]) {
    self->start_ = start;
    self->end_ = end;
    JavaTextMessageFormat_FieldContainer_set_attribute_(self, attribute);
    JavaTextMessageFormat_FieldContainer_set_value_(self, value);
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaTextMessageFormat_FieldContainer_set_value_(self, nil);
  JavaTextMessageFormat_FieldContainer_set_attribute_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaTextMessageFormat_FieldContainer *)other {
  [super copyAllFieldsTo:other];
  JavaTextMessageFormat_FieldContainer_set_attribute_(other, attribute_);
  other->end_ = end_;
  other->start_ = start_;
  JavaTextMessageFormat_FieldContainer_set_value_(other, value_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:attribute_ name:@"attribute"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:value_ name:@"value"]];
  return result;
}

@end
@implementation JavaTextMessageFormat_Field

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaTextMessageFormat_Field_ARGUMENT_ name:@"JavaTextMessageFormat_Field_ARGUMENT_"]];
  return result;
}

static JavaTextMessageFormat_Field * JavaTextMessageFormat_Field_ARGUMENT_;

+ (JavaTextMessageFormat_Field *)ARGUMENT {
  return JavaTextMessageFormat_Field_ARGUMENT_;
}

- (id)initWithNSString:(NSString *)fieldName {
  return JreMemDebugAdd([super initWithNSString:fieldName]);
}

+ (void)initialize {
  if (self == [JavaTextMessageFormat_Field class]) {
    JreOperatorRetainedAssign(&JavaTextMessageFormat_Field_ARGUMENT_, nil, [[[JavaTextMessageFormat_Field alloc] initWithNSString:@"message argument field"] autorelease]);
  }
}

@end
