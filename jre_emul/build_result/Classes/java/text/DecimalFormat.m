//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSCharArray.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuffer.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"
#include "java/math/RoundingMode.h"
#include "java/text/AttributedCharacterIterator.h"
#include "java/text/DecimalFormat.h"
#include "java/text/DecimalFormatSymbols.h"
#include "java/text/FieldPosition.h"
#include "java/text/NumberFormat.h"
#include "java/text/ParsePosition.h"
#include "java/util/Currency.h"
#include "java/util/Locale.h"
#include "libcore/icu/LocaleData.h"
#include "libcore/icu/NativeDecimalFormat.h"

@implementation JavaTextDecimalFormat

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaTextDecimalFormat_NEGATIVE_ZERO_DOUBLE_ name:@"JavaTextDecimalFormat_NEGATIVE_ZERO_DOUBLE_"]];
  return result;
}

static JavaLangDouble * JavaTextDecimalFormat_NEGATIVE_ZERO_DOUBLE_;

+ (JavaLangDouble *)NEGATIVE_ZERO_DOUBLE {
  return JavaTextDecimalFormat_NEGATIVE_ZERO_DOUBLE_;
}

- (id)init {
  if (self = [super init]) {
    JavaTextDecimalFormat_set_roundingMode_(self, [JavaMathRoundingModeEnum HALF_EVEN]);
    JavaUtilLocale *locale = [JavaUtilLocale getDefault];
    JavaTextDecimalFormat_set_symbols_(self, [[[JavaTextDecimalFormatSymbols alloc] initWithJavaUtilLocale:locale] autorelease]);
    [self initNativeWithNSString:((LibcoreIcuLocaleData *) nil_chk([LibcoreIcuLocaleData getWithJavaUtilLocale:locale]))->numberPattern_];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithNSString:(NSString *)pattern {
  return JreMemDebugAdd([self initJavaTextDecimalFormatWithNSString:pattern withJavaUtilLocale:[JavaUtilLocale getDefault]]);
}

- (id)initWithNSString:(NSString *)pattern
withJavaTextDecimalFormatSymbols:(JavaTextDecimalFormatSymbols *)value {
  if (self = [super init]) {
    JavaTextDecimalFormat_set_roundingMode_(self, [JavaMathRoundingModeEnum HALF_EVEN]);
    JavaTextDecimalFormat_set_symbols_(self, (JavaTextDecimalFormatSymbols *) check_class_cast([((JavaTextDecimalFormatSymbols *) nil_chk(value)) clone], [JavaTextDecimalFormatSymbols class]));
    [self initNativeWithNSString:pattern];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initJavaTextDecimalFormatWithNSString:(NSString *)pattern
                         withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (self = [super init]) {
    JavaTextDecimalFormat_set_roundingMode_(self, [JavaMathRoundingModeEnum HALF_EVEN]);
    JavaTextDecimalFormat_set_symbols_(self, [[[JavaTextDecimalFormatSymbols alloc] initWithJavaUtilLocale:locale] autorelease]);
    [self initNativeWithNSString:pattern];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithNSString:(NSString *)pattern
    withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [self initJavaTextDecimalFormatWithNSString:pattern withJavaUtilLocale:locale];
}

- (void)initNativeWithNSString:(NSString *)pattern {
  @try {
    JavaTextDecimalFormat_set_ndf_(self, [[[LibcoreIcuNativeDecimalFormat alloc] initWithNSString:pattern withJavaTextDecimalFormatSymbols:symbols_] autorelease]);
  }
  @catch (JavaLangIllegalArgumentException *ex) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:pattern] autorelease];
  }
  [super setMaximumFractionDigitsWithInt:[((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) getMaximumFractionDigits]];
  [super setMaximumIntegerDigitsWithInt:[ndf_ getMaximumIntegerDigits]];
  [super setMinimumFractionDigitsWithInt:[ndf_ getMinimumFractionDigits]];
  [super setMinimumIntegerDigitsWithInt:[ndf_ getMinimumIntegerDigits]];
}

- (void)applyLocalizedPatternWithNSString:(NSString *)pattern {
  [((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) applyLocalizedPatternWithNSString:pattern];
}

- (void)applyPatternWithNSString:(NSString *)pattern {
  [((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) applyPatternWithNSString:pattern];
}

- (id)clone {
  JavaTextDecimalFormat *clone = (JavaTextDecimalFormat *) check_class_cast([super clone], [JavaTextDecimalFormat class]);
  JavaTextDecimalFormat_set_ndf_(nil_chk(clone), (LibcoreIcuNativeDecimalFormat *) check_class_cast([((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) clone], [LibcoreIcuNativeDecimalFormat class]));
  JavaTextDecimalFormat_set_symbols_(clone, (JavaTextDecimalFormatSymbols *) check_class_cast([((JavaTextDecimalFormatSymbols *) nil_chk(symbols_)) clone], [JavaTextDecimalFormatSymbols class]));
  return clone;
}

- (BOOL)isEqual:(id)object {
  if (self == object) {
    return YES;
  }
  if (!([object isKindOfClass:[JavaTextDecimalFormat class]])) {
    return NO;
  }
  JavaTextDecimalFormat *other = (JavaTextDecimalFormat *) check_class_cast(object, [JavaTextDecimalFormat class]);
  return (self->ndf_ == nil ? ((JavaTextDecimalFormat *) nil_chk(other))->ndf_ == nil : [self->ndf_ isEqual:((JavaTextDecimalFormat *) nil_chk(other))->ndf_]) && [((JavaTextDecimalFormatSymbols *) nil_chk([self getDecimalFormatSymbols])) isEqual:[other getDecimalFormatSymbols]];
}

- (id<JavaTextAttributedCharacterIterator>)formatToCharacterIteratorWithId:(id)object {
  if (object == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"object == null"] autorelease];
  }
  return [((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) formatToCharacterIteratorWithId:object];
}

- (void)checkBufferAndFieldPositionWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                                  withJavaTextFieldPosition:(JavaTextFieldPosition *)position {
  if (buffer == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"buffer == null"] autorelease];
  }
  if (position == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"position == null"] autorelease];
  }
}

- (JavaLangStringBuffer *)formatWithDouble:(double)value
                  withJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                 withJavaTextFieldPosition:(JavaTextFieldPosition *)position {
  [self checkBufferAndFieldPositionWithJavaLangStringBuffer:buffer withJavaTextFieldPosition:position];
  if (roundingMode_ == [JavaMathRoundingModeEnum UNNECESSARY]) {
    @try {
      [self setRoundingModeWithJavaMathRoundingModeEnum:[JavaMathRoundingModeEnum UP]];
      NSString *upResult = [((JavaLangStringBuffer *) nil_chk([self formatWithDouble:value withJavaLangStringBuffer:[[[JavaLangStringBuffer alloc] init] autorelease] withJavaTextFieldPosition:[[[JavaTextFieldPosition alloc] initWithInt:0] autorelease]])) description];
      [self setRoundingModeWithJavaMathRoundingModeEnum:[JavaMathRoundingModeEnum DOWN]];
      NSString *downResult = [((JavaLangStringBuffer *) nil_chk([self formatWithDouble:value withJavaLangStringBuffer:[[[JavaLangStringBuffer alloc] init] autorelease] withJavaTextFieldPosition:[[[JavaTextFieldPosition alloc] initWithInt:0] autorelease]])) description];
      if (![((NSString *) nil_chk(upResult)) isEqual:downResult]) {
        @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"rounding mode UNNECESSARY but rounding required"] autorelease];
      }
    }
    @finally {
      [self setRoundingModeWithJavaMathRoundingModeEnum:[JavaMathRoundingModeEnum UNNECESSARY]];
    }
  }
  [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithCharArray:[((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) formatDoubleWithDouble:value withJavaTextFieldPosition:position]];
  return buffer;
}

- (JavaLangStringBuffer *)formatWithLong:(long long int)value
                withJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
               withJavaTextFieldPosition:(JavaTextFieldPosition *)position {
  [self checkBufferAndFieldPositionWithJavaLangStringBuffer:buffer withJavaTextFieldPosition:position];
  [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithCharArray:[((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) formatLongWithLong:value withJavaTextFieldPosition:position]];
  return buffer;
}

- (JavaLangStringBuffer *)formatWithId:(id)number
              withJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
             withJavaTextFieldPosition:(JavaTextFieldPosition *)position {
  [self checkBufferAndFieldPositionWithJavaLangStringBuffer:buffer withJavaTextFieldPosition:position];
  if ([number isKindOfClass:[JavaMathBigInteger class]]) {
    JavaMathBigInteger *bigInteger = (JavaMathBigInteger *) check_class_cast(number, [JavaMathBigInteger class]);
    IOSCharArray *chars = ([((JavaMathBigInteger *) nil_chk(bigInteger)) bitLength] < 64) ? [((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) formatLongWithLong:[bigInteger longLongValue] withJavaTextFieldPosition:position] : [((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) formatBigIntegerWithJavaMathBigInteger:bigInteger withJavaTextFieldPosition:position];
    [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithCharArray:chars];
    return buffer;
  }
  else if ([number isKindOfClass:[JavaMathBigDecimal class]]) {
    [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithCharArray:[((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) formatBigDecimalWithJavaMathBigDecimal:(JavaMathBigDecimal *) check_class_cast(number, [JavaMathBigDecimal class]) withJavaTextFieldPosition:position]];
    return buffer;
  }
  return [super formatWithId:number withJavaLangStringBuffer:buffer withJavaTextFieldPosition:position];
}

- (JavaTextDecimalFormatSymbols *)getDecimalFormatSymbols {
  return (JavaTextDecimalFormatSymbols *) check_class_cast([((JavaTextDecimalFormatSymbols *) nil_chk(symbols_)) clone], [JavaTextDecimalFormatSymbols class]);
}

- (JavaUtilCurrency *)getCurrency {
  return [((JavaTextDecimalFormatSymbols *) nil_chk(symbols_)) getCurrency];
}

- (int)getGroupingSize {
  return [((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) getGroupingSize];
}

- (int)getMultiplier {
  return [((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) getMultiplier];
}

- (NSString *)getNegativePrefix {
  return [((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) getNegativePrefix];
}

- (NSString *)getNegativeSuffix {
  return [((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) getNegativeSuffix];
}

- (NSString *)getPositivePrefix {
  return [((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) getPositivePrefix];
}

- (NSString *)getPositiveSuffix {
  return [((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) getPositiveSuffix];
}

- (NSUInteger)hash {
  return [((NSString *) nil_chk([self getPositivePrefix])) hash];
}

- (BOOL)isDecimalSeparatorAlwaysShown {
  return [((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) isDecimalSeparatorAlwaysShown];
}

- (BOOL)isParseBigDecimal {
  return [((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) isParseBigDecimal];
}

- (void)setParseIntegerOnlyWithBoolean:(BOOL)value {
  [((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) setParseIntegerOnlyWithBoolean:value];
}

- (BOOL)isParseIntegerOnly {
  return [((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) isParseIntegerOnly];
}

- (NSNumber *)parseWithNSString:(NSString *)string
      withJavaTextParsePosition:(JavaTextParsePosition *)position {
  NSNumber *number = [((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) parseWithNSString:string withJavaTextParsePosition:position];
  if (number == nil) {
    return nil;
  }
  if ([self isParseBigDecimal]) {
    if ([number isKindOfClass:[JavaLangLong class]]) {
      return [[[JavaMathBigDecimal alloc] initWithLong:[((NSNumber *) nil_chk(number)) longLongValue]] autorelease];
    }
    if (([number isKindOfClass:[JavaLangDouble class]]) && ![((JavaLangDouble *) nil_chk(number)) isInfinite] && ![((JavaLangDouble *) nil_chk(number)) isNaN]) {
      return [[[JavaMathBigDecimal alloc] initWithNSString:[((NSNumber *) nil_chk(number)) description]] autorelease];
    }
    if ([number isKindOfClass:[JavaMathBigInteger class]]) {
      return [[[JavaMathBigDecimal alloc] initWithNSString:[((NSNumber *) nil_chk(number)) description]] autorelease];
    }
    return number;
  }
  if (([number isKindOfClass:[JavaMathBigDecimal class]]) || ([number isKindOfClass:[JavaMathBigInteger class]])) {
    return [[[JavaLangDouble alloc] initWithDouble:[((NSNumber *) nil_chk(number)) doubleValue]] autorelease];
  }
  if ([self isParseIntegerOnly] && [((NSNumber *) nil_chk(number)) isEqual:JavaTextDecimalFormat_NEGATIVE_ZERO_DOUBLE_]) {
    return [JavaLangLong valueOfWithLong:0];
  }
  return number;
}

- (void)setDecimalFormatSymbolsWithJavaTextDecimalFormatSymbols:(JavaTextDecimalFormatSymbols *)value {
  if (value != nil) {
    JavaTextDecimalFormat_set_symbols_(self, (JavaTextDecimalFormatSymbols *) check_class_cast([value clone], [JavaTextDecimalFormatSymbols class]));
    [((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) setDecimalFormatSymbolsWithJavaTextDecimalFormatSymbols:self->symbols_];
  }
}

- (void)setCurrencyWithJavaUtilCurrency:(JavaUtilCurrency *)currency {
  [((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) setCurrencyWithJavaUtilCurrency:[JavaUtilCurrency getInstanceWithNSString:[((JavaUtilCurrency *) nil_chk(currency)) getCurrencyCode]]];
  [((JavaTextDecimalFormatSymbols *) nil_chk(symbols_)) setCurrencyWithJavaUtilCurrency:currency];
}

- (void)setDecimalSeparatorAlwaysShownWithBoolean:(BOOL)value {
  [((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) setDecimalSeparatorAlwaysShownWithBoolean:value];
}

- (void)setGroupingSizeWithInt:(int)value {
  [((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) setGroupingSizeWithInt:value];
}

- (void)setGroupingUsedWithBoolean:(BOOL)value {
  [((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) setGroupingUsedWithBoolean:value];
}

- (BOOL)isGroupingUsed {
  return [((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) isGroupingUsed];
}

- (void)setMaximumFractionDigitsWithInt:(int)value {
  [super setMaximumFractionDigitsWithInt:value];
  [((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) setMaximumFractionDigitsWithInt:[self getMaximumFractionDigits]];
  [self setRoundingModeWithJavaMathRoundingModeEnum:roundingMode_];
}

- (void)setMaximumIntegerDigitsWithInt:(int)value {
  [super setMaximumIntegerDigitsWithInt:value];
  [((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) setMaximumIntegerDigitsWithInt:[self getMaximumIntegerDigits]];
}

- (void)setMinimumFractionDigitsWithInt:(int)value {
  [super setMinimumFractionDigitsWithInt:value];
  [((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) setMinimumFractionDigitsWithInt:[self getMinimumFractionDigits]];
}

- (void)setMinimumIntegerDigitsWithInt:(int)value {
  [super setMinimumIntegerDigitsWithInt:value];
  [((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) setMinimumIntegerDigitsWithInt:[self getMinimumIntegerDigits]];
}

- (void)setMultiplierWithInt:(int)value {
  [((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) setMultiplierWithInt:value];
}

- (void)setNegativePrefixWithNSString:(NSString *)value {
  [((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) setNegativePrefixWithNSString:value];
}

- (void)setNegativeSuffixWithNSString:(NSString *)value {
  [((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) setNegativeSuffixWithNSString:value];
}

- (void)setPositivePrefixWithNSString:(NSString *)value {
  [((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) setPositivePrefixWithNSString:value];
}

- (void)setPositiveSuffixWithNSString:(NSString *)value {
  [((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) setPositiveSuffixWithNSString:value];
}

- (void)setParseBigDecimalWithBoolean:(BOOL)newValue {
  [((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) setParseBigDecimalWithBoolean:newValue];
}

- (NSString *)toLocalizedPattern {
  return [((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) toLocalizedPattern];
}

- (NSString *)toPattern {
  return [((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) toPattern];
}

- (JavaMathRoundingModeEnum *)getRoundingMode {
  return roundingMode_;
}

- (void)setRoundingModeWithJavaMathRoundingModeEnum:(JavaMathRoundingModeEnum *)roundingMode {
  if (roundingMode == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"roundingMode == null"] autorelease];
  }
  JavaTextDecimalFormat_set_roundingMode_(self, roundingMode);
  if (roundingMode != [JavaMathRoundingModeEnum UNNECESSARY]) {
    double roundingIncrement = 1.0 / [JavaLangMath powWithDouble:10 withDouble:[JavaLangMath maxWithInt:0 withInt:[self getMaximumFractionDigits]]];
    [((LibcoreIcuNativeDecimalFormat *) nil_chk(ndf_)) setRoundingModeWithJavaMathRoundingModeEnum:roundingMode withDouble:roundingIncrement];
  }
}

+ (void)initialize {
  if (self == [JavaTextDecimalFormat class]) {
    JreOperatorRetainedAssign(&JavaTextDecimalFormat_NEGATIVE_ZERO_DOUBLE_, nil, [[[JavaLangDouble alloc] initWithDouble:-0.0] autorelease]);
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaTextDecimalFormat_set_roundingMode_(self, nil);
  JavaTextDecimalFormat_set_ndf_(self, nil);
  JavaTextDecimalFormat_set_symbols_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaTextDecimalFormat *)other {
  [super copyAllFieldsTo:other];
  JavaTextDecimalFormat_set_ndf_(other, ndf_);
  JavaTextDecimalFormat_set_roundingMode_(other, roundingMode_);
  JavaTextDecimalFormat_set_symbols_(other, symbols_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:symbols_ name:@"symbols"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:ndf_ name:@"ndf"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:roundingMode_ name:@"roundingMode"]];
  return result;
}

@end
