//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/text/NumberFormat.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Byte.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Short.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/math/BigInteger.h"
#include "java/math/RoundingMode.h"
#include "java/text/DecimalFormat.h"
#include "java/text/FieldPosition.h"
#include "java/text/Format.h"
#include "java/text/NumberFormat.h"
#include "java/text/ParseException.h"
#include "java/text/ParsePosition.h"
#include "java/util/Currency.h"
#include "java/util/Locale.h"
#include "libcore/icu/ICU.h"
#include "libcore/icu/LocaleData.h"

@implementation JavaTextNumberFormat

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

+ (int)INTEGER_FIELD {
  return JavaTextNumberFormat_INTEGER_FIELD;
}

+ (int)FRACTION_FIELD {
  return JavaTextNumberFormat_FRACTION_FIELD;
}

- (id)init {
  if (self = [super init]) {
    groupingUsed_ = YES;
    parseIntegerOnly_ = NO;
    maximumIntegerDigits_ = 40;
    minimumIntegerDigits_ = 1;
    maximumFractionDigits_ = 3;
    minimumFractionDigits_ = 0;
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)clone {
  return [super clone];
}

- (BOOL)isEqual:(id)object {
  if (object == self) {
    return YES;
  }
  if (!([object isKindOfClass:[JavaTextNumberFormat class]])) {
    return NO;
  }
  JavaTextNumberFormat *obj = (JavaTextNumberFormat *) check_class_cast(object, [JavaTextNumberFormat class]);
  return groupingUsed_ == ((JavaTextNumberFormat *) nil_chk(obj))->groupingUsed_ && parseIntegerOnly_ == obj->parseIntegerOnly_ && maximumFractionDigits_ == obj->maximumFractionDigits_ && maximumIntegerDigits_ == obj->maximumIntegerDigits_ && minimumFractionDigits_ == obj->minimumFractionDigits_ && minimumIntegerDigits_ == obj->minimumIntegerDigits_;
}

- (NSString *)formatWithDouble:(double)value {
  return [((JavaLangStringBuffer *) nil_chk([self formatWithDouble:value withJavaLangStringBuffer:[[[JavaLangStringBuffer alloc] init] autorelease] withJavaTextFieldPosition:[[[JavaTextFieldPosition alloc] initWithInt:0] autorelease]])) description];
}

- (JavaLangStringBuffer *)formatWithDouble:(double)value
                  withJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                 withJavaTextFieldPosition:(JavaTextFieldPosition *)field {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)formatWithLong:(long long int)value {
  return [((JavaLangStringBuffer *) nil_chk([self formatWithLong:value withJavaLangStringBuffer:[[[JavaLangStringBuffer alloc] init] autorelease] withJavaTextFieldPosition:[[[JavaTextFieldPosition alloc] initWithInt:0] autorelease]])) description];
}

- (JavaLangStringBuffer *)formatWithLong:(long long int)value
                withJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
               withJavaTextFieldPosition:(JavaTextFieldPosition *)field {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaLangStringBuffer *)formatWithId:(id)object
              withJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
             withJavaTextFieldPosition:(JavaTextFieldPosition *)field {
  if ([object isKindOfClass:[JavaLangByte class]] || [object isKindOfClass:[JavaLangShort class]] || [object isKindOfClass:[JavaLangInteger class]] || [object isKindOfClass:[JavaLangLong class]] || ([object isKindOfClass:[JavaMathBigInteger class]] && [((JavaMathBigInteger *) nil_chk(object)) bitLength] < 64)) {
    long long int lv = [((NSNumber *) nil_chk(object)) longLongValue];
    return [self formatWithLong:lv withJavaLangStringBuffer:buffer withJavaTextFieldPosition:field];
  }
  else if ([object isKindOfClass:[NSNumber class]]) {
    double dv = [((NSNumber *) nil_chk(object)) doubleValue];
    return [self formatWithDouble:dv withJavaLangStringBuffer:buffer withJavaTextFieldPosition:field];
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Bad class: %@", [nil_chk(object) getClass]]] autorelease];
}

+ (IOSObjectArray *)getAvailableLocales {
  return [LibcoreIcuICU getAvailableNumberFormatLocales];
}

- (JavaUtilCurrency *)getCurrency {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

+ (JavaTextNumberFormat *)getCurrencyInstance {
  return [JavaTextNumberFormat getCurrencyInstanceWithJavaUtilLocale:[JavaUtilLocale getDefault]];
}

+ (JavaTextNumberFormat *)getCurrencyInstanceWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return [JavaTextNumberFormat getInstanceWithNSString:((LibcoreIcuLocaleData *) nil_chk([LibcoreIcuLocaleData getWithJavaUtilLocale:locale]))->currencyPattern_ withJavaUtilLocale:locale];
}

+ (JavaTextNumberFormat *)getIntegerInstance {
  return [JavaTextNumberFormat getIntegerInstanceWithJavaUtilLocale:[JavaUtilLocale getDefault]];
}

+ (JavaTextNumberFormat *)getIntegerInstanceWithJavaUtilLocale:(JavaUtilLocale *)locale {
  JavaTextNumberFormat *result = [JavaTextNumberFormat getInstanceWithNSString:((LibcoreIcuLocaleData *) nil_chk([LibcoreIcuLocaleData getWithJavaUtilLocale:locale]))->integerPattern_ withJavaUtilLocale:locale];
  [((JavaTextNumberFormat *) nil_chk(result)) setParseIntegerOnlyWithBoolean:YES];
  return result;
}

+ (JavaTextNumberFormat *)getInstance {
  return [JavaTextNumberFormat getNumberInstance];
}

+ (JavaTextNumberFormat *)getInstanceWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return [JavaTextNumberFormat getNumberInstanceWithJavaUtilLocale:locale];
}

+ (JavaTextNumberFormat *)getInstanceWithNSString:(NSString *)pattern
                               withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [[[JavaTextDecimalFormat alloc] initWithNSString:pattern withJavaUtilLocale:locale] autorelease];
}

- (int)getMaximumFractionDigits {
  return maximumFractionDigits_;
}

- (int)getMaximumIntegerDigits {
  return maximumIntegerDigits_;
}

- (int)getMinimumFractionDigits {
  return minimumFractionDigits_;
}

- (int)getMinimumIntegerDigits {
  return minimumIntegerDigits_;
}

+ (JavaTextNumberFormat *)getNumberInstance {
  return [JavaTextNumberFormat getNumberInstanceWithJavaUtilLocale:[JavaUtilLocale getDefault]];
}

+ (JavaTextNumberFormat *)getNumberInstanceWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return [JavaTextNumberFormat getInstanceWithNSString:((LibcoreIcuLocaleData *) nil_chk([LibcoreIcuLocaleData getWithJavaUtilLocale:locale]))->numberPattern_ withJavaUtilLocale:locale];
}

+ (JavaTextNumberFormat *)getPercentInstance {
  return [JavaTextNumberFormat getPercentInstanceWithJavaUtilLocale:[JavaUtilLocale getDefault]];
}

+ (JavaTextNumberFormat *)getPercentInstanceWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return [JavaTextNumberFormat getInstanceWithNSString:((LibcoreIcuLocaleData *) nil_chk([LibcoreIcuLocaleData getWithJavaUtilLocale:locale]))->percentPattern_ withJavaUtilLocale:locale];
}

- (NSUInteger)hash {
  return (groupingUsed_ ? 1231 : 1237) + (parseIntegerOnly_ ? 1231 : 1237) + maximumFractionDigits_ + maximumIntegerDigits_ + minimumFractionDigits_ + minimumIntegerDigits_;
}

- (BOOL)isGroupingUsed {
  return groupingUsed_;
}

- (BOOL)isParseIntegerOnly {
  return parseIntegerOnly_;
}

- (NSNumber *)parseWithNSString:(NSString *)string {
  JavaTextParsePosition *pos = [[[JavaTextParsePosition alloc] initWithInt:0] autorelease];
  NSNumber *number = [self parseWithNSString:string withJavaTextParsePosition:pos];
  if ([pos getIndex] == 0) {
    @throw [[[JavaTextParseException alloc] initWithNSString:[NSString stringWithFormat:@"Unparseable number: \"%@\"", string] withInt:[pos getErrorIndex]] autorelease];
  }
  return number;
}

+ (IOSObjectArray *)__exceptions_parseWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaTextParseException getClass] } count:1 type:[IOSClass getClass]];
}

- (NSNumber *)parseWithNSString:(NSString *)string
      withJavaTextParsePosition:(JavaTextParsePosition *)position {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)parseObjectWithNSString:(NSString *)string
    withJavaTextParsePosition:(JavaTextParsePosition *)position {
  if (position == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"position == null"] autorelease];
  }
  @try {
    return [self parseWithNSString:string withJavaTextParsePosition:position];
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

- (void)setCurrencyWithJavaUtilCurrency:(JavaUtilCurrency *)currency {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (void)setGroupingUsedWithBoolean:(BOOL)value {
  groupingUsed_ = value;
}

- (void)setMaximumFractionDigitsWithInt:(int)value {
  maximumFractionDigits_ = value < 0 ? 0 : value;
  if (maximumFractionDigits_ < minimumFractionDigits_) {
    minimumFractionDigits_ = maximumFractionDigits_;
  }
}

- (void)setMaximumIntegerDigitsWithInt:(int)value {
  maximumIntegerDigits_ = value < 0 ? 0 : value;
  if (maximumIntegerDigits_ < minimumIntegerDigits_) {
    minimumIntegerDigits_ = maximumIntegerDigits_;
  }
}

- (void)setMinimumFractionDigitsWithInt:(int)value {
  minimumFractionDigits_ = value < 0 ? 0 : value;
  if (maximumFractionDigits_ < minimumFractionDigits_) {
    maximumFractionDigits_ = minimumFractionDigits_;
  }
}

- (void)setMinimumIntegerDigitsWithInt:(int)value {
  minimumIntegerDigits_ = value < 0 ? 0 : value;
  if (maximumIntegerDigits_ < minimumIntegerDigits_) {
    maximumIntegerDigits_ = minimumIntegerDigits_;
  }
}

- (void)setParseIntegerOnlyWithBoolean:(BOOL)value {
  parseIntegerOnly_ = value;
}

- (JavaMathRoundingModeEnum *)getRoundingMode {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (void)setRoundingModeWithJavaMathRoundingModeEnum:(JavaMathRoundingModeEnum *)roundingMode {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (void)copyAllFieldsTo:(JavaTextNumberFormat *)other {
  [super copyAllFieldsTo:other];
  other->groupingUsed_ = groupingUsed_;
  other->maximumFractionDigits_ = maximumFractionDigits_;
  other->maximumIntegerDigits_ = maximumIntegerDigits_;
  other->minimumFractionDigits_ = minimumFractionDigits_;
  other->minimumIntegerDigits_ = minimumIntegerDigits_;
  other->parseIntegerOnly_ = parseIntegerOnly_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  return result;
}

@end
@implementation JavaTextNumberFormat_Field

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaTextNumberFormat_Field_SIGN_ name:@"JavaTextNumberFormat_Field_SIGN_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaTextNumberFormat_Field_INTEGER_ name:@"JavaTextNumberFormat_Field_INTEGER_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaTextNumberFormat_Field_FRACTION_ name:@"JavaTextNumberFormat_Field_FRACTION_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaTextNumberFormat_Field_EXPONENT_ name:@"JavaTextNumberFormat_Field_EXPONENT_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaTextNumberFormat_Field_EXPONENT_SIGN_ name:@"JavaTextNumberFormat_Field_EXPONENT_SIGN_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaTextNumberFormat_Field_EXPONENT_SYMBOL_ name:@"JavaTextNumberFormat_Field_EXPONENT_SYMBOL_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaTextNumberFormat_Field_DECIMAL_SEPARATOR_ name:@"JavaTextNumberFormat_Field_DECIMAL_SEPARATOR_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaTextNumberFormat_Field_GROUPING_SEPARATOR_ name:@"JavaTextNumberFormat_Field_GROUPING_SEPARATOR_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaTextNumberFormat_Field_PERCENT_ name:@"JavaTextNumberFormat_Field_PERCENT_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaTextNumberFormat_Field_PERMILLE_ name:@"JavaTextNumberFormat_Field_PERMILLE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaTextNumberFormat_Field_CURRENCY_ name:@"JavaTextNumberFormat_Field_CURRENCY_"]];
  return result;
}

static JavaTextNumberFormat_Field * JavaTextNumberFormat_Field_SIGN_;
static JavaTextNumberFormat_Field * JavaTextNumberFormat_Field_INTEGER_;
static JavaTextNumberFormat_Field * JavaTextNumberFormat_Field_FRACTION_;
static JavaTextNumberFormat_Field * JavaTextNumberFormat_Field_EXPONENT_;
static JavaTextNumberFormat_Field * JavaTextNumberFormat_Field_EXPONENT_SIGN_;
static JavaTextNumberFormat_Field * JavaTextNumberFormat_Field_EXPONENT_SYMBOL_;
static JavaTextNumberFormat_Field * JavaTextNumberFormat_Field_DECIMAL_SEPARATOR_;
static JavaTextNumberFormat_Field * JavaTextNumberFormat_Field_GROUPING_SEPARATOR_;
static JavaTextNumberFormat_Field * JavaTextNumberFormat_Field_PERCENT_;
static JavaTextNumberFormat_Field * JavaTextNumberFormat_Field_PERMILLE_;
static JavaTextNumberFormat_Field * JavaTextNumberFormat_Field_CURRENCY_;

+ (JavaTextNumberFormat_Field *)SIGN {
  return JavaTextNumberFormat_Field_SIGN_;
}

+ (JavaTextNumberFormat_Field *)INTEGER {
  return JavaTextNumberFormat_Field_INTEGER_;
}

+ (JavaTextNumberFormat_Field *)FRACTION {
  return JavaTextNumberFormat_Field_FRACTION_;
}

+ (JavaTextNumberFormat_Field *)EXPONENT {
  return JavaTextNumberFormat_Field_EXPONENT_;
}

+ (JavaTextNumberFormat_Field *)EXPONENT_SIGN {
  return JavaTextNumberFormat_Field_EXPONENT_SIGN_;
}

+ (JavaTextNumberFormat_Field *)EXPONENT_SYMBOL {
  return JavaTextNumberFormat_Field_EXPONENT_SYMBOL_;
}

+ (JavaTextNumberFormat_Field *)DECIMAL_SEPARATOR {
  return JavaTextNumberFormat_Field_DECIMAL_SEPARATOR_;
}

+ (JavaTextNumberFormat_Field *)GROUPING_SEPARATOR {
  return JavaTextNumberFormat_Field_GROUPING_SEPARATOR_;
}

+ (JavaTextNumberFormat_Field *)PERCENT {
  return JavaTextNumberFormat_Field_PERCENT_;
}

+ (JavaTextNumberFormat_Field *)PERMILLE {
  return JavaTextNumberFormat_Field_PERMILLE_;
}

+ (JavaTextNumberFormat_Field *)CURRENCY {
  return JavaTextNumberFormat_Field_CURRENCY_;
}

- (id)initWithNSString:(NSString *)fieldName {
  return JreMemDebugAdd([super initWithNSString:fieldName]);
}

+ (void)initialize {
  if (self == [JavaTextNumberFormat_Field class]) {
    JreOperatorRetainedAssign(&JavaTextNumberFormat_Field_SIGN_, nil, [[[JavaTextNumberFormat_Field alloc] initWithNSString:@"sign"] autorelease]);
    JreOperatorRetainedAssign(&JavaTextNumberFormat_Field_INTEGER_, nil, [[[JavaTextNumberFormat_Field alloc] initWithNSString:@"integer"] autorelease]);
    JreOperatorRetainedAssign(&JavaTextNumberFormat_Field_FRACTION_, nil, [[[JavaTextNumberFormat_Field alloc] initWithNSString:@"fraction"] autorelease]);
    JreOperatorRetainedAssign(&JavaTextNumberFormat_Field_EXPONENT_, nil, [[[JavaTextNumberFormat_Field alloc] initWithNSString:@"exponent"] autorelease]);
    JreOperatorRetainedAssign(&JavaTextNumberFormat_Field_EXPONENT_SIGN_, nil, [[[JavaTextNumberFormat_Field alloc] initWithNSString:@"exponent sign"] autorelease]);
    JreOperatorRetainedAssign(&JavaTextNumberFormat_Field_EXPONENT_SYMBOL_, nil, [[[JavaTextNumberFormat_Field alloc] initWithNSString:@"exponent symbol"] autorelease]);
    JreOperatorRetainedAssign(&JavaTextNumberFormat_Field_DECIMAL_SEPARATOR_, nil, [[[JavaTextNumberFormat_Field alloc] initWithNSString:@"decimal separator"] autorelease]);
    JreOperatorRetainedAssign(&JavaTextNumberFormat_Field_GROUPING_SEPARATOR_, nil, [[[JavaTextNumberFormat_Field alloc] initWithNSString:@"grouping separator"] autorelease]);
    JreOperatorRetainedAssign(&JavaTextNumberFormat_Field_PERCENT_, nil, [[[JavaTextNumberFormat_Field alloc] initWithNSString:@"percent"] autorelease]);
    JreOperatorRetainedAssign(&JavaTextNumberFormat_Field_PERMILLE_, nil, [[[JavaTextNumberFormat_Field alloc] initWithNSString:@"per mille"] autorelease]);
    JreOperatorRetainedAssign(&JavaTextNumberFormat_Field_CURRENCY_, nil, [[[JavaTextNumberFormat_Field alloc] initWithNSString:@"currency"] autorelease]);
  }
}

@end
