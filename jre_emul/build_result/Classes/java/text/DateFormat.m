//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/text/DateFormat.h"
#include "java/text/FieldPosition.h"
#include "java/text/Format.h"
#include "java/text/NumberFormat.h"
#include "java/text/ParseException.h"
#include "java/text/ParsePosition.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/Hashtable.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"
#include "libcore/icu/ICU.h"
#include "libcore/icu/LocaleData.h"

@implementation JavaTextDateFormat

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

+ (int)DEFAULT {
  return JavaTextDateFormat_DEFAULT;
}

+ (int)FULL {
  return JavaTextDateFormat_FULL;
}

+ (int)LONG {
  return JavaTextDateFormat_LONG;
}

+ (int)MEDIUM {
  return JavaTextDateFormat_MEDIUM;
}

+ (int)SHORT {
  return JavaTextDateFormat_SHORT;
}

+ (int)ERA_FIELD {
  return JavaTextDateFormat_ERA_FIELD;
}

+ (int)YEAR_FIELD {
  return JavaTextDateFormat_YEAR_FIELD;
}

+ (int)MONTH_FIELD {
  return JavaTextDateFormat_MONTH_FIELD;
}

+ (int)DATE_FIELD {
  return JavaTextDateFormat_DATE_FIELD;
}

+ (int)HOUR_OF_DAY1_FIELD {
  return JavaTextDateFormat_HOUR_OF_DAY1_FIELD;
}

+ (int)HOUR_OF_DAY0_FIELD {
  return JavaTextDateFormat_HOUR_OF_DAY0_FIELD;
}

+ (int)MINUTE_FIELD {
  return JavaTextDateFormat_MINUTE_FIELD;
}

+ (int)SECOND_FIELD {
  return JavaTextDateFormat_SECOND_FIELD;
}

+ (int)MILLISECOND_FIELD {
  return JavaTextDateFormat_MILLISECOND_FIELD;
}

+ (int)DAY_OF_WEEK_FIELD {
  return JavaTextDateFormat_DAY_OF_WEEK_FIELD;
}

+ (int)DAY_OF_YEAR_FIELD {
  return JavaTextDateFormat_DAY_OF_YEAR_FIELD;
}

+ (int)DAY_OF_WEEK_IN_MONTH_FIELD {
  return JavaTextDateFormat_DAY_OF_WEEK_IN_MONTH_FIELD;
}

+ (int)WEEK_OF_YEAR_FIELD {
  return JavaTextDateFormat_WEEK_OF_YEAR_FIELD;
}

+ (int)WEEK_OF_MONTH_FIELD {
  return JavaTextDateFormat_WEEK_OF_MONTH_FIELD;
}

+ (int)AM_PM_FIELD {
  return JavaTextDateFormat_AM_PM_FIELD;
}

+ (int)HOUR1_FIELD {
  return JavaTextDateFormat_HOUR1_FIELD;
}

+ (int)HOUR0_FIELD {
  return JavaTextDateFormat_HOUR0_FIELD;
}

+ (int)TIMEZONE_FIELD {
  return JavaTextDateFormat_TIMEZONE_FIELD;
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

- (id)clone {
  JavaTextDateFormat *clone = (JavaTextDateFormat *) check_class_cast([super clone], [JavaTextDateFormat class]);
  JavaTextDateFormat_set_calendar_(nil_chk(clone), (JavaUtilCalendar *) check_class_cast([((JavaUtilCalendar *) nil_chk(calendar_)) clone], [JavaUtilCalendar class]));
  JavaTextDateFormat_set_numberFormat_(clone, (JavaTextNumberFormat *) check_class_cast([((JavaTextNumberFormat *) nil_chk(numberFormat_)) clone], [JavaTextNumberFormat class]));
  return clone;
}

- (BOOL)isEqual:(id)object {
  if (self == object) {
    return YES;
  }
  if (!([object isKindOfClass:[JavaTextDateFormat class]])) {
    return NO;
  }
  JavaTextDateFormat *dateFormat = (JavaTextDateFormat *) check_class_cast(object, [JavaTextDateFormat class]);
  return [((JavaTextNumberFormat *) nil_chk(numberFormat_)) isEqual:((JavaTextDateFormat *) nil_chk(dateFormat))->numberFormat_] && [((JavaUtilTimeZone *) nil_chk([((JavaUtilCalendar *) nil_chk(calendar_)) getTimeZone])) isEqual:[dateFormat->calendar_ getTimeZone]] && [calendar_ getFirstDayOfWeek] == [dateFormat->calendar_ getFirstDayOfWeek] && [calendar_ getMinimalDaysInFirstWeek] == [dateFormat->calendar_ getMinimalDaysInFirstWeek] && [calendar_ isLenient] == [dateFormat->calendar_ isLenient];
}

- (JavaLangStringBuffer *)formatWithId:(id)object
              withJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
             withJavaTextFieldPosition:(JavaTextFieldPosition *)field {
  if ([object isKindOfClass:[JavaUtilDate class]]) {
    return [self formatWithJavaUtilDate:(JavaUtilDate *) check_class_cast(object, [JavaUtilDate class]) withJavaLangStringBuffer:buffer withJavaTextFieldPosition:field];
  }
  if ([object isKindOfClass:[NSNumber class]]) {
    return [self formatWithJavaUtilDate:[[[JavaUtilDate alloc] initWithLong:[((NSNumber *) nil_chk(object)) longLongValue]] autorelease] withJavaLangStringBuffer:buffer withJavaTextFieldPosition:field];
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Bad class: %@", [nil_chk(object) getClass]]] autorelease];
}

- (NSString *)formatWithJavaUtilDate:(JavaUtilDate *)date {
  return [((JavaLangStringBuffer *) nil_chk([self formatWithJavaUtilDate:date withJavaLangStringBuffer:[[[JavaLangStringBuffer alloc] init] autorelease] withJavaTextFieldPosition:[[[JavaTextFieldPosition alloc] initWithInt:0] autorelease]])) description];
}

- (JavaLangStringBuffer *)formatWithJavaUtilDate:(JavaUtilDate *)date
                        withJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                       withJavaTextFieldPosition:(JavaTextFieldPosition *)field {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (IOSObjectArray *)getAvailableLocales {
  return [LibcoreIcuICU getAvailableDateFormatLocales];
}

- (JavaUtilCalendar *)getCalendar {
  return calendar_;
}

+ (JavaTextDateFormat *)getDateInstance {
  return [JavaTextDateFormat getDateInstanceWithInt:JavaTextDateFormat_DEFAULT];
}

+ (JavaTextDateFormat *)getDateInstanceWithInt:(int)style {
  [JavaTextDateFormat checkDateStyleWithInt:style];
  return [JavaTextDateFormat getDateInstanceWithInt:style withJavaUtilLocale:[JavaUtilLocale getDefault]];
}

+ (JavaTextDateFormat *)getDateInstanceWithInt:(int)style
                            withJavaUtilLocale:(JavaUtilLocale *)locale {
  [JavaTextDateFormat checkDateStyleWithInt:style];
  return [[[JavaTextSimpleDateFormat alloc] initWithNSString:[((LibcoreIcuLocaleData *) nil_chk([LibcoreIcuLocaleData getWithJavaUtilLocale:locale])) getDateFormatWithInt:style] withJavaUtilLocale:locale] autorelease];
}

+ (JavaTextDateFormat *)getDateTimeInstance {
  return [JavaTextDateFormat getDateTimeInstanceWithInt:JavaTextDateFormat_DEFAULT withInt:JavaTextDateFormat_DEFAULT];
}

+ (JavaTextDateFormat *)getDateTimeInstanceWithInt:(int)dateStyle
                                           withInt:(int)timeStyle {
  [JavaTextDateFormat checkTimeStyleWithInt:timeStyle];
  [JavaTextDateFormat checkDateStyleWithInt:dateStyle];
  return [JavaTextDateFormat getDateTimeInstanceWithInt:dateStyle withInt:timeStyle withJavaUtilLocale:[JavaUtilLocale getDefault]];
}

+ (JavaTextDateFormat *)getDateTimeInstanceWithInt:(int)dateStyle
                                           withInt:(int)timeStyle
                                withJavaUtilLocale:(JavaUtilLocale *)locale {
  [JavaTextDateFormat checkTimeStyleWithInt:timeStyle];
  [JavaTextDateFormat checkDateStyleWithInt:dateStyle];
  LibcoreIcuLocaleData *localeData = [LibcoreIcuLocaleData getWithJavaUtilLocale:locale];
  NSString *pattern = [NSString stringWithFormat:@"%@ %@", [((LibcoreIcuLocaleData *) nil_chk(localeData)) getDateFormatWithInt:dateStyle], [localeData getTimeFormatWithInt:timeStyle]];
  return [[[JavaTextSimpleDateFormat alloc] initWithNSString:pattern withJavaUtilLocale:locale] autorelease];
}

+ (JavaTextDateFormat *)getInstance {
  return [JavaTextDateFormat getDateTimeInstanceWithInt:JavaTextDateFormat_SHORT withInt:JavaTextDateFormat_SHORT];
}

- (JavaTextNumberFormat *)getNumberFormat {
  return numberFormat_;
}

+ (JavaTextDateFormat *)getTimeInstance {
  return [JavaTextDateFormat getTimeInstanceWithInt:JavaTextDateFormat_DEFAULT];
}

+ (JavaTextDateFormat *)getTimeInstanceWithInt:(int)style {
  [JavaTextDateFormat checkTimeStyleWithInt:style];
  return [JavaTextDateFormat getTimeInstanceWithInt:style withJavaUtilLocale:[JavaUtilLocale getDefault]];
}

+ (JavaTextDateFormat *)getTimeInstanceWithInt:(int)style
                            withJavaUtilLocale:(JavaUtilLocale *)locale {
  [JavaTextDateFormat checkTimeStyleWithInt:style];
  return [[[JavaTextSimpleDateFormat alloc] initWithNSString:[((LibcoreIcuLocaleData *) nil_chk([LibcoreIcuLocaleData getWithJavaUtilLocale:locale])) getTimeFormatWithInt:style] withJavaUtilLocale:locale] autorelease];
}

- (JavaUtilTimeZone *)getTimeZone {
  return [((JavaUtilCalendar *) nil_chk(calendar_)) getTimeZone];
}

- (NSUInteger)hash {
  return [((JavaUtilCalendar *) nil_chk(calendar_)) getFirstDayOfWeek] + [calendar_ getMinimalDaysInFirstWeek] + [((JavaUtilTimeZone *) nil_chk([calendar_ getTimeZone])) hash] + ([calendar_ isLenient] ? 1231 : 1237) + [((JavaTextNumberFormat *) nil_chk(numberFormat_)) hash];
}

- (BOOL)isLenient {
  return [((JavaUtilCalendar *) nil_chk(calendar_)) isLenient];
}

- (JavaUtilDate *)parseWithNSString:(NSString *)string {
  JavaTextParsePosition *position = [[[JavaTextParsePosition alloc] initWithInt:0] autorelease];
  JavaUtilDate *date = [self parseWithNSString:string withJavaTextParsePosition:position];
  if ([position getIndex] == 0) {
    @throw [[[JavaTextParseException alloc] initWithNSString:[NSString stringWithFormat:@"Unparseable date: \"%@\"", string] withInt:[position getErrorIndex]] autorelease];
  }
  return date;
}

+ (IOSObjectArray *)__exceptions_parseWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaTextParseException getClass] } count:1 type:[IOSClass getClass]];
}

- (JavaUtilDate *)parseWithNSString:(NSString *)string
          withJavaTextParsePosition:(JavaTextParsePosition *)position {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)parseObjectWithNSString:(NSString *)string
    withJavaTextParsePosition:(JavaTextParsePosition *)position {
  return [self parseWithNSString:string withJavaTextParsePosition:position];
}

- (void)setCalendarWithJavaUtilCalendar:(JavaUtilCalendar *)cal {
  JavaTextDateFormat_set_calendar_(self, cal);
}

- (void)setLenientWithBoolean:(BOOL)value {
  [((JavaUtilCalendar *) nil_chk(calendar_)) setLenientWithBoolean:value];
}

- (void)setNumberFormatWithJavaTextNumberFormat:(JavaTextNumberFormat *)format {
  JavaTextDateFormat_set_numberFormat_(self, format);
}

- (void)setTimeZoneWithJavaUtilTimeZone:(JavaUtilTimeZone *)timezone {
  [((JavaUtilCalendar *) nil_chk(calendar_)) setTimeZoneWithJavaUtilTimeZone:timezone];
}

+ (void)checkDateStyleWithInt:(int)style {
  if (!(style == JavaTextDateFormat_SHORT || style == JavaTextDateFormat_MEDIUM || style == JavaTextDateFormat_LONG || style == JavaTextDateFormat_FULL || style == JavaTextDateFormat_DEFAULT)) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Illegal date style: %d", style]] autorelease];
  }
}

+ (void)checkTimeStyleWithInt:(int)style {
  if (!(style == JavaTextDateFormat_SHORT || style == JavaTextDateFormat_MEDIUM || style == JavaTextDateFormat_LONG || style == JavaTextDateFormat_FULL || style == JavaTextDateFormat_DEFAULT)) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Illegal time style: %d", style]] autorelease];
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaTextDateFormat_set_numberFormat_(self, nil);
  JavaTextDateFormat_set_calendar_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaTextDateFormat *)other {
  [super copyAllFieldsTo:other];
  JavaTextDateFormat_set_calendar_(other, calendar_);
  JavaTextDateFormat_set_numberFormat_(other, numberFormat_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:calendar_ name:@"calendar"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:numberFormat_ name:@"numberFormat"]];
  return result;
}

@end
@implementation JavaTextDateFormat_Field

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaTextDateFormat_Field_table_ name:@"JavaTextDateFormat_Field_table_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaTextDateFormat_Field_ERA_ name:@"JavaTextDateFormat_Field_ERA_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaTextDateFormat_Field_YEAR_ name:@"JavaTextDateFormat_Field_YEAR_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaTextDateFormat_Field_MONTH_ name:@"JavaTextDateFormat_Field_MONTH_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaTextDateFormat_Field_HOUR_OF_DAY0_ name:@"JavaTextDateFormat_Field_HOUR_OF_DAY0_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaTextDateFormat_Field_HOUR_OF_DAY1_ name:@"JavaTextDateFormat_Field_HOUR_OF_DAY1_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaTextDateFormat_Field_MINUTE_ name:@"JavaTextDateFormat_Field_MINUTE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaTextDateFormat_Field_SECOND_ name:@"JavaTextDateFormat_Field_SECOND_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaTextDateFormat_Field_MILLISECOND_ name:@"JavaTextDateFormat_Field_MILLISECOND_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaTextDateFormat_Field_DAY_OF_WEEK_ name:@"JavaTextDateFormat_Field_DAY_OF_WEEK_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaTextDateFormat_Field_DAY_OF_MONTH_ name:@"JavaTextDateFormat_Field_DAY_OF_MONTH_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaTextDateFormat_Field_DAY_OF_YEAR_ name:@"JavaTextDateFormat_Field_DAY_OF_YEAR_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaTextDateFormat_Field_DAY_OF_WEEK_IN_MONTH_ name:@"JavaTextDateFormat_Field_DAY_OF_WEEK_IN_MONTH_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaTextDateFormat_Field_WEEK_OF_YEAR_ name:@"JavaTextDateFormat_Field_WEEK_OF_YEAR_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaTextDateFormat_Field_WEEK_OF_MONTH_ name:@"JavaTextDateFormat_Field_WEEK_OF_MONTH_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaTextDateFormat_Field_AM_PM_ name:@"JavaTextDateFormat_Field_AM_PM_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaTextDateFormat_Field_HOUR0_ name:@"JavaTextDateFormat_Field_HOUR0_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaTextDateFormat_Field_HOUR1_ name:@"JavaTextDateFormat_Field_HOUR1_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaTextDateFormat_Field_TIME_ZONE_ name:@"JavaTextDateFormat_Field_TIME_ZONE_"]];
  return result;
}

static JavaUtilHashtable * JavaTextDateFormat_Field_table_;
static JavaTextDateFormat_Field * JavaTextDateFormat_Field_ERA_;
static JavaTextDateFormat_Field * JavaTextDateFormat_Field_YEAR_;
static JavaTextDateFormat_Field * JavaTextDateFormat_Field_MONTH_;
static JavaTextDateFormat_Field * JavaTextDateFormat_Field_HOUR_OF_DAY0_;
static JavaTextDateFormat_Field * JavaTextDateFormat_Field_HOUR_OF_DAY1_;
static JavaTextDateFormat_Field * JavaTextDateFormat_Field_MINUTE_;
static JavaTextDateFormat_Field * JavaTextDateFormat_Field_SECOND_;
static JavaTextDateFormat_Field * JavaTextDateFormat_Field_MILLISECOND_;
static JavaTextDateFormat_Field * JavaTextDateFormat_Field_DAY_OF_WEEK_;
static JavaTextDateFormat_Field * JavaTextDateFormat_Field_DAY_OF_MONTH_;
static JavaTextDateFormat_Field * JavaTextDateFormat_Field_DAY_OF_YEAR_;
static JavaTextDateFormat_Field * JavaTextDateFormat_Field_DAY_OF_WEEK_IN_MONTH_;
static JavaTextDateFormat_Field * JavaTextDateFormat_Field_WEEK_OF_YEAR_;
static JavaTextDateFormat_Field * JavaTextDateFormat_Field_WEEK_OF_MONTH_;
static JavaTextDateFormat_Field * JavaTextDateFormat_Field_AM_PM_;
static JavaTextDateFormat_Field * JavaTextDateFormat_Field_HOUR0_;
static JavaTextDateFormat_Field * JavaTextDateFormat_Field_HOUR1_;
static JavaTextDateFormat_Field * JavaTextDateFormat_Field_TIME_ZONE_;

+ (JavaUtilHashtable *)table {
  return JavaTextDateFormat_Field_table_;
}

+ (void)setTable:(JavaUtilHashtable *)table {
  JreOperatorRetainedAssign(&JavaTextDateFormat_Field_table_, nil, table);
}

+ (JavaTextDateFormat_Field *)ERA {
  return JavaTextDateFormat_Field_ERA_;
}

+ (JavaTextDateFormat_Field *)YEAR {
  return JavaTextDateFormat_Field_YEAR_;
}

+ (JavaTextDateFormat_Field *)MONTH {
  return JavaTextDateFormat_Field_MONTH_;
}

+ (JavaTextDateFormat_Field *)HOUR_OF_DAY0 {
  return JavaTextDateFormat_Field_HOUR_OF_DAY0_;
}

+ (JavaTextDateFormat_Field *)HOUR_OF_DAY1 {
  return JavaTextDateFormat_Field_HOUR_OF_DAY1_;
}

+ (JavaTextDateFormat_Field *)MINUTE {
  return JavaTextDateFormat_Field_MINUTE_;
}

+ (JavaTextDateFormat_Field *)SECOND {
  return JavaTextDateFormat_Field_SECOND_;
}

+ (JavaTextDateFormat_Field *)MILLISECOND {
  return JavaTextDateFormat_Field_MILLISECOND_;
}

+ (JavaTextDateFormat_Field *)DAY_OF_WEEK {
  return JavaTextDateFormat_Field_DAY_OF_WEEK_;
}

+ (JavaTextDateFormat_Field *)DAY_OF_MONTH {
  return JavaTextDateFormat_Field_DAY_OF_MONTH_;
}

+ (JavaTextDateFormat_Field *)DAY_OF_YEAR {
  return JavaTextDateFormat_Field_DAY_OF_YEAR_;
}

+ (JavaTextDateFormat_Field *)DAY_OF_WEEK_IN_MONTH {
  return JavaTextDateFormat_Field_DAY_OF_WEEK_IN_MONTH_;
}

+ (JavaTextDateFormat_Field *)WEEK_OF_YEAR {
  return JavaTextDateFormat_Field_WEEK_OF_YEAR_;
}

+ (JavaTextDateFormat_Field *)WEEK_OF_MONTH {
  return JavaTextDateFormat_Field_WEEK_OF_MONTH_;
}

+ (JavaTextDateFormat_Field *)AM_PM {
  return JavaTextDateFormat_Field_AM_PM_;
}

+ (JavaTextDateFormat_Field *)HOUR0 {
  return JavaTextDateFormat_Field_HOUR0_;
}

+ (JavaTextDateFormat_Field *)HOUR1 {
  return JavaTextDateFormat_Field_HOUR1_;
}

+ (JavaTextDateFormat_Field *)TIME_ZONE {
  return JavaTextDateFormat_Field_TIME_ZONE_;
}

- (id)initWithNSString:(NSString *)fieldName
               withInt:(int)calendarField {
  if (self = [super initWithNSString:fieldName]) {
    calendarField_ = -1;
    self->calendarField_ = calendarField;
    if (calendarField != -1 && [((JavaUtilHashtable *) nil_chk(JavaTextDateFormat_Field_table_)) getWithId:[JavaLangInteger valueOfWithInt:calendarField]] == nil) {
      [JavaTextDateFormat_Field_table_ putWithId:[JavaLangInteger valueOfWithInt:calendarField] withId:self];
    }
    JreMemDebugAdd(self);
  }
  return self;
}

- (int)getCalendarField {
  return calendarField_;
}

+ (JavaTextDateFormat_Field *)ofCalendarFieldWithInt:(int)calendarField {
  if (calendarField < 0 || calendarField >= JavaUtilCalendar_FIELD_COUNT) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Field out of range: %d", calendarField]] autorelease];
  }
  return [((JavaUtilHashtable *) nil_chk(JavaTextDateFormat_Field_table_)) getWithId:[JavaLangInteger valueOfWithInt:calendarField]];
}

+ (void)initialize {
  if (self == [JavaTextDateFormat_Field class]) {
    JreOperatorRetainedAssign(&JavaTextDateFormat_Field_table_, nil, [[[JavaUtilHashtable alloc] init] autorelease]);
    JreOperatorRetainedAssign(&JavaTextDateFormat_Field_ERA_, nil, [[[JavaTextDateFormat_Field alloc] initWithNSString:@"era" withInt:JavaUtilCalendar_ERA] autorelease]);
    JreOperatorRetainedAssign(&JavaTextDateFormat_Field_YEAR_, nil, [[[JavaTextDateFormat_Field alloc] initWithNSString:@"year" withInt:JavaUtilCalendar_YEAR] autorelease]);
    JreOperatorRetainedAssign(&JavaTextDateFormat_Field_MONTH_, nil, [[[JavaTextDateFormat_Field alloc] initWithNSString:@"month" withInt:JavaUtilCalendar_MONTH] autorelease]);
    JreOperatorRetainedAssign(&JavaTextDateFormat_Field_HOUR_OF_DAY0_, nil, [[[JavaTextDateFormat_Field alloc] initWithNSString:@"hour of day" withInt:JavaUtilCalendar_HOUR_OF_DAY] autorelease]);
    JreOperatorRetainedAssign(&JavaTextDateFormat_Field_HOUR_OF_DAY1_, nil, [[[JavaTextDateFormat_Field alloc] initWithNSString:@"hour of day 1" withInt:-1] autorelease]);
    JreOperatorRetainedAssign(&JavaTextDateFormat_Field_MINUTE_, nil, [[[JavaTextDateFormat_Field alloc] initWithNSString:@"minute" withInt:JavaUtilCalendar_MINUTE] autorelease]);
    JreOperatorRetainedAssign(&JavaTextDateFormat_Field_SECOND_, nil, [[[JavaTextDateFormat_Field alloc] initWithNSString:@"second" withInt:JavaUtilCalendar_SECOND] autorelease]);
    JreOperatorRetainedAssign(&JavaTextDateFormat_Field_MILLISECOND_, nil, [[[JavaTextDateFormat_Field alloc] initWithNSString:@"millisecond" withInt:JavaUtilCalendar_MILLISECOND] autorelease]);
    JreOperatorRetainedAssign(&JavaTextDateFormat_Field_DAY_OF_WEEK_, nil, [[[JavaTextDateFormat_Field alloc] initWithNSString:@"day of week" withInt:JavaUtilCalendar_DAY_OF_WEEK] autorelease]);
    JreOperatorRetainedAssign(&JavaTextDateFormat_Field_DAY_OF_MONTH_, nil, [[[JavaTextDateFormat_Field alloc] initWithNSString:@"day of month" withInt:JavaUtilCalendar_DAY_OF_MONTH] autorelease]);
    JreOperatorRetainedAssign(&JavaTextDateFormat_Field_DAY_OF_YEAR_, nil, [[[JavaTextDateFormat_Field alloc] initWithNSString:@"day of year" withInt:JavaUtilCalendar_DAY_OF_YEAR] autorelease]);
    JreOperatorRetainedAssign(&JavaTextDateFormat_Field_DAY_OF_WEEK_IN_MONTH_, nil, [[[JavaTextDateFormat_Field alloc] initWithNSString:@"day of week in month" withInt:JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH] autorelease]);
    JreOperatorRetainedAssign(&JavaTextDateFormat_Field_WEEK_OF_YEAR_, nil, [[[JavaTextDateFormat_Field alloc] initWithNSString:@"week of year" withInt:JavaUtilCalendar_WEEK_OF_YEAR] autorelease]);
    JreOperatorRetainedAssign(&JavaTextDateFormat_Field_WEEK_OF_MONTH_, nil, [[[JavaTextDateFormat_Field alloc] initWithNSString:@"week of month" withInt:JavaUtilCalendar_WEEK_OF_MONTH] autorelease]);
    JreOperatorRetainedAssign(&JavaTextDateFormat_Field_AM_PM_, nil, [[[JavaTextDateFormat_Field alloc] initWithNSString:@"am pm" withInt:JavaUtilCalendar_AM_PM] autorelease]);
    JreOperatorRetainedAssign(&JavaTextDateFormat_Field_HOUR0_, nil, [[[JavaTextDateFormat_Field alloc] initWithNSString:@"hour" withInt:JavaUtilCalendar_HOUR] autorelease]);
    JreOperatorRetainedAssign(&JavaTextDateFormat_Field_HOUR1_, nil, [[[JavaTextDateFormat_Field alloc] initWithNSString:@"hour 1" withInt:-1] autorelease]);
    JreOperatorRetainedAssign(&JavaTextDateFormat_Field_TIME_ZONE_, nil, [[[JavaTextDateFormat_Field alloc] initWithNSString:@"time zone" withInt:-1] autorelease]);
  }
}

- (void)copyAllFieldsTo:(JavaTextDateFormat_Field *)other {
  [super copyAllFieldsTo:other];
  other->calendarField_ = calendarField_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  return result;
}

@end
