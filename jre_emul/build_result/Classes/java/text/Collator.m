//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/text/Collator.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSObjectArray.h"
#include "java/lang/AssertionError.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/NullPointerException.h"
#include "java/text/CollationKey.h"
#include "java/text/Collator.h"
#include "java/text/IOSCollator.h"
#include "java/util/Locale.h"
#include "libcore/icu/ICU.h"

@implementation JavaTextCollator

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

+ (int)NO_DECOMPOSITION {
  return JavaTextCollator_NO_DECOMPOSITION;
}

+ (int)CANONICAL_DECOMPOSITION {
  return JavaTextCollator_CANONICAL_DECOMPOSITION;
}

+ (int)FULL_DECOMPOSITION {
  return JavaTextCollator_FULL_DECOMPOSITION;
}

+ (int)PRIMARY {
  return JavaTextCollator_PRIMARY;
}

+ (int)SECONDARY {
  return JavaTextCollator_SECONDARY;
}

+ (int)TERTIARY {
  return JavaTextCollator_TERTIARY;
}

+ (int)IDENTICAL {
  return JavaTextCollator_IDENTICAL;
}

- (int)compareWithId:(id)object1
              withId:(id)object2 {
  return [self compareWithNSString:(NSString *) check_class_cast(object1, [NSString class]) withNSString:(NSString *) check_class_cast(object2, [NSString class])];
}

- (int)compareWithNSString:(NSString *)string1
              withNSString:(NSString *)string2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)equalsWithNSString:(NSString *)string1
              withNSString:(NSString *)string2 {
  return [self compareWithNSString:string1 withNSString:string2] == 0;
}

+ (IOSObjectArray *)getAvailableLocales {
  return [LibcoreIcuICU getAvailableLocales];
}

- (JavaTextCollationKey *)getCollationKeyWithNSString:(NSString *)string {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)getDecomposition {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (JavaTextCollator *)getInstance {
  return [JavaTextCollator getInstanceWithJavaUtilLocale:[JavaUtilLocale getDefault]];
}

+ (JavaTextCollator *)getInstanceWithJavaUtilLocale:(JavaUtilLocale *)locale {
  if (locale == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"locale == null"] autorelease];
  }
  return [[[JavaTextIOSCollator alloc] initWithJavaUtilLocale:locale] autorelease];
}

- (int)getStrength {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setDecompositionWithInt:(int)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setStrengthWithInt:(int)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id)clone {
  @try {
    return (JavaTextIOSCollator *) check_class_cast([super clone], [JavaTextIOSCollator class]);
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw [[[JavaLangAssertionError alloc] initWithId:e] autorelease];
  }
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

@end
