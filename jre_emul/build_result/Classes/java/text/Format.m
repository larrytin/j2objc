//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/text/Format.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSClass.h"
#include "java/lang/AssertionError.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuffer.h"
#include "java/text/AttributedCharacterIterator.h"
#include "java/text/AttributedString.h"
#include "java/text/FieldPosition.h"
#include "java/text/Format.h"
#include "java/text/ParseException.h"
#include "java/text/ParsePosition.h"

@implementation JavaTextFormat

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

- (id)clone {
  @try {
    return [super clone];
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw [[[JavaLangAssertionError alloc] initWithId:e] autorelease];
  }
}

- (NSString *)formatWithId:(id)object {
  return [((JavaLangStringBuffer *) nil_chk([self formatWithId:object withJavaLangStringBuffer:[[[JavaLangStringBuffer alloc] init] autorelease] withJavaTextFieldPosition:[[[JavaTextFieldPosition alloc] initWithInt:0] autorelease]])) description];
}

- (JavaLangStringBuffer *)formatWithId:(id)object
              withJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
             withJavaTextFieldPosition:(JavaTextFieldPosition *)field {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaTextAttributedCharacterIterator>)formatToCharacterIteratorWithId:(id)object {
  return [((JavaTextAttributedString *) [[[JavaTextAttributedString alloc] initWithNSString:[self formatWithId:object]] autorelease]) getIterator];
}

- (id)parseObjectWithNSString:(NSString *)string {
  JavaTextParsePosition *position = [[[JavaTextParsePosition alloc] initWithInt:0] autorelease];
  id result = [self parseObjectWithNSString:string withJavaTextParsePosition:position];
  if ([position getIndex] == 0) {
    @throw [[[JavaTextParseException alloc] initWithNSString:@"Parse failure" withInt:[position getErrorIndex]] autorelease];
  }
  return result;
}

+ (IOSObjectArray *)__exceptions_parseObjectWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaTextParseException getClass] } count:1 type:[IOSClass getClass]];
}

- (id)parseObjectWithNSString:(NSString *)string
    withJavaTextParsePosition:(JavaTextParsePosition *)position {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (BOOL)upToWithNSString:(NSString *)string
withJavaTextParsePosition:(JavaTextParsePosition *)position
withJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                withChar:(unichar)stop {
  int index = [((JavaTextParsePosition *) nil_chk(position)) getIndex], length = [((NSString *) nil_chk(string)) length];
  BOOL lastQuote = NO, quote = NO;
  while (index < length) {
    unichar ch = [string charAtWithInt:index++];
    if (ch == '\'') {
      if (lastQuote) {
        [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithChar:'\''];
      }
      quote = !quote;
      lastQuote = YES;
    }
    else if (ch == stop && !quote) {
      [position setIndexWithInt:index];
      return YES;
    }
    else {
      lastQuote = NO;
      [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithChar:ch];
    }
  }
  [position setIndexWithInt:index];
  return NO;
}

+ (BOOL)upToWithQuotesWithNSString:(NSString *)string
         withJavaTextParsePosition:(JavaTextParsePosition *)position
          withJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                          withChar:(unichar)stop
                          withChar:(unichar)start {
  int index = [((JavaTextParsePosition *) nil_chk(position)) getIndex], length = [((NSString *) nil_chk(string)) length], count = 1;
  BOOL quote = NO;
  while (index < length) {
    unichar ch = [string charAtWithInt:index++];
    if (ch == '\'') {
      quote = !quote;
    }
    if (!quote) {
      if (ch == stop) {
        count--;
      }
      if (count == 0) {
        [position setIndexWithInt:index];
        return YES;
      }
      if (ch == start) {
        count++;
      }
    }
    [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithChar:ch];
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Unmatched braces in the pattern"] autorelease];
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

@end
@implementation JavaTextFormat_Field

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithNSString:(NSString *)fieldName {
  return JreMemDebugAdd([super initWithNSString:fieldName]);
}

@end
