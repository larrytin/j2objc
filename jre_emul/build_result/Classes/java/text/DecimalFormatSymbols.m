//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/text/DecimalFormatSymbols.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/AssertionError.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NullPointerException.h"
#include "java/text/DecimalFormatSymbols.h"
#include "java/util/Currency.h"
#include "java/util/Locale.h"
#include "libcore/icu/ICU.h"
#include "libcore/icu/LocaleData.h"

@implementation JavaTextDecimalFormatSymbols

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)init {
  return JreMemDebugAdd([self initJavaTextDecimalFormatSymbolsWithJavaUtilLocale:[JavaUtilLocale getDefault]]);
}

- (id)initJavaTextDecimalFormatSymbolsWithJavaUtilLocale:(JavaUtilLocale *)locale {
  if (self = [super init]) {
    LibcoreIcuLocaleData *localeData = [LibcoreIcuLocaleData getWithJavaUtilLocale:locale];
    self->zeroDigit_ = ((LibcoreIcuLocaleData *) nil_chk(localeData))->zeroDigit_;
    self->digit_ = '#';
    self->decimalSeparator_ = localeData->decimalSeparator_;
    self->groupingSeparator_ = localeData->groupingSeparator_;
    self->patternSeparator_ = localeData->patternSeparator_;
    self->percent_ = localeData->percent_;
    self->perMill_ = localeData->perMill_;
    self->monetarySeparator_ = localeData->monetarySeparator_;
    self->minusSign_ = localeData->minusSign_;
    JavaTextDecimalFormatSymbols_set_infinity_(self, localeData->infinity_);
    JavaTextDecimalFormatSymbols_set_NaN_(self, localeData->NaN_);
    JavaTextDecimalFormatSymbols_set_exponentSeparator_(self, localeData->exponentSeparator_);
    JavaTextDecimalFormatSymbols_set_locale_(self, locale);
    @try {
      JavaTextDecimalFormatSymbols_set_currency_(self, [JavaUtilCurrency getInstanceWithJavaUtilLocale:locale]);
      JavaTextDecimalFormatSymbols_set_currencySymbol_(self, [((JavaUtilCurrency *) nil_chk(currency_)) getSymbolWithJavaUtilLocale:locale]);
      JavaTextDecimalFormatSymbols_set_intlCurrencySymbol_(self, [currency_ getCurrencyCode]);
    }
    @catch (JavaLangIllegalArgumentException *e) {
      JavaTextDecimalFormatSymbols_set_currency_(self, [JavaUtilCurrency getInstanceWithNSString:@"XXX"]);
      JavaTextDecimalFormatSymbols_set_currencySymbol_(self, localeData->currencySymbol_);
      JavaTextDecimalFormatSymbols_set_intlCurrencySymbol_(self, localeData->internationalCurrencySymbol_);
    }
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return [self initJavaTextDecimalFormatSymbolsWithJavaUtilLocale:locale];
}

+ (JavaTextDecimalFormatSymbols *)getInstance {
  return [JavaTextDecimalFormatSymbols getInstanceWithJavaUtilLocale:[JavaUtilLocale getDefault]];
}

+ (JavaTextDecimalFormatSymbols *)getInstanceWithJavaUtilLocale:(JavaUtilLocale *)locale {
  if (locale == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"locale == null"] autorelease];
  }
  return [[[JavaTextDecimalFormatSymbols alloc] initWithJavaUtilLocale:locale] autorelease];
}

+ (IOSObjectArray *)getAvailableLocales {
  return [LibcoreIcuICU getAvailableDecimalFormatSymbolsLocales];
}

- (id)clone {
  @try {
    return [super clone];
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw [[[JavaLangAssertionError alloc] initWithId:e] autorelease];
  }
}

- (BOOL)isEqual:(id)object {
  if (self == object) {
    return YES;
  }
  if (!([object isKindOfClass:[JavaTextDecimalFormatSymbols class]])) {
    return NO;
  }
  JavaTextDecimalFormatSymbols *obj = (JavaTextDecimalFormatSymbols *) check_class_cast(object, [JavaTextDecimalFormatSymbols class]);
  return [((JavaUtilCurrency *) nil_chk(currency_)) isEqual:((JavaTextDecimalFormatSymbols *) nil_chk(obj))->currency_] && [((NSString *) nil_chk(currencySymbol_)) isEqual:obj->currencySymbol_] && decimalSeparator_ == obj->decimalSeparator_ && digit_ == obj->digit_ && [((NSString *) nil_chk(exponentSeparator_)) isEqual:obj->exponentSeparator_] && groupingSeparator_ == obj->groupingSeparator_ && [((NSString *) nil_chk(infinity_)) isEqual:obj->infinity_] && [((NSString *) nil_chk(intlCurrencySymbol_)) isEqual:obj->intlCurrencySymbol_] && minusSign_ == obj->minusSign_ && monetarySeparator_ == obj->monetarySeparator_ && [((NSString *) nil_chk(NaN_)) isEqual:obj->NaN_] && patternSeparator_ == obj->patternSeparator_ && perMill_ == obj->perMill_ && percent_ == obj->percent_ && zeroDigit_ == obj->zeroDigit_;
}

- (NSString *)description {
  return [NSString stringWithFormat:@"%@[currency=%@,currencySymbol=%@,decimalSeparator=%C,digit=%C,exponentSeparator=%@,groupingSeparator=%C,infinity=%@,intlCurrencySymbol=%@,minusSign=%C,monetarySeparator=%C,NaN=%@,patternSeparator=%C,perMill=%C,percent=%C,zeroDigit=%C]", [[self getClass] getName], currency_, currencySymbol_, decimalSeparator_, digit_, exponentSeparator_, groupingSeparator_, infinity_, intlCurrencySymbol_, minusSign_, monetarySeparator_, NaN_, patternSeparator_, perMill_, percent_, zeroDigit_];
}

- (JavaUtilCurrency *)getCurrency {
  return currency_;
}

- (NSString *)getInternationalCurrencySymbol {
  return intlCurrencySymbol_;
}

- (NSString *)getCurrencySymbol {
  return currencySymbol_;
}

- (unichar)getDecimalSeparator {
  return decimalSeparator_;
}

- (unichar)getDigit {
  return digit_;
}

- (unichar)getGroupingSeparator {
  return groupingSeparator_;
}

- (NSString *)getInfinity {
  return infinity_;
}

- (unichar)getMinusSign {
  return minusSign_;
}

- (unichar)getMonetaryDecimalSeparator {
  return monetarySeparator_;
}

- (NSString *)getNaN {
  return NaN_;
}

- (unichar)getPatternSeparator {
  return patternSeparator_;
}

- (unichar)getPercent {
  return percent_;
}

- (unichar)getPerMill {
  return perMill_;
}

- (unichar)getZeroDigit {
  return zeroDigit_;
}

- (NSString *)getExponentSeparator {
  return exponentSeparator_;
}

- (NSUInteger)hash {
  int result = 17;
  result = 31 * result + zeroDigit_;
  result = 31 * result + digit_;
  result = 31 * result + decimalSeparator_;
  result = 31 * result + groupingSeparator_;
  result = 31 * result + patternSeparator_;
  result = 31 * result + percent_;
  result = 31 * result + perMill_;
  result = 31 * result + monetarySeparator_;
  result = 31 * result + minusSign_;
  result = 31 * result + [((NSString *) nil_chk(exponentSeparator_)) hash];
  result = 31 * result + [((NSString *) nil_chk(infinity_)) hash];
  result = 31 * result + [((NSString *) nil_chk(NaN_)) hash];
  result = 31 * result + [((NSString *) nil_chk(currencySymbol_)) hash];
  result = 31 * result + [((NSString *) nil_chk(intlCurrencySymbol_)) hash];
  return result;
}

- (void)setCurrencyWithJavaUtilCurrency:(JavaUtilCurrency *)currency {
  if (currency == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"currency == null"] autorelease];
  }
  if (currency == self->currency_) {
    return;
  }
  JavaTextDecimalFormatSymbols_set_currency_(self, currency);
  JavaTextDecimalFormatSymbols_set_intlCurrencySymbol_(self, [((JavaUtilCurrency *) nil_chk(currency)) getCurrencyCode]);
  JavaTextDecimalFormatSymbols_set_currencySymbol_(self, [currency getSymbolWithJavaUtilLocale:locale_]);
}

- (void)setInternationalCurrencySymbolWithNSString:(NSString *)value {
  if (value == nil) {
    JavaTextDecimalFormatSymbols_set_currency_(self, nil);
    JavaTextDecimalFormatSymbols_set_intlCurrencySymbol_(self, nil);
    return;
  }
  if ([((NSString *) nil_chk(value)) isEqual:intlCurrencySymbol_]) {
    return;
  }
  @try {
    JavaTextDecimalFormatSymbols_set_currency_(self, [JavaUtilCurrency getInstanceWithNSString:value]);
    JavaTextDecimalFormatSymbols_set_currencySymbol_(self, [((JavaUtilCurrency *) nil_chk(currency_)) getSymbolWithJavaUtilLocale:locale_]);
  }
  @catch (JavaLangIllegalArgumentException *e) {
    JavaTextDecimalFormatSymbols_set_currency_(self, nil);
  }
  JavaTextDecimalFormatSymbols_set_intlCurrencySymbol_(self, value);
}

- (void)setCurrencySymbolWithNSString:(NSString *)value {
  JavaTextDecimalFormatSymbols_set_currencySymbol_(self, value);
}

- (void)setDecimalSeparatorWithChar:(unichar)value {
  self->decimalSeparator_ = value;
}

- (void)setDigitWithChar:(unichar)value {
  self->digit_ = value;
}

- (void)setGroupingSeparatorWithChar:(unichar)value {
  self->groupingSeparator_ = value;
}

- (void)setInfinityWithNSString:(NSString *)value {
  JavaTextDecimalFormatSymbols_set_infinity_(self, value);
}

- (void)setMinusSignWithChar:(unichar)value {
  self->minusSign_ = value;
}

- (void)setMonetaryDecimalSeparatorWithChar:(unichar)value {
  self->monetarySeparator_ = value;
}

- (void)setNaNWithNSString:(NSString *)value {
  JavaTextDecimalFormatSymbols_set_NaN_(self, value);
}

- (void)setPatternSeparatorWithChar:(unichar)value {
  self->patternSeparator_ = value;
}

- (void)setPercentWithChar:(unichar)value {
  self->percent_ = value;
}

- (void)setPerMillWithChar:(unichar)value {
  self->perMill_ = value;
}

- (void)setZeroDigitWithChar:(unichar)value {
  self->zeroDigit_ = value;
}

- (void)setExponentSeparatorWithNSString:(NSString *)value {
  if (value == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"value == null"] autorelease];
  }
  JavaTextDecimalFormatSymbols_set_exponentSeparator_(self, value);
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaTextDecimalFormatSymbols_set_exponentSeparator_(self, nil);
  JavaTextDecimalFormatSymbols_set_locale_(self, nil);
  JavaTextDecimalFormatSymbols_set_currency_(self, nil);
  JavaTextDecimalFormatSymbols_set_intlCurrencySymbol_(self, nil);
  JavaTextDecimalFormatSymbols_set_currencySymbol_(self, nil);
  JavaTextDecimalFormatSymbols_set_NaN_(self, nil);
  JavaTextDecimalFormatSymbols_set_infinity_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaTextDecimalFormatSymbols *)other {
  [super copyAllFieldsTo:other];
  JavaTextDecimalFormatSymbols_set_NaN_(other, NaN_);
  JavaTextDecimalFormatSymbols_set_currency_(other, currency_);
  JavaTextDecimalFormatSymbols_set_currencySymbol_(other, currencySymbol_);
  other->decimalSeparator_ = decimalSeparator_;
  other->digit_ = digit_;
  JavaTextDecimalFormatSymbols_set_exponentSeparator_(other, exponentSeparator_);
  other->groupingSeparator_ = groupingSeparator_;
  JavaTextDecimalFormatSymbols_set_infinity_(other, infinity_);
  JavaTextDecimalFormatSymbols_set_intlCurrencySymbol_(other, intlCurrencySymbol_);
  JavaTextDecimalFormatSymbols_set_locale_(other, locale_);
  other->minusSign_ = minusSign_;
  other->monetarySeparator_ = monetarySeparator_;
  other->patternSeparator_ = patternSeparator_;
  other->perMill_ = perMill_;
  other->percent_ = percent_;
  other->zeroDigit_ = zeroDigit_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:infinity_ name:@"infinity"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:NaN_ name:@"NaN"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:currencySymbol_ name:@"currencySymbol"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:intlCurrencySymbol_ name:@"intlCurrencySymbol"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:currency_ name:@"currency"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:locale_ name:@"locale"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:exponentSeparator_ name:@"exponentSeparator"]];
  return result;
}

@end
