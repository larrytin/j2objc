//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/text/AttributedString.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSObjectArray.h"
#include "java/lang/AssertionError.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/text/Annotation.h"
#include "java/text/AttributedCharacterIterator.h"
#include "java/text/AttributedString.h"
#include "java/text/CharacterIterator.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@implementation JavaTextAttributedString

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaTextAttributedCharacterIterator:(id<JavaTextAttributedCharacterIterator>)iterator {
  if (self = [super init]) {
    if ([((id<JavaTextAttributedCharacterIterator>) nil_chk(iterator)) getBeginIndex] > [iterator getEndIndex]) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Invalid substring range"] autorelease];
    }
    JavaLangStringBuilder *buffer = [[[JavaLangStringBuilder alloc] init] autorelease];
    for (int i = [iterator getBeginIndex]; i < [iterator getEndIndex]; i++) {
      [buffer appendWithChar:[iterator current]];
      [iterator next];
    }
    JavaTextAttributedString_set_text_(self, [buffer description]);
    id<JavaUtilSet> attributes = [iterator getAllAttributeKeys];
    if (attributes == nil) {
      return self;
    }
    JavaTextAttributedString_set_attributeMap_(self, [[[JavaUtilHashMap alloc] initWithInt:([((id<JavaUtilSet>) nil_chk(attributes)) size] * 4 / 3) + 1] autorelease]);
    id<JavaUtilIterator> it = [attributes iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      JavaTextAttributedCharacterIterator_Attribute *attribute = [it next];
      [iterator setIndexWithInt:0];
      while ([iterator current] != JavaTextCharacterIterator_DONE) {
        int start = [iterator getRunStartWithJavaTextAttributedCharacterIterator_Attribute:attribute];
        int limit = [iterator getRunLimitWithJavaTextAttributedCharacterIterator_Attribute:attribute];
        id value = [iterator getAttributeWithJavaTextAttributedCharacterIterator_Attribute:attribute];
        if (value != nil) {
          [self addAttributeWithJavaTextAttributedCharacterIterator_Attribute:attribute withId:value withInt:start withInt:limit];
        }
        [iterator setIndexWithInt:limit];
      }
    }
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initJavaTextAttributedStringWithJavaTextAttributedCharacterIterator:(id<JavaTextAttributedCharacterIterator>)iterator
                                                                  withInt:(int)start
                                                                  withInt:(int)end
                                                          withJavaUtilSet:(id<JavaUtilSet>)attributes {
  if (self = [super init]) {
    if (start < [((id<JavaTextAttributedCharacterIterator>) nil_chk(iterator)) getBeginIndex] || end > [iterator getEndIndex] || start > end) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
    if (attributes == nil) {
      return self;
    }
    JavaLangStringBuilder *buffer = [[[JavaLangStringBuilder alloc] init] autorelease];
    [iterator setIndexWithInt:start];
    while ([iterator getIndex] < end) {
      [buffer appendWithChar:[iterator current]];
      [iterator next];
    }
    JavaTextAttributedString_set_text_(self, [buffer description]);
    JavaTextAttributedString_set_attributeMap_(self, [[[JavaUtilHashMap alloc] initWithInt:([((id<JavaUtilSet>) nil_chk(attributes)) size] * 4 / 3) + 1] autorelease]);
    id<JavaUtilIterator> it = [attributes iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      JavaTextAttributedCharacterIterator_Attribute *attribute = [it next];
      [iterator setIndexWithInt:start];
      while ([iterator getIndex] < end) {
        id value = [iterator getAttributeWithJavaTextAttributedCharacterIterator_Attribute:attribute];
        int runStart = [iterator getRunStartWithJavaTextAttributedCharacterIterator_Attribute:attribute];
        int limit = [iterator getRunLimitWithJavaTextAttributedCharacterIterator_Attribute:attribute];
        if (([value isKindOfClass:[JavaTextAnnotation class]] && runStart >= start && limit <= end) || (value != nil && !([value isKindOfClass:[JavaTextAnnotation class]]))) {
          [self addAttributeWithJavaTextAttributedCharacterIterator_Attribute:attribute withId:value withInt:(runStart < start ? start : runStart) - start withInt:(limit > end ? end : limit) - start];
        }
        [iterator setIndexWithInt:limit];
      }
    }
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaTextAttributedCharacterIterator:(id<JavaTextAttributedCharacterIterator>)iterator
                                          withInt:(int)start
                                          withInt:(int)end
                                  withJavaUtilSet:(id<JavaUtilSet>)attributes {
  return [self initJavaTextAttributedStringWithJavaTextAttributedCharacterIterator:iterator withInt:start withInt:end withJavaUtilSet:attributes];
}

- (id)initWithJavaTextAttributedCharacterIterator:(id<JavaTextAttributedCharacterIterator>)iterator
                                          withInt:(int)start
                                          withInt:(int)end {
  return JreMemDebugAdd([self initJavaTextAttributedStringWithJavaTextAttributedCharacterIterator:iterator withInt:start withInt:end withJavaUtilSet:[((id<JavaTextAttributedCharacterIterator>) nil_chk(iterator)) getAllAttributeKeys]]);
}

- (id)initWithJavaTextAttributedCharacterIterator:(id<JavaTextAttributedCharacterIterator>)iterator
                                          withInt:(int)start
                                          withInt:(int)end
withJavaTextAttributedCharacterIterator_AttributeArray:(IOSObjectArray *)attributes {
  return JreMemDebugAdd([self initJavaTextAttributedStringWithJavaTextAttributedCharacterIterator:iterator withInt:start withInt:end withJavaUtilSet:(attributes == nil ? [[[JavaUtilHashSet alloc] init] autorelease] : [[[JavaUtilHashSet alloc] initWithJavaUtilCollection:[JavaUtilArrays asListWithNSObjectArray:attributes]] autorelease])]);
}

- (id)initWithNSString:(NSString *)value {
  if (self = [super init]) {
    if (value == nil) {
      @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"value == null"] autorelease];
    }
    JavaTextAttributedString_set_text_(self, value);
    JavaTextAttributedString_set_attributeMap_(self, [[[JavaUtilHashMap alloc] initWithInt:11] autorelease]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithNSString:(NSString *)value
       withJavaUtilMap:(id<JavaUtilMap>)attributes {
  if (self = [super init]) {
    if (value == nil) {
      @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"value == null"] autorelease];
    }
    if ([((NSString *) nil_chk(value)) length] == 0 && ![((id<JavaUtilMap>) nil_chk(attributes)) isEmpty]) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Cannot add attributes to empty string"] autorelease];
    }
    JavaTextAttributedString_set_text_(self, value);
    JavaTextAttributedString_set_attributeMap_(self, [[[JavaUtilHashMap alloc] initWithInt:([((id<JavaUtilMap>) nil_chk(attributes)) size] * 4 / 3) + 1] autorelease]);
    id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([attributes entrySet])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      id<JavaUtilMap_Entry> entry = (id<JavaUtilMap_Entry>) check_protocol_cast([it next], @protocol(JavaUtilMap_Entry));
      JavaUtilArrayList *ranges = [[[JavaUtilArrayList alloc] initWithInt:1] autorelease];
      [ranges addWithId:[[[JavaTextAttributedString_Range alloc] initWithInt:0 withInt:[text_ length] withId:[((id<JavaUtilMap_Entry>) nil_chk(entry)) getValue]] autorelease]];
      [attributeMap_ putWithId:(JavaTextAttributedCharacterIterator_Attribute *) check_class_cast([entry getKey], [JavaTextAttributedCharacterIterator_Attribute class]) withId:ranges];
    }
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)addAttributeWithJavaTextAttributedCharacterIterator_Attribute:(JavaTextAttributedCharacterIterator_Attribute *)attribute
                                                               withId:(id)value {
  if (attribute == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"attribute == null"] autorelease];
  }
  if ([((NSString *) nil_chk(text_)) isEmpty]) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"text is empty"] autorelease];
  }
  id<JavaUtilList> ranges = [((id<JavaUtilMap>) nil_chk(attributeMap_)) getWithId:attribute];
  if (ranges == nil) {
    ranges = [[[JavaUtilArrayList alloc] initWithInt:1] autorelease];
    [attributeMap_ putWithId:attribute withId:ranges];
  }
  else {
    [ranges clear];
  }
  [((id<JavaUtilList>) nil_chk(ranges)) addWithId:[[[JavaTextAttributedString_Range alloc] initWithInt:0 withInt:[text_ length] withId:value] autorelease]];
}

- (void)addAttributeWithJavaTextAttributedCharacterIterator_Attribute:(JavaTextAttributedCharacterIterator_Attribute *)attribute
                                                               withId:(id)value
                                                              withInt:(int)start
                                                              withInt:(int)end {
  if (attribute == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"attribute == null"] autorelease];
  }
  if (start < 0 || end > [((NSString *) nil_chk(text_)) length] || start >= end) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  if (value == nil) {
    return;
  }
  id<JavaUtilList> ranges = [((id<JavaUtilMap>) nil_chk(attributeMap_)) getWithId:attribute];
  if (ranges == nil) {
    ranges = [[[JavaUtilArrayList alloc] initWithInt:1] autorelease];
    [ranges addWithId:[[[JavaTextAttributedString_Range alloc] initWithInt:start withInt:end withId:value] autorelease]];
    [attributeMap_ putWithId:attribute withId:ranges];
    return;
  }
  id<JavaUtilListIterator> it = [((id<JavaUtilList>) nil_chk(ranges)) listIterator];
  while ([((id<JavaUtilListIterator>) nil_chk(it)) hasNext]) {
    JavaTextAttributedString_Range *range = [it next];
    if (end <= ((JavaTextAttributedString_Range *) nil_chk(range))->start_) {
      [it previous];
      break;
    }
    else if (start < range->end_ || (start == range->end_ && [nil_chk(value) isEqual:range->value_])) {
      JavaTextAttributedString_Range *r1 = nil, *r3;
      [it remove];
      r1 = [[[JavaTextAttributedString_Range alloc] initWithInt:range->start_ withInt:start withId:range->value_] autorelease];
      r3 = [[[JavaTextAttributedString_Range alloc] initWithInt:end withInt:range->end_ withId:range->value_] autorelease];
      while (end > range->end_ && [it hasNext]) {
        range = [it next];
        if (end <= ((JavaTextAttributedString_Range *) nil_chk(range))->end_) {
          if (end > range->start_ || (end == range->start_ && [nil_chk(value) isEqual:range->value_])) {
            [it remove];
            r3 = [[[JavaTextAttributedString_Range alloc] initWithInt:end withInt:range->end_ withId:range->value_] autorelease];
            break;
          }
        }
        else {
          [it remove];
        }
      }
      if ([nil_chk(value) isEqual:r1->value_]) {
        if ([value isEqual:r3->value_]) {
          [it addWithId:[[[JavaTextAttributedString_Range alloc] initWithInt:r1->start_ < start ? r1->start_ : start withInt:r3->end_ > end ? r3->end_ : end withId:r1->value_] autorelease]];
        }
        else {
          [it addWithId:[[[JavaTextAttributedString_Range alloc] initWithInt:r1->start_ < start ? r1->start_ : start withInt:end withId:r1->value_] autorelease]];
          if (r3->start_ < r3->end_) {
            [it addWithId:r3];
          }
        }
      }
      else {
        if ([value isEqual:r3->value_]) {
          if (r1->start_ < r1->end_) {
            [it addWithId:r1];
          }
          [it addWithId:[[[JavaTextAttributedString_Range alloc] initWithInt:start withInt:r3->end_ > end ? r3->end_ : end withId:r3->value_] autorelease]];
        }
        else {
          if (r1->start_ < r1->end_) {
            [it addWithId:r1];
          }
          [it addWithId:[[[JavaTextAttributedString_Range alloc] initWithInt:start withInt:end withId:value] autorelease]];
          if (r3->start_ < r3->end_) {
            [it addWithId:r3];
          }
        }
      }
      return;
    }
  }
  [it addWithId:[[[JavaTextAttributedString_Range alloc] initWithInt:start withInt:end withId:value] autorelease]];
}

- (void)addAttributesWithJavaUtilMap:(id<JavaUtilMap>)attributes
                             withInt:(int)start
                             withInt:(int)end {
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(attributes)) entrySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    id<JavaUtilMap_Entry> entry = (id<JavaUtilMap_Entry>) check_protocol_cast([it next], @protocol(JavaUtilMap_Entry));
    [self addAttributeWithJavaTextAttributedCharacterIterator_Attribute:(JavaTextAttributedCharacterIterator_Attribute *) check_class_cast([((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey], [JavaTextAttributedCharacterIterator_Attribute class]) withId:[entry getValue] withInt:start withInt:end];
  }
}

- (id<JavaTextAttributedCharacterIterator>)getIterator {
  return [[[JavaTextAttributedString_AttributedIterator alloc] initWithJavaTextAttributedString:self] autorelease];
}

- (id<JavaTextAttributedCharacterIterator>)getIteratorWithJavaTextAttributedCharacterIterator_AttributeArray:(IOSObjectArray *)attributes {
  return [[[JavaTextAttributedString_AttributedIterator alloc] initWithJavaTextAttributedString:self withJavaTextAttributedCharacterIterator_AttributeArray:attributes withInt:0 withInt:[((NSString *) nil_chk(text_)) length]] autorelease];
}

- (id<JavaTextAttributedCharacterIterator>)getIteratorWithJavaTextAttributedCharacterIterator_AttributeArray:(IOSObjectArray *)attributes
                                                                                                     withInt:(int)start
                                                                                                     withInt:(int)end {
  return [[[JavaTextAttributedString_AttributedIterator alloc] initWithJavaTextAttributedString:self withJavaTextAttributedCharacterIterator_AttributeArray:attributes withInt:start withInt:end] autorelease];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaTextAttributedString_set_attributeMap_(self, nil);
  JavaTextAttributedString_set_text_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaTextAttributedString *)other {
  [super copyAllFieldsTo:other];
  JavaTextAttributedString_set_attributeMap_(other, attributeMap_);
  JavaTextAttributedString_set_text_(other, text_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:text_ name:@"text"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:attributeMap_ name:@"attributeMap"]];
  return result;
}

@end
@implementation JavaTextAttributedString_Range

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithInt:(int)s
          withInt:(int)e
           withId:(id)v {
  if (self = [super init]) {
    start_ = s;
    end_ = e;
    JavaTextAttributedString_Range_set_value_(self, v);
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaTextAttributedString_Range_set_value_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaTextAttributedString_Range *)other {
  [super copyAllFieldsTo:other];
  other->end_ = end_;
  other->start_ = start_;
  JavaTextAttributedString_Range_set_value_(other, value_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:value_ name:@"value"]];
  return result;
}

@end
@implementation JavaTextAttributedString_AttributedIterator

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaTextAttributedString:(JavaTextAttributedString *)attrString {
  if (self = [super init]) {
    JavaTextAttributedString_AttributedIterator_set_attrString_(self, attrString);
    begin_ = 0;
    end_ = [((NSString *) nil_chk(((JavaTextAttributedString *) nil_chk(attrString))->text_)) length];
    offset_ = 0;
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaTextAttributedString:(JavaTextAttributedString *)attrString
withJavaTextAttributedCharacterIterator_AttributeArray:(IOSObjectArray *)attributes
                               withInt:(int)begin
                               withInt:(int)end {
  if (self = [super init]) {
    if (begin < 0 || end > [((NSString *) nil_chk(((JavaTextAttributedString *) nil_chk(attrString))->text_)) length] || begin > end) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
    self->begin_ = begin;
    self->end_ = end;
    offset_ = begin;
    JavaTextAttributedString_AttributedIterator_set_attrString_(self, attrString);
    if (attributes != nil) {
      JavaUtilHashSet *set = [[[JavaUtilHashSet alloc] initWithInt:((int) [attributes count] * 4 / 3) + 1] autorelease];
      for (int i = (int) [attributes count]; --i >= 0; ) {
        [set addWithId:IOSObjectArray_Get(attributes, i)];
      }
      JavaTextAttributedString_AttributedIterator_set_attributesAllowed_(self, set);
    }
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)clone {
  @try {
    JavaTextAttributedString_AttributedIterator *clone = (JavaTextAttributedString_AttributedIterator *) check_class_cast([super clone], [JavaTextAttributedString_AttributedIterator class]);
    if (attributesAllowed_ != nil) {
      JavaTextAttributedString_AttributedIterator_set_attributesAllowed_(nil_chk(clone), (JavaUtilHashSet *) check_class_cast([attributesAllowed_ clone], [JavaUtilHashSet class]));
    }
    return clone;
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw [[[JavaLangAssertionError alloc] initWithId:e] autorelease];
  }
}

- (unichar)current {
  if (offset_ == end_) {
    return JavaTextCharacterIterator_DONE;
  }
  return [((NSString *) nil_chk(((JavaTextAttributedString *) nil_chk(attrString_))->text_)) charAtWithInt:offset_];
}

- (unichar)first {
  if (begin_ == end_) {
    return JavaTextCharacterIterator_DONE;
  }
  offset_ = begin_;
  return [((NSString *) nil_chk(((JavaTextAttributedString *) nil_chk(attrString_))->text_)) charAtWithInt:offset_];
}

- (int)getBeginIndex {
  return begin_;
}

- (int)getEndIndex {
  return end_;
}

- (int)getIndex {
  return offset_;
}

- (BOOL)inRangeWithJavaTextAttributedString_Range:(JavaTextAttributedString_Range *)range {
  if (!([((JavaTextAttributedString_Range *) nil_chk(range))->value_ isKindOfClass:[JavaTextAnnotation class]])) {
    return YES;
  }
  return range->start_ >= begin_ && range->start_ < end_ && range->end_ > begin_ && range->end_ <= end_;
}

- (BOOL)inRangeWithJavaUtilList:(id<JavaUtilList>)ranges {
  id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(ranges)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    JavaTextAttributedString_Range *range = [it next];
    if (((JavaTextAttributedString_Range *) nil_chk(range))->start_ >= begin_ && range->start_ < end_) {
      return !([range->value_ isKindOfClass:[JavaTextAnnotation class]]) || (range->end_ > begin_ && range->end_ <= end_);
    }
    else if (range->end_ > begin_ && range->end_ <= end_) {
      return !([range->value_ isKindOfClass:[JavaTextAnnotation class]]) || (range->start_ >= begin_ && range->start_ < end_);
    }
  }
  return NO;
}

- (id<JavaUtilSet>)getAllAttributeKeys {
  if (begin_ == 0 && end_ == [((NSString *) nil_chk(((JavaTextAttributedString *) nil_chk(attrString_))->text_)) length] && attributesAllowed_ == nil) {
    return [((id<JavaUtilMap>) nil_chk(attrString_->attributeMap_)) keySet];
  }
  id<JavaUtilSet> result = [[[JavaUtilHashSet alloc] initWithInt:([((id<JavaUtilMap>) nil_chk(((JavaTextAttributedString *) nil_chk(attrString_))->attributeMap_)) size] * 4 / 3) + 1] autorelease];
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([attrString_->attributeMap_ entrySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    id<JavaUtilMap_Entry> entry = [it next];
    if (attributesAllowed_ == nil || [attributesAllowed_ containsWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey]]) {
      id<JavaUtilList> ranges = [((id<JavaUtilMap_Entry>) nil_chk(entry)) getValue];
      if ([self inRangeWithJavaUtilList:ranges]) {
        [result addWithId:[entry getKey]];
      }
    }
  }
  return result;
}

- (id)currentValueWithJavaUtilList:(id<JavaUtilList>)ranges {
  id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(ranges)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    JavaTextAttributedString_Range *range = [it next];
    if (offset_ >= ((JavaTextAttributedString_Range *) nil_chk(range))->start_ && offset_ < range->end_) {
      return [self inRangeWithJavaTextAttributedString_Range:range] ? range->value_ : nil;
    }
  }
  return nil;
}

- (id)getAttributeWithJavaTextAttributedCharacterIterator_Attribute:(JavaTextAttributedCharacterIterator_Attribute *)attribute {
  if (attributesAllowed_ != nil && ![attributesAllowed_ containsWithId:attribute]) {
    return nil;
  }
  JavaUtilArrayList *ranges = (JavaUtilArrayList *) check_class_cast([((id<JavaUtilMap>) nil_chk(((JavaTextAttributedString *) nil_chk(attrString_))->attributeMap_)) getWithId:attribute], [JavaUtilArrayList class]);
  if (ranges == nil) {
    return nil;
  }
  return [self currentValueWithJavaUtilList:ranges];
}

- (id<JavaUtilMap>)getAttributes {
  id<JavaUtilMap> result = [[[JavaUtilHashMap alloc] initWithInt:([((id<JavaUtilMap>) nil_chk(((JavaTextAttributedString *) nil_chk(attrString_))->attributeMap_)) size] * 4 / 3) + 1] autorelease];
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([attrString_->attributeMap_ entrySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    id<JavaUtilMap_Entry> entry = [it next];
    if (attributesAllowed_ == nil || [attributesAllowed_ containsWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey]]) {
      id value = [self currentValueWithJavaUtilList:[((id<JavaUtilMap_Entry>) nil_chk(entry)) getValue]];
      if (value != nil) {
        [result putWithId:[entry getKey] withId:value];
      }
    }
  }
  return result;
}

- (int)getRunLimit {
  return [self getRunLimitWithJavaUtilSet:[self getAllAttributeKeys]];
}

- (int)runLimitWithJavaUtilList:(id<JavaUtilList>)ranges {
  int result = end_;
  id<JavaUtilListIterator> it = [ranges listIteratorWithInt:[((id<JavaUtilList>) nil_chk(ranges)) size]];
  while ([((id<JavaUtilListIterator>) nil_chk(it)) hasPrevious]) {
    JavaTextAttributedString_Range *range = [it previous];
    if (((JavaTextAttributedString_Range *) nil_chk(range))->end_ <= begin_) {
      break;
    }
    if (offset_ >= range->start_ && offset_ < range->end_) {
      return [self inRangeWithJavaTextAttributedString_Range:range] ? range->end_ : result;
    }
    else if (offset_ >= range->end_) {
      break;
    }
    result = range->start_;
  }
  return result;
}

- (int)getRunLimitWithJavaTextAttributedCharacterIterator_Attribute:(JavaTextAttributedCharacterIterator_Attribute *)attribute {
  if (attributesAllowed_ != nil && ![attributesAllowed_ containsWithId:attribute]) {
    return end_;
  }
  JavaUtilArrayList *ranges = (JavaUtilArrayList *) check_class_cast([((id<JavaUtilMap>) nil_chk(((JavaTextAttributedString *) nil_chk(attrString_))->attributeMap_)) getWithId:attribute], [JavaUtilArrayList class]);
  if (ranges == nil) {
    return end_;
  }
  return [self runLimitWithJavaUtilList:ranges];
}

- (int)getRunLimitWithJavaUtilSet:(id<JavaUtilSet>)attributes {
  int limit = end_;
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(attributes)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    JavaTextAttributedCharacterIterator_Attribute *attribute = [it next];
    int newLimit = [self getRunLimitWithJavaTextAttributedCharacterIterator_Attribute:attribute];
    if (newLimit < limit) {
      limit = newLimit;
    }
  }
  return limit;
}

- (int)getRunStart {
  return [self getRunStartWithJavaUtilSet:[self getAllAttributeKeys]];
}

- (int)runStartWithJavaUtilList:(id<JavaUtilList>)ranges {
  int result = begin_;
  id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(ranges)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    JavaTextAttributedString_Range *range = [it next];
    if (((JavaTextAttributedString_Range *) nil_chk(range))->start_ >= end_) {
      break;
    }
    if (offset_ >= range->start_ && offset_ < range->end_) {
      return [self inRangeWithJavaTextAttributedString_Range:range] ? range->start_ : result;
    }
    else if (offset_ < range->start_) {
      break;
    }
    result = range->end_;
  }
  return result;
}

- (int)getRunStartWithJavaTextAttributedCharacterIterator_Attribute:(JavaTextAttributedCharacterIterator_Attribute *)attribute {
  if (attributesAllowed_ != nil && ![attributesAllowed_ containsWithId:attribute]) {
    return begin_;
  }
  JavaUtilArrayList *ranges = (JavaUtilArrayList *) check_class_cast([((id<JavaUtilMap>) nil_chk(((JavaTextAttributedString *) nil_chk(attrString_))->attributeMap_)) getWithId:attribute], [JavaUtilArrayList class]);
  if (ranges == nil) {
    return begin_;
  }
  return [self runStartWithJavaUtilList:ranges];
}

- (int)getRunStartWithJavaUtilSet:(id<JavaUtilSet>)attributes {
  int start = begin_;
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(attributes)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    JavaTextAttributedCharacterIterator_Attribute *attribute = [it next];
    int newStart = [self getRunStartWithJavaTextAttributedCharacterIterator_Attribute:attribute];
    if (newStart > start) {
      start = newStart;
    }
  }
  return start;
}

- (unichar)last {
  if (begin_ == end_) {
    return JavaTextCharacterIterator_DONE;
  }
  offset_ = end_ - 1;
  return [((NSString *) nil_chk(((JavaTextAttributedString *) nil_chk(attrString_))->text_)) charAtWithInt:offset_];
}

- (unichar)next {
  if (offset_ >= (end_ - 1)) {
    offset_ = end_;
    return JavaTextCharacterIterator_DONE;
  }
  return [((NSString *) nil_chk(((JavaTextAttributedString *) nil_chk(attrString_))->text_)) charAtWithInt:++offset_];
}

- (unichar)previous {
  if (offset_ == begin_) {
    return JavaTextCharacterIterator_DONE;
  }
  return [((NSString *) nil_chk(((JavaTextAttributedString *) nil_chk(attrString_))->text_)) charAtWithInt:--offset_];
}

- (unichar)setIndexWithInt:(int)location {
  if (location < begin_ || location > end_) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  offset_ = location;
  if (offset_ == end_) {
    return JavaTextCharacterIterator_DONE;
  }
  return [((NSString *) nil_chk(((JavaTextAttributedString *) nil_chk(attrString_))->text_)) charAtWithInt:offset_];
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaTextAttributedString_AttributedIterator_set_attributesAllowed_(self, nil);
  JavaTextAttributedString_AttributedIterator_set_attrString_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaTextAttributedString_AttributedIterator *)other {
  [super copyAllFieldsTo:other];
  JavaTextAttributedString_AttributedIterator_set_attrString_(other, attrString_);
  JavaTextAttributedString_AttributedIterator_set_attributesAllowed_(other, attributesAllowed_);
  other->begin_ = begin_;
  other->end_ = end_;
  other->offset_ = offset_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:attrString_ name:@"attrString"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:attributesAllowed_ name:@"attributesAllowed"]];
  return result;
}

@end
