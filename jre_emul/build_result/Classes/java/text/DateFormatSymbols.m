//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Boolean.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NullPointerException.h"
#include "java/text/DateFormatSymbols.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Arrays.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"
#include "libcore/icu/ICU.h"
#include "libcore/icu/LocaleData.h"
#include "libcore/icu/TimeZoneNames.h"

@implementation JavaTextDateFormatSymbols

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (IOSObjectArray *)internalZoneStrings {
  @synchronized(self) {
    {
      if (zoneStrings_ == nil) {
        JavaTextDateFormatSymbols_set_zoneStrings_(self, [LibcoreIcuTimeZoneNames getZoneStringsWithJavaUtilLocale:locale_]);
      }
      return zoneStrings_;
    }
  }
}

- (id)init {
  return JreMemDebugAdd([self initJavaTextDateFormatSymbolsWithJavaUtilLocale:[JavaUtilLocale getDefault]]);
}

- (id)initJavaTextDateFormatSymbolsWithJavaUtilLocale:(JavaUtilLocale *)locale {
  if (self = [super init]) {
    JavaTextDateFormatSymbols_set_locale_(self, locale);
    JavaTextDateFormatSymbols_set_localPatternChars_(self, [JavaTextSimpleDateFormat PATTERN_CHARS]);
    JavaTextDateFormatSymbols_set_localeData_(self, [LibcoreIcuLocaleData getWithJavaUtilLocale:locale]);
    JavaTextDateFormatSymbols_set_ampms_(self, ((LibcoreIcuLocaleData *) nil_chk(localeData_))->amPm_);
    JavaTextDateFormatSymbols_set_eras_(self, localeData_->eras_);
    JavaTextDateFormatSymbols_set_months_(self, localeData_->longMonthNames_);
    JavaTextDateFormatSymbols_set_shortMonths_(self, localeData_->shortMonthNames_);
    JavaTextDateFormatSymbols_set_weekdays_(self, localeData_->longWeekdayNames_);
    JavaTextDateFormatSymbols_set_shortWeekdays_(self, localeData_->shortWeekdayNames_);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return [self initJavaTextDateFormatSymbolsWithJavaUtilLocale:locale];
}

+ (JavaTextDateFormatSymbols *)getInstance {
  return [JavaTextDateFormatSymbols getInstanceWithJavaUtilLocale:[JavaUtilLocale getDefault]];
}

+ (JavaTextDateFormatSymbols *)getInstanceWithJavaUtilLocale:(JavaUtilLocale *)locale {
  if (locale == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"locale == null"] autorelease];
  }
  return [[[JavaTextDateFormatSymbols alloc] initWithJavaUtilLocale:locale] autorelease];
}

+ (IOSObjectArray *)getAvailableLocales {
  return [LibcoreIcuICU getAvailableDateFormatSymbolsLocales];
}

- (id)clone {
  @try {
    return [super clone];
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw [[[JavaLangAssertionError alloc] init] autorelease];
  }
}

- (BOOL)isEqual:(id)object {
  if (self == object) {
    return YES;
  }
  if (!([object isKindOfClass:[JavaTextDateFormatSymbols class]])) {
    return NO;
  }
  JavaTextDateFormatSymbols *rhs = (JavaTextDateFormatSymbols *) check_class_cast(object, [JavaTextDateFormatSymbols class]);
  return [((NSString *) nil_chk(localPatternChars_)) isEqual:((JavaTextDateFormatSymbols *) nil_chk(rhs))->localPatternChars_] && [JavaUtilArrays equalsWithNSObjectArray:ampms_ withNSObjectArray:rhs->ampms_] && [JavaUtilArrays equalsWithNSObjectArray:eras_ withNSObjectArray:rhs->eras_] && [JavaUtilArrays equalsWithNSObjectArray:months_ withNSObjectArray:rhs->months_] && [JavaUtilArrays equalsWithNSObjectArray:shortMonths_ withNSObjectArray:rhs->shortMonths_] && [JavaUtilArrays equalsWithNSObjectArray:shortWeekdays_ withNSObjectArray:rhs->shortWeekdays_] && [JavaUtilArrays equalsWithNSObjectArray:weekdays_ withNSObjectArray:rhs->weekdays_] && [JavaTextDateFormatSymbols timeZoneStringsEqualWithJavaTextDateFormatSymbols:self withJavaTextDateFormatSymbols:rhs];
}

+ (BOOL)timeZoneStringsEqualWithJavaTextDateFormatSymbols:(JavaTextDateFormatSymbols *)lhs
                            withJavaTextDateFormatSymbols:(JavaTextDateFormatSymbols *)rhs {
  if (((JavaTextDateFormatSymbols *) nil_chk(lhs))->zoneStrings_ == nil && ((JavaTextDateFormatSymbols *) nil_chk(rhs))->zoneStrings_ == nil && [((JavaUtilLocale *) nil_chk(lhs->locale_)) isEqual:rhs->locale_]) {
    return YES;
  }
  return [JavaUtilArrays deepEqualsWithNSObjectArray:[lhs internalZoneStrings] withNSObjectArray:[((JavaTextDateFormatSymbols *) nil_chk(rhs)) internalZoneStrings]];
}

- (NSString *)description {
  return [NSString stringWithFormat:@"%@[amPmStrings=%@,customZoneStrings=%@,eras=%@,localPatternChars=%@,months=%@,shortMonths=%@,shortWeekdays=%@,weekdays=%@,zoneStrings=[%@...]]", [[self getClass] getName], [JavaUtilArrays toStringWithNSObjectArray:ampms_], [JavaLangBoolean toStringWithBoolean:customZoneStrings_], [JavaUtilArrays toStringWithNSObjectArray:eras_], localPatternChars_, [JavaUtilArrays toStringWithNSObjectArray:months_], [JavaUtilArrays toStringWithNSObjectArray:shortMonths_], [JavaUtilArrays toStringWithNSObjectArray:shortWeekdays_], [JavaUtilArrays toStringWithNSObjectArray:weekdays_], [JavaUtilArrays toStringWithNSObjectArray:IOSObjectArray_Get(nil_chk([self internalZoneStrings]), 0)]];
}

- (IOSObjectArray *)getAmPmStrings {
  return [((IOSObjectArray *) nil_chk(ampms_)) clone];
}

- (IOSObjectArray *)getEras {
  return [((IOSObjectArray *) nil_chk(eras_)) clone];
}

- (NSString *)getLocalPatternChars {
  return localPatternChars_;
}

- (IOSObjectArray *)getMonths {
  return [((IOSObjectArray *) nil_chk(months_)) clone];
}

- (IOSObjectArray *)getShortMonths {
  return [((IOSObjectArray *) nil_chk(shortMonths_)) clone];
}

- (IOSObjectArray *)getShortWeekdays {
  return [((IOSObjectArray *) nil_chk(shortWeekdays_)) clone];
}

- (IOSObjectArray *)getWeekdays {
  return [((IOSObjectArray *) nil_chk(weekdays_)) clone];
}

- (IOSObjectArray *)getZoneStrings {
  IOSObjectArray *result = [JavaTextDateFormatSymbols clone2dStringArrayWithNSStringArray2:[self internalZoneStrings]];
  {
    IOSObjectArray *a__ = result;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSObjectArray *zone = (*b__++);
      NSString *id_ = IOSObjectArray_Get(nil_chk(zone), 0);
      if (IOSObjectArray_Get(zone, 1) == nil) {
        IOSObjectArray_Set(zone, 1, [((JavaUtilTimeZone *) nil_chk([JavaUtilTimeZone getTimeZoneWithNSString:id_])) getDisplayNameWithBoolean:NO withInt:JavaUtilTimeZone_LONG withJavaUtilLocale:locale_]);
      }
      if (IOSObjectArray_Get(zone, 2) == nil) {
        IOSObjectArray_Set(zone, 2, [((JavaUtilTimeZone *) nil_chk([JavaUtilTimeZone getTimeZoneWithNSString:id_])) getDisplayNameWithBoolean:NO withInt:JavaUtilTimeZone_SHORT withJavaUtilLocale:locale_]);
      }
      if (IOSObjectArray_Get(zone, 3) == nil) {
        IOSObjectArray_Set(zone, 3, [((JavaUtilTimeZone *) nil_chk([JavaUtilTimeZone getTimeZoneWithNSString:id_])) getDisplayNameWithBoolean:YES withInt:JavaUtilTimeZone_LONG withJavaUtilLocale:locale_]);
      }
      if (IOSObjectArray_Get(zone, 4) == nil) {
        IOSObjectArray_Set(zone, 4, [((JavaUtilTimeZone *) nil_chk([JavaUtilTimeZone getTimeZoneWithNSString:id_])) getDisplayNameWithBoolean:YES withInt:JavaUtilTimeZone_SHORT withJavaUtilLocale:locale_]);
      }
    }
  }
  return result;
}

+ (IOSObjectArray *)clone2dStringArrayWithNSStringArray2:(IOSObjectArray *)array {
  IOSObjectArray *result = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(array)) count] type:[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[NSString class]]]];
  for (int i = 0; i < (int) [array count]; ++i) {
    IOSObjectArray_Set(result, i, [((IOSObjectArray *) nil_chk(IOSObjectArray_Get(array, i))) clone]);
  }
  return result;
}

- (NSUInteger)hash {
  IOSObjectArray *zoneStrings = [self internalZoneStrings];
  int hashCode;
  hashCode = [((NSString *) nil_chk(localPatternChars_)) hash];
  {
    IOSObjectArray *a__ = ampms_;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *element = (*b__++);
      hashCode += [((NSString *) nil_chk(element)) hash];
    }
  }
  {
    IOSObjectArray *a__ = eras_;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *element = (*b__++);
      hashCode += [((NSString *) nil_chk(element)) hash];
    }
  }
  {
    IOSObjectArray *a__ = months_;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *element = (*b__++);
      hashCode += [((NSString *) nil_chk(element)) hash];
    }
  }
  {
    IOSObjectArray *a__ = shortMonths_;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *element = (*b__++);
      hashCode += [((NSString *) nil_chk(element)) hash];
    }
  }
  {
    IOSObjectArray *a__ = shortWeekdays_;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *element = (*b__++);
      hashCode += [((NSString *) nil_chk(element)) hash];
    }
  }
  {
    IOSObjectArray *a__ = weekdays_;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *element = (*b__++);
      hashCode += [((NSString *) nil_chk(element)) hash];
    }
  }
  {
    IOSObjectArray *a__ = zoneStrings;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSObjectArray *element = (*b__++);
      for (int j = 0; j < (int) [((IOSObjectArray *) nil_chk(element)) count]; j++) {
        if (IOSObjectArray_Get(element, j) != nil) {
          hashCode += [((NSString *) nil_chk(IOSObjectArray_Get(element, j))) hash];
        }
      }
    }
  }
  return hashCode;
}

- (void)setAmPmStringsWithNSStringArray:(IOSObjectArray *)data {
  JavaTextDateFormatSymbols_set_ampms_(self, [((IOSObjectArray *) nil_chk(data)) clone]);
}

- (void)setErasWithNSStringArray:(IOSObjectArray *)data {
  JavaTextDateFormatSymbols_set_eras_(self, [((IOSObjectArray *) nil_chk(data)) clone]);
}

- (void)setLocalPatternCharsWithNSString:(NSString *)data {
  if (data == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"data == null"] autorelease];
  }
  JavaTextDateFormatSymbols_set_localPatternChars_(self, data);
}

- (void)setMonthsWithNSStringArray:(IOSObjectArray *)data {
  JavaTextDateFormatSymbols_set_months_(self, [((IOSObjectArray *) nil_chk(data)) clone]);
}

- (void)setShortMonthsWithNSStringArray:(IOSObjectArray *)data {
  JavaTextDateFormatSymbols_set_shortMonths_(self, [((IOSObjectArray *) nil_chk(data)) clone]);
}

- (void)setShortWeekdaysWithNSStringArray:(IOSObjectArray *)data {
  JavaTextDateFormatSymbols_set_shortWeekdays_(self, [((IOSObjectArray *) nil_chk(data)) clone]);
}

- (void)setWeekdaysWithNSStringArray:(IOSObjectArray *)data {
  JavaTextDateFormatSymbols_set_weekdays_(self, [((IOSObjectArray *) nil_chk(data)) clone]);
}

- (void)setZoneStringsWithNSStringArray2:(IOSObjectArray *)zoneStrings {
  if (zoneStrings == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"zoneStrings == null"] autorelease];
  }
  {
    IOSObjectArray *a__ = zoneStrings;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSObjectArray *row = (*b__++);
      if ((int) [((IOSObjectArray *) nil_chk(row)) count] < 5) {
        @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"%@.length < 5", [JavaUtilArrays toStringWithNSObjectArray:row]]] autorelease];
      }
    }
  }
  JavaTextDateFormatSymbols_set_zoneStrings_(self, [JavaTextDateFormatSymbols clone2dStringArrayWithNSStringArray2:zoneStrings]);
  self->customZoneStrings_ = YES;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaTextDateFormatSymbols_set_locale_(self, nil);
  JavaTextDateFormatSymbols_set_zoneStrings_(self, nil);
  JavaTextDateFormatSymbols_set_localeData_(self, nil);
  JavaTextDateFormatSymbols_set_weekdays_(self, nil);
  JavaTextDateFormatSymbols_set_shortWeekdays_(self, nil);
  JavaTextDateFormatSymbols_set_shortMonths_(self, nil);
  JavaTextDateFormatSymbols_set_months_(self, nil);
  JavaTextDateFormatSymbols_set_eras_(self, nil);
  JavaTextDateFormatSymbols_set_ampms_(self, nil);
  JavaTextDateFormatSymbols_set_localPatternChars_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaTextDateFormatSymbols *)other {
  [super copyAllFieldsTo:other];
  JavaTextDateFormatSymbols_set_ampms_(other, ampms_);
  other->customZoneStrings_ = customZoneStrings_;
  JavaTextDateFormatSymbols_set_eras_(other, eras_);
  JavaTextDateFormatSymbols_set_localPatternChars_(other, localPatternChars_);
  JavaTextDateFormatSymbols_set_locale_(other, locale_);
  JavaTextDateFormatSymbols_set_localeData_(other, localeData_);
  JavaTextDateFormatSymbols_set_months_(other, months_);
  JavaTextDateFormatSymbols_set_shortMonths_(other, shortMonths_);
  JavaTextDateFormatSymbols_set_shortWeekdays_(other, shortWeekdays_);
  JavaTextDateFormatSymbols_set_weekdays_(other, weekdays_);
  JavaTextDateFormatSymbols_set_zoneStrings_(other, zoneStrings_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:localPatternChars_ name:@"localPatternChars"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:ampms_ name:@"ampms"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:eras_ name:@"eras"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:months_ name:@"months"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:shortMonths_ name:@"shortMonths"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:shortWeekdays_ name:@"shortWeekdays"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:weekdays_ name:@"weekdays"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:localeData_ name:@"localeData"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:zoneStrings_ name:@"zoneStrings"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:locale_ name:@"locale"]];
  return result;
}

@end
