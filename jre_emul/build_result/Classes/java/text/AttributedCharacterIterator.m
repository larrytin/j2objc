//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/text/AttributedCharacterIterator.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/io/InvalidObjectException.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/Modifier.h"
#include "java/text/AttributedCharacterIterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@implementation JavaTextAttributedCharacterIterator_Attribute

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaTextAttributedCharacterIterator_Attribute_INPUT_METHOD_SEGMENT_ name:@"JavaTextAttributedCharacterIterator_Attribute_INPUT_METHOD_SEGMENT_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaTextAttributedCharacterIterator_Attribute_LANGUAGE_ name:@"JavaTextAttributedCharacterIterator_Attribute_LANGUAGE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaTextAttributedCharacterIterator_Attribute_READING_ name:@"JavaTextAttributedCharacterIterator_Attribute_READING_"]];
  return result;
}

static JavaTextAttributedCharacterIterator_Attribute * JavaTextAttributedCharacterIterator_Attribute_INPUT_METHOD_SEGMENT_;
static JavaTextAttributedCharacterIterator_Attribute * JavaTextAttributedCharacterIterator_Attribute_LANGUAGE_;
static JavaTextAttributedCharacterIterator_Attribute * JavaTextAttributedCharacterIterator_Attribute_READING_;

+ (JavaTextAttributedCharacterIterator_Attribute *)INPUT_METHOD_SEGMENT {
  return JavaTextAttributedCharacterIterator_Attribute_INPUT_METHOD_SEGMENT_;
}

+ (JavaTextAttributedCharacterIterator_Attribute *)LANGUAGE {
  return JavaTextAttributedCharacterIterator_Attribute_LANGUAGE_;
}

+ (JavaTextAttributedCharacterIterator_Attribute *)READING {
  return JavaTextAttributedCharacterIterator_Attribute_READING_;
}

- (id)initWithNSString:(NSString *)name {
  if (self = [super init]) {
    JavaTextAttributedCharacterIterator_Attribute_set_name_(self, name);
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)isEqual:(id)object {
  return self == object;
}

- (NSString *)getName {
  return name_;
}

- (NSUInteger)hash {
  return [super hash];
}

- (id)readResolve {
  @try {
    {
      IOSObjectArray *a__ = [[self getClass] getFields];
      id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      id const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaLangReflectField *field = (*b__++);
        if ([((JavaLangReflectField *) nil_chk(field)) getType] == [self getClass] && [JavaLangReflectModifier isStaticWithInt:[field getModifiers]]) {
          JavaTextAttributedCharacterIterator_Attribute *candidate = (JavaTextAttributedCharacterIterator_Attribute *) check_class_cast([field getWithId:nil], [JavaTextAttributedCharacterIterator_Attribute class]);
          if ([((NSString *) nil_chk(name_)) isEqual:((JavaTextAttributedCharacterIterator_Attribute *) nil_chk(candidate))->name_]) {
            return candidate;
          }
        }
      }
    }
  }
  @catch (JavaLangIllegalAccessException *e) {
  }
  @throw [[[JavaIoInvalidObjectException alloc] initWithNSString:[NSString stringWithFormat:@"Failed to resolve %@", self]] autorelease];
}

+ (IOSObjectArray *)__exceptions_readResolve {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoInvalidObjectException getClass] } count:1 type:[IOSClass getClass]];
}

- (NSString *)description {
  return [NSString stringWithFormat:@"%@(%@)", [[self getClass] getName], [self getName]];
}

+ (void)initialize {
  if (self == [JavaTextAttributedCharacterIterator_Attribute class]) {
    JreOperatorRetainedAssign(&JavaTextAttributedCharacterIterator_Attribute_INPUT_METHOD_SEGMENT_, nil, [[[JavaTextAttributedCharacterIterator_Attribute alloc] initWithNSString:@"input_method_segment"] autorelease]);
    JreOperatorRetainedAssign(&JavaTextAttributedCharacterIterator_Attribute_LANGUAGE_, nil, [[[JavaTextAttributedCharacterIterator_Attribute alloc] initWithNSString:@"language"] autorelease]);
    JreOperatorRetainedAssign(&JavaTextAttributedCharacterIterator_Attribute_READING_, nil, [[[JavaTextAttributedCharacterIterator_Attribute alloc] initWithNSString:@"reading"] autorelease]);
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaTextAttributedCharacterIterator_Attribute_set_name_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaTextAttributedCharacterIterator_Attribute *)other {
  [super copyAllFieldsTo:other];
  JavaTextAttributedCharacterIterator_Attribute_set_name_(other, name_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:name_ name:@"name"]];
  return result;
}

@end
