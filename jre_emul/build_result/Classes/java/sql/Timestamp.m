//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/sql/Timestamp.java
//
//  Created by retechretech on 13-9-4.
//

#include "IOSClass.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/sql/Timestamp.h"
#include "java/util/Date.h"

@implementation JavaSqlTimestamp

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaSqlTimestamp_TIME_FORMAT_REGEX_ name:@"JavaSqlTimestamp_TIME_FORMAT_REGEX_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaSqlTimestamp_PADDING_ name:@"JavaSqlTimestamp_PADDING_"]];
  return result;
}

static NSString * JavaSqlTimestamp_TIME_FORMAT_REGEX_ = @"[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}.*";
static NSString * JavaSqlTimestamp_PADDING_ = @"000000000";

+ (NSString *)TIME_FORMAT_REGEX {
  return JavaSqlTimestamp_TIME_FORMAT_REGEX_;
}

+ (NSString *)PADDING {
  return JavaSqlTimestamp_PADDING_;
}

- (id)initWithInt:(int)theYear
          withInt:(int)theMonth
          withInt:(int)theDate
          withInt:(int)theHour
          withInt:(int)theMinute
          withInt:(int)theSecond
          withInt:(int)theNano {
  if ((self = [super initWithInt:theYear withInt:theMonth withInt:theDate withInt:theHour withInt:theMinute withInt:theSecond])) {
    if (theNano < 0 || theNano > 999999999) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"ns out of range: %d", theNano]] autorelease];
    }
    nanos_ = theNano;
    JreMemDebugAdd(self);
  }
  return self;
}

+ (IOSObjectArray *)__exceptions_JavaSqlTimestampWithInt_withInt_withInt_withInt_withInt_withInt_withInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangIllegalArgumentException getClass] } count:1 type:[IOSClass getClass]];
}

- (id)initWithLongInt:(long long int)theTime {
  if ((self = [super initWithLongInt:theTime])) {
    [self setTimeImplWithLongInt:theTime];
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)afterWithJavaSqlTimestamp:(JavaSqlTimestamp *)theTimestamp {
  long long int thisTime = [self getTime];
  long long int compareTime = [((JavaSqlTimestamp *) nil_chk(theTimestamp)) getTime];
  if (thisTime > compareTime) {
    return YES;
  }
  else if (thisTime < compareTime) {
    return NO;
  }
  else if ([self getNanos] > [theTimestamp getNanos]) {
    return YES;
  }
  else {
    return NO;
  }
}

- (BOOL)beforeWithJavaSqlTimestamp:(JavaSqlTimestamp *)theTimestamp {
  long long int thisTime = [self getTime];
  long long int compareTime = [((JavaSqlTimestamp *) nil_chk(theTimestamp)) getTime];
  if (thisTime < compareTime) {
    return YES;
  }
  else if (thisTime > compareTime) {
    return NO;
  }
  else if ([self getNanos] < [theTimestamp getNanos]) {
    return YES;
  }
  else {
    return NO;
  }
}

- (int)compareToWithId:(JavaUtilDate *)theObject {
  if (theObject != nil && ![theObject isKindOfClass:[JavaUtilDate class]]) {
    @throw [[[JavaLangClassCastException alloc] init] autorelease];
  }
  return [self compareToWithJavaSqlTimestamp:(JavaSqlTimestamp *) theObject];
}

+ (IOSObjectArray *)__exceptions_compareToWithJavaUtilDate_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangClassCastException getClass] } count:1 type:[IOSClass getClass]];
}

- (int)compareToWithJavaSqlTimestamp:(JavaSqlTimestamp *)theTimestamp {
  int result = [super compareToWithId:theTimestamp];
  if (result == 0) {
    int thisNano = [self getNanos];
    int thatNano = [((JavaSqlTimestamp *) nil_chk(theTimestamp)) getNanos];
    if (thisNano > thatNano) {
      return 1;
    }
    else if (thisNano == thatNano) {
      return 0;
    }
    else {
      return -1;
    }
  }
  return result;
}

- (BOOL)isEqual:(id)theObject {
  if ([theObject isKindOfClass:[JavaSqlTimestamp class]]) {
    return [self equalsWithJavaSqlTimestamp:(JavaSqlTimestamp *) theObject];
  }
  return NO;
}

- (BOOL)equalsWithJavaSqlTimestamp:(JavaSqlTimestamp *)theTimestamp {
  if (theTimestamp == nil) {
    return NO;
  }
  return ([self getTime] == [((JavaSqlTimestamp *) nil_chk(theTimestamp)) getTime]) && ([self getNanos] == [theTimestamp getNanos]);
}

- (int)getNanos {
  return nanos_;
}

- (long long int)getTime {
  long long int theTime = [super getTime];
  theTime = theTime + (nanos_ / 1000000);
  return theTime;
}

- (void)setNanosWithInt:(int)n {
  if ((n < 0) || (n > 999999999)) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Value out of range"] autorelease];
  }
  nanos_ = n;
}

+ (IOSObjectArray *)__exceptions_setNanosWithInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangIllegalArgumentException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)setTimeWithLongInt:(long long int)theTime {
  [self setTimeImplWithLongInt:theTime];
}

- (void)setTimeImplWithLongInt:(long long int)theTime {
  int milliseconds = (int) (theTime % 1000);
  theTime = theTime - milliseconds;
  if (milliseconds < 0) {
    theTime = theTime - 1000;
    milliseconds = 1000 + milliseconds;
  }
  [super setTimeWithLongInt:theTime];
  [self setNanosWithInt:milliseconds * 1000000];
}

- (NSString *)description {
  JavaLangStringBuilder *sb = [[[JavaLangStringBuilder alloc] initWithInt:29] autorelease];
  [self formatWithInt:([self getYear] + 1900) withInt:4 withJavaLangStringBuilder:sb];
  [sb appendWithUnichar:'-'];
  [self formatWithInt:([self getMonth] + 1) withInt:2 withJavaLangStringBuilder:sb];
  [sb appendWithUnichar:'-'];
  [self formatWithInt:[self getDate] withInt:2 withJavaLangStringBuilder:sb];
  [sb appendWithUnichar:' '];
  [self formatWithInt:[self getHours] withInt:2 withJavaLangStringBuilder:sb];
  [sb appendWithUnichar:':'];
  [self formatWithInt:[self getMinutes] withInt:2 withJavaLangStringBuilder:sb];
  [sb appendWithUnichar:':'];
  [self formatWithInt:[self getSeconds] withInt:2 withJavaLangStringBuilder:sb];
  [sb appendWithUnichar:'.'];
  if (nanos_ == 0) {
    [sb appendWithUnichar:'0'];
  }
  else {
    [self formatWithInt:nanos_ withInt:9 withJavaLangStringBuilder:sb];
    while ([sb charAtWithInt:[sb sequenceLength] - 1] == '0') {
      [sb setLengthWithInt:[sb sequenceLength] - 1];
    }
  }
  return [sb description];
}

- (void)formatWithInt:(int)date
              withInt:(int)digits
withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  NSString *str = [NSString valueOfInt:date];
  if (digits - [((NSString *) nil_chk(str)) length] > 0) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[((NSString *) nil_chk(JavaSqlTimestamp_PADDING_)) substring:0 endIndex:digits - [str length]]];
  }
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:str];
}

+ (JavaLangIllegalArgumentException *)badTimestampStringWithNSString:(NSString *)s {
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"%@%@'", @"Timestamp format must be yyyy-MM-dd HH:mm:ss.fffffffff; was '", s]] autorelease];
}

- (void)copyAllFieldsTo:(JavaSqlTimestamp *)other {
  [super copyAllFieldsTo:other];
  other->nanos_ = nanos_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  return result;
}

+ (IOSObjectArray *)__annotations_JavaSqlTimestampWithInt_withInt_withInt_withInt_withInt_withInt_withInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecatedImpl alloc] init] autorelease] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

@end
