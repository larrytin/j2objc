//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "IOSIntArray.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/nio/Buffer.h"
#include "java/nio/BufferFactory.h"
#include "java/nio/BufferOverflowException.h"
#include "java/nio/BufferUnderflowException.h"
#include "java/nio/ByteOrder.h"
#include "java/nio/IntBuffer.h"

@implementation JavaNioIntBuffer

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

+ (JavaNioIntBuffer *)allocateWithInt:(int)capacity {
  if (capacity < 0) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  return [JavaNioBufferFactory newIntBufferWithInt:capacity];
}

+ (JavaNioIntBuffer *)wrapWithIntArray:(IOSIntArray *)array {
  return [JavaNioIntBuffer wrapWithIntArray:array withInt:0 withInt:(int) [((IOSIntArray *) nil_chk(array)) count]];
}

+ (JavaNioIntBuffer *)wrapWithIntArray:(IOSIntArray *)array
                               withInt:(int)start
                               withInt:(int)len {
  if (array == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  if (start < 0 || len < 0 || (long long int) len + (long long int) start > (int) [((IOSIntArray *) nil_chk(array)) count]) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  JavaNioIntBuffer *buf = [JavaNioBufferFactory newIntBufferWithIntArray:array];
  ((JavaNioIntBuffer *) nil_chk(buf))->position__ = start;
  buf->limit__ = start + len;
  return buf;
}

- (id)initWithInt:(int)capacity {
  return JreMemDebugAdd([super initWithInt:capacity]);
}

- (IOSIntArray *)array {
  return [self protectedArray];
}

- (int)arrayOffset {
  return [self protectedArrayOffset];
}

- (JavaNioIntBuffer *)asReadOnlyBuffer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaNioIntBuffer *)compact {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)compareToWithId:(JavaNioIntBuffer *)otherBuffer {
  if (otherBuffer != nil && ![otherBuffer isKindOfClass:[JavaNioIntBuffer class]]) {
    @throw [[[JavaLangClassCastException alloc] init] autorelease];
  }
  int compareRemaining = ([self remaining] < [((JavaNioIntBuffer *) nil_chk(otherBuffer)) remaining]) ? [self remaining] : [otherBuffer remaining];
  int thisPos = position__;
  int otherPos = otherBuffer->position__;
  int thisByte, otherByte;
  while (compareRemaining > 0) {
    thisByte = [self getWithInt:thisPos];
    otherByte = [otherBuffer getWithInt:otherPos];
    if (thisByte != otherByte) {
      return thisByte < otherByte ? -1 : 1;
    }
    thisPos++;
    otherPos++;
    compareRemaining--;
  }
  return [self remaining] - [otherBuffer remaining];
}

- (JavaNioIntBuffer *)duplicate {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)isEqual:(id)other {
  if (!([other isKindOfClass:[JavaNioIntBuffer class]])) {
    return NO;
  }
  JavaNioIntBuffer *otherBuffer = (JavaNioIntBuffer *) check_class_cast(other, [JavaNioIntBuffer class]);
  if ([self remaining] != [((JavaNioIntBuffer *) nil_chk(otherBuffer)) remaining]) {
    return NO;
  }
  int myPosition = position__;
  int otherPosition = otherBuffer->position__;
  BOOL equalSoFar = YES;
  while (equalSoFar && (myPosition < limit__)) {
    equalSoFar = [self getWithInt:myPosition++] == [otherBuffer getWithInt:otherPosition++];
  }
  return equalSoFar;
}

- (int)get {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaNioIntBuffer *)getWithIntArray:(IOSIntArray *)dest {
  return [self getWithIntArray:dest withInt:0 withInt:(int) [((IOSIntArray *) nil_chk(dest)) count]];
}

- (JavaNioIntBuffer *)getWithIntArray:(IOSIntArray *)dest
                              withInt:(int)off
                              withInt:(int)len {
  int length = (int) [((IOSIntArray *) nil_chk(dest)) count];
  if (off < 0 || len < 0 || (long long int) len + (long long int) off > length) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  if (len > [self remaining]) {
    @throw [[[JavaNioBufferUnderflowException alloc] init] autorelease];
  }
  for (int i = off; i < off + len; i++) {
    (*IOSIntArray_GetRef(dest, i)) = [self get];
  }
  return self;
}

- (int)getWithInt:(int)index {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)hasArray {
  return [self protectedHasArray];
}

- (NSUInteger)hash {
  int myPosition = position__;
  int hash_ = 0;
  while (myPosition < limit__) {
    hash_ = hash_ + [self getWithInt:myPosition++];
  }
  return hash_;
}

- (BOOL)isDirect {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaNioByteOrder *)order {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSIntArray *)protectedArray {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)protectedArrayOffset {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)protectedHasArray {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaNioIntBuffer *)putWithInt:(int)i {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaNioIntBuffer *)putWithIntArray:(IOSIntArray *)src {
  return [self putWithIntArray:src withInt:0 withInt:(int) [((IOSIntArray *) nil_chk(src)) count]];
}

- (JavaNioIntBuffer *)putWithIntArray:(IOSIntArray *)src
                              withInt:(int)off
                              withInt:(int)len {
  int length = (int) [((IOSIntArray *) nil_chk(src)) count];
  if (off < 0 || len < 0 || (long long int) len + (long long int) off > length) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  if (len > [self remaining]) {
    @throw [[[JavaNioBufferOverflowException alloc] init] autorelease];
  }
  for (int i = off; i < off + len; i++) {
    [self putWithInt:IOSIntArray_Get(src, i)];
  }
  return self;
}

- (JavaNioIntBuffer *)putWithJavaNioIntBuffer:(JavaNioIntBuffer *)src {
  if (src == self) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  if ([((JavaNioIntBuffer *) nil_chk(src)) remaining] > [self remaining]) {
    @throw [[[JavaNioBufferOverflowException alloc] init] autorelease];
  }
  IOSIntArray *contents = [IOSIntArray arrayWithLength:[src remaining]];
  [src getWithIntArray:contents];
  [self putWithIntArray:contents];
  return self;
}

- (JavaNioIntBuffer *)putWithInt:(int)index
                         withInt:(int)i {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaNioIntBuffer *)slice {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)description {
  JavaLangStringBuilder *buf = [[[JavaLangStringBuilder alloc] init] autorelease];
  [buf appendWithNSString:[[self getClass] getName]];
  [buf appendWithNSString:@", status: capacity="];
  [buf appendWithInt:[self capacity]];
  [buf appendWithNSString:@" position="];
  [buf appendWithInt:[self position]];
  [buf appendWithNSString:@" limit="];
  [buf appendWithInt:[self limit]];
  return [buf description];
}

@end
