//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSDoubleArray.h"
#include "java/nio/Buffer.h"
#include "java/nio/DoubleArrayBuffer.h"
#include "java/nio/DoubleBuffer.h"
#include "java/nio/ReadOnlyBufferException.h"
#include "java/nio/ReadOnlyDoubleArrayBuffer.h"

@implementation JavaNioReadOnlyDoubleArrayBuffer

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

+ (JavaNioReadOnlyDoubleArrayBuffer *)copy__WithJavaNioDoubleArrayBuffer:(JavaNioDoubleArrayBuffer *)other
                                                                 withInt:(int)markOfOther {
  JavaNioReadOnlyDoubleArrayBuffer *buf = [[[JavaNioReadOnlyDoubleArrayBuffer alloc] initWithInt:[((JavaNioDoubleArrayBuffer *) nil_chk(other)) capacity] withDoubleArray:other->backingArray_ withInt:other->offset_] autorelease];
  buf->limit__ = [other limit];
  buf->position__ = [other position];
  buf->mark__ = markOfOther;
  return buf;
}

- (id)initWithInt:(int)capacity
  withDoubleArray:(IOSDoubleArray *)backingArray
          withInt:(int)arrayOffset {
  return JreMemDebugAdd([super initWithInt:capacity withDoubleArray:backingArray withInt:arrayOffset]);
}

- (JavaNioDoubleBuffer *)asReadOnlyBuffer {
  return [self duplicate];
}

- (JavaNioDoubleBuffer *)compact {
  @throw [[[JavaNioReadOnlyBufferException alloc] init] autorelease];
}

- (JavaNioDoubleBuffer *)duplicate {
  return [JavaNioReadOnlyDoubleArrayBuffer copy__WithJavaNioDoubleArrayBuffer:self withInt:mark__];
}

- (BOOL)isReadOnly {
  return YES;
}

- (IOSDoubleArray *)protectedArray {
  @throw [[[JavaNioReadOnlyBufferException alloc] init] autorelease];
}

- (int)protectedArrayOffset {
  @throw [[[JavaNioReadOnlyBufferException alloc] init] autorelease];
}

- (BOOL)protectedHasArray {
  return NO;
}

- (JavaNioDoubleBuffer *)putWithDouble:(double)c {
  @throw [[[JavaNioReadOnlyBufferException alloc] init] autorelease];
}

- (JavaNioDoubleBuffer *)putWithInt:(int)index
                         withDouble:(double)c {
  @throw [[[JavaNioReadOnlyBufferException alloc] init] autorelease];
}

- (JavaNioDoubleBuffer *)putWithDoubleArray:(IOSDoubleArray *)src
                                    withInt:(int)off
                                    withInt:(int)len {
  @throw [[[JavaNioReadOnlyBufferException alloc] init] autorelease];
}

- (JavaNioDoubleBuffer *)putWithJavaNioDoubleBuffer:(JavaNioDoubleBuffer *)buf {
  @throw [[[JavaNioReadOnlyBufferException alloc] init] autorelease];
}

- (JavaNioDoubleBuffer *)slice {
  return [[[JavaNioReadOnlyDoubleArrayBuffer alloc] initWithInt:[self remaining] withDoubleArray:backingArray_ withInt:offset_ + position__] autorelease];
}

@end
