//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/nio/src/main/java/common/java/nio/ReadOnlyIntArrayBuffer.java
//
//  Created by retechretech on 13-9-4.
//

#include "IOSIntArray.h"
#include "java/nio/Buffer.h"
#include "java/nio/IntArrayBuffer.h"
#include "java/nio/IntBuffer.h"
#include "java/nio/ReadOnlyBufferException.h"
#include "java/nio/ReadOnlyIntArrayBuffer.h"

@implementation JavaNioReadOnlyIntArrayBuffer

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

+ (JavaNioReadOnlyIntArrayBuffer *)copy__WithJavaNioIntArrayBuffer:(JavaNioIntArrayBuffer *)other
                                                           withInt:(int)markOfOther {
  JavaNioReadOnlyIntArrayBuffer *buf = [[[JavaNioReadOnlyIntArrayBuffer alloc] initWithInt:[((JavaNioIntArrayBuffer *) nil_chk(other)) capacity] withIntArray:other->backingArray_ withInt:other->offset_] autorelease];
  buf->limit__ = [other limit];
  buf->position__ = [other position];
  buf->mark__ = markOfOther;
  return buf;
}

- (id)initWithInt:(int)capacity
     withIntArray:(IOSIntArray *)backingArray
          withInt:(int)arrayOffset {
  return JreMemDebugAdd([super initWithInt:capacity withIntArray:backingArray withInt:arrayOffset]);
}

- (JavaNioIntBuffer *)asReadOnlyBuffer {
  return [self duplicate];
}

- (JavaNioIntBuffer *)compact {
  @throw [[[JavaNioReadOnlyBufferException alloc] init] autorelease];
}

- (JavaNioIntBuffer *)duplicate {
  return [JavaNioReadOnlyIntArrayBuffer copy__WithJavaNioIntArrayBuffer:self withInt:mark__];
}

- (BOOL)isReadOnly {
  return YES;
}

- (IOSIntArray *)protectedArray {
  @throw [[[JavaNioReadOnlyBufferException alloc] init] autorelease];
}

- (int)protectedArrayOffset {
  @throw [[[JavaNioReadOnlyBufferException alloc] init] autorelease];
}

- (BOOL)protectedHasArray {
  return NO;
}

- (JavaNioIntBuffer *)putWithInt:(int)c {
  @throw [[[JavaNioReadOnlyBufferException alloc] init] autorelease];
}

- (JavaNioIntBuffer *)putWithInt:(int)index
                         withInt:(int)c {
  @throw [[[JavaNioReadOnlyBufferException alloc] init] autorelease];
}

- (JavaNioIntBuffer *)putWithJavaNioIntBuffer:(JavaNioIntBuffer *)buf {
  @throw [[[JavaNioReadOnlyBufferException alloc] init] autorelease];
}

- (JavaNioIntBuffer *)putWithIntArray:(IOSIntArray *)src
                              withInt:(int)off
                              withInt:(int)len {
  @throw [[[JavaNioReadOnlyBufferException alloc] init] autorelease];
}

- (JavaNioIntBuffer *)slice {
  return [[[JavaNioReadOnlyIntArrayBuffer alloc] initWithInt:[self remaining] withIntArray:backingArray_ withInt:offset_ + position__] autorelease];
}

@end
