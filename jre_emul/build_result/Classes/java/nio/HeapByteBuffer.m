//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSByteArray.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/System.h"
#include "java/nio/Buffer.h"
#include "java/nio/BufferUnderflowException.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/HeapByteBuffer.h"
#include "org/apache/harmony/luni/platform/Endianness.h"

@implementation JavaNioHeapByteBuffer

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithByteArray:(IOSByteArray *)backingArray {
  return JreMemDebugAdd([self initJavaNioHeapByteBufferWithByteArray:backingArray withInt:(int) [((IOSByteArray *) nil_chk(backingArray)) count] withInt:0]);
}

- (id)initWithInt:(int)capacity {
  return JreMemDebugAdd([self initJavaNioHeapByteBufferWithByteArray:[IOSByteArray arrayWithLength:capacity] withInt:capacity withInt:0]);
}

- (id)initJavaNioHeapByteBufferWithByteArray:(IOSByteArray *)backingArray
                                     withInt:(int)capacity
                                     withInt:(int)offset {
  if (self = [super initWithInt:capacity]) {
    JavaNioHeapByteBuffer_set_backingArray_(self, backingArray);
    self->offset_ = offset;
    if (offset + capacity > (int) [((IOSByteArray *) nil_chk(backingArray)) count]) {
      @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
    }
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithByteArray:(IOSByteArray *)backingArray
                withInt:(int)capacity
                withInt:(int)offset {
  return [self initJavaNioHeapByteBufferWithByteArray:backingArray withInt:capacity withInt:offset];
}

- (JavaNioByteBuffer *)getWithByteArray:(IOSByteArray *)dest
                                withInt:(int)off
                                withInt:(int)len {
  int length = (int) [((IOSByteArray *) nil_chk(dest)) count];
  if (off < 0 || len < 0 || (long long int) off + (long long int) len > length) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  if (len > [self remaining]) {
    @throw [[[JavaNioBufferUnderflowException alloc] init] autorelease];
  }
  [JavaLangSystem arraycopyWithId:backingArray_ withInt:offset_ + position__ withId:dest withInt:off withInt:len];
  position__ += len;
  return self;
}

- (char)get {
  if (position__ == limit__) {
    @throw [[[JavaNioBufferUnderflowException alloc] init] autorelease];
  }
  return IOSByteArray_Get(nil_chk(backingArray_), offset_ + position__++);
}

- (char)getWithInt:(int)index {
  if (index < 0 || index >= limit__) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  return IOSByteArray_Get(nil_chk(backingArray_), offset_ + index);
}

- (double)getDouble {
  return [JavaLangDouble longBitsToDoubleWithLong:[self getLong]];
}

- (double)getDoubleWithInt:(int)index {
  return [JavaLangDouble longBitsToDoubleWithLong:[self getLongWithInt:index]];
}

- (float)getFloat {
  return [JavaLangFloat intBitsToFloatWithInt:[self getInt]];
}

- (float)getFloatWithInt:(int)index {
  return [JavaLangFloat intBitsToFloatWithInt:[self getIntWithInt:index]];
}

- (int)getInt {
  int newPosition = position__ + 4;
  if (newPosition > limit__) {
    @throw [[[JavaNioBufferUnderflowException alloc] init] autorelease];
  }
  int result = [self loadIntWithInt:position__];
  position__ = newPosition;
  return result;
}

- (int)getIntWithInt:(int)index {
  if (index < 0 || index + 4 > limit__) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  return [self loadIntWithInt:index];
}

- (long long int)getLong {
  int newPosition = position__ + 8;
  if (newPosition > limit__) {
    @throw [[[JavaNioBufferUnderflowException alloc] init] autorelease];
  }
  long long int result = [self loadLongWithInt:position__];
  position__ = newPosition;
  return result;
}

- (long long int)getLongWithInt:(int)index {
  if (index < 0 || index + 8 > limit__) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  return [self loadLongWithInt:index];
}

- (short int)getShort {
  int newPosition = position__ + 2;
  if (newPosition > limit__) {
    @throw [[[JavaNioBufferUnderflowException alloc] init] autorelease];
  }
  short int result = [self loadShortWithInt:position__];
  position__ = newPosition;
  return result;
}

- (short int)getShortWithInt:(int)index {
  if (index < 0 || index + 2 > limit__) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  return [self loadShortWithInt:index];
}

- (BOOL)isDirect {
  return NO;
}

- (int)loadIntWithInt:(int)index {
  int baseOffset = offset_ + index;
  int bytes = 0;
  if (order__ == [OrgApacheHarmonyLuniPlatformEndianness getBIG_ENDIAN]) {
    for (int i = 0; i < 4; i++) {
      bytes = bytes << 8;
      bytes = bytes | (IOSByteArray_Get(nil_chk(backingArray_), baseOffset + i) & (int) 0xFF);
    }
  }
  else {
    for (int i = 3; i >= 0; i--) {
      bytes = bytes << 8;
      bytes = bytes | (IOSByteArray_Get(nil_chk(backingArray_), baseOffset + i) & (int) 0xFF);
    }
  }
  return bytes;
}

- (long long int)loadLongWithInt:(int)index {
  int baseOffset = offset_ + index;
  long long int bytes = 0;
  if (order__ == [OrgApacheHarmonyLuniPlatformEndianness getBIG_ENDIAN]) {
    for (int i = 0; i < 8; i++) {
      bytes = bytes << 8;
      bytes = bytes | (IOSByteArray_Get(nil_chk(backingArray_), baseOffset + i) & (int) 0xFF);
    }
  }
  else {
    for (int i = 7; i >= 0; i--) {
      bytes = bytes << 8;
      bytes = bytes | (IOSByteArray_Get(nil_chk(backingArray_), baseOffset + i) & (int) 0xFF);
    }
  }
  return bytes;
}

- (short int)loadShortWithInt:(int)index {
  int baseOffset = offset_ + index;
  short int bytes = 0;
  if (order__ == [OrgApacheHarmonyLuniPlatformEndianness getBIG_ENDIAN]) {
    bytes = (short int) (IOSByteArray_Get(nil_chk(backingArray_), baseOffset) << 8);
    bytes |= (IOSByteArray_Get(backingArray_, baseOffset + 1) & (int) 0xFF);
  }
  else {
    bytes = (short int) (IOSByteArray_Get(nil_chk(backingArray_), baseOffset + 1) << 8);
    bytes |= (IOSByteArray_Get(backingArray_, baseOffset) & (int) 0xFF);
  }
  return bytes;
}

- (void)storeWithInt:(int)index
             withInt:(int)value {
  int baseOffset = offset_ + index;
  if (order__ == [OrgApacheHarmonyLuniPlatformEndianness getBIG_ENDIAN]) {
    for (int i = 3; i >= 0; i--) {
      (*IOSByteArray_GetRef(nil_chk(backingArray_), baseOffset + i)) = (char) (value & (int) 0xFF);
      value = value >> 8;
    }
  }
  else {
    for (int i = 0; i <= 3; i++) {
      (*IOSByteArray_GetRef(nil_chk(backingArray_), baseOffset + i)) = (char) (value & (int) 0xFF);
      value = value >> 8;
    }
  }
}

- (void)storeWithInt:(int)index
            withLong:(long long int)value {
  int baseOffset = offset_ + index;
  if (order__ == [OrgApacheHarmonyLuniPlatformEndianness getBIG_ENDIAN]) {
    for (int i = 7; i >= 0; i--) {
      (*IOSByteArray_GetRef(nil_chk(backingArray_), baseOffset + i)) = (char) (value & (int) 0xFF);
      value = value >> 8;
    }
  }
  else {
    for (int i = 0; i <= 7; i++) {
      (*IOSByteArray_GetRef(nil_chk(backingArray_), baseOffset + i)) = (char) (value & (int) 0xFF);
      value = value >> 8;
    }
  }
}

- (void)storeWithInt:(int)index
           withShort:(short int)value {
  int baseOffset = offset_ + index;
  if (order__ == [OrgApacheHarmonyLuniPlatformEndianness getBIG_ENDIAN]) {
    (*IOSByteArray_GetRef(nil_chk(backingArray_), baseOffset)) = (char) ((value >> 8) & (int) 0xFF);
    (*IOSByteArray_GetRef(backingArray_, baseOffset + 1)) = (char) (value & (int) 0xFF);
  }
  else {
    (*IOSByteArray_GetRef(nil_chk(backingArray_), baseOffset + 1)) = (char) ((value >> 8) & (int) 0xFF);
    (*IOSByteArray_GetRef(backingArray_, baseOffset)) = (char) (value & (int) 0xFF);
  }
}

- (unichar)getChar {
  return (unichar) [self getShort];
}

- (unichar)getCharWithInt:(int)index {
  return (unichar) [self getShortWithInt:index];
}

- (JavaNioByteBuffer *)putCharWithChar:(unichar)value {
  return [self putShortWithShort:(short int) value];
}

- (JavaNioByteBuffer *)putCharWithInt:(int)index
                             withChar:(unichar)value {
  return [self putShortWithInt:index withShort:(short int) value];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaNioHeapByteBuffer_set_backingArray_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaNioHeapByteBuffer *)other {
  [super copyAllFieldsTo:other];
  JavaNioHeapByteBuffer_set_backingArray_(other, backingArray_);
  other->offset_ = offset_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:backingArray_ name:@"backingArray"]];
  return result;
}

@end
