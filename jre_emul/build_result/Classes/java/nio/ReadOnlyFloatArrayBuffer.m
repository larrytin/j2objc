//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSFloatArray.h"
#include "java/nio/Buffer.h"
#include "java/nio/FloatArrayBuffer.h"
#include "java/nio/FloatBuffer.h"
#include "java/nio/ReadOnlyBufferException.h"
#include "java/nio/ReadOnlyFloatArrayBuffer.h"

@implementation JavaNioReadOnlyFloatArrayBuffer

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

+ (JavaNioReadOnlyFloatArrayBuffer *)copy__WithJavaNioFloatArrayBuffer:(JavaNioFloatArrayBuffer *)other
                                                               withInt:(int)markOfOther {
  JavaNioReadOnlyFloatArrayBuffer *buf = [[[JavaNioReadOnlyFloatArrayBuffer alloc] initWithInt:[((JavaNioFloatArrayBuffer *) nil_chk(other)) capacity] withFloatArray:other->backingArray_ withInt:other->offset_] autorelease];
  buf->limit__ = [other limit];
  buf->position__ = [other position];
  buf->mark__ = markOfOther;
  return buf;
}

- (id)initWithInt:(int)capacity
   withFloatArray:(IOSFloatArray *)backingArray
          withInt:(int)arrayOffset {
  return JreMemDebugAdd([super initWithInt:capacity withFloatArray:backingArray withInt:arrayOffset]);
}

- (JavaNioFloatBuffer *)asReadOnlyBuffer {
  return [self duplicate];
}

- (JavaNioFloatBuffer *)compact {
  @throw [[[JavaNioReadOnlyBufferException alloc] init] autorelease];
}

- (JavaNioFloatBuffer *)duplicate {
  return [JavaNioReadOnlyFloatArrayBuffer copy__WithJavaNioFloatArrayBuffer:self withInt:mark__];
}

- (BOOL)isReadOnly {
  return YES;
}

- (IOSFloatArray *)protectedArray {
  @throw [[[JavaNioReadOnlyBufferException alloc] init] autorelease];
}

- (int)protectedArrayOffset {
  @throw [[[JavaNioReadOnlyBufferException alloc] init] autorelease];
}

- (BOOL)protectedHasArray {
  return NO;
}

- (JavaNioFloatBuffer *)putWithFloat:(float)c {
  @throw [[[JavaNioReadOnlyBufferException alloc] init] autorelease];
}

- (JavaNioFloatBuffer *)putWithInt:(int)index
                         withFloat:(float)c {
  @throw [[[JavaNioReadOnlyBufferException alloc] init] autorelease];
}

- (JavaNioFloatBuffer *)putWithJavaNioFloatBuffer:(JavaNioFloatBuffer *)buf {
  @throw [[[JavaNioReadOnlyBufferException alloc] init] autorelease];
}

- (JavaNioFloatBuffer *)putWithFloatArray:(IOSFloatArray *)src
                                  withInt:(int)off
                                  withInt:(int)len {
  @throw [[[JavaNioReadOnlyBufferException alloc] init] autorelease];
}

- (JavaNioFloatBuffer *)slice {
  return [[[JavaNioReadOnlyFloatArrayBuffer alloc] initWithInt:[self remaining] withFloatArray:backingArray_ withInt:offset_ + position__] autorelease];
}

@end
