//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/nio/charset/CharsetEncoder.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSByteArray.h"
#include "IOSCharArray.h"
#include "IOSClass.h"
#include "java/lang/CharSequence.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/nio/BufferOverflowException.h"
#include "java/nio/BufferUnderflowException.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/CharBuffer.h"
#include "java/nio/charset/CharacterCodingException.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/CharsetDecoder.h"
#include "java/nio/charset/CharsetEncoder.h"
#include "java/nio/charset/CoderMalfunctionError.h"
#include "java/nio/charset/CoderResult.h"
#include "java/nio/charset/CodingErrorAction.h"

@implementation JavaNioCharsetCharsetEncoder

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaNioCharsetCharset:(JavaNioCharsetCharset *)cs
                          withFloat:(float)averageBytesPerChar
                          withFloat:(float)maxBytesPerChar {
  return JreMemDebugAdd([self initJavaNioCharsetCharsetEncoderWithJavaNioCharsetCharset:cs withFloat:averageBytesPerChar withFloat:maxBytesPerChar withByteArray:[IOSByteArray arrayWithBytes:(char[]){ (char) '?' } count:1]]);
}

- (id)initJavaNioCharsetCharsetEncoderWithJavaNioCharsetCharset:(JavaNioCharsetCharset *)cs
                                                      withFloat:(float)averageBytesPerChar
                                                      withFloat:(float)maxBytesPerChar
                                                  withByteArray:(IOSByteArray *)replacement {
  if (self = [super init]) {
    if (averageBytesPerChar <= 0 || maxBytesPerChar <= 0) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"averageBytesPerChar and maxBytesPerChar must both be positive"] autorelease];
    }
    if (averageBytesPerChar > maxBytesPerChar) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"averageBytesPerChar is greater than maxBytesPerChar"] autorelease];
    }
    JavaNioCharsetCharsetEncoder_set_cs_(self, cs);
    self->averageBytesPerChar__ = averageBytesPerChar;
    self->maxBytesPerChar__ = maxBytesPerChar;
    status_ = JavaNioCharsetCharsetEncoder_INIT;
    JavaNioCharsetCharsetEncoder_set_malformedInputAction__(self, [JavaNioCharsetCodingErrorAction REPORT]);
    JavaNioCharsetCharsetEncoder_set_unmappableCharacterAction__(self, [JavaNioCharsetCodingErrorAction REPORT]);
    JavaNioCharsetCharsetEncoder_set_replacementBytes_(self, replacement);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaNioCharsetCharset:(JavaNioCharsetCharset *)cs
                          withFloat:(float)averageBytesPerChar
                          withFloat:(float)maxBytesPerChar
                      withByteArray:(IOSByteArray *)replacement {
  return [self initJavaNioCharsetCharsetEncoderWithJavaNioCharsetCharset:cs withFloat:averageBytesPerChar withFloat:maxBytesPerChar withByteArray:replacement];
}

- (float)averageBytesPerChar {
  return averageBytesPerChar__;
}

- (BOOL)canEncodeWithChar:(unichar)c {
  return [self implCanEncodeWithJavaNioCharBuffer:[JavaNioCharBuffer wrapWithCharArray:[IOSCharArray arrayWithCharacters:(unichar[]){ c } count:1]]];
}

- (BOOL)implCanEncodeWithJavaNioCharBuffer:(JavaNioCharBuffer *)cb {
  if (status_ == JavaNioCharsetCharsetEncoder_FLUSH || status_ == JavaNioCharsetCharsetEncoder_INIT) {
    status_ = JavaNioCharsetCharsetEncoder_READY;
  }
  if (status_ != JavaNioCharsetCharsetEncoder_READY) {
    @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"encoding already in progress"] autorelease];
  }
  JavaNioCharsetCodingErrorAction *malformBak = malformedInputAction__;
  JavaNioCharsetCodingErrorAction *unmapBak = unmappableCharacterAction__;
  [self onMalformedInputWithJavaNioCharsetCodingErrorAction:[JavaNioCharsetCodingErrorAction REPORT]];
  [self onUnmappableCharacterWithJavaNioCharsetCodingErrorAction:[JavaNioCharsetCodingErrorAction REPORT]];
  BOOL result = YES;
  @try {
    [self encodeWithJavaNioCharBuffer:cb];
  }
  @catch (JavaNioCharsetCharacterCodingException *e) {
    result = NO;
  }
  [self onMalformedInputWithJavaNioCharsetCodingErrorAction:malformBak];
  [self onUnmappableCharacterWithJavaNioCharsetCodingErrorAction:unmapBak];
  [self reset];
  return result;
}

- (BOOL)canEncodeWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  JavaNioCharBuffer *cb;
  if ([(id) sequence isKindOfClass:[JavaNioCharBuffer class]]) {
    cb = [((JavaNioCharBuffer *) nil_chk(sequence)) duplicate];
  }
  else {
    cb = [JavaNioCharBuffer wrapWithJavaLangCharSequence:sequence];
  }
  return [self implCanEncodeWithJavaNioCharBuffer:cb];
}

- (JavaNioCharsetCharset *)charset {
  return cs_;
}

- (JavaNioByteBuffer *)encodeWithJavaNioCharBuffer:(JavaNioCharBuffer *)inArg {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (IOSObjectArray *)__exceptions_encodeWithJavaNioCharBuffer_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaNioCharsetCharacterCodingException getClass] } count:1 type:[IOSClass getClass]];
}

- (JavaNioCharsetCoderResult *)encodeWithJavaNioCharBuffer:(JavaNioCharBuffer *)inArg
                                     withJavaNioByteBuffer:(JavaNioByteBuffer *)outArg
                                               withBoolean:(BOOL)endOfInput {
  @try {
    return [self encodeLoopWithJavaNioCharBuffer:inArg withJavaNioByteBuffer:outArg];
  }
  @catch (JavaNioBufferOverflowException *e) {
    @throw [[[JavaNioCharsetCoderMalfunctionError alloc] initWithJavaLangException:e] autorelease];
  }
  @catch (JavaNioBufferUnderflowException *e) {
    @throw [[[JavaNioCharsetCoderMalfunctionError alloc] initWithJavaLangException:e] autorelease];
  }
}

- (JavaNioCharsetCoderResult *)encodeLoopWithJavaNioCharBuffer:(JavaNioCharBuffer *)inArg
                                         withJavaNioByteBuffer:(JavaNioByteBuffer *)outArg {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaNioCharsetCoderResult *)flushWithJavaNioByteBuffer:(JavaNioByteBuffer *)outArg {
  return [JavaNioCharsetCoderResult getUNDERFLOW];
}

- (JavaNioCharsetCodingErrorAction *)malformedInputAction {
  return malformedInputAction__;
}

- (float)maxBytesPerChar {
  return maxBytesPerChar__;
}

- (JavaNioCharsetCharsetEncoder *)onMalformedInputWithJavaNioCharsetCodingErrorAction:(JavaNioCharsetCodingErrorAction *)newAction {
  if (newAction == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"newAction == null"] autorelease];
  }
  JavaNioCharsetCharsetEncoder_set_malformedInputAction__(self, newAction);
  return self;
}

- (JavaNioCharsetCharsetEncoder *)onUnmappableCharacterWithJavaNioCharsetCodingErrorAction:(JavaNioCharsetCodingErrorAction *)newAction {
  if (newAction == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"newAction == null"] autorelease];
  }
  JavaNioCharsetCharsetEncoder_set_unmappableCharacterAction__(self, newAction);
  return self;
}

- (IOSByteArray *)replacement {
  return replacementBytes_;
}

- (JavaNioCharsetCharsetEncoder *)replaceWithWithByteArray:(IOSByteArray *)replacement {
  if (replacement == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"replacement == null"] autorelease];
  }
  if ((int) [((IOSByteArray *) nil_chk(replacement)) count] == 0) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"replacement.length == 0"] autorelease];
  }
  if ((int) [replacement count] > [self maxBytesPerChar]) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"replacement.length > maxBytesPerChar: %d > %f", (int) [replacement count], [self maxBytesPerChar]]] autorelease];
  }
  JavaNioCharsetCharsetEncoder_set_replacementBytes_(self, replacement);
  return self;
}

- (JavaNioCharsetCharsetEncoder *)reset {
  return self;
}

- (JavaNioCharsetCodingErrorAction *)unmappableCharacterAction {
  return unmappableCharacterAction__;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaNioCharsetCharsetEncoder_set_decoder_(self, nil);
  JavaNioCharsetCharsetEncoder_set_unmappableCharacterAction__(self, nil);
  JavaNioCharsetCharsetEncoder_set_malformedInputAction__(self, nil);
  JavaNioCharsetCharsetEncoder_set_replacementBytes_(self, nil);
  JavaNioCharsetCharsetEncoder_set_cs_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaNioCharsetCharsetEncoder *)other {
  [super copyAllFieldsTo:other];
  other->averageBytesPerChar__ = averageBytesPerChar__;
  JavaNioCharsetCharsetEncoder_set_cs_(other, cs_);
  JavaNioCharsetCharsetEncoder_set_decoder_(other, decoder_);
  other->finished_ = finished_;
  JavaNioCharsetCharsetEncoder_set_malformedInputAction__(other, malformedInputAction__);
  other->maxBytesPerChar__ = maxBytesPerChar__;
  JavaNioCharsetCharsetEncoder_set_replacementBytes_(other, replacementBytes_);
  other->status_ = status_;
  JavaNioCharsetCharsetEncoder_set_unmappableCharacterAction__(other, unmappableCharacterAction__);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:cs_ name:@"cs"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:replacementBytes_ name:@"replacementBytes"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:malformedInputAction__ name:@"malformedInputAction_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:unmappableCharacterAction__ name:@"unmappableCharacterAction_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:decoder_ name:@"decoder"]];
  return result;
}

@end
