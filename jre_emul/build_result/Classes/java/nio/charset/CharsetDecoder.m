//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/nio/charset/CharsetDecoder.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSClass.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/nio/BufferOverflowException.h"
#include "java/nio/BufferUnderflowException.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/CharBuffer.h"
#include "java/nio/charset/CharacterCodingException.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/CharsetDecoder.h"
#include "java/nio/charset/CoderMalfunctionError.h"
#include "java/nio/charset/CoderResult.h"
#include "java/nio/charset/CodingErrorAction.h"

@implementation JavaNioCharsetCharsetDecoder

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset
                          withFloat:(float)averageCharsPerByte
                          withFloat:(float)maxCharsPerByte {
  if (self = [super init]) {
    if (averageCharsPerByte <= 0 || maxCharsPerByte <= 0) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"averageCharsPerByte and maxCharsPerByte must be positive"] autorelease];
    }
    if (averageCharsPerByte > maxCharsPerByte) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"averageCharsPerByte is greater than maxCharsPerByte"] autorelease];
    }
    self->averageCharsPerByte__ = averageCharsPerByte;
    self->maxCharsPerByte__ = maxCharsPerByte;
    JavaNioCharsetCharsetDecoder_set_cs_(self, charset);
    JavaNioCharsetCharsetDecoder_set_replacementChars_(self, @"\ufffd");
    JreMemDebugAdd(self);
  }
  return self;
}

- (float)averageCharsPerByte {
  return averageCharsPerByte__;
}

- (JavaNioCharsetCharset *)charset {
  return cs_;
}

- (JavaNioCharBuffer *)decodeWithJavaNioByteBuffer:(JavaNioByteBuffer *)inArg {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (IOSObjectArray *)__exceptions_decodeWithJavaNioByteBuffer_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaNioCharsetCharacterCodingException getClass] } count:1 type:[IOSClass getClass]];
}

- (JavaNioCharsetCoderResult *)decodeWithJavaNioByteBuffer:(JavaNioByteBuffer *)inArg
                                     withJavaNioCharBuffer:(JavaNioCharBuffer *)outArg
                                               withBoolean:(BOOL)endOfInput {
  @try {
    return [self decodeLoopWithJavaNioByteBuffer:inArg withJavaNioCharBuffer:outArg];
  }
  @catch (JavaNioBufferOverflowException *ex) {
    @throw [[[JavaNioCharsetCoderMalfunctionError alloc] initWithJavaLangException:ex] autorelease];
  }
  @catch (JavaNioBufferUnderflowException *ex) {
    @throw [[[JavaNioCharsetCoderMalfunctionError alloc] initWithJavaLangException:ex] autorelease];
  }
}

- (JavaNioCharsetCoderResult *)decodeLoopWithJavaNioByteBuffer:(JavaNioByteBuffer *)inArg
                                         withJavaNioCharBuffer:(JavaNioCharBuffer *)outArg {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaNioCharsetCharset *)detectedCharset {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (JavaNioCharsetCoderResult *)flushWithJavaNioCharBuffer:(JavaNioCharBuffer *)outArg {
  return [JavaNioCharsetCoderResult getUNDERFLOW];
}

- (BOOL)isAutoDetecting {
  return NO;
}

- (BOOL)isCharsetDetected {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (float)maxCharsPerByte {
  return maxCharsPerByte__;
}

- (JavaNioCharsetCharsetDecoder *)onMalformedInputWithJavaNioCharsetCodingErrorAction:(JavaNioCharsetCodingErrorAction *)newAction {
  return self;
}

- (JavaNioCharsetCharsetDecoder *)onUnmappableCharacterWithJavaNioCharsetCodingErrorAction:(JavaNioCharsetCodingErrorAction *)newAction {
  return self;
}

- (NSString *)replacement {
  return replacementChars_;
}

- (JavaNioCharsetCharsetDecoder *)replaceWithWithNSString:(NSString *)replacement {
  if (replacement == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"replacement == null"] autorelease];
  }
  if ([((NSString *) nil_chk(replacement)) isEmpty]) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"replacement.isEmpty()"] autorelease];
  }
  JavaNioCharsetCharsetDecoder_set_replacementChars_(self, replacement);
  return self;
}

- (JavaNioCharsetCharsetDecoder *)reset {
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaNioCharsetCharsetDecoder_set_replacementChars_(self, nil);
  JavaNioCharsetCharsetDecoder_set_cs_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaNioCharsetCharsetDecoder *)other {
  [super copyAllFieldsTo:other];
  other->averageCharsPerByte__ = averageCharsPerByte__;
  JavaNioCharsetCharsetDecoder_set_cs_(other, cs_);
  other->maxCharsPerByte__ = maxCharsPerByte__;
  JavaNioCharsetCharsetDecoder_set_replacementChars_(other, replacementChars_);
  other->status_ = status_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:cs_ name:@"cs"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:replacementChars_ name:@"replacementChars"]];
  return result;
}

@end
