//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/nio/charset/Charset.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Error.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/CharBuffer.h"
#include "java/nio/charset/CharacterCodingException.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/CharsetDecoder.h"
#include "java/nio/charset/CharsetEncoder.h"
#include "java/nio/charset/CodingErrorAction.h"
#include "java/nio/charset/IOSCharset.h"
#include "java/nio/charset/IllegalCharsetNameException.h"
#include "java/nio/charset/UnsupportedCharsetException.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Locale.h"
#include "java/util/Set.h"
#include "java/util/SortedMap.h"
#include "java/util/TreeMap.h"

@implementation JavaNioCharsetCharset

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaNioCharsetCharset_CACHED_CHARSETS_ name:@"JavaNioCharsetCharset_CACHED_CHARSETS_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaNioCharsetCharset_DEFAULT_CHARSET_ name:@"JavaNioCharsetCharset_DEFAULT_CHARSET_"]];
  return result;
}

static JavaUtilHashMap * JavaNioCharsetCharset_CACHED_CHARSETS_;
static JavaNioCharsetCharset * JavaNioCharsetCharset_DEFAULT_CHARSET_;

+ (JavaUtilHashMap *)CACHED_CHARSETS {
  return JavaNioCharsetCharset_CACHED_CHARSETS_;
}

+ (JavaNioCharsetCharset *)DEFAULT_CHARSET {
  return JavaNioCharsetCharset_DEFAULT_CHARSET_;
}

- (id)initWithNSString:(NSString *)canonicalName
     withNSStringArray:(IOSObjectArray *)aliases {
  if (self = [super init]) {
    [JavaNioCharsetCharset checkCharsetNameWithNSString:canonicalName];
    JavaNioCharsetCharset_set_canonicalName_(self, canonicalName);
    JavaNioCharsetCharset_set_aliasesSet_(self, [[[JavaUtilHashSet alloc] init] autorelease]);
    if (aliases != nil) {
      {
        IOSObjectArray *a__ = aliases;
        id const *b__ = a__->buffer_;
        id const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          NSString *alias = (*b__++);
          [JavaNioCharsetCharset checkCharsetNameWithNSString:alias];
          [self->aliasesSet_ addWithId:alias];
        }
      }
    }
    JreMemDebugAdd(self);
  }
  return self;
}

+ (void)checkCharsetNameWithNSString:(NSString *)name {
  if ([((NSString *) nil_chk(name)) isEmpty]) {
    @throw [[[JavaNioCharsetIllegalCharsetNameException alloc] initWithNSString:name] autorelease];
  }
  int length = [name length];
  for (int i = 0; i < length; ++i) {
    if (![JavaNioCharsetCharset isValidCharsetNameCharacterWithChar:[name charAtWithInt:i]]) {
      @throw [[[JavaNioCharsetIllegalCharsetNameException alloc] initWithNSString:name] autorelease];
    }
  }
}

+ (BOOL)isValidCharsetNameCharacterWithChar:(unichar)c {
  return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9') || c == '-' || c == '.' || c == ':' || c == '_';
}

+ (id<JavaUtilSortedMap>)availableCharsets {
  JavaUtilTreeMap *charsets = [[[JavaUtilTreeMap alloc] initWithJavaUtilComparator:[NSString CASE_INSENSITIVE_ORDER]] autorelease];
  for (NSString * __strong charsetName in [JavaNioCharsetIOSCharset getAvailableCharsetNames]) {
    JavaNioCharsetCharset *charset = [JavaNioCharsetIOSCharset charsetForNameWithNSString:charsetName];
    [charsets putWithId:[((JavaNioCharsetCharset *) nil_chk(charset)) name] withId:charset];
  }
  return [JavaUtilCollections unmodifiableSortedMapWithJavaUtilSortedMap:charsets];
}

+ (JavaNioCharsetCharset *)cacheCharsetWithNSString:(NSString *)charsetName
                          withJavaNioCharsetCharset:(JavaNioCharsetCharset *)cs {
  @synchronized (JavaNioCharsetCharset_CACHED_CHARSETS_) {
    NSString *canonicalName = [((JavaNioCharsetCharset *) nil_chk(cs)) name];
    JavaNioCharsetCharset *canonicalCharset = [((JavaUtilHashMap *) nil_chk(JavaNioCharsetCharset_CACHED_CHARSETS_)) getWithId:canonicalName];
    if (canonicalCharset == nil) {
      canonicalCharset = cs;
    }
    [JavaNioCharsetCharset_CACHED_CHARSETS_ putWithId:canonicalName withId:canonicalCharset];
    [JavaNioCharsetCharset_CACHED_CHARSETS_ putWithId:charsetName withId:canonicalCharset];
    for (NSString * __strong alias in cs->aliasesSet_) {
      [JavaNioCharsetCharset_CACHED_CHARSETS_ putWithId:alias withId:canonicalCharset];
    }
    return canonicalCharset;
  }
}

+ (JavaNioCharsetCharset *)forNameWithNSString:(NSString *)charsetName {
  JavaNioCharsetCharset *cs;
  @synchronized (JavaNioCharsetCharset_CACHED_CHARSETS_) {
    cs = [((JavaUtilHashMap *) nil_chk(JavaNioCharsetCharset_CACHED_CHARSETS_)) getWithId:charsetName];
    if (cs != nil) {
      return cs;
    }
  }
  if (charsetName == nil) {
    @throw [[[JavaNioCharsetIllegalCharsetNameException alloc] initWithNSString:nil] autorelease];
  }
  [JavaNioCharsetCharset checkCharsetNameWithNSString:charsetName];
  cs = [JavaNioCharsetIOSCharset charsetForNameWithNSString:charsetName];
  if (cs != nil) {
    return [JavaNioCharsetCharset cacheCharsetWithNSString:charsetName withJavaNioCharsetCharset:cs];
  }
  @throw [[[JavaNioCharsetUnsupportedCharsetException alloc] initWithNSString:charsetName] autorelease];
}

+ (JavaNioCharsetCharset *)forNameUEEWithNSString:(NSString *)charsetName {
  @try {
    return [JavaNioCharsetCharset forNameWithNSString:charsetName];
  }
  @catch (JavaLangException *cause) {
    JavaIoUnsupportedEncodingException *ex = [[[JavaIoUnsupportedEncodingException alloc] initWithNSString:charsetName] autorelease];
    [ex initCauseWithJavaLangThrowable:cause];
    @throw ex;
  }
}

+ (IOSObjectArray *)__exceptions_forNameUEEWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoUnsupportedEncodingException getClass] } count:1 type:[IOSClass getClass]];
}

+ (BOOL)isSupportedWithNSString:(NSString *)charsetName {
  @try {
    [JavaNioCharsetCharset forNameWithNSString:charsetName];
    return YES;
  }
  @catch (JavaNioCharsetUnsupportedCharsetException *ex) {
    return NO;
  }
}

- (BOOL)containsWithJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaNioCharsetCharsetEncoder *)newEncoder {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaNioCharsetCharsetDecoder *)newDecoder {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)name {
  return self->canonicalName_;
}

- (id<JavaUtilSet>)aliases {
  return [JavaUtilCollections unmodifiableSetWithJavaUtilSet:self->aliasesSet_];
}

- (NSString *)displayName {
  return self->canonicalName_;
}

- (NSString *)displayNameWithJavaUtilLocale:(JavaUtilLocale *)l {
  return self->canonicalName_;
}

- (BOOL)isRegistered {
  return ![((NSString *) nil_chk(canonicalName_)) hasPrefix:@"x-"] && ![canonicalName_ hasPrefix:@"X-"];
}

- (BOOL)canEncode {
  return YES;
}

- (JavaNioByteBuffer *)encodeWithJavaNioCharBuffer:(JavaNioCharBuffer *)buffer {
  @try {
    return [((JavaNioCharsetCharsetEncoder *) nil_chk([((JavaNioCharsetCharsetEncoder *) nil_chk([((JavaNioCharsetCharsetEncoder *) nil_chk([self newEncoder])) onMalformedInputWithJavaNioCharsetCodingErrorAction:[JavaNioCharsetCodingErrorAction REPLACE]])) onUnmappableCharacterWithJavaNioCharsetCodingErrorAction:[JavaNioCharsetCodingErrorAction REPLACE]])) encodeWithJavaNioCharBuffer:buffer];
  }
  @catch (JavaNioCharsetCharacterCodingException *ex) {
    @throw [[[JavaLangError alloc] initWithNSString:[((JavaNioCharsetCharacterCodingException *) nil_chk(ex)) getMessage] withJavaLangThrowable:ex] autorelease];
  }
}

- (JavaNioByteBuffer *)encodeWithNSString:(NSString *)s {
  return [self encodeWithJavaNioCharBuffer:[JavaNioCharBuffer wrapWithJavaLangCharSequence:s]];
}

- (JavaNioCharBuffer *)decodeWithJavaNioByteBuffer:(JavaNioByteBuffer *)buffer {
  @try {
    return [((JavaNioCharsetCharsetDecoder *) nil_chk([((JavaNioCharsetCharsetDecoder *) nil_chk([((JavaNioCharsetCharsetDecoder *) nil_chk([self newDecoder])) onMalformedInputWithJavaNioCharsetCodingErrorAction:[JavaNioCharsetCodingErrorAction REPLACE]])) onUnmappableCharacterWithJavaNioCharsetCodingErrorAction:[JavaNioCharsetCodingErrorAction REPLACE]])) decodeWithJavaNioByteBuffer:buffer];
  }
  @catch (JavaNioCharsetCharacterCodingException *ex) {
    @throw [[[JavaLangError alloc] initWithNSString:[((JavaNioCharsetCharacterCodingException *) nil_chk(ex)) getMessage] withJavaLangThrowable:ex] autorelease];
  }
}

- (int)compareToWithId:(JavaNioCharsetCharset *)charset {
  if (charset != nil && ![charset isKindOfClass:[JavaNioCharsetCharset class]]) {
    @throw [[[JavaLangClassCastException alloc] init] autorelease];
  }
  return [((NSString *) nil_chk(self->canonicalName_)) compareToIgnoreCase:((JavaNioCharsetCharset *) nil_chk(charset))->canonicalName_];
}

- (BOOL)isEqual:(id)obj {
  if ([obj isKindOfClass:[JavaNioCharsetCharset class]]) {
    JavaNioCharsetCharset *that = (JavaNioCharsetCharset *) check_class_cast(obj, [JavaNioCharsetCharset class]);
    return [((NSString *) nil_chk(self->canonicalName_)) isEqual:((JavaNioCharsetCharset *) nil_chk(that))->canonicalName_];
  }
  return NO;
}

- (NSUInteger)hash {
  return [((NSString *) nil_chk(self->canonicalName_)) hash];
}

- (NSString *)description {
  return [NSString stringWithFormat:@"%@[%@]", [[self getClass] getName], self->canonicalName_];
}

+ (JavaNioCharsetCharset *)defaultCharset {
  return JavaNioCharsetCharset_DEFAULT_CHARSET_;
}

+ (JavaNioCharsetCharset *)getDefaultCharset {
  NSString *encoding = [JavaLangSystem getPropertyWithNSString:@"file.encoding" withNSString:@"UTF-8"];
  @try {
    return [JavaNioCharsetCharset forNameWithNSString:encoding];
  }
  @catch (JavaNioCharsetUnsupportedCharsetException *e) {
    return [JavaNioCharsetCharset forNameWithNSString:@"UTF-8"];
  }
}

+ (void)initialize {
  if (self == [JavaNioCharsetCharset class]) {
    JreOperatorRetainedAssign(&JavaNioCharsetCharset_CACHED_CHARSETS_, nil, [[[JavaUtilHashMap alloc] init] autorelease]);
    JreOperatorRetainedAssign(&JavaNioCharsetCharset_DEFAULT_CHARSET_, nil, [JavaNioCharsetCharset getDefaultCharset]);
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaNioCharsetCharset_set_aliasesSet_(self, nil);
  JavaNioCharsetCharset_set_canonicalName_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaNioCharsetCharset *)other {
  [super copyAllFieldsTo:other];
  JavaNioCharsetCharset_set_aliasesSet_(other, aliasesSet_);
  JavaNioCharsetCharset_set_canonicalName_(other, canonicalName_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:canonicalName_ name:@"canonicalName"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:aliasesSet_ name:@"aliasesSet"]];
  return result;
}

@end
