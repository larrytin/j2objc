//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSByteArray.h"
#include "IOSCharArray.h"
#include "IOSClass.h"
#include "java/lang/System.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/CharBuffer.h"
#include "java/nio/charset/CharacterCodingException.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/CharsetEncoder.h"
#include "java/nio/charset/CoderResult.h"
#include "java/nio/charset/IOSCharset.h"
#include "java/nio/charset/IOSCharsetEncoder.h"
#include "java/nio/charset/UnsupportedCharsetException.h"

@implementation JavaNioCharsetIOSCharsetEncoder

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset
                          withFloat:(float)maxBytesPerChar {
  return JreMemDebugAdd([super initWithJavaNioCharsetCharset:charset withFloat:maxBytesPerChar withFloat:maxBytesPerChar withByteArray:[IOSByteArray arrayWithBytes:(char[]){ (char) '?' } count:1]]);
}

- (JavaNioByteBuffer *)encodeWithJavaNioCharBuffer:(JavaNioCharBuffer *)inArg {
  return [JavaNioByteBuffer wrapWithByteArray:[self encodeImplWithJavaNioCharBuffer:inArg]];
}

+ (IOSObjectArray *)__exceptions_encodeWithJavaNioCharBuffer_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaNioCharsetCharacterCodingException getClass] } count:1 type:[IOSClass getClass]];
}

- (JavaNioCharsetCoderResult *)encodeLoopWithJavaNioCharBuffer:(JavaNioCharBuffer *)inArg
                                         withJavaNioByteBuffer:(JavaNioByteBuffer *)outArg {
  if (byteBuffer_ != nil) {
    while ([((JavaNioByteBuffer *) nil_chk(outArg)) hasRemaining] && outIndex_ < (int) [byteBuffer_ count]) {
      [outArg putWithByte:IOSByteArray_Get(byteBuffer_, outIndex_++)];
    }
    if (outIndex_ == (int) [byteBuffer_ count]) {
      JavaNioCharsetIOSCharsetEncoder_set_byteBuffer_(self, nil);
      return [JavaNioCharsetCoderResult getUNDERFLOW];
    }
    else {
      return [JavaNioCharsetCoderResult getOVERFLOW];
    }
  }
  else if ([((JavaNioCharBuffer *) nil_chk(inArg)) hasRemaining]) {
    IOSByteArray *b = [self encodeImplWithJavaNioCharBuffer:inArg];
    if ((int) [((IOSByteArray *) nil_chk(b)) count] == 0) {
      return [JavaNioCharsetCoderResult getUNDERFLOW];
    }
    if ([((JavaNioByteBuffer *) nil_chk(outArg)) remaining] < (int) [b count]) {
      JavaNioCharsetIOSCharsetEncoder_set_byteBuffer_(self, b);
      outIndex_ = 0;
      return [self encodeLoopWithJavaNioCharBuffer:inArg withJavaNioByteBuffer:outArg];
    }
    else {
      [outArg putWithByteArray:b];
    }
  }
  return [JavaNioCharsetCoderResult getUNDERFLOW];
}

- (IOSByteArray *)encodeImplWithJavaNioCharBuffer:(JavaNioCharBuffer *)inArg {
  JavaNioCharsetCharset *cs = [self charset];
  if (!([cs isKindOfClass:[JavaNioCharsetIOSCharset class]])) {
    @throw [[[JavaNioCharsetUnsupportedCharsetException alloc] initWithNSString:[((JavaNioCharsetCharset *) nil_chk(cs)) name]] autorelease];
  }
  IOSCharArray *chars;
  int i;
  if (inBuffer_ != nil) {
    i = (int) [inBuffer_ count];
    chars = [IOSCharArray arrayWithLength:i + [((JavaNioCharBuffer *) nil_chk(inArg)) remaining]];
    [JavaLangSystem arraycopyWithId:inBuffer_ withInt:0 withId:chars withInt:0 withInt:(int) [inBuffer_ count]];
    JavaNioCharsetIOSCharsetEncoder_set_inBuffer_(self, nil);
  }
  else {
    i = 0;
    chars = [IOSCharArray arrayWithLength:[((JavaNioCharBuffer *) nil_chk(inArg)) remaining]];
  }
  [((JavaNioCharBuffer *) nil_chk(inArg)) getWithCharArray:chars withInt:i withInt:(int) [((IOSCharArray *) nil_chk(chars)) count] - i];
  IOSByteArray *bytes = [JavaNioCharsetIOSCharsetEncoder encodeWithCharArray:chars withLong:[((JavaNioCharsetIOSCharset *) nil_chk(cs)) nsEncoding]];
  if ((int) [((IOSByteArray *) nil_chk(bytes)) count] == 0) {
    JavaNioCharsetIOSCharsetEncoder_set_inBuffer_(self, chars);
  }
  else {
    JavaNioCharsetIOSCharsetEncoder_set_inBuffer_(self, nil);
  }
  return bytes;
}

+ (IOSByteArray *)encodeWithCharArray:(IOSCharArray *)inArg
                             withLong:(long long int)encoding {
  NSString *s = [NSString stringWithCharacters:[inArg charRefAtIndex:0]
  length:[inArg count]];
  NSData *data = [s dataUsingEncoding:(NSStringEncoding) encoding allowLossyConversion:NO];
  return [IOSByteArray arrayWithBytes:[data bytes] count:[data length]];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaNioCharsetIOSCharsetEncoder_set_byteBuffer_(self, nil);
  JavaNioCharsetIOSCharsetEncoder_set_inBuffer_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaNioCharsetIOSCharsetEncoder *)other {
  [super copyAllFieldsTo:other];
  JavaNioCharsetIOSCharsetEncoder_set_byteBuffer_(other, byteBuffer_);
  JavaNioCharsetIOSCharsetEncoder_set_inBuffer_(other, inBuffer_);
  other->outIndex_ = outIndex_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:inBuffer_ name:@"inBuffer"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:byteBuffer_ name:@"byteBuffer"]];
  return result;
}

@end
