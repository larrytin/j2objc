//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/nio/src/main/java/common/java/nio/ReadWriteHeapByteBuffer.java
//
//  Created by retechretech on 13-9-4.
//

#include "IOSByteArray.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/System.h"
#include "java/nio/Buffer.h"
#include "java/nio/BufferOverflowException.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/ByteOrder.h"
#include "java/nio/HeapByteBuffer.h"
#include "java/nio/ReadOnlyBufferException.h"
#include "java/nio/ReadOnlyHeapByteBuffer.h"
#include "java/nio/ReadWriteHeapByteBuffer.h"
#include "org/apache/harmony/luni/platform/Endianness.h"

@implementation JavaNioReadWriteHeapByteBuffer

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

+ (JavaNioReadWriteHeapByteBuffer *)copy__WithJavaNioHeapByteBuffer:(JavaNioHeapByteBuffer *)other
                                                            withInt:(int)markOfOther {
  JavaNioReadWriteHeapByteBuffer *buf = [[[JavaNioReadWriteHeapByteBuffer alloc] initWithByteArray:((JavaNioHeapByteBuffer *) nil_chk(other))->backingArray_ withInt:[other capacity] withInt:other->offset_] autorelease];
  buf->limit__ = [other limit];
  buf->position__ = [other position];
  buf->mark__ = markOfOther;
  [buf orderWithJavaNioByteOrder:[other order]];
  return buf;
}

- (id)initWithByteArray:(IOSByteArray *)backingArray {
  return JreMemDebugAdd([super initWithByteArray:backingArray]);
}

- (id)initWithInt:(int)capacity {
  return JreMemDebugAdd([super initWithInt:capacity]);
}

- (id)initWithByteArray:(IOSByteArray *)backingArray
                withInt:(int)capacity
                withInt:(int)arrayOffset {
  return JreMemDebugAdd([super initWithByteArray:backingArray withInt:capacity withInt:arrayOffset]);
}

- (JavaNioByteBuffer *)asReadOnlyBuffer {
  return [JavaNioReadOnlyHeapByteBuffer copy__WithJavaNioHeapByteBuffer:self withInt:mark__];
}

- (JavaNioByteBuffer *)compact {
  [JavaLangSystem arraycopyWithId:backingArray_ withInt:position__ + offset_ withId:backingArray_ withInt:offset_ withInt:[self remaining]];
  position__ = limit__ - position__;
  limit__ = capacity__;
  mark__ = JavaNioBuffer_UNSET_MARK;
  return self;
}

- (JavaNioByteBuffer *)duplicate {
  return [JavaNioReadWriteHeapByteBuffer copy__WithJavaNioHeapByteBuffer:self withInt:mark__];
}

- (BOOL)isReadOnly {
  return NO;
}

- (IOSByteArray *)protectedArray {
  return backingArray_;
}

- (int)protectedArrayOffset {
  return offset_;
}

- (BOOL)protectedHasArray {
  return YES;
}

- (JavaNioByteBuffer *)putWithChar:(char)b {
  if (position__ == limit__) {
    @throw [[[JavaNioBufferOverflowException alloc] init] autorelease];
  }
  (*[((IOSByteArray *) nil_chk(backingArray_)) byteRefAtIndex:offset_ + position__++]) = b;
  return self;
}

- (JavaNioByteBuffer *)putWithInt:(int)index
                         withChar:(char)b {
  if (index < 0 || index >= limit__) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  (*[((IOSByteArray *) nil_chk(backingArray_)) byteRefAtIndex:offset_ + index]) = b;
  return self;
}

- (JavaNioByteBuffer *)putWithByteArray:(IOSByteArray *)src
                                withInt:(int)off
                                withInt:(int)len {
  if (off < 0 || len < 0 || (long long int) off + (long long int) len > (int) [((IOSByteArray *) nil_chk(src)) count]) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  if (len > [self remaining]) {
    @throw [[[JavaNioBufferOverflowException alloc] init] autorelease];
  }
  if ([self isReadOnly]) {
    @throw [[[JavaNioReadOnlyBufferException alloc] init] autorelease];
  }
  [JavaLangSystem arraycopyWithId:src withInt:off withId:backingArray_ withInt:offset_ + position__ withInt:len];
  position__ += len;
  return self;
}

- (JavaNioByteBuffer *)putDoubleWithDouble:(double)value {
  return [self putLongWithLongInt:[JavaLangDouble doubleToRawLongBitsWithDouble:value]];
}

- (JavaNioByteBuffer *)putDoubleWithInt:(int)index
                             withDouble:(double)value {
  return [self putLongWithInt:index withLongInt:[JavaLangDouble doubleToRawLongBitsWithDouble:value]];
}

- (JavaNioByteBuffer *)putFloatWithFloat:(float)value {
  return [self putIntWithInt:[JavaLangFloat floatToIntBitsWithFloat:value]];
}

- (JavaNioByteBuffer *)putFloatWithInt:(int)index
                             withFloat:(float)value {
  return [self putIntWithInt:index withInt:[JavaLangFloat floatToIntBitsWithFloat:value]];
}

- (JavaNioByteBuffer *)putIntWithInt:(int)value {
  int newPosition = position__ + 4;
  if (newPosition > limit__) {
    @throw [[[JavaNioBufferOverflowException alloc] init] autorelease];
  }
  [self storeWithInt:position__ withInt:value];
  position__ = newPosition;
  return self;
}

- (JavaNioByteBuffer *)putIntWithInt:(int)index
                             withInt:(int)value {
  if (index < 0 || (long long int) index + 4 > limit__) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  [self storeWithInt:index withInt:value];
  return self;
}

- (JavaNioByteBuffer *)putLongWithInt:(int)index
                          withLongInt:(long long int)value {
  if (index < 0 || (long long int) index + 8 > limit__) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  [self storeWithInt:index withLongInt:value];
  return self;
}

- (JavaNioByteBuffer *)putLongWithLongInt:(long long int)value {
  int newPosition = position__ + 8;
  if (newPosition > limit__) {
    @throw [[[JavaNioBufferOverflowException alloc] init] autorelease];
  }
  [self storeWithInt:position__ withLongInt:value];
  position__ = newPosition;
  return self;
}

- (JavaNioByteBuffer *)putShortWithInt:(int)index
                          withShortInt:(short int)value {
  if (index < 0 || (long long int) index + 2 > limit__) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  [self storeWithInt:index withShortInt:value];
  return self;
}

- (JavaNioByteBuffer *)putShortWithShortInt:(short int)value {
  int newPosition = position__ + 2;
  if (newPosition > limit__) {
    @throw [[[JavaNioBufferOverflowException alloc] init] autorelease];
  }
  [self storeWithInt:position__ withShortInt:value];
  position__ = newPosition;
  return self;
}

- (JavaNioByteBuffer *)slice {
  JavaNioReadWriteHeapByteBuffer *slice = [[[JavaNioReadWriteHeapByteBuffer alloc] initWithByteArray:backingArray_ withInt:[self remaining] withInt:offset_ + position__] autorelease];
  JavaNioByteBuffer_set_order__(slice, order__);
  return slice;
}

@end
