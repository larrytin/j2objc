//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSLongArray.h"
#include "java/nio/Buffer.h"
#include "java/nio/LongArrayBuffer.h"
#include "java/nio/LongBuffer.h"
#include "java/nio/ReadOnlyBufferException.h"
#include "java/nio/ReadOnlyLongArrayBuffer.h"

@implementation JavaNioReadOnlyLongArrayBuffer

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

+ (JavaNioReadOnlyLongArrayBuffer *)copy__WithJavaNioLongArrayBuffer:(JavaNioLongArrayBuffer *)other
                                                             withInt:(int)markOfOther {
  JavaNioReadOnlyLongArrayBuffer *buf = [[[JavaNioReadOnlyLongArrayBuffer alloc] initWithInt:[((JavaNioLongArrayBuffer *) nil_chk(other)) capacity] withLongArray:other->backingArray_ withInt:other->offset_] autorelease];
  buf->limit__ = [other limit];
  buf->position__ = [other position];
  buf->mark__ = markOfOther;
  return buf;
}

- (id)initWithInt:(int)capacity
    withLongArray:(IOSLongArray *)backingArray
          withInt:(int)arrayOffset {
  return JreMemDebugAdd([super initWithInt:capacity withLongArray:backingArray withInt:arrayOffset]);
}

- (JavaNioLongBuffer *)asReadOnlyBuffer {
  return [self duplicate];
}

- (JavaNioLongBuffer *)compact {
  @throw [[[JavaNioReadOnlyBufferException alloc] init] autorelease];
}

- (JavaNioLongBuffer *)duplicate {
  return [JavaNioReadOnlyLongArrayBuffer copy__WithJavaNioLongArrayBuffer:self withInt:mark__];
}

- (BOOL)isReadOnly {
  return YES;
}

- (IOSLongArray *)protectedArray {
  @throw [[[JavaNioReadOnlyBufferException alloc] init] autorelease];
}

- (int)protectedArrayOffset {
  @throw [[[JavaNioReadOnlyBufferException alloc] init] autorelease];
}

- (BOOL)protectedHasArray {
  return NO;
}

- (JavaNioLongBuffer *)putWithLong:(long long int)c {
  @throw [[[JavaNioReadOnlyBufferException alloc] init] autorelease];
}

- (JavaNioLongBuffer *)putWithInt:(int)index
                         withLong:(long long int)c {
  @throw [[[JavaNioReadOnlyBufferException alloc] init] autorelease];
}

- (JavaNioLongBuffer *)putWithJavaNioLongBuffer:(JavaNioLongBuffer *)buf {
  @throw [[[JavaNioReadOnlyBufferException alloc] init] autorelease];
}

- (JavaNioLongBuffer *)putWithLongArray:(IOSLongArray *)src
                                withInt:(int)off
                                withInt:(int)len {
  @throw [[[JavaNioReadOnlyBufferException alloc] init] autorelease];
}

- (JavaNioLongBuffer *)slice {
  return [[[JavaNioReadOnlyLongArrayBuffer alloc] initWithInt:[self remaining] withLongArray:backingArray_ withInt:offset_ + position__] autorelease];
}

@end
