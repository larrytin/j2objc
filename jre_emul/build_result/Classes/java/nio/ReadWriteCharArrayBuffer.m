//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSCharArray.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/System.h"
#include "java/nio/Buffer.h"
#include "java/nio/BufferOverflowException.h"
#include "java/nio/CharArrayBuffer.h"
#include "java/nio/CharBuffer.h"
#include "java/nio/ReadOnlyCharArrayBuffer.h"
#include "java/nio/ReadWriteCharArrayBuffer.h"

@implementation JavaNioReadWriteCharArrayBuffer

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

+ (JavaNioReadWriteCharArrayBuffer *)copy__WithJavaNioCharArrayBuffer:(JavaNioCharArrayBuffer *)other
                                                              withInt:(int)markOfOther {
  JavaNioReadWriteCharArrayBuffer *buf = [[[JavaNioReadWriteCharArrayBuffer alloc] initWithInt:[((JavaNioCharArrayBuffer *) nil_chk(other)) capacity] withCharArray:other->backingArray_ withInt:other->offset_] autorelease];
  buf->limit__ = [other limit];
  buf->position__ = [other position];
  buf->mark__ = markOfOther;
  return buf;
}

- (id)initWithCharArray:(IOSCharArray *)array {
  return JreMemDebugAdd([super initWithCharArray:array]);
}

- (id)initWithInt:(int)capacity {
  return JreMemDebugAdd([super initWithInt:capacity]);
}

- (id)initWithInt:(int)capacity
    withCharArray:(IOSCharArray *)backingArray
          withInt:(int)arrayOffset {
  return JreMemDebugAdd([super initWithInt:capacity withCharArray:backingArray withInt:arrayOffset]);
}

- (JavaNioCharBuffer *)asReadOnlyBuffer {
  return [JavaNioReadOnlyCharArrayBuffer copy__WithJavaNioCharArrayBuffer:self withInt:mark__];
}

- (JavaNioCharBuffer *)compact {
  [JavaLangSystem arraycopyWithId:backingArray_ withInt:position__ + offset_ withId:backingArray_ withInt:offset_ withInt:[self remaining]];
  position__ = limit__ - position__;
  limit__ = capacity__;
  mark__ = JavaNioBuffer_UNSET_MARK;
  return self;
}

- (JavaNioCharBuffer *)duplicate {
  return [JavaNioReadWriteCharArrayBuffer copy__WithJavaNioCharArrayBuffer:self withInt:mark__];
}

- (BOOL)isReadOnly {
  return NO;
}

- (IOSCharArray *)protectedArray {
  return backingArray_;
}

- (int)protectedArrayOffset {
  return offset_;
}

- (BOOL)protectedHasArray {
  return YES;
}

- (JavaNioCharBuffer *)putWithChar:(unichar)c {
  if (position__ == limit__) {
    @throw [[[JavaNioBufferOverflowException alloc] init] autorelease];
  }
  (*IOSCharArray_GetRef(nil_chk(backingArray_), offset_ + position__++)) = c;
  return self;
}

- (JavaNioCharBuffer *)putWithInt:(int)index
                         withChar:(unichar)c {
  if (index < 0 || index >= limit__) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  (*IOSCharArray_GetRef(nil_chk(backingArray_), offset_ + index)) = c;
  return self;
}

- (JavaNioCharBuffer *)putWithCharArray:(IOSCharArray *)src
                                withInt:(int)off
                                withInt:(int)len {
  int length = (int) [((IOSCharArray *) nil_chk(src)) count];
  if (off < 0 || len < 0 || (long long int) len + (long long int) off > length) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  if (len > [self remaining]) {
    @throw [[[JavaNioBufferOverflowException alloc] init] autorelease];
  }
  [JavaLangSystem arraycopyWithId:src withInt:off withId:backingArray_ withInt:offset_ + position__ withInt:len];
  position__ += len;
  return self;
}

- (JavaNioCharBuffer *)slice {
  return [[[JavaNioReadWriteCharArrayBuffer alloc] initWithInt:[self remaining] withCharArray:backingArray_ withInt:offset_ + position__] autorelease];
}

@end
