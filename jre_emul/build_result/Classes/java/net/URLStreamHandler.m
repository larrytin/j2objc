//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/net/URLStreamHandler.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSClass.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/SecurityException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/StringIndexOutOfBoundsException.h"
#include "java/net/URL.h"
#include "java/net/URLStreamHandler.h"
#include "libcore/net/url/UrlUtils.h"
#include "libcore/util/Objects.h"

@implementation JavaNetURLStreamHandler

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (void)parseURLWithJavaNetURL:(JavaNetURL *)url
                  withNSString:(NSString *)spec
                       withInt:(int)start
                       withInt:(int)end {
  if (self != ((JavaNetURL *) nil_chk(url))->streamHandler_) {
    @throw [[[JavaLangSecurityException alloc] initWithNSString:@"Only a URL's stream handler is permitted to mutate it"] autorelease];
  }
  if (end < start) {
    @throw [[[JavaLangStringIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"length=%d; regionStart=%d; regionLength=%d", (int) [((NSString *) nil_chk(spec)) length], start, (end - start)]] autorelease];
  }
  int fileStart;
  NSString *authority;
  NSString *userInfo;
  NSString *host;
  int port = -1;
  NSString *path;
  NSString *query;
  NSString *ref;
  if ([((NSString *) nil_chk(spec)) regionMatches:start aString:@"//" otherOffset:0 count:2]) {
    int authorityStart = start + 2;
    fileStart = [LibcoreNetUrlUrlUtils findFirstOfWithNSString:spec withNSString:@"/?#" withInt:authorityStart withInt:end];
    authority = [spec substring:authorityStart endIndex:fileStart];
    int userInfoEnd = [LibcoreNetUrlUrlUtils findFirstOfWithNSString:spec withNSString:@"@" withInt:authorityStart withInt:fileStart];
    int hostStart;
    if (userInfoEnd != fileStart) {
      userInfo = [spec substring:authorityStart endIndex:userInfoEnd];
      hostStart = userInfoEnd + 1;
    }
    else {
      userInfo = nil;
      hostStart = authorityStart;
    }
    int colonSearchFrom = hostStart;
    int ipv6End = [LibcoreNetUrlUrlUtils findFirstOfWithNSString:spec withNSString:@"]" withInt:hostStart withInt:fileStart];
    if (ipv6End != fileStart) {
      if ([LibcoreNetUrlUrlUtils findFirstOfWithNSString:spec withNSString:@":" withInt:hostStart withInt:ipv6End] == ipv6End) {
        @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Expected an IPv6 address: %@", [spec substring:hostStart endIndex:ipv6End + 1]]] autorelease];
      }
      colonSearchFrom = ipv6End;
    }
    int hostEnd = [LibcoreNetUrlUrlUtils findFirstOfWithNSString:spec withNSString:@":" withInt:colonSearchFrom withInt:fileStart];
    host = [spec substring:hostStart endIndex:hostEnd];
    int portStart = hostEnd + 1;
    if (portStart < fileStart) {
      port = [JavaLangInteger parseIntWithNSString:[spec substring:portStart endIndex:fileStart]];
      if (port < 0) {
        @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"port < 0: %d", port]] autorelease];
      }
    }
    path = nil;
    query = nil;
    ref = nil;
  }
  else {
    fileStart = start;
    authority = [url getAuthority];
    userInfo = [url getUserInfo];
    host = [url getHost];
    if (host == nil) {
      host = @"";
    }
    port = [url getPort];
    path = [url getPath];
    query = [url getQuery];
    ref = [url getRef];
  }
  int pos = fileStart;
  while (pos < end) {
    int nextPos;
    switch ([spec charAtWithInt:pos]) {
      case '#':
      nextPos = end;
      ref = [spec substring:pos + 1 endIndex:nextPos];
      break;
      case '?':
      nextPos = [LibcoreNetUrlUrlUtils findFirstOfWithNSString:spec withNSString:@"#" withInt:pos withInt:end];
      query = [spec substring:pos + 1 endIndex:nextPos];
      ref = nil;
      break;
      default:
      nextPos = [LibcoreNetUrlUrlUtils findFirstOfWithNSString:spec withNSString:@"?#" withInt:pos withInt:end];
      path = [JavaNetURLStreamHandler relativePathWithNSString:path withNSString:[spec substring:pos endIndex:nextPos]];
      query = nil;
      ref = nil;
      break;
    }
    pos = nextPos;
  }
  if (path == nil) {
    path = @"";
  }
  path = [LibcoreNetUrlUrlUtils authoritySafePathWithNSString:authority withNSString:path];
  [self setURLWithJavaNetURL:url withNSString:[url getProtocol] withNSString:host withInt:port withNSString:authority withNSString:userInfo withNSString:path withNSString:query withNSString:ref];
}

+ (NSString *)relativePathWithNSString:(NSString *)base
                          withNSString:(NSString *)path {
  if ([((NSString *) nil_chk(path)) hasPrefix:@"/"]) {
    return [LibcoreNetUrlUrlUtils canonicalizePathWithNSString:path withBoolean:YES];
  }
  else if (base != nil) {
    NSString *combined = [NSString stringWithFormat:@"%@%@", [base substring:0 endIndex:[base lastIndexOf:'/'] + 1], path];
    return [LibcoreNetUrlUrlUtils canonicalizePathWithNSString:combined withBoolean:YES];
  }
  else {
    return path;
  }
}

- (void)setURLWithJavaNetURL:(JavaNetURL *)u
                withNSString:(NSString *)protocol
                withNSString:(NSString *)host
                     withInt:(int)port
                withNSString:(NSString *)file
                withNSString:(NSString *)ref {
  if (self != ((JavaNetURL *) nil_chk(u))->streamHandler_) {
    @throw [[[JavaLangSecurityException alloc] init] autorelease];
  }
  [u setWithNSString:protocol withNSString:host withInt:port withNSString:file withNSString:ref];
}

- (void)setURLWithJavaNetURL:(JavaNetURL *)u
                withNSString:(NSString *)protocol
                withNSString:(NSString *)host
                     withInt:(int)port
                withNSString:(NSString *)authority
                withNSString:(NSString *)userInfo
                withNSString:(NSString *)path
                withNSString:(NSString *)query
                withNSString:(NSString *)ref {
  if (self != ((JavaNetURL *) nil_chk(u))->streamHandler_) {
    @throw [[[JavaLangSecurityException alloc] init] autorelease];
  }
  [u setWithNSString:protocol withNSString:host withInt:port withNSString:authority withNSString:userInfo withNSString:path withNSString:query withNSString:ref];
}

- (NSString *)toExternalFormWithJavaNetURL:(JavaNetURL *)url {
  return [self toExternalFormWithJavaNetURL:url withBoolean:NO];
}

- (NSString *)toExternalFormWithJavaNetURL:(JavaNetURL *)url
                               withBoolean:(BOOL)escapeIllegalCharacters {
  JavaLangStringBuilder *result = [[[JavaLangStringBuilder alloc] init] autorelease];
  [result appendWithNSString:[((JavaNetURL *) nil_chk(url)) getProtocol]];
  [result appendWithChar:':'];
  NSString *authority = [url getAuthority];
  if (authority != nil) {
    [result appendWithNSString:@"//"];
    [result appendWithNSString:authority];
  }
  NSString *fileAndQuery = [url getFile];
  if (fileAndQuery != nil) {
    [result appendWithNSString:fileAndQuery];
  }
  NSString *ref = [url getRef];
  if (ref != nil) {
    [result appendWithChar:'#'];
    [result appendWithNSString:ref];
  }
  return [result description];
}

- (BOOL)equalsWithJavaNetURL:(JavaNetURL *)a
              withJavaNetURL:(JavaNetURL *)b {
  return [self sameFileWithJavaNetURL:a withJavaNetURL:b] && [LibcoreUtilObjects equalWithId:[((JavaNetURL *) nil_chk(a)) getRef] withId:[((JavaNetURL *) nil_chk(b)) getRef]] && [LibcoreUtilObjects equalWithId:[a getQuery] withId:[b getQuery]];
}

- (int)getDefaultPort {
  return -1;
}

- (int)hashCodeWithJavaNetURL:(JavaNetURL *)url {
  return [((NSString *) nil_chk([self toExternalFormWithJavaNetURL:url])) hash];
}

- (BOOL)hostsEqualWithJavaNetURL:(JavaNetURL *)a
                  withJavaNetURL:(JavaNetURL *)b {
  NSString *aHost = [((JavaNetURL *) nil_chk(a)) getHost];
  NSString *bHost = [((JavaNetURL *) nil_chk(b)) getHost];
  return (aHost == bHost) || (aHost != nil && [aHost equalsIgnoreCase:bHost]);
}

- (BOOL)sameFileWithJavaNetURL:(JavaNetURL *)url1
                withJavaNetURL:(JavaNetURL *)url2 {
  NSString *s1 = [((JavaNetURL *) nil_chk(url1)) getProtocol];
  NSString *s2 = [((JavaNetURL *) nil_chk(url2)) getProtocol];
  if (s1 != s2 && (s1 == nil || ![s1 isEqual:s2])) {
    return NO;
  }
  s1 = [url1 getFile];
  s2 = [url2 getFile];
  if (s1 != s2 && (s1 == nil || ![s1 isEqual:s2])) {
    return NO;
  }
  if (![self hostsEqualWithJavaNetURL:url1 withJavaNetURL:url2]) {
    return NO;
  }
  int p1 = [url1 getPort];
  if (p1 == -1) {
    p1 = [self getDefaultPort];
  }
  int p2 = [url2 getPort];
  if (p2 == -1) {
    p2 = [self getDefaultPort];
  }
  return p1 == p2;
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

+ (IOSObjectArray *)__annotations_setURLWithJavaNetURL_withNSString_withNSString_withInt_withNSString_withNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecatedImpl alloc] init] autorelease] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

@end
