//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/luni/src/main/java/java/net/URI.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSBooleanArray.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/Character.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/net/URI.h"
#include "java/net/URIEncoderDecoder.h"
#include "java/net/URISyntaxException.h"
#include "java/util/StringTokenizer.h"

@implementation JavaNetURI

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaNetURI_unreserved_ name:@"JavaNetURI_unreserved_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaNetURI_punct_ name:@"JavaNetURI_punct_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaNetURI_reserved_ name:@"JavaNetURI_reserved_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaNetURI_someLegal_ name:@"JavaNetURI_someLegal_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaNetURI_queryLegal_ name:@"JavaNetURI_queryLegal_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaNetURI_allLegal_ name:@"JavaNetURI_allLegal_"]];
  return result;
}

static NSString * JavaNetURI_unreserved_ = @"_-!.~\'()*";
static NSString * JavaNetURI_punct_ = @",;:$&+=";
static NSString * JavaNetURI_reserved_ = @",;:$&+=?/[]@";
static NSString * JavaNetURI_someLegal_ = @"_-!.~'()*,;:$&+=";
static NSString * JavaNetURI_queryLegal_ = @"_-!.~'()*,;:$&+=?/[]@\\\"";
static NSString * JavaNetURI_allLegal_ = @"_-!.~'()*,;:$&+=?/[]@";

+ (NSString *)unreserved {
  return JavaNetURI_unreserved_;
}

+ (NSString *)punct {
  return JavaNetURI_punct_;
}

+ (NSString *)reserved {
  return JavaNetURI_reserved_;
}

+ (NSString *)someLegal {
  return JavaNetURI_someLegal_;
}

+ (NSString *)queryLegal {
  return JavaNetURI_queryLegal_;
}

+ (NSString *)allLegal {
  return JavaNetURI_allLegal_;
}

- (id)init {
  if (self = [super init]) {
    port_ = -1;
    serverAuthority_ = NO;
    hash__ = -1;
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithNSString:(NSString *)uri {
  if (self = [super init]) {
    port_ = -1;
    serverAuthority_ = NO;
    hash__ = -1;
    [((JavaNetURI_Helper *) [[[JavaNetURI_Helper alloc] initWithJavaNetURI:self] autorelease]) parseURIWithNSString:uri withBoolean:NO];
    JreMemDebugAdd(self);
  }
  return self;
}

+ (IOSObjectArray *)__exceptions_JavaNetURIWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaNetURISyntaxException getClass] } count:1 type:[IOSClass getClass]];
}

- (id)initWithNSString:(NSString *)scheme
          withNSString:(NSString *)ssp
          withNSString:(NSString *)frag {
  if (self = [super init]) {
    port_ = -1;
    serverAuthority_ = NO;
    hash__ = -1;
    JavaLangStringBuilder *uri = [[[JavaLangStringBuilder alloc] init] autorelease];
    if (scheme != nil) {
      [uri appendWithNSString:scheme];
      [uri appendWithChar:':'];
    }
    if (ssp != nil) {
      [uri appendWithNSString:[self quoteComponentWithNSString:ssp withNSString:JavaNetURI_allLegal_]];
    }
    if (frag != nil) {
      [uri appendWithChar:'#'];
      [uri appendWithNSString:[self quoteComponentWithNSString:frag withNSString:JavaNetURI_allLegal_]];
    }
    [((JavaNetURI_Helper *) [[[JavaNetURI_Helper alloc] initWithJavaNetURI:self] autorelease]) parseURIWithNSString:[uri description] withBoolean:NO];
    JreMemDebugAdd(self);
  }
  return self;
}

+ (IOSObjectArray *)__exceptions_JavaNetURIWithNSString_withNSString_withNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaNetURISyntaxException getClass] } count:1 type:[IOSClass getClass]];
}

- (id)initJavaNetURIWithNSString:(NSString *)scheme
                    withNSString:(NSString *)userinfo
                    withNSString:(NSString *)host
                         withInt:(int)port
                    withNSString:(NSString *)path
                    withNSString:(NSString *)query
                    withNSString:(NSString *)fragment {
  if (self = [super init]) {
    port_ = -1;
    serverAuthority_ = NO;
    hash__ = -1;
    if (scheme == nil && userinfo == nil && host == nil && path == nil && query == nil && fragment == nil) {
      JavaNetURI_set_path_(self, @"");
      return self;
    }
    if (scheme != nil && path != nil && [path length] > 0 && [path charAtWithInt:0] != '/') {
      @throw [[[JavaNetURISyntaxException alloc] initWithNSString:path withNSString:@"Relative path"] autorelease];
    }
    JavaLangStringBuilder *uri = [[[JavaLangStringBuilder alloc] init] autorelease];
    if (scheme != nil) {
      [uri appendWithNSString:scheme];
      [uri appendWithChar:':'];
    }
    if (userinfo != nil || host != nil || port != -1) {
      [uri appendWithNSString:@"//"];
    }
    if (userinfo != nil) {
      [uri appendWithNSString:[self quoteComponentWithNSString:userinfo withNSString:JavaNetURI_someLegal_]];
      [uri appendWithChar:'@'];
    }
    if (host != nil) {
      if ([host indexOf:':'] != -1 && [host indexOf:']'] == -1 && [host indexOf:'['] == -1) {
        host = [NSString stringWithFormat:@"[%@]", host];
      }
      [uri appendWithNSString:host];
    }
    if (port != -1) {
      [uri appendWithChar:':'];
      [uri appendWithInt:port];
    }
    if (path != nil) {
      [uri appendWithNSString:[self quoteComponentWithNSString:path withNSString:@"/@_-!.~'()*,;:$&+="]];
    }
    if (query != nil) {
      [uri appendWithChar:'?'];
      [uri appendWithNSString:[self quoteComponentWithNSString:query withNSString:JavaNetURI_allLegal_]];
    }
    if (fragment != nil) {
      [uri appendWithChar:'#'];
      [uri appendWithNSString:[self quoteComponentWithNSString:fragment withNSString:JavaNetURI_allLegal_]];
    }
    [((JavaNetURI_Helper *) [[[JavaNetURI_Helper alloc] initWithJavaNetURI:self] autorelease]) parseURIWithNSString:[uri description] withBoolean:YES];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithNSString:(NSString *)scheme
          withNSString:(NSString *)userinfo
          withNSString:(NSString *)host
               withInt:(int)port
          withNSString:(NSString *)path
          withNSString:(NSString *)query
          withNSString:(NSString *)fragment {
  return [self initJavaNetURIWithNSString:scheme withNSString:userinfo withNSString:host withInt:port withNSString:path withNSString:query withNSString:fragment];
}

- (id)initWithNSString:(NSString *)scheme
          withNSString:(NSString *)host
          withNSString:(NSString *)path
          withNSString:(NSString *)fragment {
  return JreMemDebugAdd([self initJavaNetURIWithNSString:scheme withNSString:nil withNSString:host withInt:-1 withNSString:path withNSString:nil withNSString:fragment]);
}

+ (IOSObjectArray *)__exceptions_JavaNetURIWithNSString_withNSString_withNSString_withNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaNetURISyntaxException getClass] } count:1 type:[IOSClass getClass]];
}

- (id)initWithNSString:(NSString *)scheme
          withNSString:(NSString *)authority
          withNSString:(NSString *)path
          withNSString:(NSString *)query
          withNSString:(NSString *)fragment {
  if (self = [super init]) {
    port_ = -1;
    serverAuthority_ = NO;
    hash__ = -1;
    if (scheme != nil && path != nil && [path length] > 0 && [path charAtWithInt:0] != '/') {
      @throw [[[JavaNetURISyntaxException alloc] initWithNSString:path withNSString:@"Relative path"] autorelease];
    }
    JavaLangStringBuilder *uri = [[[JavaLangStringBuilder alloc] init] autorelease];
    if (scheme != nil) {
      [uri appendWithNSString:scheme];
      [uri appendWithChar:':'];
    }
    if (authority != nil) {
      [uri appendWithNSString:@"//"];
      [uri appendWithNSString:[self quoteComponentWithNSString:authority withNSString:@"@[]_-!.~'()*,;:$&+="]];
    }
    if (path != nil) {
      [uri appendWithNSString:[self quoteComponentWithNSString:path withNSString:@"/@_-!.~'()*,;:$&+="]];
    }
    if (query != nil) {
      [uri appendWithChar:'?'];
      [uri appendWithNSString:[self quoteComponentWithNSString:query withNSString:JavaNetURI_allLegal_]];
    }
    if (fragment != nil) {
      [uri appendWithChar:'#'];
      [uri appendWithNSString:[self quoteComponentWithNSString:fragment withNSString:JavaNetURI_allLegal_]];
    }
    [((JavaNetURI_Helper *) [[[JavaNetURI_Helper alloc] initWithJavaNetURI:self] autorelease]) parseURIWithNSString:[uri description] withBoolean:NO];
    JreMemDebugAdd(self);
  }
  return self;
}

+ (IOSObjectArray *)__exceptions_JavaNetURIWithNSString_withNSString_withNSString_withNSString_withNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaNetURISyntaxException getClass] } count:1 type:[IOSClass getClass]];
}

- (NSString *)quoteComponentWithNSString:(NSString *)component
                            withNSString:(NSString *)legalset {
  @try {
    return [JavaNetURIEncoderDecoder quoteIllegalWithNSString:component withNSString:legalset];
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw [[[JavaLangRuntimeException alloc] initWithNSString:[((JavaIoUnsupportedEncodingException *) nil_chk(e)) description]] autorelease];
  }
}

- (int)compareToWithId:(JavaNetURI *)uri {
  if (uri != nil && ![uri isKindOfClass:[JavaNetURI class]]) {
    @throw [[[JavaLangClassCastException alloc] init] autorelease];
  }
  int ret = 0;
  if (scheme_ == nil && ((JavaNetURI *) nil_chk(uri))->scheme_ != nil) {
    return -1;
  }
  else if (scheme_ != nil && ((JavaNetURI *) nil_chk(uri))->scheme_ == nil) {
    return 1;
  }
  else if (scheme_ != nil && ((JavaNetURI *) nil_chk(uri))->scheme_ != nil) {
    ret = [scheme_ compareToIgnoreCase:uri->scheme_];
    if (ret != 0) {
      return ret;
    }
  }
  if (!opaque_ && ((JavaNetURI *) nil_chk(uri))->opaque_) {
    return -1;
  }
  else if (opaque_ && !((JavaNetURI *) nil_chk(uri))->opaque_) {
    return 1;
  }
  else if (opaque_ && ((JavaNetURI *) nil_chk(uri))->opaque_) {
    ret = [((NSString *) nil_chk(schemespecificpart_)) compareToWithId:uri->schemespecificpart_];
    if (ret != 0) {
      return ret;
    }
  }
  else {
    if (authority_ != nil && ((JavaNetURI *) nil_chk(uri))->authority_ == nil) {
      return 1;
    }
    else if (authority_ == nil && ((JavaNetURI *) nil_chk(uri))->authority_ != nil) {
      return -1;
    }
    else if (authority_ != nil && ((JavaNetURI *) nil_chk(uri))->authority_ != nil) {
      if (host_ != nil && uri->host_ != nil) {
        if (userinfo_ != nil && uri->userinfo_ == nil) {
          return 1;
        }
        else if (userinfo_ == nil && uri->userinfo_ != nil) {
          return -1;
        }
        else if (userinfo_ != nil && uri->userinfo_ != nil) {
          ret = [userinfo_ compareToWithId:uri->userinfo_];
          if (ret != 0) {
            return ret;
          }
        }
        ret = [host_ compareToIgnoreCase:uri->host_];
        if (ret != 0) {
          return ret;
        }
        if (port_ != uri->port_) {
          return port_ - uri->port_;
        }
      }
      else {
        ret = [authority_ compareToWithId:uri->authority_];
        if (ret != 0) {
          return ret;
        }
      }
    }
    ret = [((NSString *) nil_chk(path_)) compareToWithId:((JavaNetURI *) nil_chk(uri))->path_];
    if (ret != 0) {
      return ret;
    }
    if (query_ != nil && uri->query_ == nil) {
      return 1;
    }
    else if (query_ == nil && uri->query_ != nil) {
      return -1;
    }
    else if (query_ != nil && uri->query_ != nil) {
      ret = [query_ compareToWithId:uri->query_];
      if (ret != 0) {
        return ret;
      }
    }
  }
  if (fragment_ != nil && ((JavaNetURI *) nil_chk(uri))->fragment_ == nil) {
    return 1;
  }
  else if (fragment_ == nil && ((JavaNetURI *) nil_chk(uri))->fragment_ != nil) {
    return -1;
  }
  else if (fragment_ != nil && ((JavaNetURI *) nil_chk(uri))->fragment_ != nil) {
    ret = [fragment_ compareToWithId:uri->fragment_];
    if (ret != 0) {
      return ret;
    }
  }
  return 0;
}

+ (JavaNetURI *)createWithNSString:(NSString *)uri {
  JavaNetURI *result = nil;
  @try {
    result = [[[JavaNetURI alloc] initWithNSString:uri] autorelease];
  }
  @catch (JavaNetURISyntaxException *e) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:[((JavaNetURISyntaxException *) nil_chk(e)) getMessage]] autorelease];
  }
  return result;
}

- (JavaNetURI *)duplicate {
  JavaNetURI *clone = [[[JavaNetURI alloc] init] autorelease];
  clone->absolute_ = absolute_;
  JavaNetURI_set_authority_(clone, authority_);
  JavaNetURI_set_fragment_(clone, fragment_);
  JavaNetURI_set_host_(clone, host_);
  clone->opaque_ = opaque_;
  JavaNetURI_set_path_(clone, path_);
  clone->port_ = port_;
  JavaNetURI_set_query_(clone, query_);
  JavaNetURI_set_scheme_(clone, scheme_);
  JavaNetURI_set_schemespecificpart_(clone, schemespecificpart_);
  JavaNetURI_set_userinfo_(clone, userinfo_);
  clone->serverAuthority_ = serverAuthority_;
  return clone;
}

- (NSString *)convertHexToLowerCaseWithNSString:(NSString *)s {
  JavaLangStringBuilder *result = [[[JavaLangStringBuilder alloc] initWithNSString:@""] autorelease];
  if ([((NSString *) nil_chk(s)) indexOf:'%'] == -1) {
    return s;
  }
  int index = 0, previndex = 0;
  while ((index = [s indexOf:'%' fromIndex:previndex]) != -1) {
    [result appendWithNSString:[s substring:previndex endIndex:index + 1]];
    [result appendWithNSString:[((NSString *) nil_chk([s substring:index + 1 endIndex:index + 3])) lowercaseString]];
    index += 3;
    previndex = index;
  }
  return [result description];
}

- (BOOL)equalsHexCaseInsensitiveWithNSString:(NSString *)first
                                withNSString:(NSString *)second {
  if ([((NSString *) nil_chk(first)) indexOf:'%'] != [((NSString *) nil_chk(second)) indexOf:'%']) {
    return [first isEqual:second];
  }
  int index = 0, previndex = 0;
  while ((index = [first indexOf:'%' fromIndex:previndex]) != -1 && [second indexOf:'%' fromIndex:previndex] == index) {
    BOOL match = [((NSString *) nil_chk([first substring:previndex endIndex:index])) isEqual:[second substring:previndex endIndex:index]];
    if (!match) {
      return NO;
    }
    match = [((NSString *) nil_chk([first substring:index + 1 endIndex:index + 3])) equalsIgnoreCase:[second substring:index + 1 endIndex:index + 3]];
    if (!match) {
      return NO;
    }
    index += 3;
    previndex = index;
  }
  return [((NSString *) nil_chk([first substring:previndex])) isEqual:[second substring:previndex]];
}

- (BOOL)isEqual:(id)o {
  if (!([o isKindOfClass:[JavaNetURI class]])) {
    return NO;
  }
  JavaNetURI *uri = (JavaNetURI *) check_class_cast(o, [JavaNetURI class]);
  if ((((JavaNetURI *) nil_chk(uri))->fragment_ == nil && fragment_ != nil) || (uri->fragment_ != nil && fragment_ == nil)) {
    return NO;
  }
  else if (uri->fragment_ != nil && fragment_ != nil) {
    if (![self equalsHexCaseInsensitiveWithNSString:uri->fragment_ withNSString:fragment_]) {
      return NO;
    }
  }
  if ((uri->scheme_ == nil && scheme_ != nil) || (uri->scheme_ != nil && scheme_ == nil)) {
    return NO;
  }
  else if (uri->scheme_ != nil && scheme_ != nil) {
    if (![uri->scheme_ equalsIgnoreCase:scheme_]) {
      return NO;
    }
  }
  if (uri->opaque_ && opaque_) {
    return [self equalsHexCaseInsensitiveWithNSString:uri->schemespecificpart_ withNSString:schemespecificpart_];
  }
  else if (!uri->opaque_ && !opaque_) {
    if (![self equalsHexCaseInsensitiveWithNSString:path_ withNSString:uri->path_]) {
      return NO;
    }
    if ((uri->query_ != nil && query_ == nil) || (uri->query_ == nil && query_ != nil)) {
      return NO;
    }
    else if (uri->query_ != nil && query_ != nil) {
      if (![self equalsHexCaseInsensitiveWithNSString:uri->query_ withNSString:query_]) {
        return NO;
      }
    }
    if ((uri->authority_ != nil && authority_ == nil) || (uri->authority_ == nil && authority_ != nil)) {
      return NO;
    }
    else if (uri->authority_ != nil && authority_ != nil) {
      if ((uri->host_ != nil && host_ == nil) || (uri->host_ == nil && host_ != nil)) {
        return NO;
      }
      else if (uri->host_ == nil && host_ == nil) {
        return [self equalsHexCaseInsensitiveWithNSString:uri->authority_ withNSString:authority_];
      }
      else {
        if (![((NSString *) nil_chk(host_)) equalsIgnoreCase:uri->host_]) {
          return NO;
        }
        if (port_ != uri->port_) {
          return NO;
        }
        if ((uri->userinfo_ != nil && userinfo_ == nil) || (uri->userinfo_ == nil && userinfo_ != nil)) {
          return NO;
        }
        else if (uri->userinfo_ != nil && userinfo_ != nil) {
          return [self equalsHexCaseInsensitiveWithNSString:userinfo_ withNSString:uri->userinfo_];
        }
        else {
          return YES;
        }
      }
    }
    else {
      return YES;
    }
  }
  else {
    return NO;
  }
}

- (NSString *)getAuthority {
  return [self decodeWithNSString:authority_];
}

- (NSString *)getFragment {
  return [self decodeWithNSString:fragment_];
}

- (NSString *)getHost {
  return host_;
}

- (NSString *)getPath {
  return [self decodeWithNSString:path_];
}

- (int)getPort {
  return port_;
}

- (NSString *)getQuery {
  return [self decodeWithNSString:query_];
}

- (NSString *)getRawAuthority {
  return authority_;
}

- (NSString *)getRawFragment {
  return fragment_;
}

- (NSString *)getRawPath {
  return path_;
}

- (NSString *)getRawQuery {
  return query_;
}

- (NSString *)getRawSchemeSpecificPart {
  return schemespecificpart_;
}

- (NSString *)getRawUserInfo {
  return userinfo_;
}

- (NSString *)getScheme {
  return scheme_;
}

- (NSString *)getSchemeSpecificPart {
  return [self decodeWithNSString:schemespecificpart_];
}

- (NSString *)getUserInfo {
  return [self decodeWithNSString:userinfo_];
}

- (NSUInteger)hash {
  if (hash__ == -1) {
    hash__ = [((NSString *) nil_chk([self getHashString])) hash];
  }
  return hash__;
}

- (BOOL)isAbsolute {
  return absolute_;
}

- (BOOL)isOpaque {
  return opaque_;
}

- (NSString *)normalizeWithNSString:(NSString *)path {
  int index = -1;
  int pathlen = [((NSString *) nil_chk(path)) length];
  int size = 0;
  if (pathlen > 0 && [path charAtWithInt:0] != '/') {
    size++;
  }
  while ((index = [path indexOf:'/' fromIndex:index + 1]) != -1) {
    if (index + 1 < pathlen && [path charAtWithInt:index + 1] != '/') {
      size++;
    }
  }
  IOSObjectArray *seglist = [IOSObjectArray arrayWithLength:size type:[IOSClass classWithClass:[NSString class]]];
  IOSBooleanArray *include = [IOSBooleanArray arrayWithLength:size];
  int current = 0;
  int index2 = 0;
  index = (pathlen > 0 && [path charAtWithInt:0] == '/') ? 1 : 0;
  while ((index2 = [path indexOf:'/' fromIndex:index + 1]) != -1) {
    IOSObjectArray_Set(seglist, current++, [path substring:index endIndex:index2]);
    index = index2 + 1;
  }
  if (current < size) {
    IOSObjectArray_Set(seglist, current, [path substring:index]);
  }
  for (int i = 0; i < size; i++) {
    (*IOSBooleanArray_GetRef(include, i)) = YES;
    if ([((NSString *) nil_chk(IOSObjectArray_Get(seglist, i))) isEqual:@".."]) {
      int remove = i - 1;
      while (remove > -1 && !IOSBooleanArray_Get(include, remove)) {
        remove--;
      }
      if (remove > -1 && ![((NSString *) nil_chk(IOSObjectArray_Get(seglist, remove))) isEqual:@".."]) {
        (*IOSBooleanArray_GetRef(include, remove)) = NO;
        (*IOSBooleanArray_GetRef(include, i)) = NO;
      }
    }
    else if ([((NSString *) nil_chk(IOSObjectArray_Get(seglist, i))) isEqual:@"."]) {
      (*IOSBooleanArray_GetRef(include, i)) = NO;
    }
  }
  JavaLangStringBuilder *newpath = [[[JavaLangStringBuilder alloc] init] autorelease];
  if ([path hasPrefix:@"/"]) {
    [newpath appendWithChar:'/'];
  }
  for (int i = 0; i < (int) [seglist count]; i++) {
    if (IOSBooleanArray_Get(include, i)) {
      [newpath appendWithNSString:IOSObjectArray_Get(seglist, i)];
      [newpath appendWithChar:'/'];
    }
  }
  if (![path hasSuffix:@"/"] && (int) [seglist count] > 0 && IOSBooleanArray_Get(include, (int) [seglist count] - 1)) {
    [newpath deleteCharAtWithInt:[newpath sequenceLength] - 1];
  }
  NSString *result = [newpath description];
  index = [((NSString *) nil_chk(result)) indexOf:':'];
  index2 = [result indexOf:'/'];
  if (index != -1 && (index < index2 || index2 == -1)) {
    [newpath insertWithInt:0 withNSString:@"./"];
    result = [newpath description];
  }
  return result;
}

- (JavaNetURI *)normalize {
  if (opaque_) {
    return self;
  }
  NSString *normalizedPath = [self normalizeWithNSString:path_];
  if ([((NSString *) nil_chk(path_)) isEqual:normalizedPath]) {
    return self;
  }
  JavaNetURI *result = [self duplicate];
  JavaNetURI_set_path_(nil_chk(result), normalizedPath);
  [result setSchemeSpecificPart];
  return result;
}

- (JavaNetURI *)parseServerAuthority {
  if (!serverAuthority_) {
    [((JavaNetURI_Helper *) [[[JavaNetURI_Helper alloc] initWithJavaNetURI:self] autorelease]) parseAuthorityWithBoolean:YES];
  }
  return self;
}

+ (IOSObjectArray *)__exceptions_parseServerAuthority {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaNetURISyntaxException getClass] } count:1 type:[IOSClass getClass]];
}

- (JavaNetURI *)relativizeWithJavaNetURI:(JavaNetURI *)relative {
  if (((JavaNetURI *) nil_chk(relative))->opaque_ || opaque_) {
    return relative;
  }
  if (scheme_ == nil ? relative->scheme_ != nil : ![scheme_ isEqual:relative->scheme_]) {
    return relative;
  }
  if (authority_ == nil ? relative->authority_ != nil : ![authority_ isEqual:relative->authority_]) {
    return relative;
  }
  NSString *thisPath = [self normalizeWithNSString:path_];
  NSString *relativePath = [self normalizeWithNSString:relative->path_];
  if (![((NSString *) nil_chk(thisPath)) isEqual:relativePath]) {
    if (![thisPath hasSuffix:@"/"]) {
      thisPath = [NSString stringWithFormat:@"%@/", thisPath];
    }
    if (![((NSString *) nil_chk(relativePath)) hasPrefix:thisPath]) {
      return relative;
    }
  }
  JavaNetURI *result = [[[JavaNetURI alloc] init] autorelease];
  JavaNetURI_set_fragment_(result, relative->fragment_);
  JavaNetURI_set_query_(result, relative->query_);
  JavaNetURI_set_path_(result, [((NSString *) nil_chk(relativePath)) substring:[thisPath length]]);
  [result setSchemeSpecificPart];
  return result;
}

- (JavaNetURI *)resolveWithJavaNetURI:(JavaNetURI *)relative {
  if (((JavaNetURI *) nil_chk(relative))->absolute_ || opaque_) {
    return relative;
  }
  JavaNetURI *result;
  if ([((NSString *) nil_chk(relative->path_)) isEqual:@""] && relative->scheme_ == nil && relative->authority_ == nil && relative->query_ == nil && relative->fragment_ != nil) {
    result = [self duplicate];
    JavaNetURI_set_fragment_(nil_chk(result), relative->fragment_);
    return result;
  }
  if (relative->authority_ != nil) {
    result = [relative duplicate];
    JavaNetURI_set_scheme_(nil_chk(result), scheme_);
    result->absolute_ = absolute_;
  }
  else {
    result = [self duplicate];
    JavaNetURI_set_fragment_(nil_chk(result), relative->fragment_);
    JavaNetURI_set_query_(result, relative->query_);
    if ([relative->path_ hasPrefix:@"/"]) {
      JavaNetURI_set_path_(result, relative->path_);
    }
    else {
      int endindex = [path_ lastIndexOf:'/'] + 1;
      JavaNetURI_set_path_(result, [self normalizeWithNSString:[NSString stringWithFormat:@"%@%@", [path_ substring:0 endIndex:endindex], relative->path_]]);
    }
    [result setSchemeSpecificPart];
  }
  return result;
}

- (void)setSchemeSpecificPart {
  JavaLangStringBuilder *ssp = [[[JavaLangStringBuilder alloc] init] autorelease];
  if (authority_ != nil) {
    [ssp appendWithNSString:[NSString stringWithFormat:@"//%@", authority_]];
  }
  if (path_ != nil) {
    [ssp appendWithNSString:path_];
  }
  if (query_ != nil) {
    [ssp appendWithNSString:[NSString stringWithFormat:@"?%@", query_]];
  }
  JavaNetURI_set_schemespecificpart_(self, [ssp description]);
  JavaNetURI_set_string_(self, nil);
}

- (JavaNetURI *)resolveWithNSString:(NSString *)relative {
  return [self resolveWithJavaNetURI:[JavaNetURI createWithNSString:relative]];
}

- (NSString *)encodeOthersWithNSString:(NSString *)s {
  @try {
    return [JavaNetURIEncoderDecoder encodeOthersWithNSString:s];
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw [[[JavaLangRuntimeException alloc] initWithNSString:[((JavaIoUnsupportedEncodingException *) nil_chk(e)) description]] autorelease];
  }
}

- (NSString *)decodeWithNSString:(NSString *)s {
  if (s == nil) {
    return s;
  }
  @try {
    return [JavaNetURIEncoderDecoder decodeWithNSString:s];
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw [[[JavaLangRuntimeException alloc] initWithNSString:[((JavaIoUnsupportedEncodingException *) nil_chk(e)) description]] autorelease];
  }
}

- (NSString *)toASCIIString {
  return [self encodeOthersWithNSString:[self description]];
}

- (NSString *)description {
  if (string_ == nil) {
    JavaLangStringBuilder *result = [[[JavaLangStringBuilder alloc] init] autorelease];
    if (scheme_ != nil) {
      [result appendWithNSString:scheme_];
      [result appendWithChar:':'];
    }
    if (opaque_) {
      [result appendWithNSString:schemespecificpart_];
    }
    else {
      if (authority_ != nil) {
        [result appendWithNSString:@"//"];
        [result appendWithNSString:authority_];
      }
      if (path_ != nil) {
        [result appendWithNSString:path_];
      }
      if (query_ != nil) {
        [result appendWithChar:'?'];
        [result appendWithNSString:query_];
      }
    }
    if (fragment_ != nil) {
      [result appendWithChar:'#'];
      [result appendWithNSString:fragment_];
    }
    JavaNetURI_set_string_(self, [result description]);
  }
  return string_;
}

- (NSString *)getHashString {
  JavaLangStringBuilder *result = [[[JavaLangStringBuilder alloc] init] autorelease];
  if (scheme_ != nil) {
    [result appendWithNSString:[scheme_ lowercaseString]];
    [result appendWithChar:':'];
  }
  if (opaque_) {
    [result appendWithNSString:schemespecificpart_];
  }
  else {
    if (authority_ != nil) {
      [result appendWithNSString:@"//"];
      if (host_ == nil) {
        [result appendWithNSString:authority_];
      }
      else {
        if (userinfo_ != nil) {
          [result appendWithNSString:[NSString stringWithFormat:@"%@@", userinfo_]];
        }
        [result appendWithNSString:[host_ lowercaseString]];
        if (port_ != -1) {
          [result appendWithNSString:[NSString stringWithFormat:@":%d", port_]];
        }
      }
    }
    if (path_ != nil) {
      [result appendWithNSString:path_];
    }
    if (query_ != nil) {
      [result appendWithChar:'?'];
      [result appendWithNSString:query_];
    }
  }
  if (fragment_ != nil) {
    [result appendWithChar:'#'];
    [result appendWithNSString:fragment_];
  }
  return [self convertHexToLowerCaseWithNSString:[result description]];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaNetURI_set_fragment_(self, nil);
  JavaNetURI_set_query_(self, nil);
  JavaNetURI_set_path_(self, nil);
  JavaNetURI_set_host_(self, nil);
  JavaNetURI_set_userinfo_(self, nil);
  JavaNetURI_set_authority_(self, nil);
  JavaNetURI_set_schemespecificpart_(self, nil);
  JavaNetURI_set_scheme_(self, nil);
  JavaNetURI_set_string_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaNetURI *)other {
  [super copyAllFieldsTo:other];
  other->absolute_ = absolute_;
  JavaNetURI_set_authority_(other, authority_);
  JavaNetURI_set_fragment_(other, fragment_);
  other->hash__ = hash__;
  JavaNetURI_set_host_(other, host_);
  other->opaque_ = opaque_;
  JavaNetURI_set_path_(other, path_);
  other->port_ = port_;
  JavaNetURI_set_query_(other, query_);
  JavaNetURI_set_scheme_(other, scheme_);
  JavaNetURI_set_schemespecificpart_(other, schemespecificpart_);
  other->serverAuthority_ = serverAuthority_;
  JavaNetURI_set_string_(other, string_);
  JavaNetURI_set_userinfo_(other, userinfo_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:string_ name:@"string"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:scheme_ name:@"scheme"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:schemespecificpart_ name:@"schemespecificpart"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:authority_ name:@"authority"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:userinfo_ name:@"userinfo"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:host_ name:@"host"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:path_ name:@"path"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:query_ name:@"query"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:fragment_ name:@"fragment"]];
  return result;
}

@end
@implementation JavaNetURI_Helper

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (void)parseURIWithNSString:(NSString *)uri
                 withBoolean:(BOOL)forceServer {
  NSString *temp = uri;
  JavaNetURI_set_string_(this$0_, uri);
  int index, index1, index2, index3;
  index = [((NSString *) nil_chk(temp)) indexOf:'#'];
  if (index != -1) {
    JavaNetURI_set_fragment_(this$0_, [temp substring:index + 1]);
    [self validateFragmentWithNSString:uri withNSString:this$0_->fragment_ withInt:index + 1];
    temp = [temp substring:0 endIndex:index];
  }
  index = index1 = [((NSString *) nil_chk(temp)) indexOf:':'];
  index2 = [temp indexOf:'/'];
  index3 = [temp indexOf:'?'];
  if (index != -1 && (index2 >= index || index2 == -1) && (index3 >= index || index3 == -1)) {
    this$0_->absolute_ = YES;
    JavaNetURI_set_scheme_(this$0_, [temp substring:0 endIndex:index]);
    if ([((NSString *) nil_chk(this$0_->scheme_)) length] == 0) {
      @throw [[[JavaNetURISyntaxException alloc] initWithNSString:uri withNSString:@"Scheme expected" withInt:index] autorelease];
    }
    [self validateSchemeWithNSString:uri withNSString:this$0_->scheme_ withInt:0];
    JavaNetURI_set_schemespecificpart_(this$0_, [temp substring:index + 1]);
    if ([((NSString *) nil_chk(this$0_->schemespecificpart_)) length] == 0) {
      @throw [[[JavaNetURISyntaxException alloc] initWithNSString:uri withNSString:@"Scheme-specific part expected" withInt:index + 1] autorelease];
    }
  }
  else {
    this$0_->absolute_ = NO;
    JavaNetURI_set_schemespecificpart_(this$0_, temp);
  }
  if (this$0_->scheme_ == nil || ([((NSString *) nil_chk(this$0_->schemespecificpart_)) length] > 0 && [this$0_->schemespecificpart_ charAtWithInt:0] == '/')) {
    this$0_->opaque_ = NO;
    temp = this$0_->schemespecificpart_;
    index = [((NSString *) nil_chk(temp)) indexOf:'?'];
    if (index != -1) {
      JavaNetURI_set_query_(this$0_, [temp substring:index + 1]);
      temp = [temp substring:0 endIndex:index];
      [self validateQueryWithNSString:uri withNSString:this$0_->query_ withInt:index2 + 1 + index];
    }
    if ([((NSString *) nil_chk(temp)) hasPrefix:@"//"]) {
      index = [temp indexOf:'/' fromIndex:2];
      if (index != -1) {
        JavaNetURI_set_authority_(this$0_, [temp substring:2 endIndex:index]);
        JavaNetURI_set_path_(this$0_, [temp substring:index]);
      }
      else {
        JavaNetURI_set_authority_(this$0_, [temp substring:2]);
        if ([((NSString *) nil_chk(this$0_->authority_)) length] == 0 && this$0_->query_ == nil && this$0_->fragment_ == nil) {
          @throw [[[JavaNetURISyntaxException alloc] initWithNSString:uri withNSString:@"Authority expected" withInt:[((NSString *) nil_chk(uri)) length]] autorelease];
        }
        JavaNetURI_set_path_(this$0_, @"");
      }
      if ([((NSString *) nil_chk(this$0_->authority_)) length] == 0) {
        JavaNetURI_set_authority_(this$0_, nil);
      }
      else {
        [self validateAuthorityWithNSString:uri withNSString:this$0_->authority_ withInt:index1 + 3];
      }
    }
    else {
      JavaNetURI_set_path_(this$0_, temp);
    }
    int pathIndex = 0;
    if (index2 > -1) {
      pathIndex += index2;
    }
    if (index > -1) {
      pathIndex += index;
    }
    [self validatePathWithNSString:uri withNSString:this$0_->path_ withInt:pathIndex];
  }
  else {
    this$0_->opaque_ = YES;
    [self validateSspWithNSString:uri withNSString:this$0_->schemespecificpart_ withInt:index2 + 2 + index];
  }
  [self parseAuthorityWithBoolean:forceServer];
}

+ (IOSObjectArray *)__exceptions_parseURIWithNSString_withBoolean_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaNetURISyntaxException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)validateSchemeWithNSString:(NSString *)uri
                      withNSString:(NSString *)scheme
                           withInt:(int)index {
  unichar ch = [((NSString *) nil_chk(scheme)) charAtWithInt:0];
  if (!((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z'))) {
    @throw [[[JavaNetURISyntaxException alloc] initWithNSString:uri withNSString:@"Illegal character in scheme" withInt:0] autorelease];
  }
  @try {
    [JavaNetURIEncoderDecoder validateSimpleWithNSString:scheme withNSString:@"+-."];
  }
  @catch (JavaNetURISyntaxException *e) {
    @throw [[[JavaNetURISyntaxException alloc] initWithNSString:uri withNSString:@"Illegal character in scheme" withInt:index + [((JavaNetURISyntaxException *) nil_chk(e)) getIndex]] autorelease];
  }
}

+ (IOSObjectArray *)__exceptions_validateSchemeWithNSString_withNSString_withInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaNetURISyntaxException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)validateSspWithNSString:(NSString *)uri
                   withNSString:(NSString *)ssp
                        withInt:(int)index {
  @try {
    [JavaNetURIEncoderDecoder validateWithNSString:ssp withNSString:[JavaNetURI allLegal]];
  }
  @catch (JavaNetURISyntaxException *e) {
    @throw [[[JavaNetURISyntaxException alloc] initWithNSString:uri withNSString:[NSString stringWithFormat:@"%@ in schemeSpecificPart", [((JavaNetURISyntaxException *) nil_chk(e)) getReason]] withInt:index + [e getIndex]] autorelease];
  }
}

+ (IOSObjectArray *)__exceptions_validateSspWithNSString_withNSString_withInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaNetURISyntaxException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)validateAuthorityWithNSString:(NSString *)uri
                         withNSString:(NSString *)authority
                              withInt:(int)index {
  @try {
    [JavaNetURIEncoderDecoder validateWithNSString:authority withNSString:[NSString stringWithFormat:@"@[]%@", [JavaNetURI someLegal]]];
  }
  @catch (JavaNetURISyntaxException *e) {
    @throw [[[JavaNetURISyntaxException alloc] initWithNSString:uri withNSString:[NSString stringWithFormat:@"%@ in authority", [((JavaNetURISyntaxException *) nil_chk(e)) getReason]] withInt:index + [e getIndex]] autorelease];
  }
}

+ (IOSObjectArray *)__exceptions_validateAuthorityWithNSString_withNSString_withInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaNetURISyntaxException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)validatePathWithNSString:(NSString *)uri
                    withNSString:(NSString *)path
                         withInt:(int)index {
  @try {
    [JavaNetURIEncoderDecoder validateWithNSString:path withNSString:[NSString stringWithFormat:@"/@%@", [JavaNetURI someLegal]]];
  }
  @catch (JavaNetURISyntaxException *e) {
    @throw [[[JavaNetURISyntaxException alloc] initWithNSString:uri withNSString:[NSString stringWithFormat:@"%@ in path", [((JavaNetURISyntaxException *) nil_chk(e)) getReason]] withInt:index + [e getIndex]] autorelease];
  }
}

+ (IOSObjectArray *)__exceptions_validatePathWithNSString_withNSString_withInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaNetURISyntaxException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)validateQueryWithNSString:(NSString *)uri
                     withNSString:(NSString *)query
                          withInt:(int)index {
  @try {
    [JavaNetURIEncoderDecoder validateWithNSString:query withNSString:[JavaNetURI queryLegal]];
  }
  @catch (JavaNetURISyntaxException *e) {
    @throw [[[JavaNetURISyntaxException alloc] initWithNSString:uri withNSString:[NSString stringWithFormat:@"%@ in query", [((JavaNetURISyntaxException *) nil_chk(e)) getReason]] withInt:index + [e getIndex]] autorelease];
  }
}

+ (IOSObjectArray *)__exceptions_validateQueryWithNSString_withNSString_withInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaNetURISyntaxException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)validateFragmentWithNSString:(NSString *)uri
                        withNSString:(NSString *)fragment
                             withInt:(int)index {
  @try {
    [JavaNetURIEncoderDecoder validateWithNSString:fragment withNSString:[JavaNetURI allLegal]];
  }
  @catch (JavaNetURISyntaxException *e) {
    @throw [[[JavaNetURISyntaxException alloc] initWithNSString:uri withNSString:[NSString stringWithFormat:@"%@ in fragment", [((JavaNetURISyntaxException *) nil_chk(e)) getReason]] withInt:index + [e getIndex]] autorelease];
  }
}

+ (IOSObjectArray *)__exceptions_validateFragmentWithNSString_withNSString_withInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaNetURISyntaxException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)parseAuthorityWithBoolean:(BOOL)forceServer {
  if (this$0_->authority_ == nil) {
    return;
  }
  NSString *temp, *tempUserinfo = nil, *tempHost = nil;
  int index, hostindex = 0;
  int tempPort = -1;
  temp = this$0_->authority_;
  index = [((NSString *) nil_chk(temp)) indexOf:'@'];
  if (index != -1) {
    tempUserinfo = [temp substring:0 endIndex:index];
    [self validateUserinfoWithNSString:this$0_->authority_ withNSString:tempUserinfo withInt:0];
    temp = [temp substring:index + 1];
    hostindex = index + 1;
  }
  index = [((NSString *) nil_chk(temp)) lastIndexOf:':'];
  int endindex = [temp indexOf:']'];
  if (index != -1 && endindex < index) {
    tempHost = [temp substring:0 endIndex:index];
    if (index < ([temp length] - 1)) {
      @try {
        tempPort = [JavaLangInteger parseIntWithNSString:[temp substring:index + 1]];
        if (tempPort < 0) {
          if (forceServer) {
            @throw [[[JavaNetURISyntaxException alloc] initWithNSString:this$0_->authority_ withNSString:@"Invalid port number" withInt:hostindex + index + 1] autorelease];
          }
          return;
        }
      }
      @catch (JavaLangNumberFormatException *e) {
        if (forceServer) {
          @throw [[[JavaNetURISyntaxException alloc] initWithNSString:this$0_->authority_ withNSString:@"Invalid port number" withInt:hostindex + index + 1] autorelease];
        }
        return;
      }
    }
  }
  else {
    tempHost = temp;
  }
  if ([((NSString *) nil_chk(tempHost)) isEqual:@""]) {
    if (forceServer) {
      @throw [[[JavaNetURISyntaxException alloc] initWithNSString:this$0_->authority_ withNSString:@"Expected host" withInt:hostindex] autorelease];
    }
    return;
  }
  if (![self isValidHostWithBoolean:forceServer withNSString:tempHost]) {
    return;
  }
  JavaNetURI_set_userinfo_(this$0_, tempUserinfo);
  JavaNetURI_set_host_(this$0_, tempHost);
  this$0_->port_ = tempPort;
  this$0_->serverAuthority_ = YES;
}

+ (IOSObjectArray *)__exceptions_parseAuthorityWithBoolean_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaNetURISyntaxException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)validateUserinfoWithNSString:(NSString *)uri
                        withNSString:(NSString *)userinfo
                             withInt:(int)index {
  for (int i = 0; i < [((NSString *) nil_chk(userinfo)) length]; i++) {
    unichar ch = [userinfo charAtWithInt:i];
    if (ch == ']' || ch == '[') {
      @throw [[[JavaNetURISyntaxException alloc] initWithNSString:uri withNSString:@"Illegal character in userinfo" withInt:index + i] autorelease];
    }
  }
}

+ (IOSObjectArray *)__exceptions_validateUserinfoWithNSString_withNSString_withInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaNetURISyntaxException getClass] } count:1 type:[IOSClass getClass]];
}

- (BOOL)isValidHostWithBoolean:(BOOL)forceServer
                  withNSString:(NSString *)host {
  if ([((NSString *) nil_chk(host)) charAtWithInt:0] == '[') {
    if ([host charAtWithInt:[host length] - 1] != ']') {
      @throw [[[JavaNetURISyntaxException alloc] initWithNSString:host withNSString:@"Expected a closing square bracket for ipv6 address" withInt:0] autorelease];
    }
    if (![self isValidIP6AddressWithNSString:host]) {
      @throw [[[JavaNetURISyntaxException alloc] initWithNSString:host withNSString:@"Malformed ipv6 address" withInt:0] autorelease];
    }
    return YES;
  }
  if ([host indexOf:'['] != -1 || [host indexOf:']'] != -1) {
    @throw [[[JavaNetURISyntaxException alloc] initWithNSString:host withNSString:@"Illegal character in host name" withInt:0] autorelease];
  }
  int index = [host lastIndexOf:'.'];
  if (index < 0 || index == [host length] - 1 || ![JavaLangCharacter isDigitWithChar:[host charAtWithInt:index + 1]]) {
    if ([self isValidDomainNameWithNSString:host]) {
      return YES;
    }
    if (forceServer) {
      @throw [[[JavaNetURISyntaxException alloc] initWithNSString:host withNSString:@"Illegal character in host name" withInt:0] autorelease];
    }
    return NO;
  }
  if ([self isValidIPv4AddressWithNSString:host]) {
    return YES;
  }
  if (forceServer) {
    @throw [[[JavaNetURISyntaxException alloc] initWithNSString:host withNSString:@"Malformed ipv4 address" withInt:0] autorelease];
  }
  return NO;
}

+ (IOSObjectArray *)__exceptions_isValidHostWithBoolean_withNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaNetURISyntaxException getClass] } count:1 type:[IOSClass getClass]];
}

- (BOOL)isValidDomainNameWithNSString:(NSString *)host {
  @try {
    [JavaNetURIEncoderDecoder validateSimpleWithNSString:host withNSString:@"-."];
  }
  @catch (JavaNetURISyntaxException *e) {
    return NO;
  }
  NSString *label = nil;
  JavaUtilStringTokenizer *st = [[[JavaUtilStringTokenizer alloc] initWithNSString:host withNSString:@"."] autorelease];
  while ([st hasMoreTokens]) {
    label = [st nextToken];
    if ([((NSString *) nil_chk(label)) hasPrefix:@"-"] || [label hasSuffix:@"-"]) {
      return NO;
    }
  }
  if (![((NSString *) nil_chk(label)) isEqual:host]) {
    unichar ch = [label charAtWithInt:0];
    if (ch >= '0' && ch <= '9') {
      return NO;
    }
  }
  return YES;
}

- (BOOL)isValidIPv4AddressWithNSString:(NSString *)host {
  int index;
  int index2;
  @try {
    int num;
    index = [((NSString *) nil_chk(host)) indexOf:'.'];
    num = [JavaLangInteger parseIntWithNSString:[host substring:0 endIndex:index]];
    if (num < 0 || num > 255) {
      return NO;
    }
    index2 = [host indexOf:'.' fromIndex:index + 1];
    num = [JavaLangInteger parseIntWithNSString:[host substring:index + 1 endIndex:index2]];
    if (num < 0 || num > 255) {
      return NO;
    }
    index = [host indexOf:'.' fromIndex:index2 + 1];
    num = [JavaLangInteger parseIntWithNSString:[host substring:index2 + 1 endIndex:index]];
    if (num < 0 || num > 255) {
      return NO;
    }
    num = [JavaLangInteger parseIntWithNSString:[host substring:index + 1]];
    if (num < 0 || num > 255) {
      return NO;
    }
  }
  @catch (JavaLangException *e) {
    return NO;
  }
  return YES;
}

- (BOOL)isValidIP6AddressWithNSString:(NSString *)ipAddress {
  int length = [((NSString *) nil_chk(ipAddress)) length];
  BOOL doubleColon = NO;
  int numberOfColons = 0;
  int numberOfPeriods = 0;
  NSString *word = @"";
  unichar c = 0;
  unichar prevChar = 0;
  int offset = 0;
  if (length < 2) {
    return NO;
  }
  for (int i = 0; i < length; i++) {
    prevChar = c;
    c = [ipAddress charAtWithInt:i];
    switch (c) {
      case '[':
      if (i != 0) {
        return NO;
      }
      if ([ipAddress charAtWithInt:length - 1] != ']') {
        return NO;
      }
      if (([ipAddress charAtWithInt:1] == ':') && ([ipAddress charAtWithInt:2] != ':')) {
        return NO;
      }
      offset = 1;
      if (length < 4) {
        return NO;
      }
      break;
      case ']':
      if (i != length - 1) {
        return NO;
      }
      if ([ipAddress charAtWithInt:0] != '[') {
        return NO;
      }
      break;
      case '.':
      numberOfPeriods++;
      if (numberOfPeriods > 3) {
        return NO;
      }
      if (![self isValidIP4WordWithNSString:word]) {
        return NO;
      }
      if (numberOfColons != 6 && !doubleColon) {
        return NO;
      }
      if (numberOfColons == 7 && [ipAddress charAtWithInt:0 + offset] != ':' && [ipAddress charAtWithInt:1 + offset] != ':') {
        return NO;
      }
      word = @"";
      break;
      case ':':
      numberOfColons++;
      if (numberOfColons > 7) {
        return NO;
      }
      if (numberOfPeriods > 0) {
        return NO;
      }
      if (prevChar == ':') {
        if (doubleColon) {
          return NO;
        }
        doubleColon = YES;
      }
      word = @"";
      break;
      default:
      if ([word length] > 3) {
        return NO;
      }
      if (![self isValidHexCharWithChar:c]) {
        return NO;
      }
      word = [NSString stringWithFormat:@"%@%C", word, c];
    }
  }
  if (numberOfPeriods > 0) {
    if (numberOfPeriods != 3 || ![self isValidIP4WordWithNSString:word]) {
      return NO;
    }
  }
  else {
    if (numberOfColons != 7 && !doubleColon) {
      return NO;
    }
    if ([@"" isEqual:word] && [ipAddress charAtWithInt:length - 1 - offset] != ':' && [ipAddress charAtWithInt:length - 2 - offset] != ':') {
      return NO;
    }
  }
  return YES;
}

- (BOOL)isValidIP4WordWithNSString:(NSString *)word {
  unichar c;
  if ([((NSString *) nil_chk(word)) length] < 1 || [word length] > 3) {
    return NO;
  }
  for (int i = 0; i < [word length]; i++) {
    c = [word charAtWithInt:i];
    if (!(c >= '0' && c <= '9')) {
      return NO;
    }
  }
  if ([JavaLangInteger parseIntWithNSString:word] > 255) {
    return NO;
  }
  return YES;
}

- (BOOL)isValidHexCharWithChar:(unichar)c {
  return (c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f');
}

- (id)initWithJavaNetURI:(JavaNetURI *)outer$ {
  JavaNetURI_Helper_set_this$0_(self, outer$);
  return JreMemDebugAdd([super init]);
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaNetURI_Helper_set_this$0_(self, nil);
  [super dealloc];
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:this$0_ name:@"this$0"]];
  return result;
}

@end
