//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSBooleanArray.h"
#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/math/Division.h"
#include "java/math/Elementary.h"
#include "java/math/Primality.h"
#include "java/util/Arrays.h"
#include "java/util/Random.h"

@implementation JavaMathPrimality

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathPrimality_primes_ name:@"JavaMathPrimality_primes_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathPrimality_BIprimes_ name:@"JavaMathPrimality_BIprimes_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathPrimality_BITS_ name:@"JavaMathPrimality_BITS_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathPrimality_offsetPrimes_ name:@"JavaMathPrimality_offsetPrimes_"]];
  return result;
}

static IOSIntArray * JavaMathPrimality_primes_;
static IOSObjectArray * JavaMathPrimality_BIprimes_;
static IOSIntArray * JavaMathPrimality_BITS_;
static IOSObjectArray * JavaMathPrimality_offsetPrimes_;

+ (IOSIntArray *)primes {
  return JavaMathPrimality_primes_;
}

+ (IOSObjectArray *)BIprimes {
  return JavaMathPrimality_BIprimes_;
}

+ (IOSIntArray *)BITS {
  return JavaMathPrimality_BITS_;
}

+ (IOSObjectArray *)offsetPrimes {
  return JavaMathPrimality_offsetPrimes_;
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

+ (JavaMathBigInteger *)nextProbablePrimeWithJavaMathBigInteger:(JavaMathBigInteger *)n {
  int i, j;
  int certainty;
  int gapSize = 1024;
  IOSIntArray *modules = [IOSIntArray arrayWithLength:(int) [((IOSIntArray *) nil_chk(JavaMathPrimality_primes_)) count]];
  IOSBooleanArray *isDivisible = [IOSBooleanArray arrayWithLength:gapSize];
  JavaMathBigInteger *startPoint;
  JavaMathBigInteger *probPrime;
  if ((((JavaMathBigInteger *) nil_chk(n))->numberLength_ == 1) && (IOSIntArray_Get(nil_chk(n->digits_), 0) >= 0) && (IOSIntArray_Get(n->digits_, 0) < IOSIntArray_Get(JavaMathPrimality_primes_, (int) [JavaMathPrimality_primes_ count] - 1))) {
    for (i = 0; IOSIntArray_Get(n->digits_, 0) >= IOSIntArray_Get(JavaMathPrimality_primes_, i); i++) {
      ;
    }
    return IOSObjectArray_Get(nil_chk(JavaMathPrimality_BIprimes_), i);
  }
  startPoint = [[[JavaMathBigInteger alloc] initWithInt:1 withInt:n->numberLength_ withIntArray:[IOSIntArray arrayWithLength:n->numberLength_ + 1]] autorelease];
  [JavaLangSystem arraycopyWithId:n->digits_ withInt:0 withId:startPoint->digits_ withInt:0 withInt:n->numberLength_];
  if ([n testBitWithInt:0]) {
    [JavaMathElementary inplaceAddWithJavaMathBigInteger:startPoint withInt:2];
  }
  else {
    (*IOSIntArray_GetRef(nil_chk(startPoint->digits_), 0)) |= 1;
  }
  j = [startPoint bitLength];
  for (certainty = 2; j < IOSIntArray_Get(nil_chk(JavaMathPrimality_BITS_), certainty); certainty++) {
    ;
  }
  for (i = 0; i < (int) [JavaMathPrimality_primes_ count]; i++) {
    (*IOSIntArray_GetRef(modules, i)) = [JavaMathDivision remainderWithJavaMathBigInteger:startPoint withInt:IOSIntArray_Get(JavaMathPrimality_primes_, i)] - gapSize;
  }
  while (YES) {
    [JavaUtilArrays fillWithBooleanArray:isDivisible withBoolean:NO];
    for (i = 0; i < (int) [JavaMathPrimality_primes_ count]; i++) {
      (*IOSIntArray_GetRef(modules, i)) = (IOSIntArray_Get(modules, i) + gapSize) % IOSIntArray_Get(JavaMathPrimality_primes_, i);
      j = (IOSIntArray_Get(modules, i) == 0) ? 0 : (IOSIntArray_Get(JavaMathPrimality_primes_, i) - IOSIntArray_Get(modules, i));
      for (; j < gapSize; j += IOSIntArray_Get(JavaMathPrimality_primes_, i)) {
        (*IOSBooleanArray_GetRef(isDivisible, j)) = YES;
      }
    }
    for (j = 0; j < gapSize; j++) {
      if (!IOSBooleanArray_Get(isDivisible, j)) {
        probPrime = [startPoint copy__];
        [JavaMathElementary inplaceAddWithJavaMathBigInteger:probPrime withInt:j];
        if ([JavaMathPrimality millerRabinWithJavaMathBigInteger:probPrime withInt:certainty]) {
          return probPrime;
        }
      }
    }
    [JavaMathElementary inplaceAddWithJavaMathBigInteger:startPoint withInt:gapSize];
  }
}

+ (JavaMathBigInteger *)consBigIntegerWithInt:(int)bitLength
                                      withInt:(int)certainty
                           withJavaUtilRandom:(JavaUtilRandom *)rnd {
  if (bitLength <= 10) {
    IOSIntArray *rp = IOSObjectArray_Get(nil_chk(JavaMathPrimality_offsetPrimes_), bitLength);
    return IOSObjectArray_Get(nil_chk(JavaMathPrimality_BIprimes_), IOSIntArray_Get(nil_chk(rp), 0) + [((JavaUtilRandom *) nil_chk(rnd)) nextIntWithInt:IOSIntArray_Get(rp, 1)]);
  }
  int shiftCount = (-bitLength) & 31;
  int last = (bitLength + 31) >> 5;
  JavaMathBigInteger *n = [[[JavaMathBigInteger alloc] initWithInt:1 withInt:last withIntArray:[IOSIntArray arrayWithLength:last]] autorelease];
  last--;
  do {
    for (int i = 0; i < n->numberLength_; i++) {
      (*IOSIntArray_GetRef(nil_chk(n->digits_), i)) = [((JavaUtilRandom *) nil_chk(rnd)) nextInt];
    }
    (*IOSIntArray_GetRef(nil_chk(n->digits_), last)) |= (int) -0x7fffffff - 1;
    URShiftAssignInt(&(*IOSIntArray_GetRef(n->digits_, last)), shiftCount);
    (*IOSIntArray_GetRef(n->digits_, 0)) |= 1;
  }
  while (![JavaMathPrimality isProbablePrimeWithJavaMathBigInteger:n withInt:certainty]);
  return n;
}

+ (BOOL)isProbablePrimeWithJavaMathBigInteger:(JavaMathBigInteger *)n
                                      withInt:(int)certainty {
  if ((certainty <= 0) || ((((JavaMathBigInteger *) nil_chk(n))->numberLength_ == 1) && (IOSIntArray_Get(nil_chk(n->digits_), 0) == 2))) {
    return YES;
  }
  if (![((JavaMathBigInteger *) nil_chk(n)) testBitWithInt:0]) {
    return NO;
  }
  if ((n->numberLength_ == 1) && ((IOSIntArray_Get(nil_chk(n->digits_), 0) & 0XFFFFFC00) == 0)) {
    return ([JavaUtilArrays binarySearchWithIntArray:JavaMathPrimality_primes_ withInt:IOSIntArray_Get(n->digits_, 0)] >= 0);
  }
  for (int i = 1; i < (int) [((IOSIntArray *) nil_chk(JavaMathPrimality_primes_)) count]; i++) {
    if ([JavaMathDivision remainderArrayByIntWithIntArray:n->digits_ withInt:n->numberLength_ withInt:IOSIntArray_Get(JavaMathPrimality_primes_, i)] == 0) {
      return NO;
    }
  }
  int i;
  int bitLength = [n bitLength];
  for (i = 2; bitLength < IOSIntArray_Get(nil_chk(JavaMathPrimality_BITS_), i); i++) {
    ;
  }
  certainty = [JavaLangMath minWithInt:i withInt:1 + ((certainty - 1) >> 1)];
  return [JavaMathPrimality millerRabinWithJavaMathBigInteger:n withInt:certainty];
}

+ (BOOL)millerRabinWithJavaMathBigInteger:(JavaMathBigInteger *)n
                                  withInt:(int)t {
  JavaMathBigInteger *x;
  JavaMathBigInteger *y;
  JavaMathBigInteger *n_minus_1 = [((JavaMathBigInteger *) nil_chk(n)) subtractWithJavaMathBigInteger:[JavaMathBigInteger ONE]];
  int bitLength = [((JavaMathBigInteger *) nil_chk(n_minus_1)) bitLength];
  int k = [n_minus_1 getLowestSetBit];
  JavaMathBigInteger *q = [n_minus_1 shiftRightWithInt:k];
  JavaUtilRandom *rnd = [[[JavaUtilRandom alloc] init] autorelease];
  for (int i = 0; i < t; i++) {
    if (i < (int) [((IOSIntArray *) nil_chk(JavaMathPrimality_primes_)) count]) {
      x = IOSObjectArray_Get(nil_chk(JavaMathPrimality_BIprimes_), i);
    }
    else {
      do {
        x = [[[JavaMathBigInteger alloc] initWithInt:bitLength withJavaUtilRandom:rnd] autorelease];
      }
      while (([x compareToWithId:n] >= JavaMathBigInteger_EQUALS) || (x->sign_ == 0) || [x isOne]);
    }
    y = [((JavaMathBigInteger *) nil_chk(x)) modPowWithJavaMathBigInteger:q withJavaMathBigInteger:n];
    if ([((JavaMathBigInteger *) nil_chk(y)) isOne] || [y isEqual:n_minus_1]) {
      continue;
    }
    for (int j = 1; j < k; j++) {
      if ([y isEqual:n_minus_1]) {
        continue;
      }
      y = [((JavaMathBigInteger *) nil_chk([y multiplyWithJavaMathBigInteger:y])) modWithJavaMathBigInteger:n];
      if ([((JavaMathBigInteger *) nil_chk(y)) isOne]) {
        return NO;
      }
    }
    if (![((JavaMathBigInteger *) nil_chk(y)) isEqual:n_minus_1]) {
      return NO;
    }
  }
  return YES;
}

+ (void)initialize {
  if (self == [JavaMathPrimality class]) {
    JreOperatorRetainedAssign(&JavaMathPrimality_primes_, nil, [IOSIntArray arrayWithInts:(int[]){ 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021 } count:172]);
    JreOperatorRetainedAssign(&JavaMathPrimality_BIprimes_, nil, [IOSObjectArray arrayWithLength:(int) [JavaMathPrimality_primes_ count] type:[IOSClass classWithClass:[JavaMathBigInteger class]]]);
    JreOperatorRetainedAssign(&JavaMathPrimality_BITS_, nil, [IOSIntArray arrayWithInts:(int[]){ 0, 0, 1854, 1233, 927, 747, 627, 543, 480, 431, 393, 361, 335, 314, 295, 279, 265, 253, 242, 232, 223, 216, 181, 169, 158, 150, 145, 140, 136, 132, 127, 123, 119, 114, 110, 105, 101, 96, 92, 87, 83, 78, 73, 69, 64, 59, 54, 49, 44, 38, 32, 26, 1 } count:53]);
    JreOperatorRetainedAssign(&JavaMathPrimality_offsetPrimes_, nil, [IOSObjectArray arrayWithObjects:(id[]){ nil, nil, [IOSIntArray arrayWithInts:(int[]){ 0, 2 } count:2], [IOSIntArray arrayWithInts:(int[]){ 2, 2 } count:2], [IOSIntArray arrayWithInts:(int[]){ 4, 2 } count:2], [IOSIntArray arrayWithInts:(int[]){ 6, 5 } count:2], [IOSIntArray arrayWithInts:(int[]){ 11, 7 } count:2], [IOSIntArray arrayWithInts:(int[]){ 18, 13 } count:2], [IOSIntArray arrayWithInts:(int[]){ 31, 23 } count:2], [IOSIntArray arrayWithInts:(int[]){ 54, 43 } count:2], [IOSIntArray arrayWithInts:(int[]){ 97, 75 } count:2] } count:11 type:[IOSIntArray iosClass]]);
    {
      for (int i = 0; i < (int) [JavaMathPrimality_primes_ count]; i++) {
        IOSObjectArray_Set(JavaMathPrimality_BIprimes_, i, [JavaMathBigInteger valueOfWithLong:IOSIntArray_Get(JavaMathPrimality_primes_, i)]);
      }
    }
  }
}

@end
