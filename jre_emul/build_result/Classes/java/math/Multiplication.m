//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "java/lang/Integer.h"
#include "java/math/BigInteger.h"
#include "java/math/BitLevel.h"
#include "java/math/Multiplication.h"

@implementation JavaMathMultiplication

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathMultiplication_tenPows_ name:@"JavaMathMultiplication_tenPows_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathMultiplication_fivePows_ name:@"JavaMathMultiplication_fivePows_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathMultiplication_bigTenPows_ name:@"JavaMathMultiplication_bigTenPows_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathMultiplication_bigFivePows_ name:@"JavaMathMultiplication_bigFivePows_"]];
  return result;
}

static IOSIntArray * JavaMathMultiplication_tenPows_;
static IOSIntArray * JavaMathMultiplication_fivePows_;
static IOSObjectArray * JavaMathMultiplication_bigTenPows_;
static IOSObjectArray * JavaMathMultiplication_bigFivePows_;

+ (int)whenUseKaratsuba {
  return JavaMathMultiplication_whenUseKaratsuba;
}

+ (IOSIntArray *)tenPows {
  return JavaMathMultiplication_tenPows_;
}

+ (IOSIntArray *)fivePows {
  return JavaMathMultiplication_fivePows_;
}

+ (IOSObjectArray *)bigTenPows {
  return JavaMathMultiplication_bigTenPows_;
}

+ (IOSObjectArray *)bigFivePows {
  return JavaMathMultiplication_bigFivePows_;
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

+ (JavaMathBigInteger *)multiplyWithJavaMathBigInteger:(JavaMathBigInteger *)x
                                withJavaMathBigInteger:(JavaMathBigInteger *)y {
  return [JavaMathMultiplication karatsubaWithJavaMathBigInteger:x withJavaMathBigInteger:y];
}

+ (JavaMathBigInteger *)karatsubaWithJavaMathBigInteger:(JavaMathBigInteger *)op1
                                 withJavaMathBigInteger:(JavaMathBigInteger *)op2 {
  JavaMathBigInteger *temp;
  if (((JavaMathBigInteger *) nil_chk(op2))->numberLength_ > ((JavaMathBigInteger *) nil_chk(op1))->numberLength_) {
    temp = op1;
    op1 = op2;
    op2 = temp;
  }
  if (op2->numberLength_ < JavaMathMultiplication_whenUseKaratsuba) {
    return [JavaMathMultiplication multiplyPAPWithJavaMathBigInteger:op1 withJavaMathBigInteger:op2];
  }
  int ndiv2 = (op1->numberLength_ & (int) 0xFFFFFFFE) << 4;
  JavaMathBigInteger *upperOp1 = [op1 shiftRightWithInt:ndiv2];
  JavaMathBigInteger *upperOp2 = [op2 shiftRightWithInt:ndiv2];
  JavaMathBigInteger *lowerOp1 = [op1 subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(upperOp1)) shiftLeftWithInt:ndiv2]];
  JavaMathBigInteger *lowerOp2 = [op2 subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(upperOp2)) shiftLeftWithInt:ndiv2]];
  JavaMathBigInteger *upper = [JavaMathMultiplication karatsubaWithJavaMathBigInteger:upperOp1 withJavaMathBigInteger:upperOp2];
  JavaMathBigInteger *lower = [JavaMathMultiplication karatsubaWithJavaMathBigInteger:lowerOp1 withJavaMathBigInteger:lowerOp2];
  JavaMathBigInteger *middle = [JavaMathMultiplication karatsubaWithJavaMathBigInteger:[upperOp1 subtractWithJavaMathBigInteger:lowerOp1] withJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(lowerOp2)) subtractWithJavaMathBigInteger:upperOp2]];
  middle = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(middle)) addWithJavaMathBigInteger:upper])) addWithJavaMathBigInteger:lower];
  middle = [((JavaMathBigInteger *) nil_chk(middle)) shiftLeftWithInt:ndiv2];
  upper = [((JavaMathBigInteger *) nil_chk(upper)) shiftLeftWithInt:ndiv2 << 1];
  return [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(upper)) addWithJavaMathBigInteger:middle])) addWithJavaMathBigInteger:lower];
}

+ (JavaMathBigInteger *)multiplyPAPWithJavaMathBigInteger:(JavaMathBigInteger *)a
                                   withJavaMathBigInteger:(JavaMathBigInteger *)b {
  int aLen = ((JavaMathBigInteger *) nil_chk(a))->numberLength_;
  int bLen = ((JavaMathBigInteger *) nil_chk(b))->numberLength_;
  int resLength = aLen + bLen;
  int resSign = (a->sign_ != b->sign_) ? -1 : 1;
  if (resLength == 2) {
    long long int val = [JavaMathMultiplication unsignedMultAddAddWithInt:IOSIntArray_Get(nil_chk(a->digits_), 0) withInt:IOSIntArray_Get(b->digits_, 0) withInt:0 withInt:0];
    int valueLo = (int) val;
    int valueHi = (int) ((long long) (((unsigned long long) val) >> 32));
    return ((valueHi == 0) ? [[[JavaMathBigInteger alloc] initWithInt:resSign withInt:valueLo] autorelease] : [[[JavaMathBigInteger alloc] initWithInt:resSign withInt:2 withIntArray:[IOSIntArray arrayWithInts:(int[]){ valueLo, valueHi } count:2]] autorelease]);
  }
  IOSIntArray *aDigits = a->digits_;
  IOSIntArray *bDigits = b->digits_;
  IOSIntArray *resDigits = [IOSIntArray arrayWithLength:resLength];
  [JavaMathMultiplication multArraysPAPWithIntArray:aDigits withInt:aLen withIntArray:bDigits withInt:bLen withIntArray:resDigits];
  JavaMathBigInteger *result = [[[JavaMathBigInteger alloc] initWithInt:resSign withInt:resLength withIntArray:resDigits] autorelease];
  [result cutOffLeadingZeroes];
  return result;
}

+ (void)multArraysPAPWithIntArray:(IOSIntArray *)aDigits
                          withInt:(int)aLen
                     withIntArray:(IOSIntArray *)bDigits
                          withInt:(int)bLen
                     withIntArray:(IOSIntArray *)resDigits {
  if (aLen == 0 || bLen == 0) return;
  if (aLen == 1) {
    (*IOSIntArray_GetRef(nil_chk(resDigits), bLen)) = [JavaMathMultiplication multiplyByIntWithIntArray:resDigits withIntArray:bDigits withInt:bLen withInt:IOSIntArray_Get(nil_chk(aDigits), 0)];
  }
  else if (bLen == 1) {
    (*IOSIntArray_GetRef(nil_chk(resDigits), aLen)) = [JavaMathMultiplication multiplyByIntWithIntArray:resDigits withIntArray:aDigits withInt:aLen withInt:IOSIntArray_Get(nil_chk(bDigits), 0)];
  }
  else {
    [JavaMathMultiplication multPAPWithIntArray:aDigits withIntArray:bDigits withIntArray:resDigits withInt:aLen withInt:bLen];
  }
}

+ (void)multPAPWithIntArray:(IOSIntArray *)a
               withIntArray:(IOSIntArray *)b
               withIntArray:(IOSIntArray *)t
                    withInt:(int)aLen
                    withInt:(int)bLen {
  if (a == b && aLen == bLen) {
    [JavaMathMultiplication squareWithIntArray:a withInt:aLen withIntArray:t];
    return;
  }
  for (int i = 0; i < aLen; i++) {
    long long int carry = 0;
    int aI = IOSIntArray_Get(nil_chk(a), i);
    for (int j = 0; j < bLen; j++) {
      carry = [JavaMathMultiplication unsignedMultAddAddWithInt:aI withInt:IOSIntArray_Get(nil_chk(b), j) withInt:IOSIntArray_Get(nil_chk(t), i + j) withInt:(int) carry];
      (*IOSIntArray_GetRef(t, i + j)) = (int) carry;
      URShiftAssignLong(&carry, 32);
    }
    (*IOSIntArray_GetRef(nil_chk(t), i + bLen)) = (int) carry;
  }
}

+ (int)multiplyByIntWithIntArray:(IOSIntArray *)res
                    withIntArray:(IOSIntArray *)a
                         withInt:(int)aSize
                         withInt:(int)factor {
  long long int carry = 0;
  for (int i = 0; i < aSize; i++) {
    carry = [JavaMathMultiplication unsignedMultAddAddWithInt:IOSIntArray_Get(nil_chk(a), i) withInt:factor withInt:(int) carry withInt:0];
    (*IOSIntArray_GetRef(nil_chk(res), i)) = (int) carry;
    URShiftAssignLong(&carry, 32);
  }
  return (int) carry;
}

+ (int)multiplyByIntWithIntArray:(IOSIntArray *)a
                         withInt:(int)aSize
                         withInt:(int)factor {
  return [JavaMathMultiplication multiplyByIntWithIntArray:a withIntArray:a withInt:aSize withInt:factor];
}

+ (JavaMathBigInteger *)multiplyByPositiveIntWithJavaMathBigInteger:(JavaMathBigInteger *)val
                                                            withInt:(int)factor {
  int resSign = ((JavaMathBigInteger *) nil_chk(val))->sign_;
  if (resSign == 0) {
    return [JavaMathBigInteger ZERO];
  }
  int aNumberLength = val->numberLength_;
  IOSIntArray *aDigits = val->digits_;
  if (aNumberLength == 1) {
    long long int res = [JavaMathMultiplication unsignedMultAddAddWithInt:IOSIntArray_Get(nil_chk(aDigits), 0) withInt:factor withInt:0 withInt:0];
    int resLo = (int) res;
    int resHi = (int) ((long long) (((unsigned long long) res) >> 32));
    return ((resHi == 0) ? [[[JavaMathBigInteger alloc] initWithInt:resSign withInt:resLo] autorelease] : [[[JavaMathBigInteger alloc] initWithInt:resSign withInt:2 withIntArray:[IOSIntArray arrayWithInts:(int[]){ resLo, resHi } count:2]] autorelease]);
  }
  int resLength = aNumberLength + 1;
  IOSIntArray *resDigits = [IOSIntArray arrayWithLength:resLength];
  (*IOSIntArray_GetRef(resDigits, aNumberLength)) = [JavaMathMultiplication multiplyByIntWithIntArray:resDigits withIntArray:aDigits withInt:aNumberLength withInt:factor];
  JavaMathBigInteger *result = [[[JavaMathBigInteger alloc] initWithInt:resSign withInt:resLength withIntArray:resDigits] autorelease];
  [result cutOffLeadingZeroes];
  return result;
}

+ (JavaMathBigInteger *)powWithJavaMathBigInteger:(JavaMathBigInteger *)base
                                          withInt:(int)exponent {
  JavaMathBigInteger *res = [JavaMathBigInteger ONE];
  JavaMathBigInteger *acc = base;
  for (; exponent > 1; exponent >>= 1) {
    if ((exponent & 1) != 0) {
      res = [((JavaMathBigInteger *) nil_chk(res)) multiplyWithJavaMathBigInteger:acc];
    }
    if (((JavaMathBigInteger *) nil_chk(acc))->numberLength_ == 1) {
      acc = [acc multiplyWithJavaMathBigInteger:acc];
    }
    else {
      acc = [[[JavaMathBigInteger alloc] initWithInt:1 withIntArray:[JavaMathMultiplication squareWithIntArray:acc->digits_ withInt:acc->numberLength_ withIntArray:[IOSIntArray arrayWithLength:acc->numberLength_ << 1]]] autorelease];
    }
  }
  res = [((JavaMathBigInteger *) nil_chk(res)) multiplyWithJavaMathBigInteger:acc];
  return res;
}

+ (IOSIntArray *)squareWithIntArray:(IOSIntArray *)a
                            withInt:(int)aLen
                       withIntArray:(IOSIntArray *)res {
  long long int carry;
  for (int i = 0; i < aLen; i++) {
    carry = 0;
    for (int j = i + 1; j < aLen; j++) {
      carry = [JavaMathMultiplication unsignedMultAddAddWithInt:IOSIntArray_Get(nil_chk(a), i) withInt:IOSIntArray_Get(a, j) withInt:IOSIntArray_Get(nil_chk(res), i + j) withInt:(int) carry];
      (*IOSIntArray_GetRef(res, i + j)) = (int) carry;
      URShiftAssignLong(&carry, 32);
    }
    (*IOSIntArray_GetRef(nil_chk(res), i + aLen)) = (int) carry;
  }
  [JavaMathBitLevel shiftLeftOneBitWithIntArray:res withIntArray:res withInt:aLen << 1];
  carry = 0;
  for (int i = 0, index = 0; i < aLen; i++, index++) {
    carry = [JavaMathMultiplication unsignedMultAddAddWithInt:IOSIntArray_Get(nil_chk(a), i) withInt:IOSIntArray_Get(a, i) withInt:IOSIntArray_Get(nil_chk(res), index) withInt:(int) carry];
    (*IOSIntArray_GetRef(res, index)) = (int) carry;
    URShiftAssignLong(&carry, 32);
    index++;
    carry += IOSIntArray_Get(res, index) & (long long) 0xFFFFFFFFLL;
    (*IOSIntArray_GetRef(res, index)) = (int) carry;
    URShiftAssignLong(&carry, 32);
  }
  return res;
}

+ (JavaMathBigInteger *)multiplyByTenPowWithJavaMathBigInteger:(JavaMathBigInteger *)val
                                                      withLong:(long long int)exp {
  return ((exp < (int) [((IOSIntArray *) nil_chk(JavaMathMultiplication_tenPows_)) count]) ? [JavaMathMultiplication multiplyByPositiveIntWithJavaMathBigInteger:val withInt:IOSIntArray_Get(JavaMathMultiplication_tenPows_, (int) exp)] : [((JavaMathBigInteger *) nil_chk(val)) multiplyWithJavaMathBigInteger:[JavaMathMultiplication powerOf10WithLong:exp]]);
}

+ (JavaMathBigInteger *)powerOf10WithLong:(long long int)exp {
  int intExp = (int) exp;
  if (exp < (int) [((IOSObjectArray *) nil_chk(JavaMathMultiplication_bigTenPows_)) count]) {
    return IOSObjectArray_Get(JavaMathMultiplication_bigTenPows_, intExp);
  }
  else if (exp <= 50) {
    return [((JavaMathBigInteger *) nil_chk([JavaMathBigInteger TEN])) powWithInt:intExp];
  }
  else if (exp <= 1000) {
    return [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(JavaMathMultiplication_bigFivePows_), 1))) powWithInt:intExp])) shiftLeftWithInt:intExp];
  }
  if (exp <= JavaLangInteger_MAX_VALUE) {
    return [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(JavaMathMultiplication_bigFivePows_), 1))) powWithInt:intExp])) shiftLeftWithInt:intExp];
  }
  JavaMathBigInteger *powerOfFive = [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(JavaMathMultiplication_bigFivePows_), 1))) powWithInt:JavaLangInteger_MAX_VALUE];
  JavaMathBigInteger *res = powerOfFive;
  long long int longExp = exp - JavaLangInteger_MAX_VALUE;
  intExp = (int) (exp % JavaLangInteger_MAX_VALUE);
  while (longExp > JavaLangInteger_MAX_VALUE) {
    res = [((JavaMathBigInteger *) nil_chk(res)) multiplyWithJavaMathBigInteger:powerOfFive];
    longExp -= JavaLangInteger_MAX_VALUE;
  }
  res = [((JavaMathBigInteger *) nil_chk(res)) multiplyWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(JavaMathMultiplication_bigFivePows_, 1))) powWithInt:intExp]];
  res = [((JavaMathBigInteger *) nil_chk(res)) shiftLeftWithInt:JavaLangInteger_MAX_VALUE];
  longExp = exp - JavaLangInteger_MAX_VALUE;
  while (longExp > JavaLangInteger_MAX_VALUE) {
    res = [((JavaMathBigInteger *) nil_chk(res)) shiftLeftWithInt:JavaLangInteger_MAX_VALUE];
    longExp -= JavaLangInteger_MAX_VALUE;
  }
  res = [((JavaMathBigInteger *) nil_chk(res)) shiftLeftWithInt:intExp];
  return res;
}

+ (JavaMathBigInteger *)multiplyByFivePowWithJavaMathBigInteger:(JavaMathBigInteger *)val
                                                        withInt:(int)exp {
  if (exp < (int) [((IOSIntArray *) nil_chk(JavaMathMultiplication_fivePows_)) count]) {
    return [JavaMathMultiplication multiplyByPositiveIntWithJavaMathBigInteger:val withInt:IOSIntArray_Get(JavaMathMultiplication_fivePows_, exp)];
  }
  else if (exp < (int) [((IOSObjectArray *) nil_chk(JavaMathMultiplication_bigFivePows_)) count]) {
    return [((JavaMathBigInteger *) nil_chk(val)) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(JavaMathMultiplication_bigFivePows_, exp)];
  }
  else {
    return [((JavaMathBigInteger *) nil_chk(val)) multiplyWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(JavaMathMultiplication_bigFivePows_, 1))) powWithInt:exp]];
  }
}

+ (long long int)unsignedMultAddAddWithInt:(int)a
                                   withInt:(int)b
                                   withInt:(int)c
                                   withInt:(int)d {
  return (a & (long long) 0xFFFFFFFFLL) * (b & (long long) 0xFFFFFFFFLL) + (c & (long long) 0xFFFFFFFFLL) + (d & (long long) 0xFFFFFFFFLL);
}

+ (void)initialize {
  if (self == [JavaMathMultiplication class]) {
    JreOperatorRetainedAssign(&JavaMathMultiplication_tenPows_, nil, [IOSIntArray arrayWithInts:(int[]){ 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 } count:10]);
    JreOperatorRetainedAssign(&JavaMathMultiplication_fivePows_, nil, [IOSIntArray arrayWithInts:(int[]){ 1, 5, 25, 125, 625, 3125, 15625, 78125, 390625, 1953125, 9765625, 48828125, 244140625, 1220703125 } count:14]);
    JreOperatorRetainedAssign(&JavaMathMultiplication_bigTenPows_, nil, [IOSObjectArray arrayWithLength:32 type:[IOSClass classWithClass:[JavaMathBigInteger class]]]);
    JreOperatorRetainedAssign(&JavaMathMultiplication_bigFivePows_, nil, [IOSObjectArray arrayWithLength:32 type:[IOSClass classWithClass:[JavaMathBigInteger class]]]);
    {
      int i;
      long long int fivePow = 1LL;
      for (i = 0; i <= 18; i++) {
        IOSObjectArray_Set(JavaMathMultiplication_bigFivePows_, i, [JavaMathBigInteger valueOfWithLong:fivePow]);
        IOSObjectArray_Set(JavaMathMultiplication_bigTenPows_, i, [JavaMathBigInteger valueOfWithLong:fivePow << i]);
        fivePow *= 5;
      }
      for (; i < (int) [JavaMathMultiplication_bigTenPows_ count]; i++) {
        IOSObjectArray_Set(JavaMathMultiplication_bigFivePows_, i, [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(JavaMathMultiplication_bigFivePows_, i - 1))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(JavaMathMultiplication_bigFivePows_, 1)]);
        IOSObjectArray_Set(JavaMathMultiplication_bigTenPows_, i, [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(JavaMathMultiplication_bigTenPows_, i - 1))) multiplyWithJavaMathBigInteger:[JavaMathBigInteger TEN]]);
      }
    }
  }
}

@end
