//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/math/src/main/java/java/math/BitLevel.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSIntArray.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/math/BitLevel.h"

@implementation JavaMathBitLevel

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

+ (int)bitLengthWithJavaMathBigInteger:(JavaMathBigInteger *)val {
  if (((JavaMathBigInteger *) nil_chk(val))->sign_ == 0) {
    return 0;
  }
  int bLength = (val->numberLength_ << 5);
  int highDigit = IOSIntArray_Get(nil_chk(val->digits_), val->numberLength_ - 1);
  if (val->sign_ < 0) {
    int i = [val getFirstNonzeroDigit];
    if (i == val->numberLength_ - 1) {
      highDigit--;
    }
  }
  bLength -= [JavaLangInteger numberOfLeadingZerosWithInt:highDigit];
  return bLength;
}

+ (int)bitCountWithJavaMathBigInteger:(JavaMathBigInteger *)val {
  int bCount = 0;
  if (((JavaMathBigInteger *) nil_chk(val))->sign_ == 0) {
    return 0;
  }
  int i = [val getFirstNonzeroDigit];
  ;
  if (val->sign_ > 0) {
    for (; i < val->numberLength_; i++) {
      bCount += [JavaLangInteger bitCountWithInt:IOSIntArray_Get(nil_chk(val->digits_), i)];
    }
  }
  else {
    bCount += [JavaLangInteger bitCountWithInt:-IOSIntArray_Get(nil_chk(val->digits_), i)];
    for (i++; i < val->numberLength_; i++) {
      bCount += [JavaLangInteger bitCountWithInt:~IOSIntArray_Get(val->digits_, i)];
    }
    bCount = (val->numberLength_ << 5) - bCount;
  }
  return bCount;
}

+ (BOOL)testBitWithJavaMathBigInteger:(JavaMathBigInteger *)val
                              withInt:(int)n {
  return ((IOSIntArray_Get(nil_chk(((JavaMathBigInteger *) nil_chk(val))->digits_), n >> 5) & (1 << (n & 31))) != 0);
}

+ (BOOL)nonZeroDroppedBitsWithInt:(int)numberOfBits
                     withIntArray:(IOSIntArray *)digits {
  int intCount = numberOfBits >> 5;
  int bitCount = numberOfBits & 31;
  int i;
  for (i = 0; (i < intCount) && (IOSIntArray_Get(nil_chk(digits), i) == 0); i++) {
    ;
  }
  return ((i != intCount) || (IOSIntArray_Get(nil_chk(digits), i) << (32 - bitCount) != 0));
}

+ (JavaMathBigInteger *)shiftLeftWithJavaMathBigInteger:(JavaMathBigInteger *)source
                                                withInt:(int)count {
  int intCount = count >> 5;
  count &= 31;
  int resLength = ((JavaMathBigInteger *) nil_chk(source))->numberLength_ + intCount + ((count == 0) ? 0 : 1);
  IOSIntArray *resDigits = [IOSIntArray arrayWithLength:resLength];
  [JavaMathBitLevel shiftLeftWithIntArray:resDigits withIntArray:source->digits_ withInt:intCount withInt:count];
  JavaMathBigInteger *result = [[[JavaMathBigInteger alloc] initWithInt:source->sign_ withInt:resLength withIntArray:resDigits] autorelease];
  [result cutOffLeadingZeroes];
  return result;
}

+ (void)inplaceShiftLeftWithJavaMathBigInteger:(JavaMathBigInteger *)val
                                       withInt:(int)count {
  int intCount = count >> 5;
  ((JavaMathBigInteger *) nil_chk(val))->numberLength_ += intCount + ([JavaLangInteger numberOfLeadingZerosWithInt:IOSIntArray_Get(nil_chk(val->digits_), val->numberLength_ - 1)] - (count & 31) >= 0 ? 0 : 1);
  [JavaMathBitLevel shiftLeftWithIntArray:val->digits_ withIntArray:val->digits_ withInt:intCount withInt:count & 31];
  [val cutOffLeadingZeroes];
  [val unCache];
}

+ (void)shiftLeftWithIntArray:(IOSIntArray *)result
                 withIntArray:(IOSIntArray *)source
                      withInt:(int)intCount
                      withInt:(int)count {
  if (count == 0) {
    [JavaLangSystem arraycopyWithId:source withInt:0 withId:result withInt:intCount withInt:(int) [((IOSIntArray *) nil_chk(result)) count] - intCount];
  }
  else {
    int rightShiftCount = 32 - count;
    (*IOSIntArray_GetRef(result, (int) [((IOSIntArray *) nil_chk(result)) count] - 1)) = 0;
    for (int i = (int) [result count] - 1; i > intCount; i--) {
      (*IOSIntArray_GetRef(result, i)) |= (int) (((unsigned int) IOSIntArray_Get(nil_chk(source), i - intCount - 1)) >> rightShiftCount);
      (*IOSIntArray_GetRef(result, i - 1)) = IOSIntArray_Get(source, i - intCount - 1) << count;
    }
  }
  for (int i = 0; i < intCount; i++) {
    (*IOSIntArray_GetRef(nil_chk(result), i)) = 0;
  }
}

+ (void)shiftLeftOneBitWithIntArray:(IOSIntArray *)result
                       withIntArray:(IOSIntArray *)source
                            withInt:(int)srcLen {
  int carry = 0;
  for (int i = 0; i < srcLen; i++) {
    int val = IOSIntArray_Get(nil_chk(source), i);
    (*IOSIntArray_GetRef(nil_chk(result), i)) = (val << 1) | carry;
    carry = (int) (((unsigned int) val) >> 31);
  }
  if (carry != 0) {
    (*IOSIntArray_GetRef(nil_chk(result), srcLen)) = carry;
  }
}

+ (JavaMathBigInteger *)shiftLeftOneBitWithJavaMathBigInteger:(JavaMathBigInteger *)source {
  int srcLen = ((JavaMathBigInteger *) nil_chk(source))->numberLength_;
  int resLen = srcLen + 1;
  IOSIntArray *resDigits = [IOSIntArray arrayWithLength:resLen];
  [JavaMathBitLevel shiftLeftOneBitWithIntArray:resDigits withIntArray:source->digits_ withInt:srcLen];
  JavaMathBigInteger *result = [[[JavaMathBigInteger alloc] initWithInt:source->sign_ withInt:resLen withIntArray:resDigits] autorelease];
  [result cutOffLeadingZeroes];
  return result;
}

+ (JavaMathBigInteger *)shiftRightWithJavaMathBigInteger:(JavaMathBigInteger *)source
                                                 withInt:(int)count {
  int intCount = count >> 5;
  count &= 31;
  if (intCount >= ((JavaMathBigInteger *) nil_chk(source))->numberLength_) {
    return ((source->sign_ < 0) ? [JavaMathBigInteger MINUS_ONE] : [JavaMathBigInteger ZERO]);
  }
  int i;
  int resLength = source->numberLength_ - intCount;
  IOSIntArray *resDigits = [IOSIntArray arrayWithLength:resLength + 1];
  [JavaMathBitLevel shiftRightWithIntArray:resDigits withInt:resLength withIntArray:source->digits_ withInt:intCount withInt:count];
  if (source->sign_ < 0) {
    for (i = 0; (i < intCount) && (IOSIntArray_Get(nil_chk(source->digits_), i) == 0); i++) {
      ;
    }
    if ((i < intCount) || ((count > 0) && ((IOSIntArray_Get(nil_chk(source->digits_), i) << (32 - count)) != 0))) {
      for (i = 0; (i < resLength) && (IOSIntArray_Get(resDigits, i) == -1); i++) {
        (*IOSIntArray_GetRef(resDigits, i)) = 0;
      }
      if (i == resLength) {
        resLength++;
      }
      (*IOSIntArray_GetRef(resDigits, i))++;
    }
  }
  JavaMathBigInteger *result = [[[JavaMathBigInteger alloc] initWithInt:source->sign_ withInt:resLength withIntArray:resDigits] autorelease];
  [result cutOffLeadingZeroes];
  return result;
}

+ (void)inplaceShiftRightWithJavaMathBigInteger:(JavaMathBigInteger *)val
                                        withInt:(int)count {
  int sign = [((JavaMathBigInteger *) nil_chk(val)) signum];
  if (count == 0 || [val signum] == 0) return;
  int intCount = count >> 5;
  val->numberLength_ -= intCount;
  if (![JavaMathBitLevel shiftRightWithIntArray:val->digits_ withInt:val->numberLength_ withIntArray:val->digits_ withInt:intCount withInt:count & 31] && sign < 0) {
    int i;
    for (i = 0; (i < val->numberLength_) && (IOSIntArray_Get(nil_chk(val->digits_), i) == -1); i++) {
      (*IOSIntArray_GetRef(nil_chk(val->digits_), i)) = 0;
    }
    if (i == val->numberLength_) {
      val->numberLength_++;
    }
    (*IOSIntArray_GetRef(nil_chk(val->digits_), i))++;
  }
  [val cutOffLeadingZeroes];
  [val unCache];
}

+ (BOOL)shiftRightWithIntArray:(IOSIntArray *)result
                       withInt:(int)resultLen
                  withIntArray:(IOSIntArray *)source
                       withInt:(int)intCount
                       withInt:(int)count {
  int i;
  BOOL allZero = YES;
  for (i = 0; i < intCount; i++) allZero &= IOSIntArray_Get(nil_chk(source), i) == 0;
  if (count == 0) {
    [JavaLangSystem arraycopyWithId:source withInt:intCount withId:result withInt:0 withInt:resultLen];
    i = resultLen;
  }
  else {
    int leftShiftCount = 32 - count;
    allZero &= (IOSIntArray_Get(nil_chk(source), i) << leftShiftCount) == 0;
    for (i = 0; i < resultLen - 1; i++) {
      (*IOSIntArray_GetRef(nil_chk(result), i)) = ((int) (((unsigned int) IOSIntArray_Get(source, i + intCount)) >> count)) | (IOSIntArray_Get(source, i + intCount + 1) << leftShiftCount);
    }
    (*IOSIntArray_GetRef(nil_chk(result), i)) = ((int) (((unsigned int) IOSIntArray_Get(source, i + intCount)) >> count));
    i++;
  }
  return allZero;
}

+ (JavaMathBigInteger *)flipBitWithJavaMathBigInteger:(JavaMathBigInteger *)val
                                              withInt:(int)n {
  int resSign = (((JavaMathBigInteger *) nil_chk(val))->sign_ == 0) ? 1 : val->sign_;
  int intCount = n >> 5;
  int bitN = n & 31;
  int resLength = [JavaLangMath maxWithInt:intCount + 1 withInt:val->numberLength_] + 1;
  IOSIntArray *resDigits = [IOSIntArray arrayWithLength:resLength];
  int i;
  int bitNumber = 1 << bitN;
  [JavaLangSystem arraycopyWithId:val->digits_ withInt:0 withId:resDigits withInt:0 withInt:val->numberLength_];
  if (val->sign_ < 0) {
    if (intCount >= val->numberLength_) {
      (*IOSIntArray_GetRef(resDigits, intCount)) = bitNumber;
    }
    else {
      int firstNonZeroDigit = [val getFirstNonzeroDigit];
      if (intCount > firstNonZeroDigit) {
        (*IOSIntArray_GetRef(resDigits, intCount)) ^= bitNumber;
      }
      else if (intCount < firstNonZeroDigit) {
        (*IOSIntArray_GetRef(resDigits, intCount)) = -bitNumber;
        for (i = intCount + 1; i < firstNonZeroDigit; i++) {
          (*IOSIntArray_GetRef(resDigits, i)) = -1;
        }
        (*IOSIntArray_GetRef(resDigits, i)) = (*IOSIntArray_GetRef(resDigits, i))--;
      }
      else {
        i = intCount;
        (*IOSIntArray_GetRef(resDigits, i)) = -((-IOSIntArray_Get(resDigits, intCount)) ^ bitNumber);
        if (IOSIntArray_Get(resDigits, i) == 0) {
          for (i++; IOSIntArray_Get(resDigits, i) == -1; i++) {
            (*IOSIntArray_GetRef(resDigits, i)) = 0;
          }
          (*IOSIntArray_GetRef(resDigits, i))++;
        }
      }
    }
  }
  else {
    (*IOSIntArray_GetRef(resDigits, intCount)) ^= bitNumber;
  }
  JavaMathBigInteger *result = [[[JavaMathBigInteger alloc] initWithInt:resSign withInt:resLength withIntArray:resDigits] autorelease];
  [result cutOffLeadingZeroes];
  return result;
}

@end
