//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/math/src/main/java/java/math/BigDecimal.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSCharArray.h"
#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSLongArray.h"
#include "IOSObjectArray.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"
#include "java/math/Conversion.h"
#include "java/math/MathContext.h"
#include "java/math/Multiplication.h"
#include "java/math/RoundingMode.h"

@implementation JavaMathBigDecimal

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathBigDecimal_ZERO_ name:@"JavaMathBigDecimal_ZERO_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathBigDecimal_ONE_ name:@"JavaMathBigDecimal_ONE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathBigDecimal_TEN_ name:@"JavaMathBigDecimal_TEN_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathBigDecimal_FIVE_POW_ name:@"JavaMathBigDecimal_FIVE_POW_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathBigDecimal_TEN_POW_ name:@"JavaMathBigDecimal_TEN_POW_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathBigDecimal_LONG_TEN_POW_ name:@"JavaMathBigDecimal_LONG_TEN_POW_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathBigDecimal_LONG_FIVE_POW_ name:@"JavaMathBigDecimal_LONG_FIVE_POW_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathBigDecimal_LONG_FIVE_POW_BIT_LENGTH_ name:@"JavaMathBigDecimal_LONG_FIVE_POW_BIT_LENGTH_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathBigDecimal_LONG_TEN_POW_BIT_LENGTH_ name:@"JavaMathBigDecimal_LONG_TEN_POW_BIT_LENGTH_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathBigDecimal_BI_SCALED_BY_ZERO_ name:@"JavaMathBigDecimal_BI_SCALED_BY_ZERO_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathBigDecimal_ZERO_SCALED_BY_ name:@"JavaMathBigDecimal_ZERO_SCALED_BY_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathBigDecimal_CH_ZEROS_ name:@"JavaMathBigDecimal_CH_ZEROS_"]];
  return result;
}

static JavaMathBigDecimal * JavaMathBigDecimal_ZERO_;
static JavaMathBigDecimal * JavaMathBigDecimal_ONE_;
static JavaMathBigDecimal * JavaMathBigDecimal_TEN_;
static IOSObjectArray * JavaMathBigDecimal_FIVE_POW_;
static IOSObjectArray * JavaMathBigDecimal_TEN_POW_;
static IOSLongArray * JavaMathBigDecimal_LONG_TEN_POW_;
static IOSLongArray * JavaMathBigDecimal_LONG_FIVE_POW_;
static IOSIntArray * JavaMathBigDecimal_LONG_FIVE_POW_BIT_LENGTH_;
static IOSIntArray * JavaMathBigDecimal_LONG_TEN_POW_BIT_LENGTH_;
static IOSObjectArray * JavaMathBigDecimal_BI_SCALED_BY_ZERO_;
static IOSObjectArray * JavaMathBigDecimal_ZERO_SCALED_BY_;
static IOSCharArray * JavaMathBigDecimal_CH_ZEROS_;

+ (JavaMathBigDecimal *)ZERO {
  return JavaMathBigDecimal_ZERO_;
}

+ (JavaMathBigDecimal *)ONE {
  return JavaMathBigDecimal_ONE_;
}

+ (JavaMathBigDecimal *)TEN {
  return JavaMathBigDecimal_TEN_;
}

+ (int)ROUND_UP {
  return JavaMathBigDecimal_ROUND_UP;
}

+ (int)ROUND_DOWN {
  return JavaMathBigDecimal_ROUND_DOWN;
}

+ (int)ROUND_CEILING {
  return JavaMathBigDecimal_ROUND_CEILING;
}

+ (int)ROUND_FLOOR {
  return JavaMathBigDecimal_ROUND_FLOOR;
}

+ (int)ROUND_HALF_UP {
  return JavaMathBigDecimal_ROUND_HALF_UP;
}

+ (int)ROUND_HALF_DOWN {
  return JavaMathBigDecimal_ROUND_HALF_DOWN;
}

+ (int)ROUND_HALF_EVEN {
  return JavaMathBigDecimal_ROUND_HALF_EVEN;
}

+ (int)ROUND_UNNECESSARY {
  return JavaMathBigDecimal_ROUND_UNNECESSARY;
}

+ (IOSObjectArray *)FIVE_POW {
  return JavaMathBigDecimal_FIVE_POW_;
}

+ (IOSObjectArray *)TEN_POW {
  return JavaMathBigDecimal_TEN_POW_;
}

+ (IOSLongArray *)LONG_TEN_POW {
  return JavaMathBigDecimal_LONG_TEN_POW_;
}

+ (IOSLongArray *)LONG_FIVE_POW {
  return JavaMathBigDecimal_LONG_FIVE_POW_;
}

+ (IOSIntArray *)LONG_FIVE_POW_BIT_LENGTH {
  return JavaMathBigDecimal_LONG_FIVE_POW_BIT_LENGTH_;
}

+ (IOSIntArray *)LONG_TEN_POW_BIT_LENGTH {
  return JavaMathBigDecimal_LONG_TEN_POW_BIT_LENGTH_;
}

+ (IOSObjectArray *)BI_SCALED_BY_ZERO {
  return JavaMathBigDecimal_BI_SCALED_BY_ZERO_;
}

+ (IOSObjectArray *)ZERO_SCALED_BY {
  return JavaMathBigDecimal_ZERO_SCALED_BY_;
}

+ (IOSCharArray *)CH_ZEROS {
  return JavaMathBigDecimal_CH_ZEROS_;
}

- (id)initJavaMathBigDecimalWithLong:(long long int)smallValue
                             withInt:(int)scale_ {
  if (self = [super init]) {
    JavaMathBigDecimal_set_toStringImage_(self, nil);
    hashCode__ = 0;
    precision__ = 0;
    self->smallValue_ = smallValue;
    self->scale__ = scale_;
    self->bitLength__ = [JavaMathBigDecimal bitLengthWithLong:smallValue];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithLong:(long long int)smallValue
           withInt:(int)scale_ {
  return [self initJavaMathBigDecimalWithLong:smallValue withInt:scale_];
}

- (id)initJavaMathBigDecimalWithInt:(int)smallValue
                            withInt:(int)scale_ {
  if (self = [super init]) {
    JavaMathBigDecimal_set_toStringImage_(self, nil);
    hashCode__ = 0;
    precision__ = 0;
    self->smallValue_ = smallValue;
    self->scale__ = scale_;
    self->bitLength__ = [JavaMathBigDecimal bitLengthWithInt:smallValue];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithInt:(int)smallValue
          withInt:(int)scale_ {
  return [self initJavaMathBigDecimalWithInt:smallValue withInt:scale_];
}

- (id)initJavaMathBigDecimalWithCharArray:(IOSCharArray *)inArg
                                  withInt:(int)offset
                                  withInt:(int)len {
  if (self = [super init]) {
    JavaMathBigDecimal_set_toStringImage_(self, nil);
    hashCode__ = 0;
    precision__ = 0;
    int begin = offset;
    int last = offset + (len - 1);
    NSString *scaleString = nil;
    JavaLangStringBuilder *unscaledBuffer;
    long long int newScale;
    if (inArg == nil) {
      @throw [[[JavaLangNullPointerException alloc] init] autorelease];
    }
    if ((last >= (int) [((IOSCharArray *) nil_chk(inArg)) count]) || (offset < 0) || (len <= 0) || (last < 0)) {
      @throw [[[JavaLangNumberFormatException alloc] init] autorelease];
    }
    unscaledBuffer = [[[JavaLangStringBuilder alloc] initWithInt:len] autorelease];
    int bufLength = 0;
    if ((offset <= last) && (IOSCharArray_Get(inArg, offset) == '+')) {
      offset++;
      begin++;
    }
    int counter = 0;
    BOOL wasNonZero = NO;
    for (; (offset <= last) && (IOSCharArray_Get(inArg, offset) != '.') && (IOSCharArray_Get(inArg, offset) != 'e') && (IOSCharArray_Get(inArg, offset) != 'E'); offset++) {
      if (!wasNonZero) {
        if (IOSCharArray_Get(inArg, offset) == '0') {
          counter++;
        }
        else {
          wasNonZero = YES;
        }
      }
    }
    [unscaledBuffer appendWithCharArray:inArg withInt:begin withInt:offset - begin];
    bufLength += offset - begin;
    if ((offset <= last) && (IOSCharArray_Get(inArg, offset) == '.')) {
      offset++;
      begin = offset;
      for (; (offset <= last) && (IOSCharArray_Get(inArg, offset) != 'e') && (IOSCharArray_Get(inArg, offset) != 'E'); offset++) {
        if (!wasNonZero) {
          if (IOSCharArray_Get(inArg, offset) == '0') {
            counter++;
          }
          else {
            wasNonZero = YES;
          }
        }
      }
      scale__ = offset - begin;
      bufLength += scale__;
      [unscaledBuffer appendWithCharArray:inArg withInt:begin withInt:scale__];
    }
    else {
      scale__ = 0;
    }
    if ((offset <= last) && ((IOSCharArray_Get(inArg, offset) == 'e') || (IOSCharArray_Get(inArg, offset) == 'E'))) {
      offset++;
      begin = offset;
      if ((offset <= last) && (IOSCharArray_Get(inArg, offset) == '+')) {
        offset++;
        if ((offset <= last) && (IOSCharArray_Get(inArg, offset) != '-')) {
          begin++;
        }
      }
      scaleString = [NSString valueOfChars:inArg offset:begin count:last + 1 - begin];
      newScale = (long long int) scale__ - [JavaLangInteger parseIntWithNSString:scaleString];
      scale__ = (int) newScale;
      if (newScale != scale__) {
        @throw [[[JavaLangNumberFormatException alloc] initWithNSString:@"Scale out of range."] autorelease];
      }
    }
    if (bufLength < 19) {
      smallValue_ = [JavaLangLong parseLongWithNSString:[unscaledBuffer description]];
      bitLength__ = [JavaMathBigDecimal bitLengthWithLong:smallValue_];
    }
    else {
      [self setUnscaledValueWithJavaMathBigInteger:[[[JavaMathBigInteger alloc] initWithNSString:[unscaledBuffer description]] autorelease]];
    }
    precision__ = [unscaledBuffer sequenceLength] - counter;
    if ([unscaledBuffer charAtWithInt:0] == '-') {
      precision__--;
    }
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithCharArray:(IOSCharArray *)inArg
                withInt:(int)offset
                withInt:(int)len {
  return [self initJavaMathBigDecimalWithCharArray:inArg withInt:offset withInt:len];
}

- (id)initWithCharArray:(IOSCharArray *)inArg
                withInt:(int)offset
                withInt:(int)len
withJavaMathMathContext:(JavaMathMathContext *)mc {
  if (self = [self initJavaMathBigDecimalWithCharArray:inArg withInt:offset withInt:len]) {
    [self inplaceRoundWithJavaMathMathContext:mc];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithCharArray:(IOSCharArray *)inArg {
  return JreMemDebugAdd([self initJavaMathBigDecimalWithCharArray:inArg withInt:0 withInt:(int) [((IOSCharArray *) nil_chk(inArg)) count]]);
}

- (id)initWithCharArray:(IOSCharArray *)inArg
withJavaMathMathContext:(JavaMathMathContext *)mc {
  if (self = [self initJavaMathBigDecimalWithCharArray:inArg withInt:0 withInt:(int) [((IOSCharArray *) nil_chk(inArg)) count]]) {
    [self inplaceRoundWithJavaMathMathContext:mc];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithNSString:(NSString *)val {
  return JreMemDebugAdd([self initJavaMathBigDecimalWithCharArray:[((NSString *) nil_chk(val)) toCharArray] withInt:0 withInt:[val length]]);
}

- (id)initWithNSString:(NSString *)val
withJavaMathMathContext:(JavaMathMathContext *)mc {
  if (self = [self initJavaMathBigDecimalWithCharArray:[((NSString *) nil_chk(val)) toCharArray] withInt:0 withInt:[val length]]) {
    [self inplaceRoundWithJavaMathMathContext:mc];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initJavaMathBigDecimalWithDouble:(double)val {
  if (self = [super init]) {
    JavaMathBigDecimal_set_toStringImage_(self, nil);
    hashCode__ = 0;
    precision__ = 0;
    if ([JavaLangDouble isInfiniteWithDouble:val] || [JavaLangDouble isNaNWithDouble:val]) {
      @throw [[[JavaLangNumberFormatException alloc] initWithNSString:@"Infinite or NaN"] autorelease];
    }
    long long int bits = [JavaLangDouble doubleToLongBitsWithDouble:val];
    long long int mantisa;
    int trailingZeros;
    scale__ = 1075 - (int) ((bits >> 52) & (long long) 0x7FFLL);
    mantisa = (scale__ == 1075) ? (bits & (long long) 0xFFFFFFFFFFFFFLL) << 1 : (bits & (long long) 0xFFFFFFFFFFFFFLL) | (long long) 0x10000000000000LL;
    if (mantisa == 0) {
      scale__ = 0;
      precision__ = 1;
    }
    if (scale__ > 0) {
      trailingZeros = [JavaLangMath minWithInt:scale__ withInt:[JavaLangLong numberOfTrailingZerosWithLong:mantisa]];
      URShiftAssignLong(&mantisa, trailingZeros);
      scale__ -= trailingZeros;
    }
    if ((bits >> 63) != 0) {
      mantisa = -mantisa;
    }
    int mantisaBits = [JavaMathBigDecimal bitLengthWithLong:mantisa];
    if (scale__ < 0) {
      bitLength__ = mantisaBits == 0 ? 0 : mantisaBits - scale__;
      if (bitLength__ < 64) {
        smallValue_ = mantisa << (-scale__);
      }
      else {
        JavaMathBigDecimal_set_intVal_(self, [((JavaMathBigInteger *) nil_chk([JavaMathBigInteger valueOfWithLong:mantisa])) shiftLeftWithInt:-scale__]);
      }
      scale__ = 0;
    }
    else if (scale__ > 0) {
      if (scale__ < (int) [((IOSLongArray *) nil_chk(JavaMathBigDecimal_LONG_FIVE_POW_)) count] && mantisaBits + IOSIntArray_Get(nil_chk(JavaMathBigDecimal_LONG_FIVE_POW_BIT_LENGTH_), scale__) < 64) {
        smallValue_ = mantisa * IOSLongArray_Get(JavaMathBigDecimal_LONG_FIVE_POW_, scale__);
        bitLength__ = [JavaMathBigDecimal bitLengthWithLong:smallValue_];
      }
      else {
        [self setUnscaledValueWithJavaMathBigInteger:[JavaMathMultiplication multiplyByFivePowWithJavaMathBigInteger:[JavaMathBigInteger valueOfWithLong:mantisa] withInt:scale__]];
      }
    }
    else {
      smallValue_ = mantisa;
      bitLength__ = mantisaBits;
    }
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithDouble:(double)val {
  return [self initJavaMathBigDecimalWithDouble:val];
}

- (id)initWithDouble:(double)val
withJavaMathMathContext:(JavaMathMathContext *)mc {
  if (self = [self initJavaMathBigDecimalWithDouble:val]) {
    [self inplaceRoundWithJavaMathMathContext:mc];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initJavaMathBigDecimalWithJavaMathBigInteger:(JavaMathBigInteger *)val {
  return JreMemDebugAdd([self initJavaMathBigDecimalWithJavaMathBigInteger:val withInt:0]);
}

- (id)initWithJavaMathBigInteger:(JavaMathBigInteger *)val {
  return [self initJavaMathBigDecimalWithJavaMathBigInteger:val];
}

- (id)initWithJavaMathBigInteger:(JavaMathBigInteger *)val
         withJavaMathMathContext:(JavaMathMathContext *)mc {
  if (self = [self initJavaMathBigDecimalWithJavaMathBigInteger:val]) {
    [self inplaceRoundWithJavaMathMathContext:mc];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initJavaMathBigDecimalWithJavaMathBigInteger:(JavaMathBigInteger *)unscaledVal
                                           withInt:(int)scale_ {
  if (self = [super init]) {
    JavaMathBigDecimal_set_toStringImage_(self, nil);
    hashCode__ = 0;
    precision__ = 0;
    if (unscaledVal == nil) {
      @throw [[[JavaLangNullPointerException alloc] init] autorelease];
    }
    self->scale__ = scale_;
    [self setUnscaledValueWithJavaMathBigInteger:unscaledVal];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaMathBigInteger:(JavaMathBigInteger *)unscaledVal
                         withInt:(int)scale_ {
  return [self initJavaMathBigDecimalWithJavaMathBigInteger:unscaledVal withInt:scale_];
}

- (id)initWithJavaMathBigInteger:(JavaMathBigInteger *)unscaledVal
                         withInt:(int)scale_
         withJavaMathMathContext:(JavaMathMathContext *)mc {
  if (self = [self initJavaMathBigDecimalWithJavaMathBigInteger:unscaledVal withInt:scale_]) {
    [self inplaceRoundWithJavaMathMathContext:mc];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithInt:(int)val {
  return JreMemDebugAdd([self initJavaMathBigDecimalWithInt:val withInt:0]);
}

- (id)initWithInt:(int)val
withJavaMathMathContext:(JavaMathMathContext *)mc {
  if (self = [self initJavaMathBigDecimalWithInt:val withInt:0]) {
    [self inplaceRoundWithJavaMathMathContext:mc];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initJavaMathBigDecimalWithLong:(long long int)val {
  return JreMemDebugAdd([self initJavaMathBigDecimalWithLong:val withInt:0]);
}

- (id)initWithLong:(long long int)val {
  return [self initJavaMathBigDecimalWithLong:val];
}

- (id)initWithLong:(long long int)val
withJavaMathMathContext:(JavaMathMathContext *)mc {
  if (self = [self initJavaMathBigDecimalWithLong:val]) {
    [self inplaceRoundWithJavaMathMathContext:mc];
    JreMemDebugAdd(self);
  }
  return self;
}

+ (JavaMathBigDecimal *)valueOfWithLong:(long long int)unscaledVal
                                withInt:(int)scale_ {
  if (scale_ == 0) {
    return [JavaMathBigDecimal valueOfWithLong:unscaledVal];
  }
  if ((unscaledVal == 0) && (scale_ >= 0) && (scale_ < (int) [((IOSObjectArray *) nil_chk(JavaMathBigDecimal_ZERO_SCALED_BY_)) count])) {
    return IOSObjectArray_Get(JavaMathBigDecimal_ZERO_SCALED_BY_, scale_);
  }
  return [[[JavaMathBigDecimal alloc] initWithLong:unscaledVal withInt:scale_] autorelease];
}

+ (JavaMathBigDecimal *)valueOfWithLong:(long long int)unscaledVal {
  if ((unscaledVal >= 0) && (unscaledVal < JavaMathBigDecimal_BI_SCALED_BY_ZERO_LENGTH)) {
    return IOSObjectArray_Get(nil_chk(JavaMathBigDecimal_BI_SCALED_BY_ZERO_), (int) unscaledVal);
  }
  return [[[JavaMathBigDecimal alloc] initWithLong:unscaledVal withInt:0] autorelease];
}

+ (JavaMathBigDecimal *)valueOfWithDouble:(double)val {
  if ([JavaLangDouble isInfiniteWithDouble:val] || [JavaLangDouble isNaNWithDouble:val]) {
    @throw [[[JavaLangNumberFormatException alloc] initWithNSString:@"Infinite or NaN"] autorelease];
  }
  return [[[JavaMathBigDecimal alloc] initWithNSString:[JavaLangDouble toStringWithDouble:val]] autorelease];
}

- (JavaMathBigDecimal *)addWithJavaMathBigDecimal:(JavaMathBigDecimal *)augend {
  int diffScale = self->scale__ - ((JavaMathBigDecimal *) nil_chk(augend))->scale__;
  if ([self isZero]) {
    if (diffScale <= 0) {
      return augend;
    }
    if ([augend isZero]) {
      return self;
    }
  }
  else if ([augend isZero]) {
    if (diffScale >= 0) {
      return self;
    }
  }
  if (diffScale == 0) {
    if ([JavaLangMath maxWithInt:self->bitLength__ withInt:augend->bitLength__] + 1 < 64) {
      return [JavaMathBigDecimal valueOfWithLong:self->smallValue_ + augend->smallValue_ withInt:self->scale__];
    }
    return [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([self getUnscaledValue])) addWithJavaMathBigInteger:[augend getUnscaledValue]] withInt:self->scale__] autorelease];
  }
  else if (diffScale > 0) {
    return [JavaMathBigDecimal addAndMult10WithJavaMathBigDecimal:self withJavaMathBigDecimal:augend withInt:diffScale];
  }
  else {
    return [JavaMathBigDecimal addAndMult10WithJavaMathBigDecimal:augend withJavaMathBigDecimal:self withInt:-diffScale];
  }
}

+ (JavaMathBigDecimal *)addAndMult10WithJavaMathBigDecimal:(JavaMathBigDecimal *)thisValue
                                    withJavaMathBigDecimal:(JavaMathBigDecimal *)augend
                                                   withInt:(int)diffScale {
  if (diffScale < (int) [((IOSLongArray *) nil_chk(JavaMathBigDecimal_LONG_TEN_POW_)) count] && [JavaLangMath maxWithInt:((JavaMathBigDecimal *) nil_chk(thisValue))->bitLength__ withInt:((JavaMathBigDecimal *) nil_chk(augend))->bitLength__ + IOSIntArray_Get(nil_chk(JavaMathBigDecimal_LONG_TEN_POW_BIT_LENGTH_), diffScale)] + 1 < 64) {
    return [JavaMathBigDecimal valueOfWithLong:thisValue->smallValue_ + augend->smallValue_ * IOSLongArray_Get(JavaMathBigDecimal_LONG_TEN_POW_, diffScale) withInt:thisValue->scale__];
  }
  return [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigDecimal *) nil_chk(thisValue)) getUnscaledValue])) addWithJavaMathBigInteger:[JavaMathMultiplication multiplyByTenPowWithJavaMathBigInteger:[((JavaMathBigDecimal *) nil_chk(augend)) getUnscaledValue] withLong:diffScale]] withInt:thisValue->scale__] autorelease];
}

- (JavaMathBigDecimal *)addWithJavaMathBigDecimal:(JavaMathBigDecimal *)augend
                          withJavaMathMathContext:(JavaMathMathContext *)mc {
  JavaMathBigDecimal *larger;
  JavaMathBigDecimal *smaller;
  JavaMathBigInteger *tempBI;
  long long int diffScale = (long long int) self->scale__ - ((JavaMathBigDecimal *) nil_chk(augend))->scale__;
  int largerSignum;
  if (([augend isZero]) || ([self isZero]) || ([((JavaMathMathContext *) nil_chk(mc)) getPrecision] == 0)) {
    return [((JavaMathBigDecimal *) nil_chk([self addWithJavaMathBigDecimal:augend])) roundWithJavaMathMathContext:mc];
  }
  if ([self aproxPrecision] < diffScale - 1) {
    larger = augend;
    smaller = self;
  }
  else if ([augend aproxPrecision] < -diffScale - 1) {
    larger = self;
    smaller = augend;
  }
  else {
    return [((JavaMathBigDecimal *) nil_chk([self addWithJavaMathBigDecimal:augend])) roundWithJavaMathMathContext:mc];
  }
  if ([((JavaMathMathContext *) nil_chk(mc)) getPrecision] >= [((JavaMathBigDecimal *) nil_chk(larger)) aproxPrecision]) {
    return [((JavaMathBigDecimal *) nil_chk([self addWithJavaMathBigDecimal:augend])) roundWithJavaMathMathContext:mc];
  }
  largerSignum = [larger signum];
  if (largerSignum == [((JavaMathBigDecimal *) nil_chk(smaller)) signum]) {
    tempBI = [((JavaMathBigInteger *) nil_chk([JavaMathMultiplication multiplyByPositiveIntWithJavaMathBigInteger:[larger getUnscaledValue] withInt:10])) addWithJavaMathBigInteger:[JavaMathBigInteger valueOfWithLong:largerSignum]];
  }
  else {
    tempBI = [((JavaMathBigInteger *) nil_chk([larger getUnscaledValue])) subtractWithJavaMathBigInteger:[JavaMathBigInteger valueOfWithLong:largerSignum]];
    tempBI = [((JavaMathBigInteger *) nil_chk([JavaMathMultiplication multiplyByPositiveIntWithJavaMathBigInteger:tempBI withInt:10])) addWithJavaMathBigInteger:[JavaMathBigInteger valueOfWithLong:largerSignum * 9]];
  }
  larger = [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:tempBI withInt:larger->scale__ + 1] autorelease];
  return [larger roundWithJavaMathMathContext:mc];
}

- (JavaMathBigDecimal *)subtractWithJavaMathBigDecimal:(JavaMathBigDecimal *)subtrahend {
  int diffScale = self->scale__ - ((JavaMathBigDecimal *) nil_chk(subtrahend))->scale__;
  if ([self isZero]) {
    if (diffScale <= 0) {
      return [subtrahend negate];
    }
    if ([subtrahend isZero]) {
      return self;
    }
  }
  else if ([subtrahend isZero]) {
    if (diffScale >= 0) {
      return self;
    }
  }
  if (diffScale == 0) {
    if ([JavaLangMath maxWithInt:self->bitLength__ withInt:subtrahend->bitLength__] + 1 < 64) {
      return [JavaMathBigDecimal valueOfWithLong:self->smallValue_ - subtrahend->smallValue_ withInt:self->scale__];
    }
    return [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([self getUnscaledValue])) subtractWithJavaMathBigInteger:[subtrahend getUnscaledValue]] withInt:self->scale__] autorelease];
  }
  else if (diffScale > 0) {
    if (diffScale < (int) [((IOSLongArray *) nil_chk(JavaMathBigDecimal_LONG_TEN_POW_)) count] && [JavaLangMath maxWithInt:self->bitLength__ withInt:subtrahend->bitLength__ + IOSIntArray_Get(nil_chk(JavaMathBigDecimal_LONG_TEN_POW_BIT_LENGTH_), diffScale)] + 1 < 64) {
      return [JavaMathBigDecimal valueOfWithLong:self->smallValue_ - subtrahend->smallValue_ * IOSLongArray_Get(JavaMathBigDecimal_LONG_TEN_POW_, diffScale) withInt:self->scale__];
    }
    return [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([self getUnscaledValue])) subtractWithJavaMathBigInteger:[JavaMathMultiplication multiplyByTenPowWithJavaMathBigInteger:[subtrahend getUnscaledValue] withLong:diffScale]] withInt:self->scale__] autorelease];
  }
  else {
    diffScale = -diffScale;
    if (diffScale < (int) [((IOSLongArray *) nil_chk(JavaMathBigDecimal_LONG_TEN_POW_)) count] && [JavaLangMath maxWithInt:self->bitLength__ + IOSIntArray_Get(nil_chk(JavaMathBigDecimal_LONG_TEN_POW_BIT_LENGTH_), diffScale) withInt:subtrahend->bitLength__] + 1 < 64) {
      return [JavaMathBigDecimal valueOfWithLong:self->smallValue_ * IOSLongArray_Get(JavaMathBigDecimal_LONG_TEN_POW_, diffScale) - subtrahend->smallValue_ withInt:subtrahend->scale__];
    }
    return [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([JavaMathMultiplication multiplyByTenPowWithJavaMathBigInteger:[self getUnscaledValue] withLong:diffScale])) subtractWithJavaMathBigInteger:[subtrahend getUnscaledValue]] withInt:subtrahend->scale__] autorelease];
  }
}

- (JavaMathBigDecimal *)subtractWithJavaMathBigDecimal:(JavaMathBigDecimal *)subtrahend
                               withJavaMathMathContext:(JavaMathMathContext *)mc {
  long long int diffScale = ((JavaMathBigDecimal *) nil_chk(subtrahend))->scale__ - (long long int) self->scale__;
  int thisSignum;
  JavaMathBigDecimal *leftOperand;
  JavaMathBigInteger *tempBI;
  if (([subtrahend isZero]) || ([self isZero]) || ([((JavaMathMathContext *) nil_chk(mc)) getPrecision] == 0)) {
    return [((JavaMathBigDecimal *) nil_chk([self subtractWithJavaMathBigDecimal:subtrahend])) roundWithJavaMathMathContext:mc];
  }
  if ([subtrahend aproxPrecision] < diffScale - 1) {
    if ([((JavaMathMathContext *) nil_chk(mc)) getPrecision] < [self aproxPrecision]) {
      thisSignum = [self signum];
      if (thisSignum != [subtrahend signum]) {
        tempBI = [((JavaMathBigInteger *) nil_chk([JavaMathMultiplication multiplyByPositiveIntWithJavaMathBigInteger:[self getUnscaledValue] withInt:10])) addWithJavaMathBigInteger:[JavaMathBigInteger valueOfWithLong:thisSignum]];
      }
      else {
        tempBI = [((JavaMathBigInteger *) nil_chk([self getUnscaledValue])) subtractWithJavaMathBigInteger:[JavaMathBigInteger valueOfWithLong:thisSignum]];
        tempBI = [((JavaMathBigInteger *) nil_chk([JavaMathMultiplication multiplyByPositiveIntWithJavaMathBigInteger:tempBI withInt:10])) addWithJavaMathBigInteger:[JavaMathBigInteger valueOfWithLong:thisSignum * 9]];
      }
      leftOperand = [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:tempBI withInt:self->scale__ + 1] autorelease];
      return [leftOperand roundWithJavaMathMathContext:mc];
    }
  }
  return [((JavaMathBigDecimal *) nil_chk([self subtractWithJavaMathBigDecimal:subtrahend])) roundWithJavaMathMathContext:mc];
}

- (JavaMathBigDecimal *)multiplyWithJavaMathBigDecimal:(JavaMathBigDecimal *)multiplicand {
  long long int newScale = (long long int) self->scale__ + ((JavaMathBigDecimal *) nil_chk(multiplicand))->scale__;
  if (([self isZero]) || ([multiplicand isZero])) {
    return [JavaMathBigDecimal zeroScaledByWithLong:newScale];
  }
  if (self->bitLength__ + multiplicand->bitLength__ < 64) {
    return [JavaMathBigDecimal valueOfWithLong:self->smallValue_ * multiplicand->smallValue_ withInt:[JavaMathBigDecimal toIntScaleWithLong:newScale]];
  }
  return [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([self getUnscaledValue])) multiplyWithJavaMathBigInteger:[multiplicand getUnscaledValue]] withInt:[JavaMathBigDecimal toIntScaleWithLong:newScale]] autorelease];
}

- (JavaMathBigDecimal *)multiplyWithJavaMathBigDecimal:(JavaMathBigDecimal *)multiplicand
                               withJavaMathMathContext:(JavaMathMathContext *)mc {
  JavaMathBigDecimal *result = [self multiplyWithJavaMathBigDecimal:multiplicand];
  [((JavaMathBigDecimal *) nil_chk(result)) inplaceRoundWithJavaMathMathContext:mc];
  return result;
}

- (JavaMathBigDecimal *)divideWithJavaMathBigDecimal:(JavaMathBigDecimal *)divisor
                                             withInt:(int)scale_
                                             withInt:(int)roundingMode {
  return [self divideWithJavaMathBigDecimal:divisor withInt:scale_ withJavaMathRoundingModeEnum:[JavaMathRoundingModeEnum valueOfWithInt:roundingMode]];
}

- (JavaMathBigDecimal *)divideWithJavaMathBigDecimal:(JavaMathBigDecimal *)divisor
                                             withInt:(int)scale_
                        withJavaMathRoundingModeEnum:(JavaMathRoundingModeEnum *)roundingMode {
  if (roundingMode == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  if ([((JavaMathBigDecimal *) nil_chk(divisor)) isZero]) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"Division by zero"] autorelease];
  }
  long long int diffScale = ((long long int) self->scale__ - divisor->scale__) - scale_;
  if (self->bitLength__ < 64 && divisor->bitLength__ < 64) {
    if (diffScale == 0) {
      return [JavaMathBigDecimal dividePrimitiveLongsWithLong:self->smallValue_ withLong:divisor->smallValue_ withInt:scale_ withJavaMathRoundingModeEnum:roundingMode];
    }
    else if (diffScale > 0) {
      if (diffScale < (int) [((IOSLongArray *) nil_chk(JavaMathBigDecimal_LONG_TEN_POW_)) count] && divisor->bitLength__ + IOSIntArray_Get(nil_chk(JavaMathBigDecimal_LONG_TEN_POW_BIT_LENGTH_), (int) diffScale) < 64) {
        return [JavaMathBigDecimal dividePrimitiveLongsWithLong:self->smallValue_ withLong:divisor->smallValue_ * IOSLongArray_Get(JavaMathBigDecimal_LONG_TEN_POW_, (int) diffScale) withInt:scale_ withJavaMathRoundingModeEnum:roundingMode];
      }
    }
    else {
      if (-diffScale < (int) [((IOSLongArray *) nil_chk(JavaMathBigDecimal_LONG_TEN_POW_)) count] && self->bitLength__ + IOSIntArray_Get(nil_chk(JavaMathBigDecimal_LONG_TEN_POW_BIT_LENGTH_), (int) -diffScale) < 64) {
        return [JavaMathBigDecimal dividePrimitiveLongsWithLong:self->smallValue_ * IOSLongArray_Get(JavaMathBigDecimal_LONG_TEN_POW_, (int) -diffScale) withLong:divisor->smallValue_ withInt:scale_ withJavaMathRoundingModeEnum:roundingMode];
      }
    }
  }
  JavaMathBigInteger *scaledDividend = [self getUnscaledValue];
  JavaMathBigInteger *scaledDivisor = [divisor getUnscaledValue];
  if (diffScale > 0) {
    scaledDivisor = [JavaMathMultiplication multiplyByTenPowWithJavaMathBigInteger:scaledDivisor withLong:(int) diffScale];
  }
  else if (diffScale < 0) {
    scaledDividend = [JavaMathMultiplication multiplyByTenPowWithJavaMathBigInteger:scaledDividend withLong:(int) -diffScale];
  }
  return [JavaMathBigDecimal divideBigIntegersWithJavaMathBigInteger:scaledDividend withJavaMathBigInteger:scaledDivisor withInt:scale_ withJavaMathRoundingModeEnum:roundingMode];
}

+ (JavaMathBigDecimal *)divideBigIntegersWithJavaMathBigInteger:(JavaMathBigInteger *)scaledDividend
                                         withJavaMathBigInteger:(JavaMathBigInteger *)scaledDivisor
                                                        withInt:(int)scale_
                                   withJavaMathRoundingModeEnum:(JavaMathRoundingModeEnum *)roundingMode {
  IOSObjectArray *quotAndRem = [((JavaMathBigInteger *) nil_chk(scaledDividend)) divideAndRemainderWithJavaMathBigInteger:scaledDivisor];
  JavaMathBigInteger *quotient = IOSObjectArray_Get(nil_chk(quotAndRem), 0);
  JavaMathBigInteger *remainder = IOSObjectArray_Get(quotAndRem, 1);
  if ([((JavaMathBigInteger *) nil_chk(remainder)) signum] == 0) {
    return [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:quotient withInt:scale_] autorelease];
  }
  int sign = [scaledDividend signum] * [((JavaMathBigInteger *) nil_chk(scaledDivisor)) signum];
  int compRem;
  if ([scaledDivisor bitLength] < 63) {
    long long int rem = [remainder longLongValue];
    long long int divisor = [scaledDivisor longLongValue];
    compRem = [JavaMathBigDecimal longCompareToWithLong:[JavaLangMath absWithLong:rem] << 1 withLong:[JavaLangMath absWithLong:divisor]];
    compRem = [JavaMathBigDecimal roundingBehaviorWithInt:[((JavaMathBigInteger *) nil_chk(quotient)) testBitWithInt:0] ? 1 : 0 withInt:sign * (5 + compRem) withJavaMathRoundingModeEnum:roundingMode];
  }
  else {
    compRem = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([remainder abs])) shiftLeftOneBit])) compareToWithId:[scaledDivisor abs]];
    compRem = [JavaMathBigDecimal roundingBehaviorWithInt:[((JavaMathBigInteger *) nil_chk(quotient)) testBitWithInt:0] ? 1 : 0 withInt:sign * (5 + compRem) withJavaMathRoundingModeEnum:roundingMode];
  }
  if (compRem != 0) {
    if ([((JavaMathBigInteger *) nil_chk(quotient)) bitLength] < 63) {
      return [JavaMathBigDecimal valueOfWithLong:[quotient longLongValue] + compRem withInt:scale_];
    }
    quotient = [quotient addWithJavaMathBigInteger:[JavaMathBigInteger valueOfWithLong:compRem]];
    return [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:quotient withInt:scale_] autorelease];
  }
  return [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:quotient withInt:scale_] autorelease];
}

+ (JavaMathBigDecimal *)dividePrimitiveLongsWithLong:(long long int)scaledDividend
                                            withLong:(long long int)scaledDivisor
                                             withInt:(int)scale_
                        withJavaMathRoundingModeEnum:(JavaMathRoundingModeEnum *)roundingMode {
  long long int quotient = scaledDividend / scaledDivisor;
  long long int remainder = scaledDividend % scaledDivisor;
  int sign = [JavaLangLong signumWithLong:scaledDividend] * [JavaLangLong signumWithLong:scaledDivisor];
  if (remainder != 0) {
    int compRem;
    compRem = [JavaMathBigDecimal longCompareToWithLong:[JavaLangMath absWithLong:remainder] << 1 withLong:[JavaLangMath absWithLong:scaledDivisor]];
    quotient += [JavaMathBigDecimal roundingBehaviorWithInt:((int) quotient) & 1 withInt:sign * (5 + compRem) withJavaMathRoundingModeEnum:roundingMode];
  }
  return [JavaMathBigDecimal valueOfWithLong:quotient withInt:scale_];
}

- (JavaMathBigDecimal *)divideWithJavaMathBigDecimal:(JavaMathBigDecimal *)divisor
                                             withInt:(int)roundingMode {
  return [self divideWithJavaMathBigDecimal:divisor withInt:scale__ withJavaMathRoundingModeEnum:[JavaMathRoundingModeEnum valueOfWithInt:roundingMode]];
}

- (JavaMathBigDecimal *)divideWithJavaMathBigDecimal:(JavaMathBigDecimal *)divisor
                        withJavaMathRoundingModeEnum:(JavaMathRoundingModeEnum *)roundingMode {
  return [self divideWithJavaMathBigDecimal:divisor withInt:scale__ withJavaMathRoundingModeEnum:roundingMode];
}

- (JavaMathBigDecimal *)divideWithJavaMathBigDecimal:(JavaMathBigDecimal *)divisor {
  JavaMathBigInteger *p = [self getUnscaledValue];
  JavaMathBigInteger *q = [((JavaMathBigDecimal *) nil_chk(divisor)) getUnscaledValue];
  JavaMathBigInteger *gcd;
  IOSObjectArray *quotAndRem;
  long long int diffScale = (long long int) scale__ - divisor->scale__;
  int newScale;
  int k;
  int l = 0;
  int i = 1;
  int lastPow = (int) [((IOSObjectArray *) nil_chk(JavaMathBigDecimal_FIVE_POW_)) count] - 1;
  if ([divisor isZero]) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"Division by zero"] autorelease];
  }
  if ([((JavaMathBigInteger *) nil_chk(p)) signum] == 0) {
    return [JavaMathBigDecimal zeroScaledByWithLong:diffScale];
  }
  gcd = [p gcdWithJavaMathBigInteger:q];
  p = [p divideWithJavaMathBigInteger:gcd];
  q = [((JavaMathBigInteger *) nil_chk(q)) divideWithJavaMathBigInteger:gcd];
  k = [((JavaMathBigInteger *) nil_chk(q)) getLowestSetBit];
  q = [q shiftRightWithInt:k];
  do {
    quotAndRem = [((JavaMathBigInteger *) nil_chk(q)) divideAndRemainderWithJavaMathBigInteger:IOSObjectArray_Get(JavaMathBigDecimal_FIVE_POW_, i)];
    if ([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(quotAndRem), 1))) signum] == 0) {
      l += i;
      if (i < lastPow) {
        i++;
      }
      q = IOSObjectArray_Get(quotAndRem, 0);
    }
    else {
      if (i == 1) {
        break;
      }
      i = 1;
    }
  }
  while (YES);
  if (![((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(q)) abs])) isEqual:[JavaMathBigInteger ONE]]) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"Non-terminating decimal expansion; no exact representable decimal result."] autorelease];
  }
  if ([q signum] < 0) {
    p = [((JavaMathBigInteger *) nil_chk(p)) negate];
  }
  newScale = [JavaMathBigDecimal toIntScaleWithLong:diffScale + [JavaLangMath maxWithInt:k withInt:l]];
  i = k - l;
  p = (i > 0) ? [JavaMathMultiplication multiplyByFivePowWithJavaMathBigInteger:p withInt:i] : [((JavaMathBigInteger *) nil_chk(p)) shiftLeftWithInt:-i];
  return [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:p withInt:newScale] autorelease];
}

- (JavaMathBigDecimal *)divideWithJavaMathBigDecimal:(JavaMathBigDecimal *)divisor
                             withJavaMathMathContext:(JavaMathMathContext *)mc {
  long long int traillingZeros = [((JavaMathMathContext *) nil_chk(mc)) getPrecision] + 2LL + [((JavaMathBigDecimal *) nil_chk(divisor)) aproxPrecision] - [self aproxPrecision];
  long long int diffScale = (long long int) scale__ - divisor->scale__;
  long long int newScale = diffScale;
  int compRem;
  int i = 1;
  int lastPow = (int) [((IOSObjectArray *) nil_chk(JavaMathBigDecimal_TEN_POW_)) count] - 1;
  JavaMathBigInteger *integerQuot;
  IOSObjectArray *quotAndRem = [IOSObjectArray arrayWithObjects:(id[]){ [self getUnscaledValue] } count:1 type:[IOSClass classWithClass:[JavaMathBigInteger class]]];
  if (([mc getPrecision] == 0) || ([self isZero]) || ([divisor isZero])) {
    return [self divideWithJavaMathBigDecimal:divisor];
  }
  if (traillingZeros > 0) {
    IOSObjectArray_Set(quotAndRem, 0, [((JavaMathBigInteger *) nil_chk([self getUnscaledValue])) multiplyWithJavaMathBigInteger:[JavaMathMultiplication powerOf10WithLong:traillingZeros]]);
    newScale += traillingZeros;
  }
  quotAndRem = [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(quotAndRem, 0))) divideAndRemainderWithJavaMathBigInteger:[divisor getUnscaledValue]];
  integerQuot = IOSObjectArray_Get(nil_chk(quotAndRem), 0);
  if ([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(quotAndRem, 1))) signum] != 0) {
    compRem = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(quotAndRem, 1))) shiftLeftOneBit])) compareToWithId:[divisor getUnscaledValue]];
    integerQuot = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(integerQuot)) multiplyWithJavaMathBigInteger:[JavaMathBigInteger TEN]])) addWithJavaMathBigInteger:[JavaMathBigInteger valueOfWithLong:[((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(quotAndRem, 0))) signum] * (5 + compRem)]];
    newScale++;
  }
  else {
    while (![((JavaMathBigInteger *) nil_chk(integerQuot)) testBitWithInt:0]) {
      quotAndRem = [integerQuot divideAndRemainderWithJavaMathBigInteger:IOSObjectArray_Get(JavaMathBigDecimal_TEN_POW_, i)];
      if (([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(quotAndRem), 1))) signum] == 0) && (newScale - i >= diffScale)) {
        newScale -= i;
        if (i < lastPow) {
          i++;
        }
        integerQuot = IOSObjectArray_Get(quotAndRem, 0);
      }
      else {
        if (i == 1) {
          break;
        }
        i = 1;
      }
    }
  }
  return [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:integerQuot withInt:[JavaMathBigDecimal toIntScaleWithLong:newScale] withJavaMathMathContext:mc] autorelease];
}

- (JavaMathBigDecimal *)divideToIntegralValueWithJavaMathBigDecimal:(JavaMathBigDecimal *)divisor {
  JavaMathBigInteger *integralValue;
  JavaMathBigInteger *powerOfTen;
  IOSObjectArray *quotAndRem = [IOSObjectArray arrayWithObjects:(id[]){ [self getUnscaledValue] } count:1 type:[IOSClass classWithClass:[JavaMathBigInteger class]]];
  long long int newScale = (long long int) self->scale__ - ((JavaMathBigDecimal *) nil_chk(divisor))->scale__;
  long long int tempScale = 0;
  int i = 1;
  int lastPow = (int) [((IOSObjectArray *) nil_chk(JavaMathBigDecimal_TEN_POW_)) count] - 1;
  if ([divisor isZero]) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"Division by zero"] autorelease];
  }
  if (([divisor aproxPrecision] + newScale > [self aproxPrecision] + 1LL) || ([self isZero])) {
    integralValue = [JavaMathBigInteger ZERO];
  }
  else if (newScale == 0) {
    integralValue = [((JavaMathBigInteger *) nil_chk([self getUnscaledValue])) divideWithJavaMathBigInteger:[divisor getUnscaledValue]];
  }
  else if (newScale > 0) {
    powerOfTen = [JavaMathMultiplication powerOf10WithLong:newScale];
    integralValue = [((JavaMathBigInteger *) nil_chk([self getUnscaledValue])) divideWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([divisor getUnscaledValue])) multiplyWithJavaMathBigInteger:powerOfTen]];
    integralValue = [((JavaMathBigInteger *) nil_chk(integralValue)) multiplyWithJavaMathBigInteger:powerOfTen];
  }
  else {
    powerOfTen = [JavaMathMultiplication powerOf10WithLong:-newScale];
    integralValue = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([self getUnscaledValue])) multiplyWithJavaMathBigInteger:powerOfTen])) divideWithJavaMathBigInteger:[divisor getUnscaledValue]];
    while (![((JavaMathBigInteger *) nil_chk(integralValue)) testBitWithInt:0]) {
      quotAndRem = [integralValue divideAndRemainderWithJavaMathBigInteger:IOSObjectArray_Get(JavaMathBigDecimal_TEN_POW_, i)];
      if (([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(quotAndRem), 1))) signum] == 0) && (tempScale - i >= newScale)) {
        tempScale -= i;
        if (i < lastPow) {
          i++;
        }
        integralValue = IOSObjectArray_Get(quotAndRem, 0);
      }
      else {
        if (i == 1) {
          break;
        }
        i = 1;
      }
    }
    newScale = tempScale;
  }
  return (([((JavaMathBigInteger *) nil_chk(integralValue)) signum] == 0) ? [JavaMathBigDecimal zeroScaledByWithLong:newScale] : [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:integralValue withInt:[JavaMathBigDecimal toIntScaleWithLong:newScale]] autorelease]);
}

- (JavaMathBigDecimal *)divideToIntegralValueWithJavaMathBigDecimal:(JavaMathBigDecimal *)divisor
                                            withJavaMathMathContext:(JavaMathMathContext *)mc {
  int mcPrecision = [((JavaMathMathContext *) nil_chk(mc)) getPrecision];
  int diffPrecision = [self precision] - [((JavaMathBigDecimal *) nil_chk(divisor)) precision];
  int lastPow = (int) [((IOSObjectArray *) nil_chk(JavaMathBigDecimal_TEN_POW_)) count] - 1;
  long long int diffScale = (long long int) self->scale__ - divisor->scale__;
  long long int newScale = diffScale;
  long long int quotPrecision = diffPrecision - diffScale + 1;
  IOSObjectArray *quotAndRem = [IOSObjectArray arrayWithLength:2 type:[IOSClass classWithClass:[JavaMathBigInteger class]]];
  if ((mcPrecision == 0) || ([self isZero]) || ([divisor isZero])) {
    return [self divideToIntegralValueWithJavaMathBigDecimal:divisor];
  }
  if (quotPrecision <= 0) {
    IOSObjectArray_Set(quotAndRem, 0, [JavaMathBigInteger ZERO]);
  }
  else if (diffScale == 0) {
    IOSObjectArray_Set(quotAndRem, 0, [((JavaMathBigInteger *) nil_chk([self getUnscaledValue])) divideWithJavaMathBigInteger:[divisor getUnscaledValue]]);
  }
  else if (diffScale > 0) {
    IOSObjectArray_Set(quotAndRem, 0, [((JavaMathBigInteger *) nil_chk([self getUnscaledValue])) divideWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([divisor getUnscaledValue])) multiplyWithJavaMathBigInteger:[JavaMathMultiplication powerOf10WithLong:diffScale]]]);
    newScale = [JavaLangMath minWithLong:diffScale withLong:[JavaLangMath maxWithLong:mcPrecision - quotPrecision + 1 withLong:0]];
    IOSObjectArray_Set(quotAndRem, 0, [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(quotAndRem, 0))) multiplyWithJavaMathBigInteger:[JavaMathMultiplication powerOf10WithLong:newScale]]);
  }
  else {
    long long int exp = [JavaLangMath minWithLong:-diffScale withLong:[JavaLangMath maxWithLong:(long long int) mcPrecision - diffPrecision withLong:0]];
    long long int compRemDiv;
    quotAndRem = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([self getUnscaledValue])) multiplyWithJavaMathBigInteger:[JavaMathMultiplication powerOf10WithLong:exp]])) divideAndRemainderWithJavaMathBigInteger:[divisor getUnscaledValue]];
    newScale += exp;
    exp = -newScale;
    if (([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(quotAndRem), 1))) signum] != 0) && (exp > 0)) {
      compRemDiv = [([[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:IOSObjectArray_Get(quotAndRem, 1)] autorelease]) precision] + exp - [divisor precision];
      if (compRemDiv == 0) {
        IOSObjectArray_Set(quotAndRem, 1, [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(quotAndRem, 1))) multiplyWithJavaMathBigInteger:[JavaMathMultiplication powerOf10WithLong:exp]])) divideWithJavaMathBigInteger:[divisor getUnscaledValue]]);
        compRemDiv = [JavaLangMath absWithInt:[((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(quotAndRem, 1))) signum]];
      }
      if (compRemDiv > 0) {
        @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"Division impossible"] autorelease];
      }
    }
  }
  if ([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(quotAndRem), 0))) signum] == 0) {
    return [JavaMathBigDecimal zeroScaledByWithLong:diffScale];
  }
  JavaMathBigInteger *strippedBI = IOSObjectArray_Get(quotAndRem, 0);
  JavaMathBigDecimal *integralValue = [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:IOSObjectArray_Get(quotAndRem, 0)] autorelease];
  long long int resultPrecision = [integralValue precision];
  int i = 1;
  while (![((JavaMathBigInteger *) nil_chk(strippedBI)) testBitWithInt:0]) {
    quotAndRem = [strippedBI divideAndRemainderWithJavaMathBigInteger:IOSObjectArray_Get(JavaMathBigDecimal_TEN_POW_, i)];
    if (([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(quotAndRem), 1))) signum] == 0) && ((resultPrecision - i >= mcPrecision) || (newScale - i >= diffScale))) {
      resultPrecision -= i;
      newScale -= i;
      if (i < lastPow) {
        i++;
      }
      strippedBI = IOSObjectArray_Get(quotAndRem, 0);
    }
    else {
      if (i == 1) {
        break;
      }
      i = 1;
    }
  }
  if (resultPrecision > mcPrecision) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"Division impossible"] autorelease];
  }
  integralValue->scale__ = [JavaMathBigDecimal toIntScaleWithLong:newScale];
  [integralValue setUnscaledValueWithJavaMathBigInteger:strippedBI];
  return integralValue;
}

- (JavaMathBigDecimal *)remainderWithJavaMathBigDecimal:(JavaMathBigDecimal *)divisor {
  return IOSObjectArray_Get(nil_chk([self divideAndRemainderWithJavaMathBigDecimal:divisor]), 1);
}

- (JavaMathBigDecimal *)remainderWithJavaMathBigDecimal:(JavaMathBigDecimal *)divisor
                                withJavaMathMathContext:(JavaMathMathContext *)mc {
  return IOSObjectArray_Get(nil_chk([self divideAndRemainderWithJavaMathBigDecimal:divisor withJavaMathMathContext:mc]), 1);
}

- (IOSObjectArray *)divideAndRemainderWithJavaMathBigDecimal:(JavaMathBigDecimal *)divisor {
  IOSObjectArray *quotAndRem = [IOSObjectArray arrayWithLength:2 type:[IOSClass classWithClass:[JavaMathBigDecimal class]]];
  IOSObjectArray_Set(quotAndRem, 0, [self divideToIntegralValueWithJavaMathBigDecimal:divisor]);
  IOSObjectArray_Set(quotAndRem, 1, [self subtractWithJavaMathBigDecimal:[((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(quotAndRem, 0))) multiplyWithJavaMathBigDecimal:divisor]]);
  return quotAndRem;
}

- (IOSObjectArray *)divideAndRemainderWithJavaMathBigDecimal:(JavaMathBigDecimal *)divisor
                                     withJavaMathMathContext:(JavaMathMathContext *)mc {
  IOSObjectArray *quotAndRem = [IOSObjectArray arrayWithLength:2 type:[IOSClass classWithClass:[JavaMathBigDecimal class]]];
  IOSObjectArray_Set(quotAndRem, 0, [self divideToIntegralValueWithJavaMathBigDecimal:divisor withJavaMathMathContext:mc]);
  IOSObjectArray_Set(quotAndRem, 1, [self subtractWithJavaMathBigDecimal:[((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(quotAndRem, 0))) multiplyWithJavaMathBigDecimal:divisor]]);
  return quotAndRem;
}

- (JavaMathBigDecimal *)powWithInt:(int)n {
  if (n == 0) {
    return JavaMathBigDecimal_ONE_;
  }
  if ((n < 0) || (n > 999999999)) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"Invalid Operation"] autorelease];
  }
  long long int newScale = scale__ * (long long int) n;
  return (([self isZero]) ? [JavaMathBigDecimal zeroScaledByWithLong:newScale] : [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([self getUnscaledValue])) powWithInt:n] withInt:[JavaMathBigDecimal toIntScaleWithLong:newScale]] autorelease]);
}

- (JavaMathBigDecimal *)powWithInt:(int)n
           withJavaMathMathContext:(JavaMathMathContext *)mc {
  int m = [JavaLangMath absWithInt:n];
  int mcPrecision = [((JavaMathMathContext *) nil_chk(mc)) getPrecision];
  int elength = (int) [JavaLangMath log10WithDouble:m] + 1;
  int oneBitMask;
  JavaMathBigDecimal *accum;
  JavaMathMathContext *newPrecision = mc;
  if ((n == 0) || (([self isZero]) && (n > 0))) {
    return [self powWithInt:n];
  }
  if ((m > 999999999) || ((mcPrecision == 0) && (n < 0)) || ((mcPrecision > 0) && (elength > mcPrecision))) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"Invalid Operation"] autorelease];
  }
  if (mcPrecision > 0) {
    newPrecision = [[[JavaMathMathContext alloc] initWithInt:mcPrecision + elength + 1 withJavaMathRoundingModeEnum:[mc getRoundingMode]] autorelease];
  }
  accum = [self roundWithJavaMathMathContext:newPrecision];
  oneBitMask = [JavaLangInteger highestOneBitWithInt:m] >> 1;
  while (oneBitMask > 0) {
    accum = [((JavaMathBigDecimal *) nil_chk(accum)) multiplyWithJavaMathBigDecimal:accum withJavaMathMathContext:newPrecision];
    if ((m & oneBitMask) == oneBitMask) {
      accum = [((JavaMathBigDecimal *) nil_chk(accum)) multiplyWithJavaMathBigDecimal:self withJavaMathMathContext:newPrecision];
    }
    oneBitMask >>= 1;
  }
  if (n < 0) {
    accum = [((JavaMathBigDecimal *) nil_chk(JavaMathBigDecimal_ONE_)) divideWithJavaMathBigDecimal:accum withJavaMathMathContext:newPrecision];
  }
  [((JavaMathBigDecimal *) nil_chk(accum)) inplaceRoundWithJavaMathMathContext:mc];
  return accum;
}

- (JavaMathBigDecimal *)abs {
  return (([self signum] < 0) ? [self negate] : self);
}

- (JavaMathBigDecimal *)absWithJavaMathMathContext:(JavaMathMathContext *)mc {
  return [((JavaMathBigDecimal *) nil_chk([self roundWithJavaMathMathContext:mc])) abs];
}

- (JavaMathBigDecimal *)negate {
  if (bitLength__ < 63 || (bitLength__ == 63 && smallValue_ != JavaLangLong_MIN_VALUE)) {
    return [JavaMathBigDecimal valueOfWithLong:-smallValue_ withInt:scale__];
  }
  return [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([self getUnscaledValue])) negate] withInt:scale__] autorelease];
}

- (JavaMathBigDecimal *)negateWithJavaMathMathContext:(JavaMathMathContext *)mc {
  return [((JavaMathBigDecimal *) nil_chk([self roundWithJavaMathMathContext:mc])) negate];
}

- (JavaMathBigDecimal *)plus {
  return self;
}

- (JavaMathBigDecimal *)plusWithJavaMathMathContext:(JavaMathMathContext *)mc {
  return [self roundWithJavaMathMathContext:mc];
}

- (int)signum {
  if (bitLength__ < 64) {
    return [JavaLangLong signumWithLong:self->smallValue_];
  }
  return [((JavaMathBigInteger *) nil_chk([self getUnscaledValue])) signum];
}

- (BOOL)isZero {
  return bitLength__ == 0 && self->smallValue_ != -1;
}

- (int)scale__ {
  return scale__;
}

- (int)precision {
  if (precision__ > 0) {
    return precision__;
  }
  int bitLength = self->bitLength__;
  int decimalDigits = 1;
  double doubleUnsc = 1;
  if (bitLength < 1024) {
    if (bitLength >= 64) {
      doubleUnsc = [((JavaMathBigInteger *) nil_chk([self getUnscaledValue])) doubleValue];
    }
    else if (bitLength >= 1) {
      doubleUnsc = smallValue_;
    }
    decimalDigits += [JavaLangMath log10WithDouble:[JavaLangMath absWithDouble:doubleUnsc]];
  }
  else {
    decimalDigits += (bitLength - 1) * JavaMathBigDecimal_LOG10_2;
    if ([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([self getUnscaledValue])) divideWithJavaMathBigInteger:[JavaMathMultiplication powerOf10WithLong:decimalDigits]])) signum] != 0) {
      decimalDigits++;
    }
  }
  precision__ = decimalDigits;
  return precision__;
}

- (JavaMathBigInteger *)unscaledValue {
  return [self getUnscaledValue];
}

- (JavaMathBigDecimal *)roundWithJavaMathMathContext:(JavaMathMathContext *)mc {
  JavaMathBigDecimal *thisBD = [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:[self getUnscaledValue] withInt:scale__] autorelease];
  [thisBD inplaceRoundWithJavaMathMathContext:mc];
  return thisBD;
}

- (JavaMathBigDecimal *)setScaleWithInt:(int)newScale
           withJavaMathRoundingModeEnum:(JavaMathRoundingModeEnum *)roundingMode {
  if (roundingMode == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  long long int diffScale = newScale - (long long int) scale__;
  if (diffScale == 0) {
    return self;
  }
  if (diffScale > 0) {
    if (diffScale < (int) [((IOSLongArray *) nil_chk(JavaMathBigDecimal_LONG_TEN_POW_)) count] && (self->bitLength__ + IOSIntArray_Get(nil_chk(JavaMathBigDecimal_LONG_TEN_POW_BIT_LENGTH_), (int) diffScale)) < 64) {
      return [JavaMathBigDecimal valueOfWithLong:self->smallValue_ * IOSLongArray_Get(JavaMathBigDecimal_LONG_TEN_POW_, (int) diffScale) withInt:newScale];
    }
    return [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:[JavaMathMultiplication multiplyByTenPowWithJavaMathBigInteger:[self getUnscaledValue] withLong:(int) diffScale] withInt:newScale] autorelease];
  }
  if (self->bitLength__ < 64 && -diffScale < (int) [((IOSLongArray *) nil_chk(JavaMathBigDecimal_LONG_TEN_POW_)) count]) {
    return [JavaMathBigDecimal dividePrimitiveLongsWithLong:self->smallValue_ withLong:IOSLongArray_Get(JavaMathBigDecimal_LONG_TEN_POW_, (int) -diffScale) withInt:newScale withJavaMathRoundingModeEnum:roundingMode];
  }
  return [JavaMathBigDecimal divideBigIntegersWithJavaMathBigInteger:[self getUnscaledValue] withJavaMathBigInteger:[JavaMathMultiplication powerOf10WithLong:-diffScale] withInt:newScale withJavaMathRoundingModeEnum:roundingMode];
}

- (JavaMathBigDecimal *)setScaleWithInt:(int)newScale
                                withInt:(int)roundingMode {
  return [self setScaleWithInt:newScale withJavaMathRoundingModeEnum:[JavaMathRoundingModeEnum valueOfWithInt:roundingMode]];
}

- (JavaMathBigDecimal *)setScaleWithInt:(int)newScale {
  return [self setScaleWithInt:newScale withJavaMathRoundingModeEnum:[JavaMathRoundingModeEnum UNNECESSARY]];
}

- (JavaMathBigDecimal *)movePointLeftWithInt:(int)n {
  return [self movePointWithLong:scale__ + (long long int) n];
}

- (JavaMathBigDecimal *)movePointWithLong:(long long int)newScale {
  if ([self isZero]) {
    return [JavaMathBigDecimal zeroScaledByWithLong:[JavaLangMath maxWithLong:newScale withLong:0]];
  }
  if (newScale >= 0) {
    if (bitLength__ < 64) {
      return [JavaMathBigDecimal valueOfWithLong:smallValue_ withInt:[JavaMathBigDecimal toIntScaleWithLong:newScale]];
    }
    return [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:[self getUnscaledValue] withInt:[JavaMathBigDecimal toIntScaleWithLong:newScale]] autorelease];
  }
  if (-newScale < (int) [((IOSLongArray *) nil_chk(JavaMathBigDecimal_LONG_TEN_POW_)) count] && bitLength__ + IOSIntArray_Get(nil_chk(JavaMathBigDecimal_LONG_TEN_POW_BIT_LENGTH_), (int) -newScale) < 64) {
    return [JavaMathBigDecimal valueOfWithLong:smallValue_ * IOSLongArray_Get(JavaMathBigDecimal_LONG_TEN_POW_, (int) -newScale) withInt:0];
  }
  return [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:[JavaMathMultiplication multiplyByTenPowWithJavaMathBigInteger:[self getUnscaledValue] withLong:(int) -newScale] withInt:0] autorelease];
}

- (JavaMathBigDecimal *)movePointRightWithInt:(int)n {
  return [self movePointWithLong:scale__ - (long long int) n];
}

- (JavaMathBigDecimal *)scaleByPowerOfTenWithInt:(int)n {
  long long int newScale = scale__ - (long long int) n;
  if (bitLength__ < 64) {
    if (smallValue_ == 0) {
      return [JavaMathBigDecimal zeroScaledByWithLong:newScale];
    }
    return [JavaMathBigDecimal valueOfWithLong:smallValue_ withInt:[JavaMathBigDecimal toIntScaleWithLong:newScale]];
  }
  return [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:[self getUnscaledValue] withInt:[JavaMathBigDecimal toIntScaleWithLong:newScale]] autorelease];
}

- (JavaMathBigDecimal *)stripTrailingZeros {
  int i = 1;
  int lastPow = (int) [((IOSObjectArray *) nil_chk(JavaMathBigDecimal_TEN_POW_)) count] - 1;
  long long int newScale = scale__;
  if ([self isZero]) {
    return [[[JavaMathBigDecimal alloc] initWithNSString:@"0"] autorelease];
  }
  JavaMathBigInteger *strippedBI = [self getUnscaledValue];
  IOSObjectArray *quotAndRem;
  while (![((JavaMathBigInteger *) nil_chk(strippedBI)) testBitWithInt:0]) {
    quotAndRem = [strippedBI divideAndRemainderWithJavaMathBigInteger:IOSObjectArray_Get(JavaMathBigDecimal_TEN_POW_, i)];
    if ([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(quotAndRem), 1))) signum] == 0) {
      newScale -= i;
      if (i < lastPow) {
        i++;
      }
      strippedBI = IOSObjectArray_Get(quotAndRem, 0);
    }
    else {
      if (i == 1) {
        break;
      }
      i = 1;
    }
  }
  return [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:strippedBI withInt:[JavaMathBigDecimal toIntScaleWithLong:newScale]] autorelease];
}

- (int)compareToWithId:(JavaMathBigDecimal *)val {
  if (val != nil && ![val isKindOfClass:[JavaMathBigDecimal class]]) {
    @throw [[[JavaLangClassCastException alloc] init] autorelease];
  }
  int thisSign = [self signum];
  int valueSign = [((JavaMathBigDecimal *) nil_chk(val)) signum];
  if (thisSign == valueSign) {
    if (self->scale__ == val->scale__ && self->bitLength__ < 64 && val->bitLength__ < 64) {
      return (smallValue_ < val->smallValue_) ? -1 : (smallValue_ > val->smallValue_) ? 1 : 0;
    }
    long long int diffScale = (long long int) self->scale__ - val->scale__;
    int diffPrecision = [self aproxPrecision] - [val aproxPrecision];
    if (diffPrecision > diffScale + 1) {
      return thisSign;
    }
    else if (diffPrecision < diffScale - 1) {
      return -thisSign;
    }
    else {
      JavaMathBigInteger *thisUnscaled = [self getUnscaledValue];
      JavaMathBigInteger *valUnscaled = [val getUnscaledValue];
      if (diffScale < 0) {
        thisUnscaled = [((JavaMathBigInteger *) nil_chk(thisUnscaled)) multiplyWithJavaMathBigInteger:[JavaMathMultiplication powerOf10WithLong:-diffScale]];
      }
      else if (diffScale > 0) {
        valUnscaled = [((JavaMathBigInteger *) nil_chk(valUnscaled)) multiplyWithJavaMathBigInteger:[JavaMathMultiplication powerOf10WithLong:diffScale]];
      }
      return [((JavaMathBigInteger *) nil_chk(thisUnscaled)) compareToWithId:valUnscaled];
    }
  }
  else if (thisSign < valueSign) {
    return -1;
  }
  else {
    return 1;
  }
}

- (BOOL)isEqual:(id)x {
  if (self == x) {
    return YES;
  }
  if ([x isKindOfClass:[JavaMathBigDecimal class]]) {
    JavaMathBigDecimal *x1 = (JavaMathBigDecimal *) check_class_cast(x, [JavaMathBigDecimal class]);
    return ((JavaMathBigDecimal *) nil_chk(x1))->scale__ == scale__ && (bitLength__ < 64 ? (x1->smallValue_ == smallValue_) : [((JavaMathBigInteger *) nil_chk(intVal_)) isEqual:x1->intVal_]);
  }
  return NO;
}

- (JavaMathBigDecimal *)minWithJavaMathBigDecimal:(JavaMathBigDecimal *)val {
  return (([self compareToWithId:val] <= 0) ? self : val);
}

- (JavaMathBigDecimal *)maxWithJavaMathBigDecimal:(JavaMathBigDecimal *)val {
  return (([self compareToWithId:val] >= 0) ? self : val);
}

- (NSUInteger)hash {
  if (hashCode__ != 0) {
    return hashCode__;
  }
  if (bitLength__ < 64) {
    hashCode__ = (int) (smallValue_ & (int) 0xffffffff);
    hashCode__ = 33 * hashCode__ + (int) ((smallValue_ >> 32) & (int) 0xffffffff);
    hashCode__ = 17 * hashCode__ + scale__;
    return hashCode__;
  }
  hashCode__ = 17 * [((JavaMathBigInteger *) nil_chk(intVal_)) hash] + scale__;
  return hashCode__;
}

- (NSString *)description {
  if (toStringImage_ != nil) {
    return toStringImage_;
  }
  if (bitLength__ < 32) {
    JavaMathBigDecimal_set_toStringImage_(self, [JavaMathConversion toDecimalScaledStringWithLong:smallValue_ withInt:scale__]);
    return toStringImage_;
  }
  NSString *intString = [((JavaMathBigInteger *) nil_chk([self getUnscaledValue])) description];
  if (scale__ == 0) {
    return intString;
  }
  int begin = ([((JavaMathBigInteger *) nil_chk([self getUnscaledValue])) signum] < 0) ? 2 : 1;
  int end = [((NSString *) nil_chk(intString)) length];
  long long int exponent = -(long long int) scale__ + end - begin;
  JavaLangStringBuilder *result = [[[JavaLangStringBuilder alloc] init] autorelease];
  [result appendWithNSString:intString];
  if ((scale__ > 0) && (exponent >= -6)) {
    if (exponent >= 0) {
      [result insertWithInt:end - scale__ withChar:'.'];
    }
    else {
      [result insertWithInt:begin - 1 withNSString:@"0."];
      [result insertWithInt:begin + 1 withCharArray:JavaMathBigDecimal_CH_ZEROS_ withInt:0 withInt:-(int) exponent - 1];
    }
  }
  else {
    if (end - begin >= 1) {
      [result insertWithInt:begin withChar:'.'];
      end++;
    }
    [result insertWithInt:end withChar:'E'];
    if (exponent > 0) {
      [result insertWithInt:++end withChar:'+'];
    }
    [result insertWithInt:++end withNSString:[JavaLangLong toStringWithLong:exponent]];
  }
  JavaMathBigDecimal_set_toStringImage_(self, [result description]);
  return toStringImage_;
}

- (NSString *)toEngineeringString {
  NSString *intString = [((JavaMathBigInteger *) nil_chk([self getUnscaledValue])) description];
  if (scale__ == 0) {
    return intString;
  }
  int begin = ([((JavaMathBigInteger *) nil_chk([self getUnscaledValue])) signum] < 0) ? 2 : 1;
  int end = [((NSString *) nil_chk(intString)) length];
  long long int exponent = -(long long int) scale__ + end - begin;
  JavaLangStringBuilder *result = [[[JavaLangStringBuilder alloc] initWithNSString:intString] autorelease];
  if ((scale__ > 0) && (exponent >= -6)) {
    if (exponent >= 0) {
      [result insertWithInt:end - scale__ withChar:'.'];
    }
    else {
      [result insertWithInt:begin - 1 withNSString:@"0."];
      [result insertWithInt:begin + 1 withCharArray:JavaMathBigDecimal_CH_ZEROS_ withInt:0 withInt:-(int) exponent - 1];
    }
  }
  else {
    int delta = end - begin;
    int rem = (int) (exponent % 3);
    if (rem != 0) {
      if ([((JavaMathBigInteger *) nil_chk([self getUnscaledValue])) signum] == 0) {
        rem = (rem < 0) ? -rem : 3 - rem;
        exponent += rem;
      }
      else {
        rem = (rem < 0) ? rem + 3 : rem;
        exponent -= rem;
        begin += rem;
      }
      if (delta < 3) {
        for (int i = rem - delta; i > 0; i--) {
          [result insertWithInt:end++ withChar:'0'];
        }
      }
    }
    if (end - begin >= 1) {
      [result insertWithInt:begin withChar:'.'];
      end++;
    }
    if (exponent != 0) {
      [result insertWithInt:end withChar:'E'];
      if (exponent > 0) {
        [result insertWithInt:++end withChar:'+'];
      }
      [result insertWithInt:++end withNSString:[JavaLangLong toStringWithLong:exponent]];
    }
  }
  return [result description];
}

- (NSString *)toPlainString {
  NSString *intStr = [((JavaMathBigInteger *) nil_chk([self getUnscaledValue])) description];
  if ((scale__ == 0) || (([self isZero]) && (scale__ < 0))) {
    return intStr;
  }
  int begin = ([self signum] < 0) ? 1 : 0;
  int delta = scale__;
  JavaLangStringBuilder *result = [[[JavaLangStringBuilder alloc] initWithInt:[((NSString *) nil_chk(intStr)) length] + 1 + [JavaLangMath absWithInt:scale__]] autorelease];
  if (begin == 1) {
    [result appendWithChar:'-'];
  }
  if (scale__ > 0) {
    delta -= ([intStr length] - begin);
    if (delta >= 0) {
      [result appendWithNSString:@"0."];
      for (; delta > (int) [((IOSCharArray *) nil_chk(JavaMathBigDecimal_CH_ZEROS_)) count]; delta -= (int) [JavaMathBigDecimal_CH_ZEROS_ count]) {
        [result appendWithCharArray:JavaMathBigDecimal_CH_ZEROS_];
      }
      [result appendWithCharArray:JavaMathBigDecimal_CH_ZEROS_ withInt:0 withInt:delta];
      [result appendWithNSString:[intStr substring:begin]];
    }
    else {
      delta = begin - delta;
      [result appendWithNSString:[intStr substring:begin endIndex:delta]];
      [result appendWithChar:'.'];
      [result appendWithNSString:[intStr substring:delta]];
    }
  }
  else {
    [result appendWithNSString:[intStr substring:begin]];
    for (; delta < -(int) [((IOSCharArray *) nil_chk(JavaMathBigDecimal_CH_ZEROS_)) count]; delta += (int) [JavaMathBigDecimal_CH_ZEROS_ count]) {
      [result appendWithCharArray:JavaMathBigDecimal_CH_ZEROS_];
    }
    [result appendWithCharArray:JavaMathBigDecimal_CH_ZEROS_ withInt:0 withInt:-delta];
  }
  return [result description];
}

- (JavaMathBigInteger *)toBigInteger {
  if ((scale__ == 0) || ([self isZero])) {
    return [self getUnscaledValue];
  }
  else if (scale__ < 0) {
    return [((JavaMathBigInteger *) nil_chk([self getUnscaledValue])) multiplyWithJavaMathBigInteger:[JavaMathMultiplication powerOf10WithLong:-(long long int) scale__]];
  }
  else {
    return [((JavaMathBigInteger *) nil_chk([self getUnscaledValue])) divideWithJavaMathBigInteger:[JavaMathMultiplication powerOf10WithLong:scale__]];
  }
}

- (JavaMathBigInteger *)toBigIntegerExact {
  if ((scale__ == 0) || ([self isZero])) {
    return [self getUnscaledValue];
  }
  else if (scale__ < 0) {
    return [((JavaMathBigInteger *) nil_chk([self getUnscaledValue])) multiplyWithJavaMathBigInteger:[JavaMathMultiplication powerOf10WithLong:-(long long int) scale__]];
  }
  else {
    IOSObjectArray *integerAndFraction;
    if ((scale__ > [self aproxPrecision]) || (scale__ > [((JavaMathBigInteger *) nil_chk([self getUnscaledValue])) getLowestSetBit])) {
      @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"Rounding necessary"] autorelease];
    }
    integerAndFraction = [((JavaMathBigInteger *) nil_chk([self getUnscaledValue])) divideAndRemainderWithJavaMathBigInteger:[JavaMathMultiplication powerOf10WithLong:scale__]];
    if ([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(integerAndFraction), 1))) signum] != 0) {
      @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"Rounding necessary"] autorelease];
    }
    return IOSObjectArray_Get(integerAndFraction, 0);
  }
}

- (long long int)longLongValue {
  return ((scale__ <= -64) || (scale__ > [self aproxPrecision]) ? 0LL : [((JavaMathBigInteger *) nil_chk([self toBigInteger])) longLongValue]);
}

- (long long int)longValueExact {
  return [self valueExactWithInt:64];
}

- (int)intValue {
  return ((scale__ <= -32) || (scale__ > [self aproxPrecision]) ? 0 : [((JavaMathBigInteger *) nil_chk([self toBigInteger])) intValue]);
}

- (int)intValueExact {
  return (int) [self valueExactWithInt:32];
}

- (short int)shortValueExact {
  return (short int) [self valueExactWithInt:16];
}

- (char)byteValueExact {
  return (char) [self valueExactWithInt:8];
}

- (float)floatValue {
  float floatResult = [self signum];
  long long int powerOfTwo = self->bitLength__ - (long long int) (scale__ / JavaMathBigDecimal_LOG10_2);
  if ((powerOfTwo < -149) || (floatResult == 0.0f)) {
    floatResult *= 0.0f;
  }
  else if (powerOfTwo > 129) {
    floatResult *= JavaLangFloat_POSITIVE_INFINITY;
  }
  else {
    floatResult = (float) [self doubleValue];
  }
  return floatResult;
}

- (double)doubleValue {
  int sign = [self signum];
  int exponent = 1076;
  int lowestSetBit;
  int discardedSize;
  long long int powerOfTwo = self->bitLength__ - (long long int) (scale__ / JavaMathBigDecimal_LOG10_2);
  long long int bits;
  long long int tempBits;
  JavaMathBigInteger *mantisa;
  if ((powerOfTwo < -1074) || (sign == 0)) {
    return (sign * 0.0);
  }
  else if (powerOfTwo > 1025) {
    return (sign * JavaLangDouble_POSITIVE_INFINITY);
  }
  mantisa = [((JavaMathBigInteger *) nil_chk([self getUnscaledValue])) abs];
  if (scale__ <= 0) {
    mantisa = [((JavaMathBigInteger *) nil_chk(mantisa)) multiplyWithJavaMathBigInteger:[JavaMathMultiplication powerOf10WithLong:-scale__]];
  }
  else {
    IOSObjectArray *quotAndRem;
    JavaMathBigInteger *powerOfTen = [JavaMathMultiplication powerOf10WithLong:scale__];
    int k = 100 - (int) powerOfTwo;
    int compRem;
    if (k > 0) {
      mantisa = [((JavaMathBigInteger *) nil_chk(mantisa)) shiftLeftWithInt:k];
      exponent -= k;
    }
    quotAndRem = [((JavaMathBigInteger *) nil_chk(mantisa)) divideAndRemainderWithJavaMathBigInteger:powerOfTen];
    compRem = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(quotAndRem), 1))) shiftLeftOneBit])) compareToWithId:powerOfTen];
    mantisa = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(quotAndRem, 0))) shiftLeftWithInt:2])) addWithJavaMathBigInteger:[JavaMathBigInteger valueOfWithLong:(compRem * (compRem + 3)) / 2 + 1]];
    exponent -= 2;
  }
  lowestSetBit = [((JavaMathBigInteger *) nil_chk(mantisa)) getLowestSetBit];
  discardedSize = [mantisa bitLength] - 54;
  if (discardedSize > 0) {
    bits = [((JavaMathBigInteger *) nil_chk([mantisa shiftRightWithInt:discardedSize])) longLongValue];
    tempBits = bits;
    if ((((bits & 1) == 1) && (lowestSetBit < discardedSize)) || ((bits & 3) == 3)) {
      bits += 2;
    }
  }
  else {
    bits = [mantisa longLongValue] << -discardedSize;
    tempBits = bits;
    if ((bits & 3) == 3) {
      bits += 2;
    }
  }
  if ((bits & (long long) 0x40000000000000LL) == 0) {
    bits >>= 1;
    exponent += discardedSize;
  }
  else {
    bits >>= 2;
    exponent += discardedSize + 1;
  }
  if (exponent > 2046) {
    return (sign * JavaLangDouble_POSITIVE_INFINITY);
  }
  else if (exponent <= 0) {
    if (exponent < -53) {
      return (sign * 0.0);
    }
    bits = tempBits >> 1;
    tempBits = bits & ((long long) (((unsigned long long) -1LL) >> (63 + exponent)));
    bits >>= (-exponent);
    if (((bits & 3) == 3) || (((bits & 1) == 1) && (tempBits != 0) && (lowestSetBit < discardedSize))) {
      bits += 1;
    }
    exponent = 0;
    bits >>= 1;
  }
  bits = (sign & -0x7fffffffffffffffLL - 1) | ((long long int) exponent << 52) | (bits & (long long) 0xFFFFFFFFFFFFFLL);
  return [JavaLangDouble longBitsToDoubleWithLong:bits];
}

- (JavaMathBigDecimal *)ulp {
  return [JavaMathBigDecimal valueOfWithLong:1 withInt:scale__];
}

- (void)inplaceRoundWithJavaMathMathContext:(JavaMathMathContext *)mc {
  int mcPrecision = [((JavaMathMathContext *) nil_chk(mc)) getPrecision];
  if ([self aproxPrecision] - mcPrecision <= 0 || mcPrecision == 0) {
    return;
  }
  int discardedPrecision = [self precision] - mcPrecision;
  if ((discardedPrecision <= 0)) {
    return;
  }
  if (self->bitLength__ < 64) {
    [self smallRoundWithJavaMathMathContext:mc withInt:discardedPrecision];
    return;
  }
  JavaMathBigInteger *sizeOfFraction = [JavaMathMultiplication powerOf10WithLong:discardedPrecision];
  IOSObjectArray *integerAndFraction = [((JavaMathBigInteger *) nil_chk([self getUnscaledValue])) divideAndRemainderWithJavaMathBigInteger:sizeOfFraction];
  long long int newScale = (long long int) scale__ - discardedPrecision;
  int compRem;
  JavaMathBigDecimal *tempBD;
  if ([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(integerAndFraction), 1))) signum] != 0) {
    JavaMathBigInteger *fraction = IOSObjectArray_Get(integerAndFraction, 1);
    compRem = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(fraction)) abs])) shiftLeftOneBit])) compareToWithId:sizeOfFraction];
    compRem = [JavaMathBigDecimal roundingBehaviorWithInt:[((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(integerAndFraction, 0))) testBitWithInt:0] ? 1 : 0 withInt:[((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(integerAndFraction, 1))) signum] * (5 + compRem) withJavaMathRoundingModeEnum:[mc getRoundingMode]];
    if (compRem != 0) {
      IOSObjectArray_Set(integerAndFraction, 0, [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(integerAndFraction, 0))) addWithJavaMathBigInteger:[JavaMathBigInteger valueOfWithLong:compRem]]);
    }
    tempBD = [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:IOSObjectArray_Get(integerAndFraction, 0)] autorelease];
    if ([tempBD precision] > mcPrecision) {
      IOSObjectArray_Set(integerAndFraction, 0, [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(integerAndFraction, 0))) divideWithJavaMathBigInteger:[JavaMathBigInteger TEN]]);
      newScale--;
    }
  }
  scale__ = [JavaMathBigDecimal toIntScaleWithLong:newScale];
  precision__ = mcPrecision;
  [self setUnscaledValueWithJavaMathBigInteger:IOSObjectArray_Get(integerAndFraction, 0)];
}

+ (int)longCompareToWithLong:(long long int)value1
                    withLong:(long long int)value2 {
  return value1 > value2 ? 1 : (value1 < value2 ? -1 : 0);
}

- (void)smallRoundWithJavaMathMathContext:(JavaMathMathContext *)mc
                                  withInt:(int)discardedPrecision {
  long long int sizeOfFraction = IOSLongArray_Get(nil_chk(JavaMathBigDecimal_LONG_TEN_POW_), discardedPrecision);
  long long int newScale = (long long int) scale__ - discardedPrecision;
  long long int unscaledVal = smallValue_;
  long long int integer = unscaledVal / sizeOfFraction;
  long long int fraction = unscaledVal % sizeOfFraction;
  int compRem;
  if (fraction != 0) {
    compRem = [JavaMathBigDecimal longCompareToWithLong:[JavaLangMath absWithLong:fraction] << 1 withLong:sizeOfFraction];
    integer += [JavaMathBigDecimal roundingBehaviorWithInt:((int) integer) & 1 withInt:[JavaLangLong signumWithLong:fraction] * (5 + compRem) withJavaMathRoundingModeEnum:[((JavaMathMathContext *) nil_chk(mc)) getRoundingMode]];
    if ([JavaLangMath log10WithDouble:[JavaLangMath absWithLong:integer]] >= [mc getPrecision]) {
      integer /= 10;
      newScale--;
    }
  }
  scale__ = [JavaMathBigDecimal toIntScaleWithLong:newScale];
  precision__ = [((JavaMathMathContext *) nil_chk(mc)) getPrecision];
  smallValue_ = integer;
  bitLength__ = [JavaMathBigDecimal bitLengthWithLong:integer];
  JavaMathBigDecimal_set_intVal_(self, nil);
}

+ (int)roundingBehaviorWithInt:(int)parityBit
                       withInt:(int)fraction
  withJavaMathRoundingModeEnum:(JavaMathRoundingModeEnum *)roundingMode {
  int increment = 0;
  switch ([roundingMode ordinal]) {
    case JavaMathRoundingMode_UNNECESSARY:
    if (fraction != 0) {
      @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"Rounding necessary"] autorelease];
    }
    break;
    case JavaMathRoundingMode_UP:
    increment = [JavaLangInteger signumWithInt:fraction];
    break;
    case JavaMathRoundingMode_DOWN:
    break;
    case JavaMathRoundingMode_CEILING:
    increment = [JavaLangMath maxWithInt:[JavaLangInteger signumWithInt:fraction] withInt:0];
    break;
    case JavaMathRoundingMode_FLOOR:
    increment = [JavaLangMath minWithInt:[JavaLangInteger signumWithInt:fraction] withInt:0];
    break;
    case JavaMathRoundingMode_HALF_UP:
    if ([JavaLangMath absWithInt:fraction] >= 5) {
      increment = [JavaLangInteger signumWithInt:fraction];
    }
    break;
    case JavaMathRoundingMode_HALF_DOWN:
    if ([JavaLangMath absWithInt:fraction] > 5) {
      increment = [JavaLangInteger signumWithInt:fraction];
    }
    break;
    case JavaMathRoundingMode_HALF_EVEN:
    if ([JavaLangMath absWithInt:fraction] + parityBit > 5) {
      increment = [JavaLangInteger signumWithInt:fraction];
    }
    break;
  }
  return increment;
}

- (long long int)valueExactWithInt:(int)bitLengthOfType {
  JavaMathBigInteger *bigInteger = [self toBigIntegerExact];
  if ([((JavaMathBigInteger *) nil_chk(bigInteger)) bitLength] < bitLengthOfType) {
    return [bigInteger longLongValue];
  }
  @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"Rounding necessary"] autorelease];
}

- (int)aproxPrecision {
  return (precision__ > 0) ? precision__ : ((int) ((self->bitLength__ - 1) * JavaMathBigDecimal_LOG10_2)) + 1;
}

+ (int)toIntScaleWithLong:(long long int)longScale {
  if (longScale < JavaLangInteger_MIN_VALUE) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"Overflow"] autorelease];
  }
  else if (longScale > JavaLangInteger_MAX_VALUE) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"Underflow"] autorelease];
  }
  else {
    return (int) longScale;
  }
}

+ (JavaMathBigDecimal *)zeroScaledByWithLong:(long long int)longScale {
  if (longScale == (int) longScale) {
    return [JavaMathBigDecimal valueOfWithLong:0 withInt:(int) longScale];
  }
  if (longScale >= 0) {
    return [[[JavaMathBigDecimal alloc] initWithInt:0 withInt:JavaLangInteger_MAX_VALUE] autorelease];
  }
  return [[[JavaMathBigDecimal alloc] initWithInt:0 withInt:JavaLangInteger_MIN_VALUE] autorelease];
}

- (JavaMathBigInteger *)getUnscaledValue {
  if (intVal_ == nil) {
    JavaMathBigDecimal_set_intVal_(self, [JavaMathBigInteger valueOfWithLong:smallValue_]);
  }
  return intVal_;
}

- (void)setUnscaledValueWithJavaMathBigInteger:(JavaMathBigInteger *)unscaledValue {
  JavaMathBigDecimal_set_intVal_(self, unscaledValue);
  self->bitLength__ = [((JavaMathBigInteger *) nil_chk(unscaledValue)) bitLength];
  if (self->bitLength__ < 64) {
    self->smallValue_ = [unscaledValue longLongValue];
  }
}

+ (int)bitLengthWithLong:(long long int)smallValue {
  if (smallValue < 0) {
    smallValue = ~smallValue;
  }
  return 64 - [JavaLangLong numberOfLeadingZerosWithLong:smallValue];
}

+ (int)bitLengthWithInt:(int)smallValue {
  if (smallValue < 0) {
    smallValue = ~smallValue;
  }
  return 32 - [JavaLangInteger numberOfLeadingZerosWithInt:smallValue];
}

+ (void)initialize {
  if (self == [JavaMathBigDecimal class]) {
    JreOperatorRetainedAssign(&JavaMathBigDecimal_ZERO_, nil, [[[JavaMathBigDecimal alloc] initWithInt:0 withInt:0] autorelease]);
    JreOperatorRetainedAssign(&JavaMathBigDecimal_ONE_, nil, [[[JavaMathBigDecimal alloc] initWithInt:1 withInt:0] autorelease]);
    JreOperatorRetainedAssign(&JavaMathBigDecimal_TEN_, nil, [[[JavaMathBigDecimal alloc] initWithInt:10 withInt:0] autorelease]);
    JreOperatorRetainedAssign(&JavaMathBigDecimal_LONG_TEN_POW_, nil, [IOSLongArray arrayWithLongs:(long long int[]){ 1LL, 10LL, 100LL, 1000LL, 10000LL, 100000LL, 1000000LL, 10000000LL, 100000000LL, 1000000000LL, 10000000000LL, 100000000000LL, 1000000000000LL, 10000000000000LL, 100000000000000LL, 1000000000000000LL, 10000000000000000LL, 100000000000000000LL, 1000000000000000000LL } count:19]);
    JreOperatorRetainedAssign(&JavaMathBigDecimal_LONG_FIVE_POW_, nil, [IOSLongArray arrayWithLongs:(long long int[]){ 1LL, 5LL, 25LL, 125LL, 625LL, 3125LL, 15625LL, 78125LL, 390625LL, 1953125LL, 9765625LL, 48828125LL, 244140625LL, 1220703125LL, 6103515625LL, 30517578125LL, 152587890625LL, 762939453125LL, 3814697265625LL, 19073486328125LL, 95367431640625LL, 476837158203125LL, 2384185791015625LL, 11920928955078125LL, 59604644775390625LL, 298023223876953125LL, 1490116119384765625LL, 7450580596923828125LL } count:28]);
    JreOperatorRetainedAssign(&JavaMathBigDecimal_LONG_FIVE_POW_BIT_LENGTH_, nil, [IOSIntArray arrayWithLength:(int) [JavaMathBigDecimal_LONG_FIVE_POW_ count]]);
    JreOperatorRetainedAssign(&JavaMathBigDecimal_LONG_TEN_POW_BIT_LENGTH_, nil, [IOSIntArray arrayWithLength:(int) [JavaMathBigDecimal_LONG_TEN_POW_ count]]);
    JreOperatorRetainedAssign(&JavaMathBigDecimal_BI_SCALED_BY_ZERO_, nil, [IOSObjectArray arrayWithLength:JavaMathBigDecimal_BI_SCALED_BY_ZERO_LENGTH type:[IOSClass classWithClass:[JavaMathBigDecimal class]]]);
    JreOperatorRetainedAssign(&JavaMathBigDecimal_ZERO_SCALED_BY_, nil, [IOSObjectArray arrayWithLength:11 type:[IOSClass classWithClass:[JavaMathBigDecimal class]]]);
    JreOperatorRetainedAssign(&JavaMathBigDecimal_CH_ZEROS_, nil, [IOSCharArray arrayWithLength:100]);
    {
      int i = 0;
      for (; i < (int) [JavaMathBigDecimal_ZERO_SCALED_BY_ count]; i++) {
        IOSObjectArray_Set(JavaMathBigDecimal_BI_SCALED_BY_ZERO_, i, [[[JavaMathBigDecimal alloc] initWithInt:i withInt:0] autorelease]);
        IOSObjectArray_Set(JavaMathBigDecimal_ZERO_SCALED_BY_, i, [[[JavaMathBigDecimal alloc] initWithInt:0 withInt:i] autorelease]);
        (*IOSCharArray_GetRef(JavaMathBigDecimal_CH_ZEROS_, i)) = '0';
      }
      for (; i < (int) [JavaMathBigDecimal_CH_ZEROS_ count]; i++) {
        (*IOSCharArray_GetRef(JavaMathBigDecimal_CH_ZEROS_, i)) = '0';
      }
      for (int j = 0; j < (int) [JavaMathBigDecimal_LONG_FIVE_POW_BIT_LENGTH_ count]; j++) {
        (*IOSIntArray_GetRef(JavaMathBigDecimal_LONG_FIVE_POW_BIT_LENGTH_, j)) = [JavaMathBigDecimal bitLengthWithLong:IOSLongArray_Get(JavaMathBigDecimal_LONG_FIVE_POW_, j)];
      }
      for (int j = 0; j < (int) [JavaMathBigDecimal_LONG_TEN_POW_BIT_LENGTH_ count]; j++) {
        (*IOSIntArray_GetRef(JavaMathBigDecimal_LONG_TEN_POW_BIT_LENGTH_, j)) = [JavaMathBigDecimal bitLengthWithLong:IOSLongArray_Get(JavaMathBigDecimal_LONG_TEN_POW_, j)];
      }
      JreOperatorRetainedAssign(&JavaMathBigDecimal_TEN_POW_, nil, [JavaMathMultiplication bigTenPows]);
      JreOperatorRetainedAssign(&JavaMathBigDecimal_FIVE_POW_, nil, [JavaMathMultiplication bigFivePows]);
    }
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaMathBigDecimal_set_intVal_(self, nil);
  JavaMathBigDecimal_set_toStringImage_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaMathBigDecimal *)other {
  [super copyAllFieldsTo:other];
  other->bitLength__ = bitLength__;
  other->hashCode__ = hashCode__;
  JavaMathBigDecimal_set_intVal_(other, intVal_);
  other->precision__ = precision__;
  other->scale__ = scale__;
  other->smallValue_ = smallValue_;
  JavaMathBigDecimal_set_toStringImage_(other, toStringImage_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:toStringImage_ name:@"toStringImage"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:intVal_ name:@"intVal"]];
  return result;
}

@end
