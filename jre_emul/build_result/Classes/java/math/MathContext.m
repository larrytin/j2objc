//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/math/src/main/java/java/math/MathContext.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSCharArray.h"
#include "java/lang/Character.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/math/MathContext.h"
#include "java/math/RoundingMode.h"

@implementation JavaMathMathContext

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathMathContext_DECIMAL128_ name:@"JavaMathMathContext_DECIMAL128_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathMathContext_DECIMAL32_ name:@"JavaMathMathContext_DECIMAL32_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathMathContext_DECIMAL64_ name:@"JavaMathMathContext_DECIMAL64_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathMathContext_UNLIMITED_ name:@"JavaMathMathContext_UNLIMITED_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathMathContext_chPrecision_ name:@"JavaMathMathContext_chPrecision_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathMathContext_chRoundingMode_ name:@"JavaMathMathContext_chRoundingMode_"]];
  return result;
}

static JavaMathMathContext * JavaMathMathContext_DECIMAL128_;
static JavaMathMathContext * JavaMathMathContext_DECIMAL32_;
static JavaMathMathContext * JavaMathMathContext_DECIMAL64_;
static JavaMathMathContext * JavaMathMathContext_UNLIMITED_;
static IOSCharArray * JavaMathMathContext_chPrecision_;
static IOSCharArray * JavaMathMathContext_chRoundingMode_;

+ (JavaMathMathContext *)DECIMAL128 {
  return JavaMathMathContext_DECIMAL128_;
}

+ (JavaMathMathContext *)DECIMAL32 {
  return JavaMathMathContext_DECIMAL32_;
}

+ (JavaMathMathContext *)DECIMAL64 {
  return JavaMathMathContext_DECIMAL64_;
}

+ (JavaMathMathContext *)UNLIMITED {
  return JavaMathMathContext_UNLIMITED_;
}

+ (IOSCharArray *)chPrecision {
  return JavaMathMathContext_chPrecision_;
}

+ (IOSCharArray *)chRoundingMode {
  return JavaMathMathContext_chRoundingMode_;
}

- (id)initWithInt:(int)precision {
  return JreMemDebugAdd([self initJavaMathMathContextWithInt:precision withJavaMathRoundingModeEnum:[JavaMathRoundingModeEnum HALF_UP]]);
}

- (id)initJavaMathMathContextWithInt:(int)precision
        withJavaMathRoundingModeEnum:(JavaMathRoundingModeEnum *)roundingMode {
  if (self = [super init]) {
    if (precision < 0) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Digits < 0"] autorelease];
    }
    if (roundingMode == nil) {
      @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"null RoundingMode"] autorelease];
    }
    self->precision_ = precision;
    JavaMathMathContext_set_roundingMode_(self, roundingMode);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithInt:(int)precision
withJavaMathRoundingModeEnum:(JavaMathRoundingModeEnum *)roundingMode {
  return [self initJavaMathMathContextWithInt:precision withJavaMathRoundingModeEnum:roundingMode];
}

- (id)initWithNSString:(NSString *)val {
  if (self = [super init]) {
    IOSCharArray *charVal = [((NSString *) nil_chk(val)) toCharArray];
    int i;
    int j;
    int digit;
    if (((int) [((IOSCharArray *) nil_chk(charVal)) count] < 27) || ((int) [charVal count] > 45)) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"bad string format"] autorelease];
    }
    for (i = 0; (i < (int) [((IOSCharArray *) nil_chk(JavaMathMathContext_chPrecision_)) count]) && (IOSCharArray_Get(charVal, i) == IOSCharArray_Get(JavaMathMathContext_chPrecision_, i)); i++) {
      ;
    }
    if (i < (int) [JavaMathMathContext_chPrecision_ count]) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"bad string format"] autorelease];
    }
    digit = [JavaLangCharacter digitWithChar:IOSCharArray_Get(charVal, i) withInt:10];
    if (digit == -1) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"bad string format"] autorelease];
    }
    self->precision_ = self->precision_ * 10 + digit;
    i++;
    do {
      digit = [JavaLangCharacter digitWithChar:IOSCharArray_Get(charVal, i) withInt:10];
      if (digit == -1) {
        if (IOSCharArray_Get(charVal, i) == ' ') {
          i++;
          break;
        }
        @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"bad string format"] autorelease];
      }
      self->precision_ = self->precision_ * 10 + digit;
      if (self->precision_ < 0) {
        @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"bad string format"] autorelease];
      }
      i++;
    }
    while (YES);
    for (j = 0; (j < (int) [((IOSCharArray *) nil_chk(JavaMathMathContext_chRoundingMode_)) count]) && (IOSCharArray_Get(charVal, i) == IOSCharArray_Get(JavaMathMathContext_chRoundingMode_, j)); i++, j++) {
      ;
    }
    if (j < (int) [JavaMathMathContext_chRoundingMode_ count]) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"bad string format"] autorelease];
    }
    JavaMathMathContext_set_roundingMode_(self, [JavaMathRoundingModeEnum valueOfWithNSString:[NSString valueOfChars:charVal offset:i count:(int) [charVal count] - i]]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (int)getPrecision {
  return precision_;
}

- (JavaMathRoundingModeEnum *)getRoundingMode {
  return roundingMode_;
}

- (BOOL)isEqual:(id)x {
  return (([x isKindOfClass:[JavaMathMathContext class]]) && ([((JavaMathMathContext *) nil_chk(x)) getPrecision] == precision_) && ([((JavaMathMathContext *) nil_chk(x)) getRoundingMode] == roundingMode_));
}

- (NSUInteger)hash {
  return ((precision_ << 3) | [((JavaMathRoundingModeEnum *) nil_chk(roundingMode_)) ordinal]);
}

- (NSString *)description {
  JavaLangStringBuilder *sb = [[[JavaLangStringBuilder alloc] initWithInt:45] autorelease];
  [sb appendWithCharArray:JavaMathMathContext_chPrecision_];
  [sb appendWithInt:precision_];
  [sb appendWithChar:' '];
  [sb appendWithCharArray:JavaMathMathContext_chRoundingMode_];
  [sb appendWithId:roundingMode_];
  return [sb description];
}

+ (void)initialize {
  if (self == [JavaMathMathContext class]) {
    JreOperatorRetainedAssign(&JavaMathMathContext_DECIMAL128_, nil, [[[JavaMathMathContext alloc] initWithInt:34 withJavaMathRoundingModeEnum:[JavaMathRoundingModeEnum HALF_EVEN]] autorelease]);
    JreOperatorRetainedAssign(&JavaMathMathContext_DECIMAL32_, nil, [[[JavaMathMathContext alloc] initWithInt:7 withJavaMathRoundingModeEnum:[JavaMathRoundingModeEnum HALF_EVEN]] autorelease]);
    JreOperatorRetainedAssign(&JavaMathMathContext_DECIMAL64_, nil, [[[JavaMathMathContext alloc] initWithInt:16 withJavaMathRoundingModeEnum:[JavaMathRoundingModeEnum HALF_EVEN]] autorelease]);
    JreOperatorRetainedAssign(&JavaMathMathContext_UNLIMITED_, nil, [[[JavaMathMathContext alloc] initWithInt:0 withJavaMathRoundingModeEnum:[JavaMathRoundingModeEnum HALF_UP]] autorelease]);
    JreOperatorRetainedAssign(&JavaMathMathContext_chPrecision_, nil, [IOSCharArray arrayWithCharacters:(unichar[]){ 'p', 'r', 'e', 'c', 'i', 's', 'i', 'o', 'n', '=' } count:10]);
    JreOperatorRetainedAssign(&JavaMathMathContext_chRoundingMode_, nil, [IOSCharArray arrayWithCharacters:(unichar[]){ 'r', 'o', 'u', 'n', 'd', 'i', 'n', 'g', 'M', 'o', 'd', 'e', '=' } count:13]);
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaMathMathContext_set_roundingMode_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaMathMathContext *)other {
  [super copyAllFieldsTo:other];
  other->precision_ = precision_;
  JavaMathMathContext_set_roundingMode_(other, roundingMode_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:roundingMode_ name:@"roundingMode"]];
  return result;
}

@end
