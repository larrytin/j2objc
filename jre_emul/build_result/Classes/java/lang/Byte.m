//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/luni/src/main/java/java/lang/Byte.java
//
//  Created by retechretech on 13-9-4.
//

#include "IOSByteArray.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Byte.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/NumberFormatException.h"

@implementation JavaLangByte

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaLangByte_CACHE_ name:@"JavaLangByte_CACHE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaLangByte_TYPE_ name:@"JavaLangByte_TYPE_"]];
  return result;
}

static IOSObjectArray * JavaLangByte_CACHE_;
static IOSClass * JavaLangByte_TYPE_;

+ (char)MAX_VALUE {
  return JavaLangByte_MAX_VALUE;
}

+ (char)MIN_VALUE {
  return JavaLangByte_MIN_VALUE;
}

+ (int)SIZE {
  return JavaLangByte_SIZE;
}

+ (IOSObjectArray *)CACHE {
  return JavaLangByte_CACHE_;
}

+ (IOSClass *)TYPE {
  return JavaLangByte_TYPE_;
}

- (id)initJavaLangByteWithChar:(char)value {
  if ((self = [super init])) {
    self->value_ = value;
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithChar:(char)value {
  return [self initJavaLangByteWithChar:value];
}

- (id)initWithNSString:(NSString *)string {
  return JreMemDebugAdd([self initJavaLangByteWithChar:[JavaLangByte parseByteWithNSString:string]]);
}

+ (IOSObjectArray *)__exceptions_JavaLangByteWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangNumberFormatException getClass] } count:1 type:[IOSClass getClass]];
}

- (char)byteValue {
  return value_;
}

- (int)compareToWithId:(JavaLangByte *)object {
  if (object != nil && ![object isKindOfClass:[JavaLangByte class]]) {
    @throw [[[JavaLangClassCastException alloc] init] autorelease];
  }
  if (object == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  return value_ > ((JavaLangByte *) nil_chk(object))->value_ ? 1 : (value_ < object->value_ ? -1 : 0);
}

+ (JavaLangByte *)decodeWithNSString:(NSString *)string {
  if (string == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  int intValue = [((JavaLangInteger *) nil_chk([JavaLangInteger decodeWithNSString:string])) intValue];
  char result = (char) intValue;
  if (result == intValue) {
    return [JavaLangByte valueOfWithChar:result];
  }
  @throw [[[JavaLangNumberFormatException alloc] init] autorelease];
}

+ (IOSObjectArray *)__exceptions_decodeWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangNumberFormatException getClass] } count:1 type:[IOSClass getClass]];
}

- (double)doubleValue {
  return value_;
}

- (BOOL)isEqual:(id)object {
  return (object == self) || (([object isKindOfClass:[JavaLangByte class]]) && (value_ == ((JavaLangByte *) nil_chk(object))->value_));
}

- (float)floatValue {
  return value_;
}

- (NSUInteger)hash {
  return value_;
}

- (int)intValue {
  return value_;
}

- (long long int)longLongValue {
  return value_;
}

+ (char)parseByteWithNSString:(NSString *)string {
  int intValue = [JavaLangInteger parseIntWithNSString:string];
  char result = (char) intValue;
  if (result == intValue) {
    return result;
  }
  @throw [[[JavaLangNumberFormatException alloc] init] autorelease];
}

+ (IOSObjectArray *)__exceptions_parseByteWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangNumberFormatException getClass] } count:1 type:[IOSClass getClass]];
}

+ (char)parseByteWithNSString:(NSString *)string
                      withInt:(int)radix {
  int intValue = [JavaLangInteger parseIntWithNSString:string withInt:radix];
  char result = (char) intValue;
  if (result == intValue) {
    return result;
  }
  @throw [[[JavaLangNumberFormatException alloc] init] autorelease];
}

+ (IOSObjectArray *)__exceptions_parseByteWithNSString_withInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangNumberFormatException getClass] } count:1 type:[IOSClass getClass]];
}

- (short int)shortValue {
  return value_;
}

- (NSString *)description {
  return [JavaLangInteger toStringWithInt:value_];
}

+ (NSString *)toStringWithChar:(char)value {
  return [JavaLangInteger toStringWithInt:value];
}

+ (JavaLangByte *)valueOfWithNSString:(NSString *)string {
  return [JavaLangByte valueOfWithChar:[JavaLangByte parseByteWithNSString:string]];
}

+ (IOSObjectArray *)__exceptions_valueOfWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangNumberFormatException getClass] } count:1 type:[IOSClass getClass]];
}

+ (JavaLangByte *)valueOfWithNSString:(NSString *)string
                              withInt:(int)radix {
  return [JavaLangByte valueOfWithChar:[JavaLangByte parseByteWithNSString:string withInt:radix]];
}

+ (IOSObjectArray *)__exceptions_valueOfWithNSString_withInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangNumberFormatException getClass] } count:1 type:[IOSClass getClass]];
}

+ (JavaLangByte *)valueOfWithChar:(char)b {
  @synchronized (JavaLangByte_CACHE_) {
    int idx = b - JavaLangByte_MIN_VALUE;
    JavaLangByte *result = [((IOSObjectArray *) nil_chk(JavaLangByte_CACHE_)) objectAtIndex:idx];
    return (result == nil ? [JavaLangByte_CACHE_ replaceObjectAtIndex:idx withObject:[[[JavaLangByte alloc] initWithChar:b] autorelease]] : result);
  }
}

+ (void)initialize {
  if (self == [JavaLangByte class]) {
    JreOperatorRetainedAssign(&JavaLangByte_CACHE_, nil, [IOSObjectArray arrayWithLength:256 type:[IOSClass classWithClass:[JavaLangByte class]]]);
    JreOperatorRetainedAssign(&JavaLangByte_TYPE_, nil, (IOSClass *) [[[IOSByteArray arrayWithLength:0] getClass] getComponentType]);
  }
}

- (void)copyAllFieldsTo:(JavaLangByte *)other {
  [super copyAllFieldsTo:other];
  other->value_ = value_;
}

- (void)getValue:(void *)buffer {
  *((char *) buffer) = value_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  return result;
}

- (const char *)objCType {
  return "c";
}

@end
