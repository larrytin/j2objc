//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "IOSDoubleArray.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Double.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/NumberFormatException.h"
#import "java/lang/NumberFormatException.h"

// From apache-harmony/classlib/modules/luni/src/main/native/luni/shared/floatbits.c,
// apache-harmony/classlib/modules/portlib/src/main/native/include/shared/hycomp.h
#define HYCONST64(x)            x##LL
#define DOUBLE_EXPONENT_MASK    HYCONST64(0x7FF0000000000000)
#define DOUBLE_MANTISSA_MASK    HYCONST64(0x000FFFFFFFFFFFFF)
#define DOUBLE_NAN_BITS         (DOUBLE_EXPONENT_MASK | HYCONST64(0x0008000000000000))

@implementation JavaLangDouble

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaLangDouble_FLOATING_POINT_REGEX_ name:@"JavaLangDouble_FLOATING_POINT_REGEX_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaLangDouble_TYPE_ name:@"JavaLangDouble_TYPE_"]];
  return result;
}

static NSString * JavaLangDouble_FLOATING_POINT_REGEX_ = @"^[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?$";
static IOSClass * JavaLangDouble_TYPE_;

+ (NSString *)FLOATING_POINT_REGEX {
  return JavaLangDouble_FLOATING_POINT_REGEX_;
}

+ (int)EXPONENT_BIAS {
  return JavaLangDouble_EXPONENT_BIAS;
}

+ (int)EXPONENT_BITS {
  return JavaLangDouble_EXPONENT_BITS;
}

+ (int)MANTISSA_BITS {
  return JavaLangDouble_MANTISSA_BITS;
}

+ (int)NON_MANTISSA_BITS {
  return JavaLangDouble_NON_MANTISSA_BITS;
}

+ (long long int)SIGN_MASK {
  return JavaLangDouble_SIGN_MASK;
}

+ (long long int)EXPONENT_MASK {
  return JavaLangDouble_EXPONENT_MASK;
}

+ (long long int)MANTISSA_MASK {
  return JavaLangDouble_MANTISSA_MASK;
}

+ (double)MAX_VALUE {
  return JavaLangDouble_MAX_VALUE;
}

+ (double)MIN_VALUE {
  return JavaLangDouble_MIN_VALUE;
}

+ (double)NaN {
  return JavaLangDouble_NaN;
}

+ (double)POSITIVE_INFINITY {
  return JavaLangDouble_POSITIVE_INFINITY;
}

+ (double)NEGATIVE_INFINITY {
  return JavaLangDouble_NEGATIVE_INFINITY;
}

+ (int)MAX_EXPONENT {
  return JavaLangDouble_MAX_EXPONENT;
}

+ (int)MIN_EXPONENT {
  return JavaLangDouble_MIN_EXPONENT;
}

+ (IOSClass *)TYPE {
  return JavaLangDouble_TYPE_;
}

+ (int)SIZE {
  return JavaLangDouble_SIZE;
}

- (id)initJavaLangDoubleWithDouble:(double)value {
  if (self = [super init]) {
    self->value_ = value;
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithDouble:(double)value {
  return [self initJavaLangDoubleWithDouble:value];
}

- (id)initWithNSString:(NSString *)string {
  return JreMemDebugAdd([self initJavaLangDoubleWithDouble:[JavaLangDouble parseDoubleWithNSString:string]]);
}

+ (IOSObjectArray *)__exceptions_JavaLangDoubleWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangNumberFormatException getClass] } count:1 type:[IOSClass getClass]];
}

- (int)compareToWithId:(JavaLangDouble *)object {
  if (object != nil && ![object isKindOfClass:[JavaLangDouble class]]) {
    @throw [[[JavaLangClassCastException alloc] init] autorelease];
  }
  if (object == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  return [JavaLangDouble compareWithDouble:value_ withDouble:((JavaLangDouble *) nil_chk(object))->value_];
}

- (char)byteValue {
  return (char) value_;
}

+ (long long int)doubleToLongBitsWithDouble:(double)value {
  // Modified from Harmony JNI implementation.
  long long longValue = *(long long *) &value;
  if ((longValue & DOUBLE_EXPONENT_MASK) == DOUBLE_EXPONENT_MASK) {
    if (longValue & DOUBLE_MANTISSA_MASK) {
      return DOUBLE_NAN_BITS;
    }
  }
  return longValue;
}

+ (long long int)doubleToRawLongBitsWithDouble:(double)value {
  return *(long long *) &value;
}

- (double)doubleValue {
  return value_;
}

- (BOOL)isEqual:(id)object {
  if (!object || ![object isKindOfClass:[JavaLangDouble class]]) {
    return NO;
  }
  NSComparisonResult result = [self compare:object];
  return result == NSOrderedSame;
}

- (float)floatValue {
  return (float) value_;
}

- (NSUInteger)hash {
  long long int v = [JavaLangDouble doubleToLongBitsWithDouble:value_];
  return (int) (v ^ ((long long) (((unsigned long long) v) >> 32)));
}

- (int)intValue {
  return (int) value_;
}

- (BOOL)isInfinite {
  return [JavaLangDouble isInfiniteWithDouble:value_];
}

+ (BOOL)isInfiniteWithDouble:(double)d {
  return isinf(d);
}

- (BOOL)isNaN {
  return [JavaLangDouble isNaNWithDouble:value_];
}

+ (BOOL)isNaNWithDouble:(double)d {
  return isnan(d);
}

+ (double)longBitsToDoubleWithLong:(long long int)bits {
  return *(double *) &bits;
}

- (long long int)longLongValue {
  return (long long int) value_;
}

+ (double)parseDoubleWithNSString:(NSString *)string {
  if (![((NSString *) nil_chk(string)) matches:JavaLangDouble_FLOATING_POINT_REGEX_]) {
    @throw [[[JavaLangNumberFormatException alloc] initWithNSString:string] autorelease];
  }
  return [JavaLangDouble nativeParseDoubleWithNSString:string];
}

+ (IOSObjectArray *)__exceptions_parseDoubleWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangNumberFormatException getClass] } count:1 type:[IOSClass getClass]];
}

+ (double)nativeParseDoubleWithNSString:(NSString *)s {
  return [s doubleValue];
}

- (short int)shortValue {
  return (short int) value_;
}

- (NSString *)description {
  return [JavaLangDouble toStringWithDouble:value_];
}

+ (NSString *)toStringWithDouble:(double)d {
  NSString *s = [NSString stringWithFormat:@"%g", d];
  // Append ".0" if no decimal, like Java does.
  if ([s rangeOfString:@"."].location == NSNotFound) {
    return [s stringByAppendingString:@".0"];
  }
  return s;
}

+ (JavaLangDouble *)valueOfWithNSString:(NSString *)string {
  return [[[JavaLangDouble alloc] initWithDouble:[JavaLangDouble parseDoubleWithNSString:string]] autorelease];
}

+ (IOSObjectArray *)__exceptions_valueOfWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangNumberFormatException getClass] } count:1 type:[IOSClass getClass]];
}

+ (int)compareWithDouble:(double)double1
              withDouble:(double)double2 {
  if (double1 > double2) {
    return 1;
  }
  if (double2 > double1) {
    return -1;
  }
  if (double1 == double2 && 0.0 != double1) {
    return 0;
  }
  if ([JavaLangDouble isNaNWithDouble:double1]) {
    if ([JavaLangDouble isNaNWithDouble:double2]) {
      return 0;
    }
    return 1;
  }
  else if ([JavaLangDouble isNaNWithDouble:double2]) {
    return -1;
  }
  long long int d1 = [JavaLangDouble doubleToRawLongBitsWithDouble:double1];
  long long int d2 = [JavaLangDouble doubleToRawLongBitsWithDouble:double2];
  return (int) ((d1 >> 63) - (d2 >> 63));
}

+ (JavaLangDouble *)valueOfWithDouble:(double)d {
  return [[[JavaLangDouble alloc] initWithDouble:d] autorelease];
}

+ (NSString *)toHexStringWithDouble:(double)d {
  return [NSString stringWithFormat:@"%A", d];
}

+ (void)initialize {
  if (self == [JavaLangDouble class]) {
    JreOperatorRetainedAssign(&JavaLangDouble_TYPE_, nil, (IOSClass *) check_class_cast([[[IOSDoubleArray arrayWithLength:0] getClass] getComponentType], [IOSClass class]));
  }
}

- (void)copyAllFieldsTo:(JavaLangDouble *)other {
  [super copyAllFieldsTo:other];
  other->value_ = value_;
}

- (const char *)objCType {
  return "d";
}

- (void)getValue:(void *)buffer {
  *((double *) buffer) = value_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  return result;
}

@end
