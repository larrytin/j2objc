//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSByteArray.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/ClassFormatError.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Package.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/net/URL.h"
#include "java/nio/ByteBuffer.h"
#include "java/security/ProtectionDomain.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Enumeration.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#import "java/util/ArrayList.h"
#import "java/util/Collections.h"

@implementation JavaLangTwoEnumerationsInOne

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilEnumeration:(id<JavaUtilEnumeration>)first
          withJavaUtilEnumeration:(id<JavaUtilEnumeration>)second {
  if (self = [super init]) {
    JavaLangTwoEnumerationsInOne_set_first_(self, first);
    JavaLangTwoEnumerationsInOne_set_second_(self, second);
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)hasMoreElements {
  return [((id<JavaUtilEnumeration>) nil_chk(first_)) hasMoreElements] || [((id<JavaUtilEnumeration>) nil_chk(second_)) hasMoreElements];
}

- (JavaNetURL *)nextElement {
  if ([((id<JavaUtilEnumeration>) nil_chk(first_)) hasMoreElements]) {
    return [first_ nextElement];
  }
  else {
    return [((id<JavaUtilEnumeration>) nil_chk(second_)) nextElement];
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaLangTwoEnumerationsInOne_set_second_(self, nil);
  JavaLangTwoEnumerationsInOne_set_first_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaLangTwoEnumerationsInOne *)other {
  [super copyAllFieldsTo:other];
  JavaLangTwoEnumerationsInOne_set_first_(other, first_);
  JavaLangTwoEnumerationsInOne_set_second_(other, second_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:first_ name:@"first"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:second_ name:@"second"]];
  return result;
}

@end
@implementation JavaLangClassLoader

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

+ (JavaLangClassLoader *)getSystemClassLoader {
  return [JavaLangSystemClassLoader loader];
}

+ (JavaNetURL *)getSystemResourceWithNSString:(NSString *)resName {
  return [((JavaLangClassLoader *) nil_chk([JavaLangSystemClassLoader loader])) getResourceWithNSString:resName];
}

+ (id<JavaUtilEnumeration>)getSystemResourcesWithNSString:(NSString *)resName {
  return [((JavaLangClassLoader *) nil_chk([JavaLangSystemClassLoader loader])) getResourcesWithNSString:resName];
}

+ (IOSObjectArray *)__exceptions_getSystemResourcesWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

+ (JavaIoInputStream *)getSystemResourceAsStreamWithNSString:(NSString *)resName {
  return [((JavaLangClassLoader *) nil_chk([JavaLangSystemClassLoader loader])) getResourceAsStreamWithNSString:resName];
}

- (id)init {
  return JreMemDebugAdd([self initJavaLangClassLoaderWithJavaLangClassLoader:[JavaLangClassLoader getSystemClassLoader] withBoolean:NO]);
}

- (id)initWithJavaLangClassLoader:(JavaLangClassLoader *)parentLoader {
  return JreMemDebugAdd([self initJavaLangClassLoaderWithJavaLangClassLoader:parentLoader withBoolean:NO]);
}

- (id)initJavaLangClassLoaderWithJavaLangClassLoader:(JavaLangClassLoader *)parentLoader
                                         withBoolean:(BOOL)nullAllowed {
  if (self = [super init]) {
    JavaLangClassLoader_set_packages_(self, [[[JavaUtilHashMap alloc] init] autorelease]);
    if (parentLoader == nil && !nullAllowed) {
      @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"parentLoader == null && !nullAllowed"] autorelease];
    }
    JavaLangClassLoader_set_parent_(self, parentLoader);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaLangClassLoader:(JavaLangClassLoader *)parentLoader
                      withBoolean:(BOOL)nullAllowed {
  return [self initJavaLangClassLoaderWithJavaLangClassLoader:parentLoader withBoolean:nullAllowed];
}

- (IOSClass *)defineClassWithByteArray:(IOSByteArray *)classRep
                               withInt:(int)offset
                               withInt:(int)length {
  @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:@"can't load this type of class file"] autorelease];
}

+ (IOSObjectArray *)__exceptions_defineClassWithByteArray_withInt_withInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangClassFormatError getClass] } count:1 type:[IOSClass getClass]];
}

- (IOSClass *)defineClassWithNSString:(NSString *)className_
                        withByteArray:(IOSByteArray *)classRep
                              withInt:(int)offset
                              withInt:(int)length {
  @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:@"can't load this type of class file"] autorelease];
}

+ (IOSObjectArray *)__exceptions_defineClassWithNSString_withByteArray_withInt_withInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangClassFormatError getClass] } count:1 type:[IOSClass getClass]];
}

- (IOSClass *)defineClassWithNSString:(NSString *)className_
                        withByteArray:(IOSByteArray *)classRep
                              withInt:(int)offset
                              withInt:(int)length
     withJavaSecurityProtectionDomain:(JavaSecurityProtectionDomain *)protectionDomain {
  @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:@"can't load this type of class file"] autorelease];
}

+ (IOSObjectArray *)__exceptions_defineClassWithNSString_withByteArray_withInt_withInt_withJavaSecurityProtectionDomain_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangClassFormatError getClass] } count:1 type:[IOSClass getClass]];
}

- (IOSClass *)defineClassWithNSString:(NSString *)name
                withJavaNioByteBuffer:(JavaNioByteBuffer *)b
     withJavaSecurityProtectionDomain:(JavaSecurityProtectionDomain *)protectionDomain {
  @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:@"can't load this type of class file"] autorelease];
}

+ (IOSObjectArray *)__exceptions_defineClassWithNSString_withJavaNioByteBuffer_withJavaSecurityProtectionDomain_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangClassFormatError getClass] } count:1 type:[IOSClass getClass]];
}

- (IOSClass *)findClassWithNSString:(NSString *)className_ {
  @throw [[[JavaLangClassNotFoundException alloc] initWithNSString:className_] autorelease];
}

+ (IOSObjectArray *)__exceptions_findClassWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangClassNotFoundException getClass] } count:1 type:[IOSClass getClass]];
}

- (IOSClass *)findLoadedClassWithNSString:(NSString *)className_ {
  @try {
    return [((JavaLangClassLoader *) nil_chk([JavaLangSystemClassLoader loader])) findClassWithNSString:className_];
  }
  @catch (JavaLangClassNotFoundException *e) {
    return nil;
  }
}

- (IOSClass *)findSystemClassWithNSString:(NSString *)className_ {
  return [IOSClass forName:className_ initialize:NO classLoader:[JavaLangClassLoader getSystemClassLoader]];
}

+ (IOSObjectArray *)__exceptions_findSystemClassWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangClassNotFoundException getClass] } count:1 type:[IOSClass getClass]];
}

- (JavaLangClassLoader *)getParent {
  return parent_;
}

- (JavaNetURL *)getResourceWithNSString:(NSString *)resName {
  JavaNetURL *resource = [((JavaLangClassLoader *) nil_chk(parent_)) getResourceWithNSString:resName];
  if (resource == nil) {
    resource = [self findResourceWithNSString:resName];
  }
  return resource;
}

- (id<JavaUtilEnumeration>)getResourcesWithNSString:(NSString *)resName {
  id<JavaUtilEnumeration> first = [((JavaLangClassLoader *) nil_chk(parent_)) getResourcesWithNSString:resName];
  id<JavaUtilEnumeration> second = [self findResourcesWithNSString:resName];
  return [[[JavaLangTwoEnumerationsInOne alloc] initWithJavaUtilEnumeration:first withJavaUtilEnumeration:second] autorelease];
}

+ (IOSObjectArray *)__exceptions_getResourcesWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (JavaIoInputStream *)getResourceAsStreamWithNSString:(NSString *)resName {
  @try {
    JavaNetURL *url = [self getResourceWithNSString:resName];
    if (url != nil) {
      return [[[JavaIoFileInputStream alloc] initWithNSString:[url getFile]] autorelease];
    }
  }
  @catch (JavaIoIOException *ex) {
  }
  return nil;
}

- (IOSClass *)loadClassWithNSString:(NSString *)className_ {
  return [self loadClassWithNSString:className_ withBoolean:NO];
}

+ (IOSObjectArray *)__exceptions_loadClassWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangClassNotFoundException getClass] } count:1 type:[IOSClass getClass]];
}

- (IOSClass *)loadClassWithNSString:(NSString *)className_
                        withBoolean:(BOOL)resolve {
  IOSClass *clazz = [self findLoadedClassWithNSString:className_];
  if (clazz == nil) {
    @try {
      clazz = [((JavaLangClassLoader *) nil_chk(parent_)) loadClassWithNSString:className_ withBoolean:NO];
    }
    @catch (JavaLangClassNotFoundException *e) {
    }
    if (clazz == nil) {
      clazz = [self findClassWithNSString:className_];
    }
  }
  return clazz;
}

+ (IOSObjectArray *)__exceptions_loadClassWithNSString_withBoolean_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangClassNotFoundException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)resolveClassWithIOSClass:(IOSClass *)clazz {
}

- (JavaNetURL *)findResourceWithNSString:(NSString *)resName {
  return nil;
}

- (id<JavaUtilEnumeration>)findResourcesWithNSString:(NSString *)resName {
  return [JavaUtilCollections emptyEnumeration];
}

+ (IOSObjectArray *)__exceptions_findResourcesWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (NSString *)findLibraryWithNSString:(NSString *)libName {
  return nil;
}

- (JavaLangPackage *)getPackageWithNSString:(NSString *)name {
  @synchronized (packages_) {
    return [((id<JavaUtilMap>) nil_chk(packages_)) getWithId:name];
  }
}

- (IOSObjectArray *)getPackages {
  @synchronized (packages_) {
    id<JavaUtilCollection> col = [((id<JavaUtilMap>) nil_chk(packages_)) values];
    IOSObjectArray *result = [IOSObjectArray arrayWithLength:[((id<JavaUtilCollection>) nil_chk(col)) size] type:[IOSClass classWithClass:[JavaLangPackage class]]];
    [col toArrayWithNSObjectArray:result];
    return result;
  }
}

- (JavaLangPackage *)definePackageWithNSString:(NSString *)name
                                  withNSString:(NSString *)specTitle
                                  withNSString:(NSString *)specVersion
                                  withNSString:(NSString *)specVendor
                                  withNSString:(NSString *)implTitle
                                  withNSString:(NSString *)implVersion
                                  withNSString:(NSString *)implVendor
                                withJavaNetURL:(JavaNetURL *)sealBase {
  @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:@"new package definitions unsupported"] autorelease];
}

+ (IOSObjectArray *)__exceptions_definePackageWithNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withJavaNetURL_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangIllegalArgumentException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)setSignersWithIOSClass:(IOSClass *)c
             withNSObjectArray:(IOSObjectArray *)signers {
}

- (void)setClassAssertionStatusWithNSString:(NSString *)cname
                                withBoolean:(BOOL)enable {
}

- (void)setPackageAssertionStatusWithNSString:(NSString *)pname
                                  withBoolean:(BOOL)enable {
}

- (void)setDefaultAssertionStatusWithBoolean:(BOOL)enable {
}

- (void)clearAssertionStatus {
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaLangClassLoader_set_packages_(self, nil);
  JavaLangClassLoader_set_parent_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaLangClassLoader *)other {
  [super copyAllFieldsTo:other];
  JavaLangClassLoader_set_packages_(other, packages_);
  JavaLangClassLoader_set_parent_(other, parent_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:parent_ name:@"parent"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:packages_ name:@"packages"]];
  return result;
}

+ (IOSObjectArray *)__annotations_defineClassWithByteArray_withInt_withInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecatedImpl alloc] init] autorelease] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

@end
@implementation JavaLangSystemClassLoader

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaLangSystemClassLoader_loader_ name:@"JavaLangSystemClassLoader_loader_"]];
  return result;
}

static JavaLangClassLoader * JavaLangSystemClassLoader_loader_;

+ (JavaLangClassLoader *)loader {
  return JavaLangSystemClassLoader_loader_;
}

+ (void)setLoader:(JavaLangClassLoader *)loader {
  JreOperatorRetainedAssign(&JavaLangSystemClassLoader_loader_, nil, loader);
}

- (id)init {
  return JreMemDebugAdd([super initWithJavaLangClassLoader:nil withBoolean:YES]);
}

- (IOSClass *)findClassWithNSString:(NSString *)name {
  return [IOSClass forName:name initialize:YES classLoader:self];
}

+ (IOSObjectArray *)__exceptions_findClassWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangClassNotFoundException getClass] } count:1 type:[IOSClass getClass]];
}

- (JavaNetURL *)findResourceWithNSString:(NSString *)name {
  NSBundle *bundle = [NSBundle mainBundle];
  NSURL *nativeURL = [bundle URLForResource:name withExtension:nil];
  return AUTORELEASE([[JavaNetURL alloc] initWithNSString:[nativeURL description]]);
}

- (id<JavaUtilEnumeration>)findResourcesWithNSString:(NSString *)name {
  JavaUtilArrayList *urls = AUTORELEASE([[JavaUtilArrayList alloc] init]);
  for (NSBundle *bundle in [NSBundle allBundles]) {
    NSURL *nativeURL = [bundle URLForResource:name withExtension:nil];
    if (nativeURL) {
      JavaNetURL *url =
      AUTORELEASE([[JavaNetURL alloc] initWithNSString:[nativeURL description]]);
      [urls addWithId:url];
    }
  }
  return [JavaUtilCollections enumerationWithJavaUtilCollection:urls];
}

+ (IOSObjectArray *)__exceptions_findResourcesWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (IOSClass *)loadClassWithNSString:(NSString *)name
                        withBoolean:(BOOL)resolve {
  @synchronized(self) {
    {
      return [self findClassWithNSString:name];
    }
  }
}

+ (IOSObjectArray *)__exceptions_loadClassWithNSString_withBoolean_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangClassNotFoundException getClass] } count:1 type:[IOSClass getClass]];
}

- (JavaNetURL *)getResourceWithNSString:(NSString *)resName {
  return [self findResourceWithNSString:resName];
}

- (id<JavaUtilEnumeration>)getResourcesWithNSString:(NSString *)resName {
  return [self findResourcesWithNSString:resName];
}

+ (IOSObjectArray *)__exceptions_getResourcesWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

+ (void)initialize {
  if (self == [JavaLangSystemClassLoader class]) {
    JreOperatorRetainedAssign(&JavaLangSystemClassLoader_loader_, nil, [[[JavaLangSystemClassLoader alloc] init] autorelease]);
  }
}

@end
