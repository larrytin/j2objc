//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: Classes/java/lang/ClassLoader.java
//
//  Created by retechretech on 13-9-4.
//

#include "IOSClass.h"
#include "java/io/InputStream.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/ClassNotFoundException.h"

@implementation JavaLangClassLoader

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaLangClassLoader_systemLoader_ name:@"JavaLangClassLoader_systemLoader_"]];
  return result;
}

static JavaLangClassLoader * JavaLangClassLoader_systemLoader_;

+ (JavaLangClassLoader *)systemLoader {
  return JavaLangClassLoader_systemLoader_;
}

- (id)initWithJavaLangClassLoader:(JavaLangClassLoader *)parent {
  if ((self = [super init])) {
    JavaLangClassLoader_set_parent_(self, parent);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

- (void)clearAssertionStatus {
}

+ (JavaLangClassLoader *)getSystemClassLoader {
  return JavaLangClassLoader_systemLoader_;
}

+ (JavaIoInputStream *)getSystemResourceAsStreamWithNSString:(NSString *)name {
  return nil;
}

- (IOSClass *)loadClassWithNSString:(NSString *)name {
  return nil;
}

+ (IOSObjectArray *)__exceptions_loadClassWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangClassNotFoundException getClass] } count:1 type:[IOSClass getClass]];
}

- (IOSClass *)loadClassWithNSString:(NSString *)name
                           withBOOL:(BOOL)resolve {
  @synchronized(self) {
    {
      return nil;
    }
  }
}

+ (IOSObjectArray *)__exceptions_loadClassWithNSString_withBOOL_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangClassNotFoundException getClass] } count:1 type:[IOSClass getClass]];
}

- (JavaIoInputStream *)getResourceAsStreamWithNSString:(NSString *)name {
  return nil;
}

- (IOSClass *)findClassWithNSString:(NSString *)name   {
    return [IOSClass forName:name initialize:YES classLoader:self];
  }

- (void)resolveClassWithIOSClass:(IOSClass *)c {
}

- (IOSClass *)findSystemClassWithNSString:(NSString *)name {
  return [self findClassWithNSString:name];
}

+ (IOSObjectArray *)__exceptions_findSystemClassWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangClassNotFoundException getClass] } count:1 type:[IOSClass getClass]];
}

- (IOSClass *)findLoadedClassWithNSString:(NSString *)name {
  @try {
    return [self findClassWithNSString:name];
  }
  @catch (JavaLangClassNotFoundException *e) {
    return nil;
  }
}

- (JavaLangClassLoader *)getParent {
  return parent_ != nil ? parent_ : JavaLangClassLoader_systemLoader_;
}

- (void)setDefaultAssertionStatusWithBOOL:(BOOL)b {
  @synchronized(self) {
    {
    }
  }
}

- (void)setPackageAssertionStatusWithNSString:(NSString *)name
                                     withBOOL:(BOOL)enabled {
}

- (void)setClassAssertionStatusWithNSString:(NSString *)name
                                   withBOOL:(BOOL)enabled {
}

+ (void)initialize {
  if (self == [JavaLangClassLoader class]) {
    JreOperatorRetainedAssign(&JavaLangClassLoader_systemLoader_, nil, [[[JavaLangClassLoader alloc] init] autorelease]);
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaLangClassLoader_set_parent_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaLangClassLoader *)other {
  [super copyAllFieldsTo:other];
  JavaLangClassLoader_set_parent_(other, parent_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:parent_ name:@"parent"]];
  return result;
}

@end
