//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Package.h"
#include "java/lang/annotation/Annotation.h"
#include "java/net/URL.h"

@implementation JavaLangPackage

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaLangPackage_NO_ANNOTATIONS_ name:@"JavaLangPackage_NO_ANNOTATIONS_"]];
  return result;
}

static IOSObjectArray * JavaLangPackage_NO_ANNOTATIONS_;

+ (IOSObjectArray *)NO_ANNOTATIONS {
  return JavaLangPackage_NO_ANNOTATIONS_;
}

- (id)initWithNSString:(NSString *)name
          withNSString:(NSString *)specTitle
          withNSString:(NSString *)specVersion
          withNSString:(NSString *)specVendor
          withNSString:(NSString *)implTitle
          withNSString:(NSString *)implVersion
          withNSString:(NSString *)implVendor
        withJavaNetURL:(JavaNetURL *)sealBase {
  if (self = [super init]) {
    JavaLangPackage_set_name_(self, name);
    JavaLangPackage_set_specTitle_(self, specTitle);
    JavaLangPackage_set_specVersion_(self, specVersion);
    JavaLangPackage_set_specVendor_(self, specVendor);
    JavaLangPackage_set_implTitle_(self, implTitle);
    JavaLangPackage_set_implVersion_(self, implVersion);
    JavaLangPackage_set_implVendor_(self, implVendor);
    JavaLangPackage_set_sealBase_(self, sealBase);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)getAnnotationWithIOSClass:(IOSClass *)annotationType {
  {
    IOSObjectArray *a__ = [self getAnnotations];
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<JavaLangAnnotationAnnotation> annotation = (*b__++);
      if ([((IOSClass *) nil_chk(annotationType)) isInstance:annotation]) {
        return (id<JavaLangAnnotationAnnotation>) annotation;
      }
    }
  }
  return nil;
}

- (IOSObjectArray *)getAnnotations {
  @try {
    IOSClass *c = [IOSClass forName:[NSString stringWithFormat:@"%@.package-info", [self getName]]];
    return [((IOSClass *) nil_chk(c)) getAnnotations];
  }
  @catch (JavaLangException *ex) {
    return JavaLangPackage_NO_ANNOTATIONS_;
  }
}

- (IOSObjectArray *)getDeclaredAnnotations {
  return [self getAnnotations];
}

- (BOOL)isAnnotationPresentWithIOSClass:(IOSClass *)annotationType {
  return [self getAnnotationWithIOSClass:annotationType] != nil;
}

- (NSString *)getImplementationTitle {
  return implTitle_;
}

- (NSString *)getImplementationVendor {
  return implVendor_;
}

- (NSString *)getImplementationVersion {
  return implVersion_;
}

- (NSString *)getName {
  return name_;
}

+ (JavaLangPackage *)getPackageWithNSString:(NSString *)packageName {
  JavaLangClassLoader *classloader = [JavaLangClassLoader getSystemClassLoader];
  return [((JavaLangClassLoader *) nil_chk(classloader)) getPackageWithNSString:packageName];
}

+ (IOSObjectArray *)getPackages {
  JavaLangClassLoader *classloader = [JavaLangClassLoader getSystemClassLoader];
  return [((JavaLangClassLoader *) nil_chk(classloader)) getPackages];
}

- (NSString *)getSpecificationTitle {
  return specTitle_;
}

- (NSString *)getSpecificationVendor {
  return specVendor_;
}

- (NSString *)getSpecificationVersion {
  return specVersion_;
}

- (NSUInteger)hash {
  return [((NSString *) nil_chk(name_)) hash];
}

- (BOOL)isCompatibleWithWithNSString:(NSString *)version_ {
  IOSObjectArray *requested = [((NSString *) nil_chk(version_)) split:@"\\."];
  IOSObjectArray *provided = [((NSString *) nil_chk(specVersion_)) split:@"\\."];
  for (int i = 0; i < [JavaLangMath minWithInt:(int) [((IOSObjectArray *) nil_chk(requested)) count] withInt:(int) [((IOSObjectArray *) nil_chk(provided)) count]]; i++) {
    int reqNum = [JavaLangInteger parseIntWithNSString:IOSObjectArray_Get(requested, i)];
    int provNum = [JavaLangInteger parseIntWithNSString:IOSObjectArray_Get(provided, i)];
    if (reqNum > provNum) {
      return NO;
    }
    else if (reqNum < provNum) {
      return YES;
    }
  }
  if ((int) [requested count] > (int) [provided count]) {
    return NO;
  }
  return YES;
}

+ (IOSObjectArray *)__exceptions_isCompatibleWithWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangNumberFormatException getClass] } count:1 type:[IOSClass getClass]];
}

- (BOOL)isSealed {
  return sealBase_ != nil;
}

- (BOOL)isSealedWithJavaNetURL:(JavaNetURL *)url {
  return sealBase_ != nil && [sealBase_ sameFileWithJavaNetURL:url];
}

- (NSString *)description {
  return [NSString stringWithFormat:@"package %@", name_];
}

+ (void)initialize {
  if (self == [JavaLangPackage class]) {
    JreOperatorRetainedAssign(&JavaLangPackage_NO_ANNOTATIONS_, nil, [IOSObjectArray arrayWithLength:0 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]]);
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaLangPackage_set_sealBase_(self, nil);
  JavaLangPackage_set_implVendor_(self, nil);
  JavaLangPackage_set_implVersion_(self, nil);
  JavaLangPackage_set_implTitle_(self, nil);
  JavaLangPackage_set_specVendor_(self, nil);
  JavaLangPackage_set_specVersion_(self, nil);
  JavaLangPackage_set_specTitle_(self, nil);
  JavaLangPackage_set_name_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaLangPackage *)other {
  [super copyAllFieldsTo:other];
  JavaLangPackage_set_implTitle_(other, implTitle_);
  JavaLangPackage_set_implVendor_(other, implVendor_);
  JavaLangPackage_set_implVersion_(other, implVersion_);
  JavaLangPackage_set_name_(other, name_);
  JavaLangPackage_set_sealBase_(other, sealBase_);
  JavaLangPackage_set_specTitle_(other, specTitle_);
  JavaLangPackage_set_specVendor_(other, specVendor_);
  JavaLangPackage_set_specVersion_(other, specVersion_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:name_ name:@"name"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:specTitle_ name:@"specTitle"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:specVersion_ name:@"specVersion"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:specVendor_ name:@"specVendor"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:implTitle_ name:@"implTitle"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:implVersion_ name:@"implVersion"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:implVendor_ name:@"implVendor"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:sealBase_ name:@"sealBase"]];
  return result;
}

@end
