//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSBooleanArray.h"
#include "IOSClass.h"
#include "java/lang/Boolean.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/System.h"

@implementation JavaLangBoolean

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaLangBoolean_TYPE_ name:@"JavaLangBoolean_TYPE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaLangBoolean_TRUE__ name:@"JavaLangBoolean_TRUE__"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaLangBoolean_FALSE__ name:@"JavaLangBoolean_FALSE__"]];
  return result;
}

static IOSClass * JavaLangBoolean_TYPE_;
static JavaLangBoolean * JavaLangBoolean_TRUE__;
static JavaLangBoolean * JavaLangBoolean_FALSE__;

+ (IOSClass *)TYPE {
  return JavaLangBoolean_TYPE_;
}

+ (JavaLangBoolean *)getTRUE {
  return JavaLangBoolean_TRUE__;
}

+ (JavaLangBoolean *)getFALSE {
  return JavaLangBoolean_FALSE__;
}

- (id)initWithNSString:(NSString *)string {
  return JreMemDebugAdd([self initJavaLangBooleanWithBoolean:[JavaLangBoolean parseBooleanWithNSString:string]]);
}

- (id)initJavaLangBooleanWithBoolean:(BOOL)value {
  if (self = [super init]) {
    self->value_ = value;
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithBoolean:(BOOL)value {
  return [self initJavaLangBooleanWithBoolean:value];
}

- (BOOL)booleanValue {
  return value_;
}

- (BOOL)isEqual:(id)o {
  return (o == self) || (([o isKindOfClass:[JavaLangBoolean class]]) && (value_ == ((JavaLangBoolean *) nil_chk(o))->value_));
}

- (int)compareToWithId:(JavaLangBoolean *)that {
  if (that != nil && ![that isKindOfClass:[JavaLangBoolean class]]) {
    @throw [[[JavaLangClassCastException alloc] init] autorelease];
  }
  if (that == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  if (self->value_ == ((JavaLangBoolean *) nil_chk(that))->value_) {
    return 0;
  }
  return self->value_ ? 1 : -1;
}

- (NSUInteger)hash {
  return value_ ? 1231 : 1237;
}

- (NSString *)description {
  return [NSString valueOfBool:value_];
}

+ (BOOL)getBooleanWithNSString:(NSString *)string {
  if (string == nil || [string length] == 0) {
    return NO;
  }
  return ([JavaLangBoolean parseBooleanWithNSString:[JavaLangSystem getPropertyWithNSString:string]]);
}

+ (BOOL)parseBooleanWithNSString:(NSString *)s {
  return [@"true" equalsIgnoreCase:s];
}

+ (NSString *)toStringWithBoolean:(BOOL)value {
  return [NSString valueOfBool:value];
}

+ (JavaLangBoolean *)valueOfWithNSString:(NSString *)string {
  return [JavaLangBoolean parseBooleanWithNSString:string] ? JavaLangBoolean_TRUE__ : JavaLangBoolean_FALSE__;
}

+ (JavaLangBoolean *)valueOfWithBoolean:(BOOL)b {
  return b ? JavaLangBoolean_TRUE__ : JavaLangBoolean_FALSE__;
}

+ (void)initialize {
  if (self == [JavaLangBoolean class]) {
    JreOperatorRetainedAssign(&JavaLangBoolean_TYPE_, nil, (IOSClass *) check_class_cast([[[IOSBooleanArray arrayWithLength:0] getClass] getComponentType], [IOSClass class]));
    JreOperatorRetainedAssign(&JavaLangBoolean_TRUE__, nil, [[[JavaLangBoolean alloc] initWithBoolean:YES] autorelease]);
    JreOperatorRetainedAssign(&JavaLangBoolean_FALSE__, nil, [[[JavaLangBoolean alloc] initWithBoolean:NO] autorelease]);
  }
}

- (void)copyAllFieldsTo:(JavaLangBoolean *)other {
  [super copyAllFieldsTo:other];
  other->value_ = value_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  return result;
}

@end
