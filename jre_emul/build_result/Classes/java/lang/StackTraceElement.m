//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: Classes/java/lang/StackTraceElement.java
//
//  Created by retechretech on 13-9-4.
//

#include "java/lang/StackTraceElement.h"
#include "java/lang/StringBuilder.h"
#import <execinfo.h>

@implementation JavaLangStackTraceElement

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (NSString *)getClassName {
  return className__;
}

- (NSString *)getMethodName {
  [self initializeFromAddress];
  return methodName_;
}

- (NSString *)getFileName {
  return fileName_;
}

- (int)getLineNumber {
  return lineNumber_;
}

- (id)initJavaLangStackTraceElementWithNSString:(NSString *)className_
                                   withNSString:(NSString *)methodName
                                   withNSString:(NSString *)fileName
                                        withInt:(int)lineNumber {
  if ((self = [super init])) {
    JavaLangStackTraceElement_set_className__(self, className_);
    JavaLangStackTraceElement_set_methodName_(self, methodName);
    JavaLangStackTraceElement_set_fileName_(self, fileName);
    self->lineNumber_ = lineNumber;
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithNSString:(NSString *)className_
          withNSString:(NSString *)methodName
          withNSString:(NSString *)fileName
               withInt:(int)lineNumber {
  return [self initJavaLangStackTraceElementWithNSString:className_ withNSString:methodName withNSString:fileName withInt:lineNumber];
}

- (id)initWithLongInt:(long long int)address {
  if ((self = [self initJavaLangStackTraceElementWithNSString:nil withNSString:nil withNSString:nil withInt:-1])) {
    self->address_ = address;
    JreMemDebugAdd(self);
  }
  return self;
}

- (NSString *)description {
  [self initializeFromAddress];
  JavaLangStringBuilder *sb = [[[JavaLangStringBuilder alloc] init] autorelease];
  if (className__ != nil) {
    [sb appendWithNSString:className__];
    [sb appendWithUnichar:'.'];
  }
  if (methodName_ != nil) {
    [sb appendWithNSString:methodName_];
  }
  if (fileName_ != nil || lineNumber_ != -1) {
    [sb appendWithUnichar:'('];
    if (fileName_ != nil) {
      [sb appendWithNSString:fileName_];
    }
    if (lineNumber_ != -1) {
      [sb appendWithUnichar:':'];
      [sb appendWithInt:lineNumber_];
    }
    [sb appendWithUnichar:')'];
  }
  return [sb description];
}

- (void)initializeFromAddress   {
    if (address_ == 0L || methodName_) {
      return;
    }
    void *shortStack[1];
    shortStack[0] = (void *)address_;
    char **stackSymbol = backtrace_symbols(shortStack, 1);
    char *start = strstr(*stackSymbol, "0x");  // Skip text before address.
    methodName_ =
    RETAIN([NSString stringWithCString:start
    encoding:[NSString defaultCStringEncoding]]);
    free(stackSymbol);
  }

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaLangStackTraceElement_set_fileName_(self, nil);
  JavaLangStackTraceElement_set_methodName_(self, nil);
  JavaLangStackTraceElement_set_className__(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaLangStackTraceElement *)other {
  [super copyAllFieldsTo:other];
  other->address_ = address_;
  JavaLangStackTraceElement_set_className__(other, className__);
  JavaLangStackTraceElement_set_fileName_(other, fileName_);
  other->lineNumber_ = lineNumber_;
  JavaLangStackTraceElement_set_methodName_(other, methodName_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:className__ name:@"className_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:methodName_ name:@"methodName"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:fileName_ name:@"fileName"]];
  return result;
}

@end
