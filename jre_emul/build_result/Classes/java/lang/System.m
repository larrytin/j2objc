//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/FileDescriptor.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileOutputStream.h"
#include "java/io/InputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/SecurityManager.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/Properties.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#import "IOSBooleanArray.h"
#import "IOSByteArray.h"
#import "IOSCharArray.h"
#import "IOSDoubleArray.h"
#import "IOSFloatArray.h"
#import "IOSIntArray.h"
#import "IOSLongArray.h"
#import "IOSObjectArray.h"
#import "IOSShortArray.h"
#import "java/lang/ArrayIndexOutOfBoundsException.h"
#import "java/lang/ArrayStoreException.h"
#import "java/lang/IllegalArgumentException.h"
#import "java/lang/NullPointerException.h"
#include "mach/mach_time.h"

@implementation JavaLangSystem

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaLangSystem_props_ name:@"JavaLangSystem_props_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaLangSystem_in_ name:@"JavaLangSystem_in_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaLangSystem_out_ name:@"JavaLangSystem_out_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaLangSystem_err_ name:@"JavaLangSystem_err_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaLangSystem_systemLogger_ name:@"JavaLangSystem_systemLogger_"]];
  return result;
}

static JavaUtilProperties * JavaLangSystem_props_;
static JavaIoInputStream * JavaLangSystem_in_;
static JavaIoPrintStream * JavaLangSystem_out_;
static JavaIoPrintStream * JavaLangSystem_err_;
static JavaUtilLoggingLogger * JavaLangSystem_systemLogger_;

+ (JavaUtilProperties *)props {
  return JavaLangSystem_props_;
}

+ (void)setProps:(JavaUtilProperties *)props {
  JreOperatorRetainedAssign(&JavaLangSystem_props_, nil, props);
}

+ (JavaIoInputStream *)in {
  return JavaLangSystem_in_;
}

+ (JavaIoPrintStream *)out {
  return JavaLangSystem_out_;
}

+ (JavaIoPrintStream *)err {
  return JavaLangSystem_err_;
}

+ (JavaUtilLoggingLogger *)systemLogger {
  return JavaLangSystem_systemLogger_;
}

+ (void)setSystemLogger:(JavaUtilLoggingLogger *)systemLogger {
  JreOperatorRetainedAssign(&JavaLangSystem_systemLogger_, nil, systemLogger);
}

+ (void)setInWithJavaIoInputStream:(JavaIoInputStream *)newIn {
  #if __has_feature(objc_arc)
  JavaLangSystem_in_ = newIn;
  #else
  JreOperatorRetainedAssign(&JavaLangSystem_in_, self, newIn);
  #endif
}

+ (void)setOutWithJavaIoPrintStream:(JavaIoPrintStream *)newOut {
  #if __has_feature(objc_arc)
  JavaLangSystem_out_ = newOut;
  #else
  JreOperatorRetainedAssign(&JavaLangSystem_out_, self, newOut);
  #endif
}

+ (void)setErrWithJavaIoPrintStream:(JavaIoPrintStream *)newErr {
  #if __has_feature(objc_arc)
  JavaLangSystem_err_ = newErr;
  #else
  JreOperatorRetainedAssign(&JavaLangSystem_err_, self, newErr);
  #endif
}

+ (long long int)currentTimeMillis {
  return (long long) ([[NSDate date] timeIntervalSince1970] * 1000);
}

+ (int)identityHashCodeWithId:(id)anObject {
  return (int) (intptr_t) anObject;
}

+ (void)arraycopyWithId:(id)src
                withInt:(int)srcPos
                 withId:(id)dest
                withInt:(int)destPos
                withInt:(int)length {
  if (!src || !dest) {
    @throw AUTORELEASE([[JavaLangNullPointerException alloc] init]);
  }
  if (![src isKindOfClass:[IOSArray class]]) {
    NSString *msg = [NSString stringWithFormat:@"source of type %@ is not an array",
    [src class]];
    @throw AUTORELEASE([[JavaLangArrayStoreException alloc] initWithNSString:msg]);
  }
  if (![dest isKindOfClass:[IOSArray class]]) {
    NSString *msg = [NSString stringWithFormat:@"destination of type %@ is not an array",
    [dest class]];
    @throw AUTORELEASE([[JavaLangArrayStoreException alloc] initWithNSString:msg]);
  }
  if (![dest isMemberOfClass:[src class]]) {
    NSString *msg =
    [NSString stringWithFormat:@"source type %@ cannot be copied to array of type %@",
    [src class], [dest class]];
    @throw AUTORELEASE([[JavaLangArrayStoreException alloc] initWithNSString:msg]);
  }
  
  // Check for negative positions and length, since the array classes use unsigned ints.
  if (srcPos < 0 || destPos < 0 || length < 0) {
    @throw AUTORELEASE([[JavaLangArrayIndexOutOfBoundsException alloc] init]);
  }
  
  // Range tests are done by array class.
  [(IOSArray *) src arraycopy:NSMakeRange(srcPos, length)
  destination:(IOSArray *) dest
  offset:destPos];
}

+ (long long int)nanoTime {
  // Get the timebase info
  mach_timebase_info_data_t info;
  mach_timebase_info(&info);
  
  uint64_t time = mach_absolute_time();
  
  // Convert to nanoseconds and return,
  return (time * info.numer) / info.denom;
}

+ (void)exitWithInt:(int)status {
  exit(status);
}

+ (JavaUtilProperties *)getProperties {
  if (JavaLangSystem_props_ == nil) {
    JreOperatorRetainedAssign(&JavaLangSystem_props_, nil, [[[JavaUtilProperties alloc] init] autorelease]);
    [JavaLangSystem_props_ setPropertyWithNSString:@"os.name" withNSString:@"Mac OS X"];
    [JavaLangSystem_props_ setPropertyWithNSString:@"file.separator" withNSString:@"/"];
    [JavaLangSystem_props_ setPropertyWithNSString:@"line.separator" withNSString:@"\n"];
    [JavaLangSystem_props_ setPropertyWithNSString:@"path.separator" withNSString:@":"];
    [JavaLangSystem_props_ setPropertyWithNSString:@"org.xml.sax.driver" withNSString:@"org.xmlpull.v1.sax2.Driver"];
    [JavaLangSystem setSystemPropertiesWithJavaUtilProperties:JavaLangSystem_props_];
  }
  return JavaLangSystem_props_;
}

+ (void)setSystemPropertiesWithJavaUtilProperties:(JavaUtilProperties *)props {
  [props setPropertyWithNSString:@"user.home" withNSString:NSHomeDirectory()];
  [props setPropertyWithNSString:@"user.name" withNSString:NSUserName()];
  NSString *curDir = [[NSFileManager defaultManager] currentDirectoryPath];
  [props setPropertyWithNSString:@"user.dir" withNSString:curDir];
  
  NSString *tmpDir = NSTemporaryDirectory();
  int iLast = [tmpDir length] - 1;
  if (iLast >= 0 && [tmpDir characterAtIndex:iLast] == '/') {
    tmpDir = [tmpDir substringToIndex:iLast];
  }
  [props setPropertyWithNSString:@"java.io.tmpdir" withNSString:tmpDir];
}

+ (NSString *)getPropertyWithNSString:(NSString *)key {
  return [((JavaUtilProperties *) nil_chk([JavaLangSystem getProperties])) getPropertyWithNSString:key];
}

+ (NSString *)getPropertyWithNSString:(NSString *)key
                         withNSString:(NSString *)defaultValue {
  NSString *result = [((JavaUtilProperties *) nil_chk([JavaLangSystem getProperties])) getPropertyWithNSString:key];
  return result != nil ? result : defaultValue;
}

+ (void)setPropertyWithNSString:(NSString *)key
                   withNSString:(NSString *)value {
  [((JavaUtilProperties *) nil_chk([JavaLangSystem getProperties])) setPropertyWithNSString:key withNSString:value];
}

+ (void)setPropertiesWithJavaUtilProperties:(JavaUtilProperties *)properties {
  JreOperatorRetainedAssign(&JavaLangSystem_props_, nil, properties);
}

+ (NSString *)clearPropertyWithNSString:(NSString *)key {
  JavaUtilProperties *properties = [JavaLangSystem getProperties];
  NSString *result = [((JavaUtilProperties *) nil_chk(properties)) getPropertyWithNSString:key];
  [properties removeWithId:key];
  return result;
}

+ (JavaLangSecurityManager *)getSecurityManager {
  return nil;
}

+ (NSString *)lineSeparator {
  return @"\n";
}

+ (void)logEWithNSString:(NSString *)message {
  [JavaLangSystem logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel SEVERE] withNSString:message withJavaLangThrowable:nil];
}

+ (void)logEWithNSString:(NSString *)message
   withJavaLangThrowable:(JavaLangThrowable *)th {
  [JavaLangSystem logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel SEVERE] withNSString:message withJavaLangThrowable:th];
}

+ (void)logIWithNSString:(NSString *)message {
  [JavaLangSystem logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel INFO] withNSString:message withJavaLangThrowable:nil];
}

+ (void)logIWithNSString:(NSString *)message
   withJavaLangThrowable:(JavaLangThrowable *)th {
  [JavaLangSystem logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel INFO] withNSString:message withJavaLangThrowable:th];
}

+ (void)logWWithNSString:(NSString *)message {
  [JavaLangSystem logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel WARNING] withNSString:message withJavaLangThrowable:nil];
}

+ (void)logWWithNSString:(NSString *)message
   withJavaLangThrowable:(JavaLangThrowable *)th {
  [JavaLangSystem logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel WARNING] withNSString:message withJavaLangThrowable:th];
}

+ (void)logWithJavaUtilLoggingLevel:(JavaUtilLoggingLevel *)level
                       withNSString:(NSString *)message
              withJavaLangThrowable:(JavaLangThrowable *)thrown {
  if (JavaLangSystem_systemLogger_ == nil) {
    JreOperatorRetainedAssign(&JavaLangSystem_systemLogger_, nil, [JavaUtilLoggingLogger getLoggerWithNSString:@"java.lang.System"]);
  }
  [((JavaUtilLoggingLogger *) nil_chk(JavaLangSystem_systemLogger_)) logWithJavaUtilLoggingLevel:level withNSString:message withJavaLangThrowable:thrown];
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

+ (void)initialize {
  if (self == [JavaLangSystem class]) {
    {
      JreOperatorRetainedAssign(&JavaLangSystem_err_, nil, [[[JavaIoPrintStream alloc] initWithJavaIoOutputStream:[[[JavaIoFileOutputStream alloc] initWithJavaIoFileDescriptor:[JavaIoFileDescriptor err]] autorelease]] autorelease]);
      JreOperatorRetainedAssign(&JavaLangSystem_out_, nil, [[[JavaIoPrintStream alloc] initWithJavaIoOutputStream:[[[JavaIoFileOutputStream alloc] initWithJavaIoFileDescriptor:[JavaIoFileDescriptor out]] autorelease]] autorelease]);
      JreOperatorRetainedAssign(&JavaLangSystem_in_, nil, [[[JavaIoBufferedInputStream alloc] initWithJavaIoInputStream:[[[JavaIoFileInputStream alloc] initWithJavaIoFileDescriptor:[JavaIoFileDescriptor in]] autorelease]] autorelease]);
    }
  }
}

@end
