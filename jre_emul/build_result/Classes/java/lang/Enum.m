//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/reflect/Method.h"

@implementation JavaLangEnum

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithNSString:(NSString *)name
               withInt:(int)ordinal {
  if (self = [super init]) {
    JavaLangEnum_set_name__(self, name);
    self->ordinal__ = ordinal;
    JreMemDebugAdd(self);
  }
  return self;
}

- (NSString *)name {
  return name__;
}

- (int)ordinal {
  return ordinal__;
}

- (NSString *)description {
  return name__;
}

- (BOOL)isEqual:(id)other {
  return self == other;
}

- (NSUInteger)hash {
  return ordinal__ + (name__ == nil ? 0 : [name__ hash]);
}

- (id)clone {
  @throw [[[JavaLangCloneNotSupportedException alloc] initWithNSString:@"Enums may not be cloned"] autorelease];
}

+ (IOSObjectArray *)__exceptions_clone {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangCloneNotSupportedException getClass] } count:1 type:[IOSClass getClass]];
}

- (int)compareToWithId:(JavaLangEnum *)o {
  if (o != nil && ![o isKindOfClass:[JavaLangEnum class]]) {
    @throw [[[JavaLangClassCastException alloc] init] autorelease];
  }
  return ordinal__ - ((JavaLangEnum *) nil_chk(o))->ordinal__;
}

- (IOSClass *)getDeclaringClass {
  IOSClass *myClass = [self getClass];
  IOSClass *mySuperClass = [myClass getSuperclass];
  if ([[IOSClass classWithClass:[JavaLangEnum class]] isEqual:mySuperClass]) {
    return (IOSClass *) check_class_cast(myClass, [IOSClass class]);
  }
  return (IOSClass *) check_class_cast(mySuperClass, [IOSClass class]);
}

+ (id)valueOfWithIOSClass:(IOSClass *)enumType
             withNSString:(NSString *)name {
  if ((enumType == nil) || (name == nil)) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"Argument must not be null"] autorelease];
  }
  IOSObjectArray *values = [JavaLangEnum getValuesWithIOSClass:enumType];
  if (values == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"%@ is not an enum type", [((IOSClass *) nil_chk(enumType)) getSimpleName]]] autorelease];
  }
  {
    IOSObjectArray *a__ = values;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaLangEnum *enumConst = (*b__++);
      if ([((NSString *) nil_chk([((JavaLangEnum *) nil_chk(enumConst)) name])) isEqual:name]) {
        return enumConst;
      }
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"%@ is not a constant in the enum type %@", name, [((IOSClass *) nil_chk(enumType)) getSimpleName]]] autorelease];
}

+ (IOSObjectArray *)getValuesWithIOSClass:(IOSClass *)enumType {
  @try {
    JavaLangReflectMethod *values = [((IOSClass *) nil_chk(enumType)) getMethod:@"values" parameterTypes:(IOSObjectArray *) check_class_cast(nil, [IOSObjectArray class])];
    [((JavaLangReflectMethod *) nil_chk(values)) setAccessibleWithBoolean:YES];
    return (IOSObjectArray *) check_class_cast([values invokeWithId:enumType withNSObjectArray:(IOSObjectArray *) check_class_cast(nil, [IOSObjectArray class])], [IOSObjectArray class]);
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaLangEnum_set_name__(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaLangEnum *)other {
  [super copyAllFieldsTo:other];
  JavaLangEnum_set_name__(other, name__);
  other->ordinal__ = ordinal__;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:name__ name:@"name_"]];
  return result;
}

@end
