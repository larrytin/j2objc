//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSCharArray.h"
#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "java/lang/Character.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/System.h"

@implementation JavaLangInteger

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaLangInteger_TYPE_ name:@"JavaLangInteger_TYPE_"]];
  return result;
}

static IOSClass * JavaLangInteger_TYPE_;

+ (int)MAX_VALUE {
  return JavaLangInteger_MAX_VALUE;
}

+ (int)MIN_VALUE {
  return JavaLangInteger_MIN_VALUE;
}

+ (int)SIZE {
  return JavaLangInteger_SIZE;
}

+ (IOSClass *)TYPE {
  return JavaLangInteger_TYPE_;
}

- (id)initJavaLangIntegerWithInt:(int)value {
  if (self = [super init]) {
    self->value_ = value;
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithInt:(int)value {
  return [self initJavaLangIntegerWithInt:value];
}

- (id)initWithNSString:(NSString *)string {
  return JreMemDebugAdd([self initJavaLangIntegerWithInt:[JavaLangInteger parseIntWithNSString:string]]);
}

+ (IOSObjectArray *)__exceptions_JavaLangIntegerWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangNumberFormatException getClass] } count:1 type:[IOSClass getClass]];
}

- (char)byteValue {
  return (char) value_;
}

- (int)compareToWithId:(JavaLangInteger *)object {
  if (object != nil && ![object isKindOfClass:[JavaLangInteger class]]) {
    @throw [[[JavaLangClassCastException alloc] init] autorelease];
  }
  if (object == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  return value_ > ((JavaLangInteger *) nil_chk(object))->value_ ? 1 : (value_ < object->value_ ? -1 : 0);
}

+ (JavaLangInteger *)decodeWithNSString:(NSString *)string {
  if (string == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  int length = [((NSString *) nil_chk(string)) length], i = 0;
  if (length == 0) {
    @throw [[[JavaLangNumberFormatException alloc] init] autorelease];
  }
  unichar firstDigit = [string charAtWithInt:i];
  BOOL negative = firstDigit == '-';
  if (negative) {
    if (length == 1) {
      @throw [[[JavaLangNumberFormatException alloc] initWithNSString:string] autorelease];
    }
    firstDigit = [string charAtWithInt:++i];
  }
  int base = 10;
  if (firstDigit == '0') {
    if (++i == length) {
      return [JavaLangInteger valueOfWithInt:0];
    }
    if ((firstDigit = [string charAtWithInt:i]) == 'x' || firstDigit == 'X') {
      if (++i == length) {
        @throw [[[JavaLangNumberFormatException alloc] initWithNSString:string] autorelease];
      }
      base = 16;
    }
    else {
      base = 8;
    }
  }
  else if (firstDigit == '#') {
    if (++i == length) {
      @throw [[[JavaLangNumberFormatException alloc] initWithNSString:string] autorelease];
    }
    base = 16;
  }
  int result = [JavaLangInteger parseWithNSString:string withInt:i withInt:base withBoolean:negative];
  return [JavaLangInteger valueOfWithInt:result];
}

+ (IOSObjectArray *)__exceptions_decodeWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangNumberFormatException getClass] } count:1 type:[IOSClass getClass]];
}

- (double)doubleValue {
  return value_;
}

- (BOOL)isEqual:(id)o {
  return ([o isKindOfClass:[JavaLangInteger class]]) && (value_ == ((JavaLangInteger *) nil_chk(o))->value_);
}

- (float)floatValue {
  return value_;
}

+ (JavaLangInteger *)getIntegerWithNSString:(NSString *)string {
  if (string == nil || [string length] == 0) {
    return nil;
  }
  NSString *prop = [JavaLangSystem getPropertyWithNSString:string];
  if (prop == nil) {
    return nil;
  }
  @try {
    return [JavaLangInteger decodeWithNSString:prop];
  }
  @catch (JavaLangNumberFormatException *ex) {
    return nil;
  }
}

+ (JavaLangInteger *)getIntegerWithNSString:(NSString *)string
                                    withInt:(int)defaultValue {
  if (string == nil || [string length] == 0) {
    return [JavaLangInteger valueOfWithInt:defaultValue];
  }
  NSString *prop = [JavaLangSystem getPropertyWithNSString:string];
  if (prop == nil) {
    return [JavaLangInteger valueOfWithInt:defaultValue];
  }
  @try {
    return [JavaLangInteger decodeWithNSString:prop];
  }
  @catch (JavaLangNumberFormatException *ex) {
    return [JavaLangInteger valueOfWithInt:defaultValue];
  }
}

+ (JavaLangInteger *)getIntegerWithNSString:(NSString *)string
                        withJavaLangInteger:(JavaLangInteger *)defaultValue {
  if (string == nil || [string length] == 0) {
    return defaultValue;
  }
  NSString *prop = [JavaLangSystem getPropertyWithNSString:string];
  if (prop == nil) {
    return defaultValue;
  }
  @try {
    return [JavaLangInteger decodeWithNSString:prop];
  }
  @catch (JavaLangNumberFormatException *ex) {
    return defaultValue;
  }
}

- (NSUInteger)hash {
  return value_;
}

- (int)intValue {
  return value_;
}

- (long long int)longLongValue {
  return value_;
}

+ (int)parseIntWithNSString:(NSString *)string {
  return [JavaLangInteger parseIntWithNSString:string withInt:10];
}

+ (IOSObjectArray *)__exceptions_parseIntWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangNumberFormatException getClass] } count:1 type:[IOSClass getClass]];
}

+ (int)parseIntWithNSString:(NSString *)string
                    withInt:(int)radix {
  if (string == nil || radix < JavaLangCharacter_MIN_RADIX || radix > JavaLangCharacter_MAX_RADIX) {
    @throw [[[JavaLangNumberFormatException alloc] init] autorelease];
  }
  int length = [((NSString *) nil_chk(string)) length], i = 0;
  if (length == 0) {
    @throw [[[JavaLangNumberFormatException alloc] initWithNSString:string] autorelease];
  }
  BOOL negative = [string charAtWithInt:i] == '-';
  if (negative && ++i == length) {
    @throw [[[JavaLangNumberFormatException alloc] initWithNSString:string] autorelease];
  }
  return [JavaLangInteger parseWithNSString:string withInt:i withInt:radix withBoolean:negative];
}

+ (IOSObjectArray *)__exceptions_parseIntWithNSString_withInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangNumberFormatException getClass] } count:1 type:[IOSClass getClass]];
}

+ (int)parseWithNSString:(NSString *)string
                 withInt:(int)offset
                 withInt:(int)radix
             withBoolean:(BOOL)negative {
  int max = (negative ? JavaLangInteger_MIN_VALUE : -JavaLangInteger_MAX_VALUE) / radix;
  int result = 0, length = [((NSString *) nil_chk(string)) length];
  while (offset < length) {
    int digit = [JavaLangCharacter digitWithChar:[string charAtWithInt:offset++] withInt:radix];
    if (digit == -1) {
      @throw [[[JavaLangNumberFormatException alloc] initWithNSString:string] autorelease];
    }
    if (max > result) {
      @throw [[[JavaLangNumberFormatException alloc] initWithNSString:string] autorelease];
    }
    int next = result * radix - digit;
    if (next > result) {
      @throw [[[JavaLangNumberFormatException alloc] initWithNSString:string] autorelease];
    }
    result = next;
  }
  if (!negative) {
    result = -result;
    if (result < 0) {
      @throw [[[JavaLangNumberFormatException alloc] initWithNSString:string] autorelease];
    }
  }
  return result;
}

+ (IOSObjectArray *)__exceptions_parseWithNSString_withInt_withInt_withBoolean_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangNumberFormatException getClass] } count:1 type:[IOSClass getClass]];
}

- (short int)shortValue {
  return (short int) value_;
}

+ (NSString *)toBinaryStringWithInt:(int)i {
  int count = 1, j = i;
  if (i < 0) {
    count = 32;
  }
  else {
    while ((URShiftAssignInt(&j, 1)) != 0) {
      count++;
    }
  }
  IOSCharArray *buffer = [IOSCharArray arrayWithLength:count];
  do {
    (*IOSCharArray_GetRef(buffer, --count)) = (unichar) ((i & 1) + '0');
    URShiftAssignInt(&i, 1);
  }
  while (count > 0);
  return [NSString stringWithOffset:0 length:(int) [buffer count] characters:buffer];
}

+ (NSString *)toHexStringWithInt:(int)i {
  int count = 1, j = i;
  if (i < 0) {
    count = 8;
  }
  else {
    while ((URShiftAssignInt(&j, 4)) != 0) {
      count++;
    }
  }
  IOSCharArray *buffer = [IOSCharArray arrayWithLength:count];
  do {
    int t = i & 15;
    if (t > 9) {
      t = t - 10 + 'a';
    }
    else {
      t += '0';
    }
    (*IOSCharArray_GetRef(buffer, --count)) = (unichar) t;
    URShiftAssignInt(&i, 4);
  }
  while (count > 0);
  return [NSString stringWithOffset:0 length:(int) [buffer count] characters:buffer];
}

+ (NSString *)toOctalStringWithInt:(int)i {
  int count = 1, j = i;
  if (i < 0) {
    count = 11;
  }
  else {
    while ((URShiftAssignInt(&j, 3)) != 0) {
      count++;
    }
  }
  IOSCharArray *buffer = [IOSCharArray arrayWithLength:count];
  do {
    (*IOSCharArray_GetRef(buffer, --count)) = (unichar) ((i & 7) + '0');
    URShiftAssignInt(&i, 3);
  }
  while (count > 0);
  return [NSString stringWithOffset:0 length:(int) [buffer count] characters:buffer];
}

- (NSString *)description {
  return [JavaLangInteger toStringWithInt:value_];
}

+ (NSString *)toStringWithInt:(int)value {
  NSNumber *num = [NSNumber numberWithInt:value];
  return [num stringValue];
}

+ (NSString *)toStringWithInt:(int)i
                      withInt:(int)radix {
  if (radix < JavaLangCharacter_MIN_RADIX || radix > JavaLangCharacter_MAX_RADIX) {
    radix = 10;
  }
  if (i == 0) {
    return @"0";
  }
  int count = 2, j = i;
  BOOL negative = i < 0;
  if (!negative) {
    count = 1;
    j = -i;
  }
  while ((i /= radix) != 0) {
    count++;
  }
  IOSCharArray *buffer = [IOSCharArray arrayWithLength:count];
  do {
    int ch = 0 - (j % radix);
    if (ch > 9) {
      ch = ch - 10 + 'a';
    }
    else {
      ch += '0';
    }
    (*IOSCharArray_GetRef(buffer, --count)) = (unichar) ch;
  }
  while ((j /= radix) != 0);
  if (negative) {
    (*IOSCharArray_GetRef(buffer, 0)) = '-';
  }
  return [NSString stringWithOffset:0 length:(int) [buffer count] characters:buffer];
}

+ (JavaLangInteger *)valueOfWithNSString:(NSString *)string {
  return [JavaLangInteger valueOfWithInt:[JavaLangInteger parseIntWithNSString:string]];
}

+ (IOSObjectArray *)__exceptions_valueOfWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangNumberFormatException getClass] } count:1 type:[IOSClass getClass]];
}

+ (JavaLangInteger *)valueOfWithNSString:(NSString *)string
                                 withInt:(int)radix {
  return [JavaLangInteger valueOfWithInt:[JavaLangInteger parseIntWithNSString:string withInt:radix]];
}

+ (IOSObjectArray *)__exceptions_valueOfWithNSString_withInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangNumberFormatException getClass] } count:1 type:[IOSClass getClass]];
}

+ (int)highestOneBitWithInt:(int)i {
  i |= (i >> 1);
  i |= (i >> 2);
  i |= (i >> 4);
  i |= (i >> 8);
  i |= (i >> 16);
  return (i & ~((int) (((unsigned int) i) >> 1)));
}

+ (int)lowestOneBitWithInt:(int)i {
  return (i & (-i));
}

+ (int)numberOfLeadingZerosWithInt:(int)i {
  i |= i >> 1;
  i |= i >> 2;
  i |= i >> 4;
  i |= i >> 8;
  i |= i >> 16;
  return [JavaLangInteger bitCountWithInt:~i];
}

+ (int)numberOfTrailingZerosWithInt:(int)i {
  return [JavaLangInteger bitCountWithInt:(i & -i) - 1];
}

+ (int)bitCountWithInt:(int)i {
  i -= ((i >> 1) & (int) 0x55555555);
  i = (i & (int) 0x33333333) + ((i >> 2) & (int) 0x33333333);
  i = (((i >> 4) + i) & (int) 0x0F0F0F0F);
  i += (i >> 8);
  i += (i >> 16);
  return (i & (int) 0x0000003F);
}

+ (int)rotateLeftWithInt:(int)i
                 withInt:(int)distance {
  if (distance == 0) {
    return i;
  }
  return ((i << distance) | ((int) (((unsigned int) i) >> (-distance))));
}

+ (int)rotateRightWithInt:(int)i
                  withInt:(int)distance {
  if (distance == 0) {
    return i;
  }
  return (((int) (((unsigned int) i) >> distance)) | (i << (-distance)));
}

+ (int)reverseBytesWithInt:(int)i {
  int b3 = (int) (((unsigned int) i) >> 24);
  int b2 = ((int) (((unsigned int) i) >> 8)) & (int) 0xFF00;
  int b1 = (i & (int) 0xFF00) << 8;
  int b0 = i << 24;
  return (b0 | b1 | b2 | b3);
}

+ (int)reverseWithInt:(int)i {
  i = (i & (int) 0x55555555) << 1 | ((i >> 1) & (int) 0x55555555);
  i = (i & (int) 0x33333333) << 2 | ((i >> 2) & (int) 0x33333333);
  i = (i & (int) 0x0F0F0F0F) << 4 | ((i >> 4) & (int) 0x0F0F0F0F);
  return [JavaLangInteger reverseBytesWithInt:i];
}

+ (int)signumWithInt:(int)i {
  return (i == 0 ? 0 : (i < 0 ? -1 : 1));
}

+ (JavaLangInteger *)valueOfWithInt:(int)i {
  if (i < -128 || i > 127) {
    return [[[JavaLangInteger alloc] initWithInt:i] autorelease];
  }
  return IOSObjectArray_Get(nil_chk([JavaLangInteger_valueOfCache CACHE]), i + 128);
}

+ (void)initialize {
  if (self == [JavaLangInteger class]) {
    JreOperatorRetainedAssign(&JavaLangInteger_TYPE_, nil, (IOSClass *) check_class_cast([[[IOSIntArray arrayWithLength:0] getClass] getComponentType], [IOSClass class]));
  }
}

- (void)copyAllFieldsTo:(JavaLangInteger *)other {
  [super copyAllFieldsTo:other];
  other->value_ = value_;
}

- (const char *)objCType {
  return "i";
}

- (void)getValue:(void *)buffer {
  *((int *) buffer) = value_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  return result;
}

@end
@implementation JavaLangInteger_valueOfCache

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaLangInteger_valueOfCache_CACHE_ name:@"JavaLangInteger_valueOfCache_CACHE_"]];
  return result;
}

static IOSObjectArray * JavaLangInteger_valueOfCache_CACHE_;

+ (IOSObjectArray *)CACHE {
  return JavaLangInteger_valueOfCache_CACHE_;
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

+ (void)initialize {
  if (self == [JavaLangInteger_valueOfCache class]) {
    JreOperatorRetainedAssign(&JavaLangInteger_valueOfCache_CACHE_, nil, [IOSObjectArray arrayWithLength:256 type:[IOSClass classWithClass:[JavaLangInteger class]]]);
    {
      for (int i = -128; i <= 127; i++) {
        IOSObjectArray_Set(JavaLangInteger_valueOfCache_CACHE_, i + 128, [[[JavaLangInteger alloc] initWithInt:i] autorelease]);
      }
    }
  }
}

@end
