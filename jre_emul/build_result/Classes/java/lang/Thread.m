//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: Classes/java/lang/Thread.java
//
//  Created by retechretech on 13-9-4.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/Runnable.h"
#include "java/lang/StackTraceElement.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/ThreadGroup.h"
#include "java/lang/Throwable.h"
#import "java/lang/IllegalThreadStateException.h"
#import "java/lang/InterruptedException.h"
#import "java/lang/NullPointerException.h"
#import "java/lang/Runnable.h"

@implementation JavaLangThread

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaLangThread_systemThreadGroup_ name:@"JavaLangThread_systemThreadGroup_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaLangThread_mainThreadGroup_ name:@"JavaLangThread_mainThreadGroup_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaLangThread_THREAD_ name:@"JavaLangThread_THREAD_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaLangThread_KEY_PREFIX_ name:@"JavaLangThread_KEY_PREFIX_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaLangThread_JAVA_THREAD_ name:@"JavaLangThread_JAVA_THREAD_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaLangThread_TARGET_ name:@"JavaLangThread_TARGET_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaLangThread_THREADGROUP_ name:@"JavaLangThread_THREADGROUP_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaLangThread_THREAD_ID_ name:@"JavaLangThread_THREAD_ID_"]];
  return result;
}

static JavaLangThreadGroup * JavaLangThread_systemThreadGroup_;
static JavaLangThreadGroup * JavaLangThread_mainThreadGroup_;
static long long int JavaLangThread_threadOrdinalNum_;
static NSString * JavaLangThread_THREAD_ = @"Thread-";
static NSString * JavaLangThread_KEY_PREFIX_ = @"JreThread-";
static NSString * JavaLangThread_JAVA_THREAD_ = @"JreThread-JavaThread";
static NSString * JavaLangThread_TARGET_ = @"JreThread-TargetKey";
static NSString * JavaLangThread_THREADGROUP_ = @"JreThread-GroupKey";
static NSString * JavaLangThread_THREAD_ID_ = @"JreThread-IdKey";

+ (JavaLangThreadGroup *)systemThreadGroup {
  return JavaLangThread_systemThreadGroup_;
}

+ (void)setSystemThreadGroup:(JavaLangThreadGroup *)systemThreadGroup {
  JreOperatorRetainedAssign(&JavaLangThread_systemThreadGroup_, nil, systemThreadGroup);
}

+ (JavaLangThreadGroup *)mainThreadGroup {
  return JavaLangThread_mainThreadGroup_;
}

+ (void)setMainThreadGroup:(JavaLangThreadGroup *)mainThreadGroup {
  JreOperatorRetainedAssign(&JavaLangThread_mainThreadGroup_, nil, mainThreadGroup);
}

+ (long long int)threadOrdinalNum {
  return JavaLangThread_threadOrdinalNum_;
}

+ (long long int *)threadOrdinalNumRef {
  return &JavaLangThread_threadOrdinalNum_;
}

+ (int)MAX_PRIORITY {
  return JavaLangThread_MAX_PRIORITY;
}

+ (int)MIN_PRIORITY {
  return JavaLangThread_MIN_PRIORITY;
}

+ (int)NORM_PRIORITY {
  return JavaLangThread_NORM_PRIORITY;
}

+ (NSString *)THREAD {
  return JavaLangThread_THREAD_;
}

+ (NSString *)KEY_PREFIX {
  return JavaLangThread_KEY_PREFIX_;
}

+ (NSString *)JAVA_THREAD {
  return JavaLangThread_JAVA_THREAD_;
}

+ (NSString *)TARGET {
  return JavaLangThread_TARGET_;
}

+ (NSString *)THREADGROUP {
  return JavaLangThread_THREADGROUP_;
}

+ (NSString *)THREAD_ID {
  return JavaLangThread_THREAD_ID_;
}

- (id)init {
  if ((self = [super init])) {
    [self createWithJavaLangThreadGroup:nil withJavaLangRunnable:nil withNSString:JavaLangThread_THREAD_ withLongInt:0 withBOOL:YES];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  if ((self = [super init])) {
    [self createWithJavaLangThreadGroup:nil withJavaLangRunnable:runnable withNSString:JavaLangThread_THREAD_ withLongInt:0 withBOOL:YES];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaLangRunnable:(id<JavaLangRunnable>)runnable
                  withNSString:(NSString *)threadName {
  if ((self = [super init])) {
    [self createWithJavaLangThreadGroup:nil withJavaLangRunnable:runnable withNSString:threadName withLongInt:0 withBOOL:YES];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithNSString:(NSString *)threadName {
  if ((self = [super init])) {
    [self createWithJavaLangThreadGroup:nil withJavaLangRunnable:nil withNSString:threadName withLongInt:0 withBOOL:YES];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaLangThreadGroup:(JavaLangThreadGroup *)group
             withJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  if ((self = [super init])) {
    [self createWithJavaLangThreadGroup:group withJavaLangRunnable:runnable withNSString:JavaLangThread_THREAD_ withLongInt:0 withBOOL:YES];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaLangThreadGroup:(JavaLangThreadGroup *)group
             withJavaLangRunnable:(id<JavaLangRunnable>)runnable
                     withNSString:(NSString *)threadName
                      withLongInt:(long long int)stack {
  if ((self = [super init])) {
    [self createWithJavaLangThreadGroup:group withJavaLangRunnable:runnable withNSString:threadName withLongInt:stack withBOOL:YES];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaLangThreadGroup:(JavaLangThreadGroup *)group
             withJavaLangRunnable:(id<JavaLangRunnable>)runnable
                     withNSString:(NSString *)threadName {
  if ((self = [super init])) {
    [self createWithJavaLangThreadGroup:group withJavaLangRunnable:runnable withNSString:threadName withLongInt:0 withBOOL:YES];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaLangThreadGroup:(JavaLangThreadGroup *)group
                     withNSString:(NSString *)threadName {
  if ((self = [super init])) {
    [self createWithJavaLangThreadGroup:group withJavaLangRunnable:nil withNSString:threadName withLongInt:0 withBOOL:YES];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaLangThreadGroup:(JavaLangThreadGroup *)group
                     withNSString:(NSString *)threadName
                         withBOOL:(BOOL)createThread {
  if ((self = [super init])) {
    [self createWithJavaLangThreadGroup:group withJavaLangRunnable:nil withNSString:threadName withLongInt:0 withBOOL:createThread];
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)createWithJavaLangThreadGroup:(JavaLangThreadGroup *)group
                 withJavaLangRunnable:(id<JavaLangRunnable>)target
                         withNSString:(NSString *)name
                          withLongInt:(long long int)stack
                             withBOOL:(BOOL)createThread   {
    NSThread *currentThread = [NSThread currentThread];
    NSMutableDictionary *currentThreadData = [currentThread threadDictionary];
    JavaLangThreadGroup *threadGroup = nil;
    if (group != nil) {
      threadGroup = group;
    } else {
      threadGroup = [currentThreadData objectForKey:JavaLangThread_THREADGROUP_];
    }
    assert(threadGroup != nil);
    
    NSThread *thread;
    NSMutableDictionary *newThreadData;
    if (createThread) {
      if (!target) {
        // If there isn't a Runnable, then this should be a subclass of Thread
        // with run() overwritten (or it does nothing, like in Java).
        target = self;
      }
      thread = [[NSThread alloc] initWithTarget:target
      selector:@selector(run)
      object:nil];
      #if ! __has_feature(objc_arc)
      [thread autorelease];
      #endif
      newThreadData = [thread threadDictionary];
      
      // Copy thread data from parent thread, except for data from this class.
      for (id key in currentThreadData) {
        if ([key isKindOfClass:[NSString class]] && ![key hasPrefix:JavaLangThread_KEY_PREFIX_]) {
          [newThreadData setObject:[currentThreadData objectForKey:key] forKey:key];
        }
      }
    } else {
      thread = currentThread;
      newThreadData = currentThreadData;
    }
    
    // Add data for this thread.
    [newThreadData setObject:threadGroup forKey:JavaLangThread_THREADGROUP_];
    if (target != nil) {
      [newThreadData setObject:target forKey:JavaLangThread_TARGET_];
    }
    if (stack != 0L) {
      [thread setStackSize:(NSUInteger) stack];
    }
    [thread setThreadPriority:[NSThread threadPriority]];
    NSNumber *threadId = [NSNumber numberWithLongLong:[JavaLangThread getNextThreadId]];
    [newThreadData setObject:threadId forKey:JavaLangThread_THREAD_ID_];
    
    if (!name) {
      JavaLangNullPointerException *npe = [[JavaLangNullPointerException alloc] init];
      #if !__has_feature(objc_arc)
      [npe autorelease];
      #endif
      @throw npe;
    }
    if ([name isEqual:JavaLangThread_THREAD_]) {
      name = [name stringByAppendingFormat:@"%@", threadId];
    }
    [thread setName:name];
    [self setNameWithNSString:name];
    
    int priority = [currentThread isMainThread] ? 5 : [currentThread threadPriority] * 10;
    [self setPriority0WithInt:priority];
    
    [group addWithJavaLangThread:self];
    nsThread_ = thread;
    #if !__has_feature(objc_arc)
    [thread retain];
    #endif
    [newThreadData setObject:self forKey:JavaLangThread_JAVA_THREAD_];
  }

+ (void)initializeThreadClass   {
    NSThread *currentThread = [NSThread currentThread];
    [currentThread setName:@"main"];
    if (JavaLangThread_systemThreadGroup_ == nil) {
      JavaLangThread_systemThreadGroup_ = [[JavaLangThreadGroup alloc] init];
      JavaLangThread_mainThreadGroup_ =
      [[JavaLangThreadGroup alloc]
      initWithJavaLangThreadGroup:JavaLangThread_systemThreadGroup_
      withNSString:@"main"];
      #if ! __has_feature(objc_arc)
      [JavaLangThread_systemThreadGroup_ autorelease];
      [JavaLangThread_mainThreadGroup_ autorelease];
      #endif
    }
    
    // Now there is a main threadgroup,
    (void) [[JavaLangThread alloc]
    initWithJavaLangThreadGroup:JavaLangThread_mainThreadGroup_
    withNSString:@"main"
    withBOOL:FALSE];
  }

+ (JavaLangThread *)currentThread   {
    NSDictionary *threadData = [[NSThread currentThread] threadDictionary];
    JavaLangThread *thread = [threadData objectForKey:JavaLangThread_JAVA_THREAD_];
    if (!thread) {
      NSString *name = [[NSThread currentThread] name];
      thread =
      [[JavaLangThread alloc] initWithJavaLangThreadGroup:JavaLangThread_mainThreadGroup_
      withNSString:name
      withBOOL:FALSE];
      #if !__has_feature(objc_arc)
      [thread autorelease];
      #endif
    }
    return thread;
  }

- (void)start   {
    NSThread *nativeThread = (NSThread *) nsThread_;
    if ([nativeThread isExecuting]) {
      JavaLangIllegalThreadStateException *e =
      [[JavaLangIllegalThreadStateException alloc]
      initWithNSString:@"This thread was already started!"];
      #if !__has_feature(objc_arc)
      [e autorelease];
      #endif
      @throw e;
    }
    [[self getThreadGroup] addWithJavaLangThread:self];
    [(NSThread *) nativeThread start];
  }

- (void)run   {
    NSDictionary *threadData = [(NSThread *) nsThread_ threadDictionary];
    id<JavaLangRunnable> target =
    (id<JavaLangRunnable>) [threadData objectForKey:JavaLangThread_TARGET_];
    if (target && target != self) {
      @autoreleasepool {  // also needed by ARC
      [target run];
    }
  }
}

- (BOOL)isDaemon {
  return isDaemon__;
}

- (void)setDaemonWithBOOL:(BOOL)isDaemon {
  self->isDaemon__ = isDaemon;
}

- (long long int)getId   {
    NSDictionary *threadData = [[NSThread currentThread] threadDictionary];
    NSNumber *threadId = [threadData objectForKey:JavaLangThread_THREAD_ID_];
    return [threadId longLongValue];
  }

- (NSString *)getName   {
    return [(NSThread *) nsThread_ name];
  }

- (void)setNameWithNSString:(NSString *)name   {
    if (!name) {
      JavaLangNullPointerException *npe = [[JavaLangNullPointerException alloc] init];
      #if !__has_feature(objc_arc)
      [npe autorelease];
      #endif
      @throw npe;
    }
    [(NSThread *) nsThread_ setName:name];
  }

- (int)getPriority   {
    double nativePriority = [(NSThread *) nsThread_ threadPriority];
    return (int) (nativePriority * 10);
  }

- (void)setPriorityWithInt:(int)priority {
  [self checkAccess];
  if (priority > JavaLangThread_MAX_PRIORITY || priority < JavaLangThread_MIN_PRIORITY) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Wrong Thread priority value"] autorelease];
  }
  JavaLangThreadGroup *threadGroup = [self getThreadGroup];
  priority = (priority > [((JavaLangThreadGroup *) nil_chk(threadGroup)) getMaxPriority]) ? [threadGroup getMaxPriority] : priority;
  [self setPriority0WithInt:priority];
}

- (void)setPriority0WithInt:(int)priority   {
    [(NSThread *) nsThread_ setThreadPriority:priority / 10.0];
  }

- (JavaLangThread_StateEnum *)getState   {
    if ([(NSThread *) nsThread_ isCancelled] || [(NSThread *) nsThread_ isFinished]) {
      return [JavaLangThread_StateEnum TERMINATED];
    }
    if ([(NSThread *) nsThread_ isExecuting]) {
      return [JavaLangThread_StateEnum RUNNABLE];
    }
    return [JavaLangThread_StateEnum NEW];
  }

- (JavaLangThreadGroup *)getThreadGroup   {
    NSDictionary *threadData = [(NSThread *) nsThread_ threadDictionary];
    return (JavaLangThreadGroup *) [threadData objectForKey:JavaLangThread_THREADGROUP_];
  }

- (IOSObjectArray *)getStackTrace {
  IOSObjectArray *exceptionTrace = [((JavaLangThrowable *) [[[JavaLangThrowable alloc] init] autorelease]) getStackTrace];
  int firstElement = 0;
  int lastElement = (int) [((IOSObjectArray *) nil_chk(exceptionTrace)) count];
  for (int i = 0; i < (int) [exceptionTrace count]; i++) {
    NSString *methodName = [((JavaLangStackTraceElement *) nil_chk([exceptionTrace objectAtIndex:i])) getMethodName];
    if ([((NSString *) nil_chk(methodName)) contains:@"getStackTrace"]) {
      firstElement = i;
      continue;
    }
    if ([methodName contains:@"mainWithNSStringArray:"]) {
      lastElement = i;
      break;
    }
  }
  int nFrames = lastElement - firstElement + 1;
  if (nFrames < 0) {
    return exceptionTrace;
  }
  if (firstElement + nFrames > (int) [exceptionTrace count]) {
    nFrames = (int) [exceptionTrace count] - firstElement;
  }
  IOSObjectArray *result = [IOSObjectArray arrayWithLength:nFrames type:[IOSClass classWithClass:[JavaLangStackTraceElement class]]];
  [JavaLangSystem arraycopyWithId:exceptionTrace withInt:firstElement withId:result withInt:0 withInt:nFrames];
  return result;
}

- (void)interrupt   {
    [(NSThread *) nsThread_ cancel];
  }

+ (BOOL)interrupted {
  return [((JavaLangThread *) nil_chk([JavaLangThread currentThread])) isInterrupted];
}

- (BOOL)isInterrupted   {
    return [(NSThread *) nsThread_ isCancelled];
  }

- (void)join {
  [self joinWithLongInt:JavaLangLong_MAX_VALUE];
}

+ (IOSObjectArray *)__exceptions_join {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangInterruptedException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)joinWithLongInt:(long long int)millis {
  [self joinWithLongInt:millis withInt:0];
}

+ (IOSObjectArray *)__exceptions_joinWithLongInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangInterruptedException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)joinWithLongInt:(long long int)millis
                withInt:(int)nanos {
  long long int millisToWait = millis + (nanos >= 500000 ? 1 : 0);
  [self join0WithLongInt:millisToWait withInt:JavaLangThread_POLL_INTERVAL];
}

+ (IOSObjectArray *)__exceptions_joinWithLongInt_withInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangInterruptedException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)join0WithLongInt:(long long int)millis
                 withInt:(int)pollInterval   {
    NSThread *thread = (NSThread *) nsThread_;
    while (millis > 0 && [thread isExecuting]) {
      millis -= pollInterval;
      double timeInterval = pollInterval / 1000.0; // NSThread uses seconds.
      [NSThread sleepForTimeInterval:timeInterval];
    }
    if ([thread isCancelled]) {
      JavaLangInterruptedException *npe = [[JavaLangInterruptedException alloc] init];
      #if !__has_feature(objc_arc)
      [npe autorelease];
      #endif
      @throw npe;
    }
  }

- (BOOL)isAlive   {
    return [(NSThread *) nsThread_ isExecuting];
  }

- (void)checkAccess {
}

+ (void)sleepWithLongInt:(long long int)millis {
  [JavaLangThread sleepWithLongInt:millis withInt:0];
}

+ (IOSObjectArray *)__exceptions_sleepWithLongInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangInterruptedException getClass] } count:1 type:[IOSClass getClass]];
}

+ (void)sleepWithLongInt:(long long int)millis
                 withInt:(int)nanos   {
    long long ticks = (millis * 1000000L) + nanos;
    NSTimeInterval ti = ticks / 1000000000.0;
    [NSThread sleepForTimeInterval:ti];
  }

+ (void)yield {
  [((JavaLangThread *) nil_chk([JavaLangThread currentThread])) yield0];
}

- (void)yield0   {
    [NSThread sleepForTimeInterval:0];
  }

+ (long long int)getNextThreadId {
  @synchronized([self class]) {
    {
      return ++JavaLangThread_threadOrdinalNum_;
    }
  }
}

- (NSString *)description {
  JavaLangThreadGroup *group = [self getThreadGroup];
  if (group != nil) {
    return [NSString stringWithFormat:@"Thread[%@,%d,%@]", [self getName], [self getPriority], [group getName]];
  }
  return [NSString stringWithFormat:@"Thread[%@,%d,]", [self getName], [self getPriority]];
}

+ (void)initialize {
  if (self == [JavaLangThread class]) {
    JavaLangThread_threadOrdinalNum_ = 1;
    {
      [JavaLangThread initializeThreadClass];
    }
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JavaLangThread_set_nsThread_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JavaLangThread *)other {
  [super copyAllFieldsTo:other];
  other->isDaemon__ = isDaemon__;
  JavaLangThread_set_nsThread_(other, nsThread_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:nsThread_ name:@"nsThread"]];
  return result;
}

@end

static JavaLangThread_StateEnum *JavaLangThread_StateEnum_NEW;
static JavaLangThread_StateEnum *JavaLangThread_StateEnum_RUNNABLE;
static JavaLangThread_StateEnum *JavaLangThread_StateEnum_BLOCKED;
static JavaLangThread_StateEnum *JavaLangThread_StateEnum_WAITING;
static JavaLangThread_StateEnum *JavaLangThread_StateEnum_TIMED_WAITING;
static JavaLangThread_StateEnum *JavaLangThread_StateEnum_TERMINATED;
IOSObjectArray *JavaLangThread_StateEnum_values;

@implementation JavaLangThread_StateEnum

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaLangThread_StateEnum_values name:@"enumValues"]];
  return result;
}

+ (JavaLangThread_StateEnum *)NEW {
  return JavaLangThread_StateEnum_NEW;
}
+ (JavaLangThread_StateEnum *)RUNNABLE {
  return JavaLangThread_StateEnum_RUNNABLE;
}
+ (JavaLangThread_StateEnum *)BLOCKED {
  return JavaLangThread_StateEnum_BLOCKED;
}
+ (JavaLangThread_StateEnum *)WAITING {
  return JavaLangThread_StateEnum_WAITING;
}
+ (JavaLangThread_StateEnum *)TIMED_WAITING {
  return JavaLangThread_StateEnum_TIMED_WAITING;
}
+ (JavaLangThread_StateEnum *)TERMINATED {
  return JavaLangThread_StateEnum_TERMINATED;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

- (id)initWithNSString:(NSString *)__name withInt:(int)__ordinal {
  return JreMemDebugAdd([super initWithNSString:__name withInt:__ordinal]);
}

+ (void)initialize {
  if (self == [JavaLangThread_StateEnum class]) {
    JavaLangThread_StateEnum_NEW = [[JavaLangThread_StateEnum alloc] initWithNSString:@"NEW" withInt:0];
    JavaLangThread_StateEnum_RUNNABLE = [[JavaLangThread_StateEnum alloc] initWithNSString:@"RUNNABLE" withInt:1];
    JavaLangThread_StateEnum_BLOCKED = [[JavaLangThread_StateEnum alloc] initWithNSString:@"BLOCKED" withInt:2];
    JavaLangThread_StateEnum_WAITING = [[JavaLangThread_StateEnum alloc] initWithNSString:@"WAITING" withInt:3];
    JavaLangThread_StateEnum_TIMED_WAITING = [[JavaLangThread_StateEnum alloc] initWithNSString:@"TIMED_WAITING" withInt:4];
    JavaLangThread_StateEnum_TERMINATED = [[JavaLangThread_StateEnum alloc] initWithNSString:@"TERMINATED" withInt:5];
    JavaLangThread_StateEnum_values = [[IOSObjectArray alloc] initWithObjects:(id[]){ JavaLangThread_StateEnum_NEW, JavaLangThread_StateEnum_RUNNABLE, JavaLangThread_StateEnum_BLOCKED, JavaLangThread_StateEnum_WAITING, JavaLangThread_StateEnum_TIMED_WAITING, JavaLangThread_StateEnum_TERMINATED, nil } count:6 type:[IOSClass classWithClass:[JavaLangThread_StateEnum class]]];
  }
}

+ (IOSObjectArray *)values {
  return [IOSObjectArray arrayWithArray:JavaLangThread_StateEnum_values];
}

+ (JavaLangThread_StateEnum *)valueOfWithNSString:(NSString *)name {
  for (int i = 0; i < [JavaLangThread_StateEnum_values count]; i++) {
    JavaLangThread_StateEnum *e = [JavaLangThread_StateEnum_values objectAtIndex:i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

@end
