//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSCharArray.h"
#include "IOSClass.h"
#include "IOSIntArray.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/Reader.h"
#include "java/lang/StringBuilder.h"
#include "org/xml/sax/ContentHandler.h"
#include "org/xml/sax/DTDHandler.h"
#include "org/xml/sax/EntityResolver.h"
#include "org/xml/sax/ErrorHandler.h"
#include "org/xml/sax/InputSource.h"
#include "org/xml/sax/SAXException.h"
#include "org/xml/sax/SAXNotRecognizedException.h"
#include "org/xml/sax/SAXNotSupportedException.h"
#include "org/xml/sax/SAXParseException.h"
#include "org/xml/sax/helpers/DefaultHandler.h"
#include "org/xmlpull/v1/XmlPullParser.h"
#include "org/xmlpull/v1/XmlPullParserException.h"
#include "org/xmlpull/v1/XmlPullParserFactory.h"
#include "org/xmlpull/v1/sax2/Driver.h"

@implementation OrgXmlpullV1Sax2Driver

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgXmlpullV1Sax2Driver_DECLARATION_HANDLER_PROPERTY_ name:@"OrgXmlpullV1Sax2Driver_DECLARATION_HANDLER_PROPERTY_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgXmlpullV1Sax2Driver_LEXICAL_HANDLER_PROPERTY_ name:@"OrgXmlpullV1Sax2Driver_LEXICAL_HANDLER_PROPERTY_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgXmlpullV1Sax2Driver_NAMESPACES_FEATURE_ name:@"OrgXmlpullV1Sax2Driver_NAMESPACES_FEATURE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgXmlpullV1Sax2Driver_NAMESPACE_PREFIXES_FEATURE_ name:@"OrgXmlpullV1Sax2Driver_NAMESPACE_PREFIXES_FEATURE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgXmlpullV1Sax2Driver_VALIDATION_FEATURE_ name:@"OrgXmlpullV1Sax2Driver_VALIDATION_FEATURE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgXmlpullV1Sax2Driver_APACHE_SCHEMA_VALIDATION_FEATURE_ name:@"OrgXmlpullV1Sax2Driver_APACHE_SCHEMA_VALIDATION_FEATURE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgXmlpullV1Sax2Driver_APACHE_DYNAMIC_VALIDATION_FEATURE_ name:@"OrgXmlpullV1Sax2Driver_APACHE_DYNAMIC_VALIDATION_FEATURE_"]];
  return result;
}

static NSString * OrgXmlpullV1Sax2Driver_DECLARATION_HANDLER_PROPERTY_ = @"http://xml.org/sax/properties/declaration-handler";
static NSString * OrgXmlpullV1Sax2Driver_LEXICAL_HANDLER_PROPERTY_ = @"http://xml.org/sax/properties/lexical-handler";
static NSString * OrgXmlpullV1Sax2Driver_NAMESPACES_FEATURE_ = @"http://xml.org/sax/features/namespaces";
static NSString * OrgXmlpullV1Sax2Driver_NAMESPACE_PREFIXES_FEATURE_ = @"http://xml.org/sax/features/namespace-prefixes";
static NSString * OrgXmlpullV1Sax2Driver_VALIDATION_FEATURE_ = @"http://xml.org/sax/features/validation";
static NSString * OrgXmlpullV1Sax2Driver_APACHE_SCHEMA_VALIDATION_FEATURE_ = @"http://apache.org/xml/features/validation/schema";
static NSString * OrgXmlpullV1Sax2Driver_APACHE_DYNAMIC_VALIDATION_FEATURE_ = @"http://apache.org/xml/features/validation/dynamic";

+ (NSString *)DECLARATION_HANDLER_PROPERTY {
  return OrgXmlpullV1Sax2Driver_DECLARATION_HANDLER_PROPERTY_;
}

+ (NSString *)LEXICAL_HANDLER_PROPERTY {
  return OrgXmlpullV1Sax2Driver_LEXICAL_HANDLER_PROPERTY_;
}

+ (NSString *)NAMESPACES_FEATURE {
  return OrgXmlpullV1Sax2Driver_NAMESPACES_FEATURE_;
}

+ (NSString *)NAMESPACE_PREFIXES_FEATURE {
  return OrgXmlpullV1Sax2Driver_NAMESPACE_PREFIXES_FEATURE_;
}

+ (NSString *)VALIDATION_FEATURE {
  return OrgXmlpullV1Sax2Driver_VALIDATION_FEATURE_;
}

+ (NSString *)APACHE_SCHEMA_VALIDATION_FEATURE {
  return OrgXmlpullV1Sax2Driver_APACHE_SCHEMA_VALIDATION_FEATURE_;
}

+ (NSString *)APACHE_DYNAMIC_VALIDATION_FEATURE {
  return OrgXmlpullV1Sax2Driver_APACHE_DYNAMIC_VALIDATION_FEATURE_;
}

- (id)init {
  if (self = [super init]) {
    OrgXmlpullV1Sax2Driver_set_contentHandler_(self, [[[OrgXmlSaxHelpersDefaultHandler alloc] init] autorelease]);
    OrgXmlpullV1Sax2Driver_set_errorHandler_(self, [[[OrgXmlSaxHelpersDefaultHandler alloc] init] autorelease]);
    OrgXmlpullV1XmlPullParserFactory *factory = [OrgXmlpullV1XmlPullParserFactory newInstance];
    [((OrgXmlpullV1XmlPullParserFactory *) nil_chk(factory)) setNamespaceAwareWithBoolean:YES];
    OrgXmlpullV1Sax2Driver_set_pp_(self, [factory newPullParser]);
    JreMemDebugAdd(self);
  }
  return self;
}

+ (IOSObjectArray *)__exceptions_OrgXmlpullV1Sax2Driver {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlpullV1XmlPullParserException getClass] } count:1 type:[IOSClass getClass]];
}

- (id)initWithOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)pp {
  if (self = [super init]) {
    OrgXmlpullV1Sax2Driver_set_contentHandler_(self, [[[OrgXmlSaxHelpersDefaultHandler alloc] init] autorelease]);
    OrgXmlpullV1Sax2Driver_set_errorHandler_(self, [[[OrgXmlSaxHelpersDefaultHandler alloc] init] autorelease]);
    OrgXmlpullV1Sax2Driver_set_pp_(self, pp);
    JreMemDebugAdd(self);
  }
  return self;
}

+ (IOSObjectArray *)__exceptions_OrgXmlpullV1Sax2DriverWithOrgXmlpullV1XmlPullParser_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlpullV1XmlPullParserException getClass] } count:1 type:[IOSClass getClass]];
}

- (int)getLength {
  return [((id<OrgXmlpullV1XmlPullParser>) nil_chk(pp_)) getAttributeCount];
}

- (NSString *)getURIWithInt:(int)index {
  return [((id<OrgXmlpullV1XmlPullParser>) nil_chk(pp_)) getAttributeNamespaceWithInt:index];
}

- (NSString *)getLocalNameWithInt:(int)index {
  return [((id<OrgXmlpullV1XmlPullParser>) nil_chk(pp_)) getAttributeNameWithInt:index];
}

- (NSString *)getQNameWithInt:(int)index {
  NSString *prefix = [((id<OrgXmlpullV1XmlPullParser>) nil_chk(pp_)) getAttributePrefixWithInt:index];
  if (prefix != nil) {
    return [NSString stringWithFormat:@"%@:%@", prefix, [pp_ getAttributeNameWithInt:index]];
  }
  else {
    return [pp_ getAttributeNameWithInt:index];
  }
}

- (NSString *)getTypeWithInt:(int)index {
  return [((id<OrgXmlpullV1XmlPullParser>) nil_chk(pp_)) getAttributeTypeWithInt:index];
}

- (NSString *)getValueWithInt:(int)index {
  return [((id<OrgXmlpullV1XmlPullParser>) nil_chk(pp_)) getAttributeValueWithInt:index];
}

- (int)getIndexWithNSString:(NSString *)uri
               withNSString:(NSString *)localName {
  for (int i = 0; i < [((id<OrgXmlpullV1XmlPullParser>) nil_chk(pp_)) getAttributeCount]; i++) {
    if ([((NSString *) nil_chk([pp_ getAttributeNamespaceWithInt:i])) isEqual:uri] && [((NSString *) nil_chk([pp_ getAttributeNameWithInt:i])) isEqual:localName]) {
      return i;
    }
  }
  return -1;
}

- (int)getIndexWithNSString:(NSString *)qName {
  for (int i = 0; i < [((id<OrgXmlpullV1XmlPullParser>) nil_chk(pp_)) getAttributeCount]; i++) {
    if ([((NSString *) nil_chk([pp_ getAttributeNameWithInt:i])) isEqual:qName]) {
      return i;
    }
  }
  return -1;
}

- (NSString *)getTypeWithNSString:(NSString *)uri
                     withNSString:(NSString *)localName {
  for (int i = 0; i < [((id<OrgXmlpullV1XmlPullParser>) nil_chk(pp_)) getAttributeCount]; i++) {
    if ([((NSString *) nil_chk([pp_ getAttributeNamespaceWithInt:i])) isEqual:uri] && [((NSString *) nil_chk([pp_ getAttributeNameWithInt:i])) isEqual:localName]) {
      return [pp_ getAttributeTypeWithInt:i];
    }
  }
  return nil;
}

- (NSString *)getTypeWithNSString:(NSString *)qName {
  for (int i = 0; i < [((id<OrgXmlpullV1XmlPullParser>) nil_chk(pp_)) getAttributeCount]; i++) {
    if ([((NSString *) nil_chk([pp_ getAttributeNameWithInt:i])) isEqual:qName]) {
      return [pp_ getAttributeTypeWithInt:i];
    }
  }
  return nil;
}

- (NSString *)getValueWithNSString:(NSString *)uri
                      withNSString:(NSString *)localName {
  return [((id<OrgXmlpullV1XmlPullParser>) nil_chk(pp_)) getAttributeValueWithNSString:uri withNSString:localName];
}

- (NSString *)getValueWithNSString:(NSString *)qName {
  return [((id<OrgXmlpullV1XmlPullParser>) nil_chk(pp_)) getAttributeValueWithNSString:nil withNSString:qName];
}

- (NSString *)getPublicId {
  return nil;
}

- (NSString *)getSystemId {
  return systemId_;
}

- (int)getLineNumber {
  return [((id<OrgXmlpullV1XmlPullParser>) nil_chk(pp_)) getLineNumber];
}

- (int)getColumnNumber {
  return [((id<OrgXmlpullV1XmlPullParser>) nil_chk(pp_)) getColumnNumber];
}

- (BOOL)getFeatureWithNSString:(NSString *)name {
  if ([((NSString *) nil_chk(OrgXmlpullV1Sax2Driver_NAMESPACES_FEATURE_)) isEqual:name]) {
    return [((id<OrgXmlpullV1XmlPullParser>) nil_chk(pp_)) getFeatureWithNSString:[OrgXmlpullV1XmlPullParser FEATURE_PROCESS_NAMESPACES]];
  }
  else if ([((NSString *) nil_chk(OrgXmlpullV1Sax2Driver_NAMESPACE_PREFIXES_FEATURE_)) isEqual:name]) {
    return [((id<OrgXmlpullV1XmlPullParser>) nil_chk(pp_)) getFeatureWithNSString:[OrgXmlpullV1XmlPullParser FEATURE_REPORT_NAMESPACE_ATTRIBUTES]];
  }
  else if ([((NSString *) nil_chk(OrgXmlpullV1Sax2Driver_VALIDATION_FEATURE_)) isEqual:name]) {
    return [((id<OrgXmlpullV1XmlPullParser>) nil_chk(pp_)) getFeatureWithNSString:[OrgXmlpullV1XmlPullParser FEATURE_VALIDATION]];
  }
  else {
    return [((id<OrgXmlpullV1XmlPullParser>) nil_chk(pp_)) getFeatureWithNSString:name];
  }
}

+ (IOSObjectArray *)__exceptions_getFeatureWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlSaxSAXNotRecognizedException getClass], [OrgXmlSaxSAXNotSupportedException getClass] } count:2 type:[IOSClass getClass]];
}

- (void)setFeatureWithNSString:(NSString *)name
                   withBoolean:(BOOL)value {
  @try {
    if ([((NSString *) nil_chk(OrgXmlpullV1Sax2Driver_NAMESPACES_FEATURE_)) isEqual:name]) {
      [((id<OrgXmlpullV1XmlPullParser>) nil_chk(pp_)) setFeatureWithNSString:[OrgXmlpullV1XmlPullParser FEATURE_PROCESS_NAMESPACES] withBoolean:value];
    }
    else if ([((NSString *) nil_chk(OrgXmlpullV1Sax2Driver_NAMESPACE_PREFIXES_FEATURE_)) isEqual:name]) {
      if ([((id<OrgXmlpullV1XmlPullParser>) nil_chk(pp_)) getFeatureWithNSString:[OrgXmlpullV1XmlPullParser FEATURE_REPORT_NAMESPACE_ATTRIBUTES]] != value) {
        [pp_ setFeatureWithNSString:[OrgXmlpullV1XmlPullParser FEATURE_REPORT_NAMESPACE_ATTRIBUTES] withBoolean:value];
      }
    }
    else if ([((NSString *) nil_chk(OrgXmlpullV1Sax2Driver_VALIDATION_FEATURE_)) isEqual:name]) {
      [((id<OrgXmlpullV1XmlPullParser>) nil_chk(pp_)) setFeatureWithNSString:[OrgXmlpullV1XmlPullParser FEATURE_VALIDATION] withBoolean:value];
    }
    else {
      [((id<OrgXmlpullV1XmlPullParser>) nil_chk(pp_)) setFeatureWithNSString:name withBoolean:value];
    }
  }
  @catch (OrgXmlpullV1XmlPullParserException *ex) {
  }
}

+ (IOSObjectArray *)__exceptions_setFeatureWithNSString_withBoolean_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlSaxSAXNotRecognizedException getClass], [OrgXmlSaxSAXNotSupportedException getClass] } count:2 type:[IOSClass getClass]];
}

- (id)getPropertyWithNSString:(NSString *)name {
  if ([((NSString *) nil_chk(OrgXmlpullV1Sax2Driver_DECLARATION_HANDLER_PROPERTY_)) isEqual:name]) {
    return nil;
  }
  else if ([((NSString *) nil_chk(OrgXmlpullV1Sax2Driver_LEXICAL_HANDLER_PROPERTY_)) isEqual:name]) {
    return nil;
  }
  else {
    return [((id<OrgXmlpullV1XmlPullParser>) nil_chk(pp_)) getPropertyWithNSString:name];
  }
}

+ (IOSObjectArray *)__exceptions_getPropertyWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlSaxSAXNotRecognizedException getClass], [OrgXmlSaxSAXNotSupportedException getClass] } count:2 type:[IOSClass getClass]];
}

- (void)setPropertyWithNSString:(NSString *)name
                         withId:(id)value {
  if ([((NSString *) nil_chk(OrgXmlpullV1Sax2Driver_DECLARATION_HANDLER_PROPERTY_)) isEqual:name]) {
    @throw [[[OrgXmlSaxSAXNotSupportedException alloc] initWithNSString:[NSString stringWithFormat:@"not supported setting property %@", name]] autorelease];
  }
  else if ([((NSString *) nil_chk(OrgXmlpullV1Sax2Driver_LEXICAL_HANDLER_PROPERTY_)) isEqual:name]) {
    @throw [[[OrgXmlSaxSAXNotSupportedException alloc] initWithNSString:[NSString stringWithFormat:@"not supported setting property %@", name]] autorelease];
  }
  else {
    @try {
      [((id<OrgXmlpullV1XmlPullParser>) nil_chk(pp_)) setPropertyWithNSString:name withId:value];
    }
    @catch (OrgXmlpullV1XmlPullParserException *ex) {
      @throw [[[OrgXmlSaxSAXNotSupportedException alloc] initWithNSString:[NSString stringWithFormat:@"not supported set property %@: %@", name, ex]] autorelease];
    }
  }
}

+ (IOSObjectArray *)__exceptions_setPropertyWithNSString_withId_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlSaxSAXNotRecognizedException getClass], [OrgXmlSaxSAXNotSupportedException getClass] } count:2 type:[IOSClass getClass]];
}

- (void)setEntityResolverWithOrgXmlSaxEntityResolver:(id<OrgXmlSaxEntityResolver>)resolver {
}

- (id<OrgXmlSaxEntityResolver>)getEntityResolver {
  return nil;
}

- (void)setDTDHandlerWithOrgXmlSaxDTDHandler:(id<OrgXmlSaxDTDHandler>)handler {
}

- (id<OrgXmlSaxDTDHandler>)getDTDHandler {
  return nil;
}

- (void)setContentHandlerWithOrgXmlSaxContentHandler:(id<OrgXmlSaxContentHandler>)handler {
  OrgXmlpullV1Sax2Driver_set_contentHandler_(self, handler);
}

- (id<OrgXmlSaxContentHandler>)getContentHandler {
  return contentHandler_;
}

- (void)setErrorHandlerWithOrgXmlSaxErrorHandler:(id<OrgXmlSaxErrorHandler>)handler {
  OrgXmlpullV1Sax2Driver_set_errorHandler_(self, handler);
}

- (id<OrgXmlSaxErrorHandler>)getErrorHandler {
  return errorHandler_;
}

- (void)parseWithOrgXmlSaxInputSource:(OrgXmlSaxInputSource *)source {
  OrgXmlpullV1Sax2Driver_set_systemId_(self, [((OrgXmlSaxInputSource *) nil_chk(source)) getSystemId]);
  [((id<OrgXmlSaxContentHandler>) nil_chk(contentHandler_)) setDocumentLocatorWithOrgXmlSaxLocator:self];
  JavaIoReader *reader = [source getCharacterStream];
  @try {
    if (reader == nil) {
      JavaIoInputStream *stream = [source getByteStream];
      NSString *encoding = [source getEncoding];
      if (stream == nil) {
        OrgXmlpullV1Sax2Driver_set_systemId_(self, [source getSystemId]);
        if (systemId_ == nil) {
          OrgXmlSaxSAXParseException *saxException = [[[OrgXmlSaxSAXParseException alloc] initWithNSString:@"null source systemId" withOrgXmlSaxLocator:self] autorelease];
          [((id<OrgXmlSaxErrorHandler>) nil_chk(errorHandler_)) fatalErrorWithOrgXmlSaxSAXParseException:saxException];
          return;
        }
        @try {
          stream = [[[JavaIoFileInputStream alloc] initWithNSString:systemId_] autorelease];
        }
        @catch (JavaIoFileNotFoundException *fnfe) {
          OrgXmlSaxSAXParseException *saxException = [[[OrgXmlSaxSAXParseException alloc] initWithNSString:[NSString stringWithFormat:@"could not open file with systemId %@", systemId_] withOrgXmlSaxLocator:self withJavaLangException:fnfe] autorelease];
          [((id<OrgXmlSaxErrorHandler>) nil_chk(errorHandler_)) fatalErrorWithOrgXmlSaxSAXParseException:saxException];
          return;
        }
      }
      [((id<OrgXmlpullV1XmlPullParser>) nil_chk(pp_)) setInputWithJavaIoInputStream:stream withNSString:encoding];
    }
    else {
      [((id<OrgXmlpullV1XmlPullParser>) nil_chk(pp_)) setInputWithJavaIoReader:reader];
    }
  }
  @catch (OrgXmlpullV1XmlPullParserException *ex) {
    OrgXmlSaxSAXParseException *saxException = [[[OrgXmlSaxSAXParseException alloc] initWithNSString:[NSString stringWithFormat:@"parsing initialization error: %@", ex] withOrgXmlSaxLocator:self withJavaLangException:ex] autorelease];
    [((id<OrgXmlSaxErrorHandler>) nil_chk(errorHandler_)) fatalErrorWithOrgXmlSaxSAXParseException:saxException];
    return;
  }
  @try {
    [contentHandler_ startDocument];
    [((id<OrgXmlpullV1XmlPullParser>) nil_chk(pp_)) next];
    if ([pp_ getEventType] != OrgXmlpullV1XmlPullParser_START_TAG) {
      OrgXmlSaxSAXParseException *saxException = [[[OrgXmlSaxSAXParseException alloc] initWithNSString:[NSString stringWithFormat:@"expected start tag not%@", [pp_ getPositionDescription]] withOrgXmlSaxLocator:self] autorelease];
      [((id<OrgXmlSaxErrorHandler>) nil_chk(errorHandler_)) fatalErrorWithOrgXmlSaxSAXParseException:saxException];
      return;
    }
  }
  @catch (OrgXmlpullV1XmlPullParserException *ex) {
    OrgXmlSaxSAXParseException *saxException = [[[OrgXmlSaxSAXParseException alloc] initWithNSString:[NSString stringWithFormat:@"parsing initialization error: %@", ex] withOrgXmlSaxLocator:self withJavaLangException:ex] autorelease];
    [((id<OrgXmlSaxErrorHandler>) nil_chk(errorHandler_)) fatalErrorWithOrgXmlSaxSAXParseException:saxException];
    return;
  }
  [self parseSubTreeWithOrgXmlpullV1XmlPullParser:pp_];
  [contentHandler_ endDocument];
}

+ (IOSObjectArray *)__exceptions_parseWithOrgXmlSaxInputSource_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlSaxSAXException getClass], [JavaIoIOException getClass] } count:2 type:[IOSClass getClass]];
}

- (void)parseWithNSString:(NSString *)systemId {
  [self parseWithOrgXmlSaxInputSource:[[[OrgXmlSaxInputSource alloc] initWithNSString:systemId] autorelease]];
}

+ (IOSObjectArray *)__exceptions_parseWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlSaxSAXException getClass], [JavaIoIOException getClass] } count:2 type:[IOSClass getClass]];
}

- (void)parseSubTreeWithOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)pp {
  OrgXmlpullV1Sax2Driver_set_pp_(self, pp);
  BOOL namespaceAware = [((id<OrgXmlpullV1XmlPullParser>) nil_chk(pp)) getFeatureWithNSString:[OrgXmlpullV1XmlPullParser FEATURE_PROCESS_NAMESPACES]];
  @try {
    if ([pp getEventType] != OrgXmlpullV1XmlPullParser_START_TAG) {
      @throw [[[OrgXmlSaxSAXException alloc] initWithNSString:[NSString stringWithFormat:@"start tag must be read before skiping subtree%@", [pp getPositionDescription]]] autorelease];
    }
    IOSIntArray *holderForStartAndLength = [IOSIntArray arrayWithLength:2];
    JavaLangStringBuilder *rawName = [[[JavaLangStringBuilder alloc] initWithInt:16] autorelease];
    NSString *prefix = nil;
    NSString *name = nil;
    int level = [pp getDepth] - 1;
    int type = OrgXmlpullV1XmlPullParser_START_TAG;
    do {
      switch (type) {
        case OrgXmlpullV1XmlPullParser_START_TAG:
        if (namespaceAware) {
          int depth = [pp getDepth] - 1;
          int countPrev = (level > depth) ? [pp getNamespaceCountWithInt:depth] : 0;
          int count = [pp getNamespaceCountWithInt:depth + 1];
          for (int i = countPrev; i < count; i++) {
            [((id<OrgXmlSaxContentHandler>) nil_chk(contentHandler_)) startPrefixMappingWithNSString:[pp getNamespacePrefixWithInt:i] withNSString:[pp getNamespaceUriWithInt:i]];
          }
          name = [pp getName];
          prefix = [pp getPrefix];
          if (prefix != nil) {
            [rawName setLengthWithInt:0];
            [rawName appendWithNSString:prefix];
            [rawName appendWithChar:':'];
            [rawName appendWithNSString:name];
          }
          [self startElementWithNSString:[pp getNamespace] withNSString:name withNSString:prefix == nil ? name : [rawName description]];
        }
        else {
          [self startElementWithNSString:[pp getNamespace] withNSString:[pp getName] withNSString:[pp getName]];
        }
        break;
        case OrgXmlpullV1XmlPullParser_TEXT:
        {
          IOSCharArray *chars = [pp getTextCharactersWithIntArray:holderForStartAndLength];
          [((id<OrgXmlSaxContentHandler>) nil_chk(contentHandler_)) charactersWithCharArray:chars withInt:IOSIntArray_Get(holderForStartAndLength, 0) withInt:IOSIntArray_Get(holderForStartAndLength, 1)];
        }
        break;
        case OrgXmlpullV1XmlPullParser_END_TAG:
        if (namespaceAware) {
          name = [pp getName];
          prefix = [pp getPrefix];
          if (prefix != nil) {
            [rawName setLengthWithInt:0];
            [rawName appendWithNSString:prefix];
            [rawName appendWithChar:':'];
            [rawName appendWithNSString:name];
          }
          [((id<OrgXmlSaxContentHandler>) nil_chk(contentHandler_)) endElementWithNSString:[pp getNamespace] withNSString:name withNSString:prefix != nil ? name : [rawName description]];
          int depth = [pp getDepth];
          int countPrev = (level > depth) ? [pp getNamespaceCountWithInt:[pp getDepth]] : 0;
          int count = [pp getNamespaceCountWithInt:[pp getDepth] - 1];
          for (int i = count - 1; i >= countPrev; i--) {
            [contentHandler_ endPrefixMappingWithNSString:[pp getNamespacePrefixWithInt:i]];
          }
        }
        else {
          [((id<OrgXmlSaxContentHandler>) nil_chk(contentHandler_)) endElementWithNSString:[pp getNamespace] withNSString:[pp getName] withNSString:[pp getName]];
        }
        break;
        case OrgXmlpullV1XmlPullParser_END_DOCUMENT:
        goto break_LOOP;
      }
      type = [pp next];
    }
    while ([pp getDepth] > level);
    break_LOOP: ;
  }
  @catch (OrgXmlpullV1XmlPullParserException *ex) {
    OrgXmlSaxSAXParseException *saxException = [[[OrgXmlSaxSAXParseException alloc] initWithNSString:[NSString stringWithFormat:@"parsing error: %@", ex] withOrgXmlSaxLocator:self withJavaLangException:ex] autorelease];
    [((OrgXmlpullV1XmlPullParserException *) nil_chk(ex)) printStackTrace];
    [((id<OrgXmlSaxErrorHandler>) nil_chk(errorHandler_)) fatalErrorWithOrgXmlSaxSAXParseException:saxException];
  }
}

+ (IOSObjectArray *)__exceptions_parseSubTreeWithOrgXmlpullV1XmlPullParser_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlSaxSAXException getClass], [JavaIoIOException getClass] } count:2 type:[IOSClass getClass]];
}

- (void)startElementWithNSString:(NSString *)namespace_
                    withNSString:(NSString *)localName
                    withNSString:(NSString *)qName {
  [((id<OrgXmlSaxContentHandler>) nil_chk(contentHandler_)) startElementWithNSString:namespace_ withNSString:localName withNSString:qName withOrgXmlSaxAttributes:self];
}

+ (IOSObjectArray *)__exceptions_startElementWithNSString_withNSString_withNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlSaxSAXException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  OrgXmlpullV1Sax2Driver_set_pp_(self, nil);
  OrgXmlpullV1Sax2Driver_set_systemId_(self, nil);
  OrgXmlpullV1Sax2Driver_set_errorHandler_(self, nil);
  OrgXmlpullV1Sax2Driver_set_contentHandler_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgXmlpullV1Sax2Driver *)other {
  [super copyAllFieldsTo:other];
  OrgXmlpullV1Sax2Driver_set_contentHandler_(other, contentHandler_);
  OrgXmlpullV1Sax2Driver_set_errorHandler_(other, errorHandler_);
  OrgXmlpullV1Sax2Driver_set_pp_(other, pp_);
  OrgXmlpullV1Sax2Driver_set_systemId_(other, systemId_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:contentHandler_ name:@"contentHandler"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:errorHandler_ name:@"errorHandler"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:systemId_ name:@"systemId"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:pp_ name:@"pp"]];
  return result;
}

@end
