//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/xml/src/main/java/org/kxml2/io/KXmlParser.java
//
//  Created by retechretech on 13-9-4.
//

#include "IOSCharArray.h"
#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/Reader.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "libcore/internal/StringPool.h"
#include "org/kxml2/io/KXmlParser.h"
#include "org/xmlpull/v1/XmlPullParser.h"
#include "org/xmlpull/v1/XmlPullParserException.h"

@implementation OrgKxml2IoKXmlParser

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_PROPERTY_XMLDECL_VERSION_ name:@"OrgKxml2IoKXmlParser_PROPERTY_XMLDECL_VERSION_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_PROPERTY_XMLDECL_STANDALONE_ name:@"OrgKxml2IoKXmlParser_PROPERTY_XMLDECL_STANDALONE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_PROPERTY_LOCATION_ name:@"OrgKxml2IoKXmlParser_PROPERTY_LOCATION_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_FEATURE_RELAXED_ name:@"OrgKxml2IoKXmlParser_FEATURE_RELAXED_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_DEFAULT_ENTITIES_ name:@"OrgKxml2IoKXmlParser_DEFAULT_ENTITIES_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_START_COMMENT_ name:@"OrgKxml2IoKXmlParser_START_COMMENT_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_END_COMMENT_ name:@"OrgKxml2IoKXmlParser_END_COMMENT_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_COMMENT_DOUBLE_DASH_ name:@"OrgKxml2IoKXmlParser_COMMENT_DOUBLE_DASH_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_START_CDATA_ name:@"OrgKxml2IoKXmlParser_START_CDATA_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_END_CDATA_ name:@"OrgKxml2IoKXmlParser_END_CDATA_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_START_PROCESSING_INSTRUCTION_ name:@"OrgKxml2IoKXmlParser_START_PROCESSING_INSTRUCTION_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_END_PROCESSING_INSTRUCTION_ name:@"OrgKxml2IoKXmlParser_END_PROCESSING_INSTRUCTION_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_START_DOCTYPE_ name:@"OrgKxml2IoKXmlParser_START_DOCTYPE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_SYSTEM_ name:@"OrgKxml2IoKXmlParser_SYSTEM_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_PUBLIC_ name:@"OrgKxml2IoKXmlParser_PUBLIC_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_START_ELEMENT_ name:@"OrgKxml2IoKXmlParser_START_ELEMENT_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_START_ATTLIST_ name:@"OrgKxml2IoKXmlParser_START_ATTLIST_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_START_ENTITY_ name:@"OrgKxml2IoKXmlParser_START_ENTITY_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_START_NOTATION_ name:@"OrgKxml2IoKXmlParser_START_NOTATION_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_EMPTY_ name:@"OrgKxml2IoKXmlParser_EMPTY_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_ANY_ name:@"OrgKxml2IoKXmlParser_ANY_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_NDATA_ name:@"OrgKxml2IoKXmlParser_NDATA_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_NOTATION_ name:@"OrgKxml2IoKXmlParser_NOTATION_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_REQUIRED_ name:@"OrgKxml2IoKXmlParser_REQUIRED_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_IMPLIED_ name:@"OrgKxml2IoKXmlParser_IMPLIED_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_FIXED_ name:@"OrgKxml2IoKXmlParser_FIXED_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_UNEXPECTED_EOF_ name:@"OrgKxml2IoKXmlParser_UNEXPECTED_EOF_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_ILLEGAL_TYPE_ name:@"OrgKxml2IoKXmlParser_ILLEGAL_TYPE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_SINGLE_QUOTE_ name:@"OrgKxml2IoKXmlParser_SINGLE_QUOTE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_DOUBLE_QUOTE_ name:@"OrgKxml2IoKXmlParser_DOUBLE_QUOTE_"]];
  return result;
}

static NSString * OrgKxml2IoKXmlParser_PROPERTY_XMLDECL_VERSION_ = @"http://xmlpull.org/v1/doc/properties.html#xmldecl-version";
static NSString * OrgKxml2IoKXmlParser_PROPERTY_XMLDECL_STANDALONE_ = @"http://xmlpull.org/v1/doc/properties.html#xmldecl-standalone";
static NSString * OrgKxml2IoKXmlParser_PROPERTY_LOCATION_ = @"http://xmlpull.org/v1/doc/properties.html#location";
static NSString * OrgKxml2IoKXmlParser_FEATURE_RELAXED_ = @"http://xmlpull.org/v1/doc/features.html#relaxed";
static id<JavaUtilMap> OrgKxml2IoKXmlParser_DEFAULT_ENTITIES_;
static IOSCharArray * OrgKxml2IoKXmlParser_START_COMMENT_;
static IOSCharArray * OrgKxml2IoKXmlParser_END_COMMENT_;
static IOSCharArray * OrgKxml2IoKXmlParser_COMMENT_DOUBLE_DASH_;
static IOSCharArray * OrgKxml2IoKXmlParser_START_CDATA_;
static IOSCharArray * OrgKxml2IoKXmlParser_END_CDATA_;
static IOSCharArray * OrgKxml2IoKXmlParser_START_PROCESSING_INSTRUCTION_;
static IOSCharArray * OrgKxml2IoKXmlParser_END_PROCESSING_INSTRUCTION_;
static IOSCharArray * OrgKxml2IoKXmlParser_START_DOCTYPE_;
static IOSCharArray * OrgKxml2IoKXmlParser_SYSTEM_;
static IOSCharArray * OrgKxml2IoKXmlParser_PUBLIC_;
static IOSCharArray * OrgKxml2IoKXmlParser_START_ELEMENT_;
static IOSCharArray * OrgKxml2IoKXmlParser_START_ATTLIST_;
static IOSCharArray * OrgKxml2IoKXmlParser_START_ENTITY_;
static IOSCharArray * OrgKxml2IoKXmlParser_START_NOTATION_;
static IOSCharArray * OrgKxml2IoKXmlParser_EMPTY_;
static IOSCharArray * OrgKxml2IoKXmlParser_ANY_;
static IOSCharArray * OrgKxml2IoKXmlParser_NDATA_;
static IOSCharArray * OrgKxml2IoKXmlParser_NOTATION_;
static IOSCharArray * OrgKxml2IoKXmlParser_REQUIRED_;
static IOSCharArray * OrgKxml2IoKXmlParser_IMPLIED_;
static IOSCharArray * OrgKxml2IoKXmlParser_FIXED_;
static NSString * OrgKxml2IoKXmlParser_UNEXPECTED_EOF_ = @"Unexpected EOF";
static NSString * OrgKxml2IoKXmlParser_ILLEGAL_TYPE_ = @"Wrong event type";
static IOSCharArray * OrgKxml2IoKXmlParser_SINGLE_QUOTE_;
static IOSCharArray * OrgKxml2IoKXmlParser_DOUBLE_QUOTE_;

+ (NSString *)PROPERTY_XMLDECL_VERSION {
  return OrgKxml2IoKXmlParser_PROPERTY_XMLDECL_VERSION_;
}

+ (NSString *)PROPERTY_XMLDECL_STANDALONE {
  return OrgKxml2IoKXmlParser_PROPERTY_XMLDECL_STANDALONE_;
}

+ (NSString *)PROPERTY_LOCATION {
  return OrgKxml2IoKXmlParser_PROPERTY_LOCATION_;
}

+ (NSString *)FEATURE_RELAXED {
  return OrgKxml2IoKXmlParser_FEATURE_RELAXED_;
}

+ (id<JavaUtilMap>)DEFAULT_ENTITIES {
  return OrgKxml2IoKXmlParser_DEFAULT_ENTITIES_;
}

+ (IOSCharArray *)START_COMMENT {
  return OrgKxml2IoKXmlParser_START_COMMENT_;
}

+ (IOSCharArray *)END_COMMENT {
  return OrgKxml2IoKXmlParser_END_COMMENT_;
}

+ (IOSCharArray *)COMMENT_DOUBLE_DASH {
  return OrgKxml2IoKXmlParser_COMMENT_DOUBLE_DASH_;
}

+ (IOSCharArray *)START_CDATA {
  return OrgKxml2IoKXmlParser_START_CDATA_;
}

+ (IOSCharArray *)END_CDATA {
  return OrgKxml2IoKXmlParser_END_CDATA_;
}

+ (IOSCharArray *)START_PROCESSING_INSTRUCTION {
  return OrgKxml2IoKXmlParser_START_PROCESSING_INSTRUCTION_;
}

+ (IOSCharArray *)END_PROCESSING_INSTRUCTION {
  return OrgKxml2IoKXmlParser_END_PROCESSING_INSTRUCTION_;
}

+ (IOSCharArray *)START_DOCTYPE {
  return OrgKxml2IoKXmlParser_START_DOCTYPE_;
}

+ (IOSCharArray *)SYSTEM {
  return OrgKxml2IoKXmlParser_SYSTEM_;
}

+ (IOSCharArray *)PUBLIC {
  return OrgKxml2IoKXmlParser_PUBLIC_;
}

+ (IOSCharArray *)START_ELEMENT {
  return OrgKxml2IoKXmlParser_START_ELEMENT_;
}

+ (IOSCharArray *)START_ATTLIST {
  return OrgKxml2IoKXmlParser_START_ATTLIST_;
}

+ (IOSCharArray *)START_ENTITY {
  return OrgKxml2IoKXmlParser_START_ENTITY_;
}

+ (IOSCharArray *)START_NOTATION {
  return OrgKxml2IoKXmlParser_START_NOTATION_;
}

+ (IOSCharArray *)EMPTY {
  return OrgKxml2IoKXmlParser_EMPTY_;
}

+ (IOSCharArray *)ANY {
  return OrgKxml2IoKXmlParser_ANY_;
}

+ (IOSCharArray *)NDATA {
  return OrgKxml2IoKXmlParser_NDATA_;
}

+ (IOSCharArray *)NOTATION {
  return OrgKxml2IoKXmlParser_NOTATION_;
}

+ (IOSCharArray *)REQUIRED {
  return OrgKxml2IoKXmlParser_REQUIRED_;
}

+ (IOSCharArray *)IMPLIED {
  return OrgKxml2IoKXmlParser_IMPLIED_;
}

+ (IOSCharArray *)FIXED {
  return OrgKxml2IoKXmlParser_FIXED_;
}

+ (NSString *)UNEXPECTED_EOF {
  return OrgKxml2IoKXmlParser_UNEXPECTED_EOF_;
}

+ (NSString *)ILLEGAL_TYPE {
  return OrgKxml2IoKXmlParser_ILLEGAL_TYPE_;
}

+ (IOSCharArray *)SINGLE_QUOTE {
  return OrgKxml2IoKXmlParser_SINGLE_QUOTE_;
}

+ (IOSCharArray *)DOUBLE_QUOTE {
  return OrgKxml2IoKXmlParser_DOUBLE_QUOTE_;
}

- (void)keepNamespaceAttributes {
  self->keepNamespaceAttributes__ = YES;
}

- (BOOL)adjustNsp {
  BOOL any = NO;
  for (int i = 0; i < attributeCount_ << 2; i += 4) {
    NSString *attrName = [((IOSObjectArray *) nil_chk(attributes_)) objectAtIndex:i + 2];
    int cut = [((NSString *) nil_chk(attrName)) indexOf:':'];
    NSString *prefix;
    if (cut != -1) {
      prefix = [attrName substring:0 endIndex:cut];
      attrName = [attrName substring:cut + 1];
    }
    else if ([attrName isEqual:@"xmlns"]) {
      prefix = attrName;
      attrName = nil;
    }
    else {
      continue;
    }
    if (![((NSString *) nil_chk(prefix)) isEqual:@"xmlns"]) {
      any = YES;
    }
    else {
      int j = ((*[((IOSIntArray *) nil_chk(nspCounts_)) intRefAtIndex:depth_])++) << 1;
      OrgKxml2IoKXmlParser_set_nspStack_(self, [self ensureCapacityWithNSStringArray:nspStack_ withInt:j + 2]);
      [((IOSObjectArray *) nil_chk(nspStack_)) replaceObjectAtIndex:j withObject:attrName];
      [nspStack_ replaceObjectAtIndex:j + 1 withObject:[attributes_ objectAtIndex:i + 3]];
      if (attrName != nil && [((NSString *) nil_chk([attributes_ objectAtIndex:i + 3])) isEmpty]) {
        [self checkRelaxedWithNSString:@"illegal empty namespace"];
      }
      if (keepNamespaceAttributes__) {
        [attributes_ replaceObjectAtIndex:i withObject:@"http://www.w3.org/2000/xmlns/"];
        any = YES;
      }
      else {
        [JavaLangSystem arraycopyWithId:attributes_ withInt:i + 4 withId:attributes_ withInt:i withInt:((--attributeCount_) << 2) - i];
        i -= 4;
      }
    }
  }
  if (any) {
    for (int i = (attributeCount_ << 2) - 4; i >= 0; i -= 4) {
      NSString *attrName = [((IOSObjectArray *) nil_chk(attributes_)) objectAtIndex:i + 2];
      int cut = [((NSString *) nil_chk(attrName)) indexOf:':'];
      if (cut == 0 && !relaxed_) {
        @throw [[[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"illegal attribute name: %@ at %@", attrName, self]] autorelease];
      }
      else if (cut != -1) {
        NSString *attrPrefix = [attrName substring:0 endIndex:cut];
        attrName = [attrName substring:cut + 1];
        NSString *attrNs = [self getNamespaceWithNSString:attrPrefix];
        if (attrNs == nil && !relaxed_) {
          @throw [[[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Undefined Prefix: %@ in %@", attrPrefix, self]] autorelease];
        }
        [attributes_ replaceObjectAtIndex:i withObject:attrNs];
        [attributes_ replaceObjectAtIndex:i + 1 withObject:attrPrefix];
        [attributes_ replaceObjectAtIndex:i + 2 withObject:attrName];
      }
    }
  }
  int cut = [((NSString *) nil_chk(name_)) indexOf:':'];
  if (cut == 0) {
    [self checkRelaxedWithNSString:[NSString stringWithFormat:@"illegal tag name: %@", name_]];
  }
  if (cut != -1) {
    OrgKxml2IoKXmlParser_set_prefix_(self, [name_ substring:0 endIndex:cut]);
    OrgKxml2IoKXmlParser_set_name_(self, [name_ substring:cut + 1]);
  }
  OrgKxml2IoKXmlParser_set_namespace__(self, [self getNamespaceWithNSString:prefix_]);
  if (self->namespace__ == nil) {
    if (prefix_ != nil) {
      [self checkRelaxedWithNSString:[NSString stringWithFormat:@"undefined prefix: %@", prefix_]];
    }
    OrgKxml2IoKXmlParser_set_namespace__(self, [OrgXmlpullV1XmlPullParser NO_NAMESPACE]);
  }
  return any;
}

+ (IOSObjectArray *)__exceptions_adjustNsp {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlpullV1XmlPullParserException getClass] } count:1 type:[IOSClass getClass]];
}

- (IOSObjectArray *)ensureCapacityWithNSStringArray:(IOSObjectArray *)arr
                                            withInt:(int)required {
  if ((int) [((IOSObjectArray *) nil_chk(arr)) count] >= required) {
    return arr;
  }
  IOSObjectArray *bigger = [IOSObjectArray arrayWithLength:required + 16 type:[IOSClass classWithClass:[NSString class]]];
  [JavaLangSystem arraycopyWithId:arr withInt:0 withId:bigger withInt:0 withInt:(int) [arr count]];
  return bigger;
}

- (void)checkRelaxedWithNSString:(NSString *)errorMessage {
  if (!relaxed_) {
    @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:errorMessage withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
  }
  if (error_ == nil) {
    OrgKxml2IoKXmlParser_set_error_(self, [NSString stringWithFormat:@"Error: %@", errorMessage]);
  }
}

+ (IOSObjectArray *)__exceptions_checkRelaxedWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlpullV1XmlPullParserException getClass] } count:1 type:[IOSClass getClass]];
}

- (int)next {
  return [self nextWithBOOL:NO];
}

+ (IOSObjectArray *)__exceptions_next {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlpullV1XmlPullParserException getClass], [JavaIoIOException getClass] } count:2 type:[IOSClass getClass]];
}

- (int)nextToken {
  return [self nextWithBOOL:YES];
}

+ (IOSObjectArray *)__exceptions_nextToken {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlpullV1XmlPullParserException getClass], [JavaIoIOException getClass] } count:2 type:[IOSClass getClass]];
}

- (int)nextWithBOOL:(BOOL)justOneToken {
  if (reader_ == nil) {
    @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"setInput() must be called first." withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
  }
  if (type_ == OrgXmlpullV1XmlPullParser_END_TAG) {
    depth_--;
  }
  if (degenerated_) {
    degenerated_ = NO;
    type_ = OrgXmlpullV1XmlPullParser_END_TAG;
    return type_;
  }
  if (error_ != nil) {
    if (justOneToken) {
      OrgKxml2IoKXmlParser_set_text_(self, error_);
      type_ = OrgXmlpullV1XmlPullParser_COMMENT;
      OrgKxml2IoKXmlParser_set_error_(self, nil);
      return type_;
    }
    else {
      OrgKxml2IoKXmlParser_set_error_(self, nil);
    }
  }
  type_ = [self peekTypeWithBOOL:NO];
  if (type_ == OrgKxml2IoKXmlParser_XML_DECLARATION) {
    [self readXmlDeclaration];
    type_ = [self peekTypeWithBOOL:NO];
  }
  OrgKxml2IoKXmlParser_set_text_(self, nil);
  isWhitespace__ = YES;
  OrgKxml2IoKXmlParser_set_prefix_(self, nil);
  OrgKxml2IoKXmlParser_set_name_(self, nil);
  OrgKxml2IoKXmlParser_set_namespace__(self, nil);
  attributeCount_ = -1;
  BOOL throwOnResolveFailure = !justOneToken;
  while (YES) {
    {
      NSString *commentText;
      NSString *processingInstruction;
      switch (type_) {
        case OrgXmlpullV1XmlPullParser_START_TAG:
        [self parseStartTagWithBOOL:NO withBOOL:throwOnResolveFailure];
        return type_;
        case OrgXmlpullV1XmlPullParser_END_TAG:
        [self readEndTag];
        return type_;
        case OrgXmlpullV1XmlPullParser_END_DOCUMENT:
        return type_;
        case OrgXmlpullV1XmlPullParser_ENTITY_REF:
        if (justOneToken) {
          JavaLangStringBuilder *entityTextBuilder = [[[JavaLangStringBuilder alloc] init] autorelease];
          [self readEntityWithJavaLangStringBuilder:entityTextBuilder withBOOL:YES withBOOL:throwOnResolveFailure withOrgKxml2IoKXmlParser_ValueContextEnum:[OrgKxml2IoKXmlParser_ValueContextEnum TEXT]];
          OrgKxml2IoKXmlParser_set_text_(self, [entityTextBuilder description]);
          break;
        }
        case OrgXmlpullV1XmlPullParser_TEXT:
        OrgKxml2IoKXmlParser_set_text_(self, [self readValueWithUnichar:'<' withBOOL:!justOneToken withBOOL:throwOnResolveFailure withOrgKxml2IoKXmlParser_ValueContextEnum:[OrgKxml2IoKXmlParser_ValueContextEnum TEXT]]);
        if (depth_ == 0 && isWhitespace__) {
          type_ = OrgXmlpullV1XmlPullParser_IGNORABLE_WHITESPACE;
        }
        break;
        case OrgXmlpullV1XmlPullParser_CDSECT:
        [self readWithCharArray:OrgKxml2IoKXmlParser_START_CDATA_];
        OrgKxml2IoKXmlParser_set_text_(self, [self readUntilWithCharArray:OrgKxml2IoKXmlParser_END_CDATA_ withBOOL:YES]);
        break;
        case OrgXmlpullV1XmlPullParser_COMMENT:
        commentText = [self readCommentWithBOOL:justOneToken];
        if (justOneToken) {
          OrgKxml2IoKXmlParser_set_text_(self, commentText);
        }
        break;
        case OrgXmlpullV1XmlPullParser_PROCESSING_INSTRUCTION:
        [self readWithCharArray:OrgKxml2IoKXmlParser_START_PROCESSING_INSTRUCTION_];
        processingInstruction = [self readUntilWithCharArray:OrgKxml2IoKXmlParser_END_PROCESSING_INSTRUCTION_ withBOOL:justOneToken];
        if (justOneToken) {
          OrgKxml2IoKXmlParser_set_text_(self, processingInstruction);
        }
        break;
        case OrgXmlpullV1XmlPullParser_DOCDECL:
        [self readDoctypeWithBOOL:justOneToken];
        break;
        default:
        @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"Unexpected token" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
      }
    }
    if (depth_ == 0 && (type_ == OrgXmlpullV1XmlPullParser_ENTITY_REF || type_ == OrgXmlpullV1XmlPullParser_TEXT || type_ == OrgXmlpullV1XmlPullParser_CDSECT)) {
      @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"Unexpected token" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
    }
    if (justOneToken) {
      return type_;
    }
    if (type_ == OrgXmlpullV1XmlPullParser_IGNORABLE_WHITESPACE) {
      OrgKxml2IoKXmlParser_set_text_(self, nil);
    }
    int peek = [self peekTypeWithBOOL:NO];
    if (text_ != nil && ![text_ isEmpty] && peek < OrgXmlpullV1XmlPullParser_TEXT) {
      type_ = OrgXmlpullV1XmlPullParser_TEXT;
      return type_;
    }
    type_ = peek;
  }
}

+ (IOSObjectArray *)__exceptions_nextWithBOOL_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass], [OrgXmlpullV1XmlPullParserException getClass] } count:2 type:[IOSClass getClass]];
}

- (NSString *)readUntilWithCharArray:(IOSCharArray *)delimiter
                            withBOOL:(BOOL)returnText {
  int start = position_;
  JavaLangStringBuilder *result = nil;
  if (returnText && text_ != nil) {
    result = [[[JavaLangStringBuilder alloc] init] autorelease];
    [result appendWithNSString:text_];
  }
  while (YES) {
    {
      if (position_ + (int) [((IOSCharArray *) nil_chk(delimiter)) count] >= limit_) {
        if (start < position_ && returnText) {
          if (result == nil) {
            result = [[[JavaLangStringBuilder alloc] init] autorelease];
          }
          [((JavaLangStringBuilder *) nil_chk(result)) appendWithCharArray:buffer_ withInt:start withInt:position_ - start];
        }
        if (![self fillBufferWithInt:(int) [delimiter count]]) {
          [self checkRelaxedWithNSString:OrgKxml2IoKXmlParser_UNEXPECTED_EOF_];
          type_ = OrgXmlpullV1XmlPullParser_COMMENT;
          return nil;
        }
        start = position_;
      }
      for (int i = 0; i < (int) [delimiter count]; i++) {
        if ([((IOSCharArray *) nil_chk(buffer_)) charAtIndex:position_ + i] != [delimiter charAtIndex:i]) {
          position_++;
          goto continue_search;
        }
      }
      break;
    }
    continue_search: ;
  }
  int end = position_;
  position_ += (int) [((IOSCharArray *) nil_chk(delimiter)) count];
  if (!returnText) {
    return nil;
  }
  else if (result == nil) {
    return [((LibcoreInternalStringPool *) nil_chk(stringPool_)) getWithCharArray:buffer_ withInt:start withInt:end - start];
  }
  else {
    [result appendWithCharArray:buffer_ withInt:start withInt:end - start];
    return [result description];
  }
}

+ (IOSObjectArray *)__exceptions_readUntilWithCharArray_withBOOL_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass], [OrgXmlpullV1XmlPullParserException getClass] } count:2 type:[IOSClass getClass]];
}

- (void)readXmlDeclaration {
  if (bufferStartLine_ != 0 || bufferStartColumn_ != 0 || position_ != 0) {
    [self checkRelaxedWithNSString:@"processing instructions must not start with xml"];
  }
  [self readWithCharArray:OrgKxml2IoKXmlParser_START_PROCESSING_INSTRUCTION_];
  [self parseStartTagWithBOOL:YES withBOOL:YES];
  if (attributeCount_ < 1 || ![@"version" isEqual:[((IOSObjectArray *) nil_chk(attributes_)) objectAtIndex:2]]) {
    [self checkRelaxedWithNSString:@"version expected"];
  }
  OrgKxml2IoKXmlParser_set_version__(self, [((IOSObjectArray *) nil_chk(attributes_)) objectAtIndex:3]);
  int pos = 1;
  if (pos < attributeCount_ && [@"encoding" isEqual:[attributes_ objectAtIndex:2 + 4]]) {
    OrgKxml2IoKXmlParser_set_encoding_(self, [attributes_ objectAtIndex:3 + 4]);
    pos++;
  }
  if (pos < attributeCount_ && [@"standalone" isEqual:[attributes_ objectAtIndex:4 * pos + 2]]) {
    NSString *st = [attributes_ objectAtIndex:3 + 4 * pos];
    if ([@"yes" isEqual:st]) {
      OrgKxml2IoKXmlParser_set_standalone_(self, [JavaLangBoolean getTRUE]);
    }
    else if ([@"no" isEqual:st]) {
      OrgKxml2IoKXmlParser_set_standalone_(self, [JavaLangBoolean getFALSE]);
    }
    else {
      [self checkRelaxedWithNSString:[NSString stringWithFormat:@"illegal standalone value: %@", st]];
    }
    pos++;
  }
  if (pos != attributeCount_) {
    [self checkRelaxedWithNSString:@"unexpected attributes in XML declaration"];
  }
  isWhitespace__ = YES;
  OrgKxml2IoKXmlParser_set_text_(self, nil);
}

+ (IOSObjectArray *)__exceptions_readXmlDeclaration {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass], [OrgXmlpullV1XmlPullParserException getClass] } count:2 type:[IOSClass getClass]];
}

- (NSString *)readCommentWithBOOL:(BOOL)returnText {
  [self readWithCharArray:OrgKxml2IoKXmlParser_START_COMMENT_];
  if (relaxed_) {
    return [self readUntilWithCharArray:OrgKxml2IoKXmlParser_END_COMMENT_ withBOOL:returnText];
  }
  NSString *commentText = [self readUntilWithCharArray:OrgKxml2IoKXmlParser_COMMENT_DOUBLE_DASH_ withBOOL:returnText];
  if ([self peekCharacter] != '>') {
    @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"Comments may not contain --" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
  }
  position_++;
  return commentText;
}

+ (IOSObjectArray *)__exceptions_readCommentWithBOOL_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass], [OrgXmlpullV1XmlPullParserException getClass] } count:2 type:[IOSClass getClass]];
}

- (void)readDoctypeWithBOOL:(BOOL)saveDtdText {
  [self readWithCharArray:OrgKxml2IoKXmlParser_START_DOCTYPE_];
  int startPosition = -1;
  if (saveDtdText) {
    OrgKxml2IoKXmlParser_set_bufferCapture_(self, [[[JavaLangStringBuilder alloc] init] autorelease]);
    startPosition = position_;
  }
  @try {
    [self skip];
    OrgKxml2IoKXmlParser_set_rootElementName_(self, [self readName]);
    [self readExternalIdWithBOOL:YES withBOOL:YES];
    [self skip];
    if ([self peekCharacter] == '[') {
      [self readInternalSubset];
    }
    [self skip];
  }
  @finally {
    if (saveDtdText) {
      [((JavaLangStringBuilder *) nil_chk(bufferCapture_)) appendWithCharArray:buffer_ withInt:0 withInt:position_];
      [bufferCapture_ delete__WithInt:0 withInt:startPosition];
      OrgKxml2IoKXmlParser_set_text_(self, [bufferCapture_ description]);
      OrgKxml2IoKXmlParser_set_bufferCapture_(self, nil);
    }
  }
  [self readWithUnichar:'>'];
}

+ (IOSObjectArray *)__exceptions_readDoctypeWithBOOL_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass], [OrgXmlpullV1XmlPullParserException getClass] } count:2 type:[IOSClass getClass]];
}

- (BOOL)readExternalIdWithBOOL:(BOOL)requireSystemName
                      withBOOL:(BOOL)assignFields {
  [self skip];
  int c = [self peekCharacter];
  if (c == 'S') {
    [self readWithCharArray:OrgKxml2IoKXmlParser_SYSTEM_];
  }
  else if (c == 'P') {
    [self readWithCharArray:OrgKxml2IoKXmlParser_PUBLIC_];
    [self skip];
    if (assignFields) {
      OrgKxml2IoKXmlParser_set_publicId_(self, [self readQuotedIdWithBOOL:YES]);
    }
    else {
      [self readQuotedIdWithBOOL:NO];
    }
  }
  else {
    return NO;
  }
  [self skip];
  if (!requireSystemName) {
    int delimiter = [self peekCharacter];
    if (delimiter != '"' && delimiter != '\'') {
      return YES;
    }
  }
  if (assignFields) {
    OrgKxml2IoKXmlParser_set_systemId_(self, [self readQuotedIdWithBOOL:YES]);
  }
  else {
    [self readQuotedIdWithBOOL:NO];
  }
  return YES;
}

+ (IOSObjectArray *)__exceptions_readExternalIdWithBOOL_withBOOL_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass], [OrgXmlpullV1XmlPullParserException getClass] } count:2 type:[IOSClass getClass]];
}

- (NSString *)readQuotedIdWithBOOL:(BOOL)returnText {
  int quote = [self peekCharacter];
  IOSCharArray *delimiter;
  if (quote == '"') {
    delimiter = OrgKxml2IoKXmlParser_DOUBLE_QUOTE_;
  }
  else if (quote == '\'') {
    delimiter = OrgKxml2IoKXmlParser_SINGLE_QUOTE_;
  }
  else {
    @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"Expected a quoted string" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
  }
  position_++;
  return [self readUntilWithCharArray:delimiter withBOOL:returnText];
}

+ (IOSObjectArray *)__exceptions_readQuotedIdWithBOOL_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass], [OrgXmlpullV1XmlPullParserException getClass] } count:2 type:[IOSClass getClass]];
}

- (void)readInternalSubset {
  [self readWithUnichar:'['];
  while (YES) {
    [self skip];
    if ([self peekCharacter] == ']') {
      position_++;
      return;
    }
    int declarationType = [self peekTypeWithBOOL:YES];
    switch (declarationType) {
      case OrgKxml2IoKXmlParser_ELEMENTDECL:
      [self readElementDeclaration];
      break;
      case OrgKxml2IoKXmlParser_ATTLISTDECL:
      [self readAttributeListDeclaration];
      break;
      case OrgKxml2IoKXmlParser_ENTITYDECL:
      [self readEntityDeclaration];
      break;
      case OrgKxml2IoKXmlParser_NOTATIONDECL:
      [self readNotationDeclaration];
      break;
      case OrgXmlpullV1XmlPullParser_PROCESSING_INSTRUCTION:
      [self readWithCharArray:OrgKxml2IoKXmlParser_START_PROCESSING_INSTRUCTION_];
      [self readUntilWithCharArray:OrgKxml2IoKXmlParser_END_PROCESSING_INSTRUCTION_ withBOOL:NO];
      break;
      case OrgXmlpullV1XmlPullParser_COMMENT:
      [self readCommentWithBOOL:NO];
      break;
      case OrgKxml2IoKXmlParser_PARAMETER_ENTITY_REF:
      @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"Parameter entity references are not supported" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
      default:
      @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"Unexpected token" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
    }
  }
}

+ (IOSObjectArray *)__exceptions_readInternalSubset {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass], [OrgXmlpullV1XmlPullParserException getClass] } count:2 type:[IOSClass getClass]];
}

- (void)readElementDeclaration {
  [self readWithCharArray:OrgKxml2IoKXmlParser_START_ELEMENT_];
  [self skip];
  [self readName];
  [self readContentSpec];
  [self skip];
  [self readWithUnichar:'>'];
}

+ (IOSObjectArray *)__exceptions_readElementDeclaration {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass], [OrgXmlpullV1XmlPullParserException getClass] } count:2 type:[IOSClass getClass]];
}

- (void)readContentSpec {
  [self skip];
  int c = [self peekCharacter];
  if (c == '(') {
    int depth = 0;
    do {
      if (c == '(') {
        depth++;
      }
      else if (c == ')') {
        depth--;
      }
      position_++;
      c = [self peekCharacter];
    }
    while (depth > 0);
    if (c == '*' || c == '?' || c == '+') {
      position_++;
    }
  }
  else if (c == [((IOSCharArray *) nil_chk(OrgKxml2IoKXmlParser_EMPTY_)) charAtIndex:0]) {
    [self readWithCharArray:OrgKxml2IoKXmlParser_EMPTY_];
  }
  else if (c == [((IOSCharArray *) nil_chk(OrgKxml2IoKXmlParser_ANY_)) charAtIndex:0]) {
    [self readWithCharArray:OrgKxml2IoKXmlParser_ANY_];
  }
  else {
    @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"Expected element content spec" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
  }
}

+ (IOSObjectArray *)__exceptions_readContentSpec {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass], [OrgXmlpullV1XmlPullParserException getClass] } count:2 type:[IOSClass getClass]];
}

- (void)readAttributeListDeclaration {
  [self readWithCharArray:OrgKxml2IoKXmlParser_START_ATTLIST_];
  [self skip];
  NSString *elementName = [self readName];
  while (YES) {
    [self skip];
    int c = [self peekCharacter];
    if (c == '>') {
      position_++;
      return;
    }
    NSString *attributeName = [self readName];
    [self skip];
    if (position_ + 1 >= limit_ && ![self fillBufferWithInt:2]) {
      @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"Malformed attribute list" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
    }
    if ([((IOSCharArray *) nil_chk(buffer_)) charAtIndex:position_] == [((IOSCharArray *) nil_chk(OrgKxml2IoKXmlParser_NOTATION_)) charAtIndex:0] && [buffer_ charAtIndex:position_ + 1] == [OrgKxml2IoKXmlParser_NOTATION_ charAtIndex:1]) {
      [self readWithCharArray:OrgKxml2IoKXmlParser_NOTATION_];
      [self skip];
    }
    c = [self peekCharacter];
    if (c == '(') {
      position_++;
      while (YES) {
        [self skip];
        [self readName];
        [self skip];
        c = [self peekCharacter];
        if (c == ')') {
          position_++;
          break;
        }
        else if (c == '|') {
          position_++;
        }
        else {
          @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"Malformed attribute type" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
        }
      }
    }
    else {
      [self readName];
    }
    [self skip];
    c = [self peekCharacter];
    if (c == '#') {
      position_++;
      c = [self peekCharacter];
      if (c == 'R') {
        [self readWithCharArray:OrgKxml2IoKXmlParser_REQUIRED_];
      }
      else if (c == 'I') {
        [self readWithCharArray:OrgKxml2IoKXmlParser_IMPLIED_];
      }
      else if (c == 'F') {
        [self readWithCharArray:OrgKxml2IoKXmlParser_FIXED_];
      }
      else {
        @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"Malformed attribute type" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
      }
      [self skip];
      c = [self peekCharacter];
    }
    if (c == '"' || c == '\'') {
      position_++;
      NSString *value = [self readValueWithUnichar:(unichar) c withBOOL:YES withBOOL:YES withOrgKxml2IoKXmlParser_ValueContextEnum:[OrgKxml2IoKXmlParser_ValueContextEnum ATTRIBUTE]];
      position_++;
      [self defineAttributeDefaultWithNSString:elementName withNSString:attributeName withNSString:value];
    }
  }
}

+ (IOSObjectArray *)__exceptions_readAttributeListDeclaration {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass], [OrgXmlpullV1XmlPullParserException getClass] } count:2 type:[IOSClass getClass]];
}

- (void)defineAttributeDefaultWithNSString:(NSString *)elementName
                              withNSString:(NSString *)attributeName
                              withNSString:(NSString *)value {
  if (defaultAttributes_ == nil) {
    OrgKxml2IoKXmlParser_set_defaultAttributes_(self, [[[JavaUtilHashMap alloc] init] autorelease]);
  }
  id<JavaUtilMap> elementAttributes = [((id<JavaUtilMap>) nil_chk(defaultAttributes_)) getWithId:elementName];
  if (elementAttributes == nil) {
    elementAttributes = [[[JavaUtilHashMap alloc] init] autorelease];
    [defaultAttributes_ putWithId:elementName withId:elementAttributes];
  }
  [((id<JavaUtilMap>) nil_chk(elementAttributes)) putWithId:attributeName withId:value];
}

- (void)readEntityDeclaration {
  [self readWithCharArray:OrgKxml2IoKXmlParser_START_ENTITY_];
  BOOL generalEntity = YES;
  [self skip];
  if ([self peekCharacter] == '%') {
    generalEntity = NO;
    position_++;
    [self skip];
  }
  NSString *name = [self readName];
  [self skip];
  int quote = [self peekCharacter];
  NSString *entityValue;
  if (quote == '"' || quote == '\'') {
    position_++;
    entityValue = [self readValueWithUnichar:(unichar) quote withBOOL:YES withBOOL:NO withOrgKxml2IoKXmlParser_ValueContextEnum:[OrgKxml2IoKXmlParser_ValueContextEnum ENTITY_DECLARATION]];
    position_++;
  }
  else if ([self readExternalIdWithBOOL:YES withBOOL:NO]) {
    entityValue = @"";
    [self skip];
    if ([self peekCharacter] == [((IOSCharArray *) nil_chk(OrgKxml2IoKXmlParser_NDATA_)) charAtIndex:0]) {
      [self readWithCharArray:OrgKxml2IoKXmlParser_NDATA_];
      [self skip];
      [self readName];
    }
  }
  else {
    @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"Expected entity value or external ID" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
  }
  if (generalEntity && processDocDecl_) {
    if (documentEntities_ == nil) {
      OrgKxml2IoKXmlParser_set_documentEntities_(self, [[[JavaUtilHashMap alloc] init] autorelease]);
    }
    [((id<JavaUtilMap>) nil_chk(documentEntities_)) putWithId:name withId:[((NSString *) nil_chk(entityValue)) toCharArray]];
  }
  [self skip];
  [self readWithUnichar:'>'];
}

+ (IOSObjectArray *)__exceptions_readEntityDeclaration {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass], [OrgXmlpullV1XmlPullParserException getClass] } count:2 type:[IOSClass getClass]];
}

- (void)readNotationDeclaration {
  [self readWithCharArray:OrgKxml2IoKXmlParser_START_NOTATION_];
  [self skip];
  [self readName];
  if (![self readExternalIdWithBOOL:NO withBOOL:NO]) {
    @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"Expected external ID or public ID for notation" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
  }
  [self skip];
  [self readWithUnichar:'>'];
}

+ (IOSObjectArray *)__exceptions_readNotationDeclaration {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass], [OrgXmlpullV1XmlPullParserException getClass] } count:2 type:[IOSClass getClass]];
}

- (void)readEndTag {
  [self readWithUnichar:'<'];
  [self readWithUnichar:'/'];
  OrgKxml2IoKXmlParser_set_name_(self, [self readName]);
  [self skip];
  [self readWithUnichar:'>'];
  int sp = (depth_ - 1) * 4;
  if (depth_ == 0) {
    [self checkRelaxedWithNSString:[NSString stringWithFormat:@"read end tag %@ with no tags open", name_]];
    type_ = OrgXmlpullV1XmlPullParser_COMMENT;
    return;
  }
  if ([((NSString *) nil_chk(name_)) isEqual:[((IOSObjectArray *) nil_chk(elementStack_)) objectAtIndex:sp + 3]]) {
    OrgKxml2IoKXmlParser_set_namespace__(self, [elementStack_ objectAtIndex:sp]);
    OrgKxml2IoKXmlParser_set_prefix_(self, [elementStack_ objectAtIndex:sp + 1]);
    OrgKxml2IoKXmlParser_set_name_(self, [elementStack_ objectAtIndex:sp + 2]);
  }
  else if (!relaxed_) {
    @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:[NSString stringWithFormat:@"expected: /%@ read: %@", [elementStack_ objectAtIndex:sp + 3], name_] withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
  }
}

+ (IOSObjectArray *)__exceptions_readEndTag {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass], [OrgXmlpullV1XmlPullParserException getClass] } count:2 type:[IOSClass getClass]];
}

- (int)peekTypeWithBOOL:(BOOL)inDeclaration {
  if (position_ >= limit_ && ![self fillBufferWithInt:1]) {
    return OrgXmlpullV1XmlPullParser_END_DOCUMENT;
  }
  switch ([((IOSCharArray *) nil_chk(buffer_)) charAtIndex:position_]) {
    case '&':
    return OrgXmlpullV1XmlPullParser_ENTITY_REF;
    case '<':
    if (position_ + 3 >= limit_ && ![self fillBufferWithInt:4]) {
      @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"Dangling <" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
    }
    switch ([buffer_ charAtIndex:position_ + 1]) {
      case '/':
      return OrgXmlpullV1XmlPullParser_END_TAG;
      case '?':
      if ((position_ + 5 < limit_ || [self fillBufferWithInt:6]) && ([buffer_ charAtIndex:position_ + 2] == 'x' || [buffer_ charAtIndex:position_ + 2] == 'X') && ([buffer_ charAtIndex:position_ + 3] == 'm' || [buffer_ charAtIndex:position_ + 3] == 'M') && ([buffer_ charAtIndex:position_ + 4] == 'l' || [buffer_ charAtIndex:position_ + 4] == 'L') && ([buffer_ charAtIndex:position_ + 5] == ' ')) {
        return OrgKxml2IoKXmlParser_XML_DECLARATION;
      }
      else {
        return OrgXmlpullV1XmlPullParser_PROCESSING_INSTRUCTION;
      }
      case '!':
      switch ([buffer_ charAtIndex:position_ + 2]) {
        case 'D':
        return OrgXmlpullV1XmlPullParser_DOCDECL;
        case '[':
        return OrgXmlpullV1XmlPullParser_CDSECT;
        case '-':
        return OrgXmlpullV1XmlPullParser_COMMENT;
        case 'E':
        switch ([buffer_ charAtIndex:position_ + 3]) {
          case 'L':
          return OrgKxml2IoKXmlParser_ELEMENTDECL;
          case 'N':
          return OrgKxml2IoKXmlParser_ENTITYDECL;
        }
        break;
        case 'A':
        return OrgKxml2IoKXmlParser_ATTLISTDECL;
        case 'N':
        return OrgKxml2IoKXmlParser_NOTATIONDECL;
      }
      @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"Unexpected <!" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
      default:
      return OrgXmlpullV1XmlPullParser_START_TAG;
    }
    case '%':
    return inDeclaration ? OrgKxml2IoKXmlParser_PARAMETER_ENTITY_REF : OrgXmlpullV1XmlPullParser_TEXT;
    default:
    return OrgXmlpullV1XmlPullParser_TEXT;
  }
}

+ (IOSObjectArray *)__exceptions_peekTypeWithBOOL_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass], [OrgXmlpullV1XmlPullParserException getClass] } count:2 type:[IOSClass getClass]];
}

- (void)parseStartTagWithBOOL:(BOOL)xmldecl
                     withBOOL:(BOOL)throwOnResolveFailure {
  if (!xmldecl) {
    [self readWithUnichar:'<'];
  }
  OrgKxml2IoKXmlParser_set_name_(self, [self readName]);
  attributeCount_ = 0;
  while (YES) {
    [self skip];
    if (position_ >= limit_ && ![self fillBufferWithInt:1]) {
      [self checkRelaxedWithNSString:OrgKxml2IoKXmlParser_UNEXPECTED_EOF_];
      return;
    }
    int c = [((IOSCharArray *) nil_chk(buffer_)) charAtIndex:position_];
    if (xmldecl) {
      if (c == '?') {
        position_++;
        [self readWithUnichar:'>'];
        return;
      }
    }
    else {
      if (c == '/') {
        degenerated_ = YES;
        position_++;
        [self skip];
        [self readWithUnichar:'>'];
        break;
      }
      else if (c == '>') {
        position_++;
        break;
      }
    }
    NSString *attrName = [self readName];
    int i = (attributeCount_++) * 4;
    OrgKxml2IoKXmlParser_set_attributes_(self, [self ensureCapacityWithNSStringArray:attributes_ withInt:i + 4]);
    [((IOSObjectArray *) nil_chk(attributes_)) replaceObjectAtIndex:i withObject:@""];
    [attributes_ replaceObjectAtIndex:i + 1 withObject:nil];
    [attributes_ replaceObjectAtIndex:i + 2 withObject:attrName];
    [self skip];
    if (position_ >= limit_ && ![self fillBufferWithInt:1]) {
      [self checkRelaxedWithNSString:OrgKxml2IoKXmlParser_UNEXPECTED_EOF_];
      return;
    }
    if ([buffer_ charAtIndex:position_] == '=') {
      position_++;
      [self skip];
      if (position_ >= limit_ && ![self fillBufferWithInt:1]) {
        [self checkRelaxedWithNSString:OrgKxml2IoKXmlParser_UNEXPECTED_EOF_];
        return;
      }
      unichar delimiter = [buffer_ charAtIndex:position_];
      if (delimiter == '\'' || delimiter == '"') {
        position_++;
      }
      else if (relaxed_) {
        delimiter = ' ';
      }
      else {
        @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"attr value delimiter missing!" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
      }
      [attributes_ replaceObjectAtIndex:i + 3 withObject:[self readValueWithUnichar:delimiter withBOOL:YES withBOOL:throwOnResolveFailure withOrgKxml2IoKXmlParser_ValueContextEnum:[OrgKxml2IoKXmlParser_ValueContextEnum ATTRIBUTE]]];
      if (delimiter != ' ') {
        position_++;
      }
    }
    else if (relaxed_) {
      [attributes_ replaceObjectAtIndex:i + 3 withObject:attrName];
    }
    else {
      [self checkRelaxedWithNSString:[NSString stringWithFormat:@"Attr.value missing f. %@", attrName]];
      [attributes_ replaceObjectAtIndex:i + 3 withObject:attrName];
    }
  }
  int sp = depth_++ * 4;
  OrgKxml2IoKXmlParser_set_elementStack_(self, [self ensureCapacityWithNSStringArray:elementStack_ withInt:sp + 4]);
  [((IOSObjectArray *) nil_chk(elementStack_)) replaceObjectAtIndex:sp + 3 withObject:name_];
  if (depth_ >= (int) [((IOSIntArray *) nil_chk(nspCounts_)) count]) {
    IOSIntArray *bigger = [IOSIntArray arrayWithLength:depth_ + 4];
    [JavaLangSystem arraycopyWithId:nspCounts_ withInt:0 withId:bigger withInt:0 withInt:(int) [nspCounts_ count]];
    OrgKxml2IoKXmlParser_set_nspCounts_(self, bigger);
  }
  (*[nspCounts_ intRefAtIndex:depth_]) = [nspCounts_ intAtIndex:depth_ - 1];
  if (processNsp_) {
    [self adjustNsp];
  }
  else {
    OrgKxml2IoKXmlParser_set_namespace__(self, @"");
  }
  if (defaultAttributes_ != nil) {
    id<JavaUtilMap> elementDefaultAttributes = [defaultAttributes_ getWithId:name_];
    if (elementDefaultAttributes != nil) {
      {
        id<JavaUtilIterator> iter__ = [((id<JavaUtilSet>) nil_chk([elementDefaultAttributes entrySet])) iterator];
        while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
          id<JavaUtilMap_Entry> entry = [iter__ next];
          if ([self getAttributeValueWithNSString:nil withNSString:[((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey]] != nil) {
            continue;
          }
          int i = (attributeCount_++) * 4;
          OrgKxml2IoKXmlParser_set_attributes_(self, [self ensureCapacityWithNSStringArray:attributes_ withInt:i + 4]);
          [((IOSObjectArray *) nil_chk(attributes_)) replaceObjectAtIndex:i withObject:@""];
          [attributes_ replaceObjectAtIndex:i + 1 withObject:nil];
          [attributes_ replaceObjectAtIndex:i + 2 withObject:[entry getKey]];
          [attributes_ replaceObjectAtIndex:i + 3 withObject:[entry getValue]];
        }
      }
    }
  }
  [elementStack_ replaceObjectAtIndex:sp withObject:namespace__];
  [elementStack_ replaceObjectAtIndex:sp + 1 withObject:prefix_];
  [elementStack_ replaceObjectAtIndex:sp + 2 withObject:name_];
}

+ (IOSObjectArray *)__exceptions_parseStartTagWithBOOL_withBOOL_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass], [OrgXmlpullV1XmlPullParserException getClass] } count:2 type:[IOSClass getClass]];
}

- (void)readEntityWithJavaLangStringBuilder:(JavaLangStringBuilder *)outArg
                                   withBOOL:(BOOL)isEntityToken
                                   withBOOL:(BOOL)throwOnResolveFailure
  withOrgKxml2IoKXmlParser_ValueContextEnum:(OrgKxml2IoKXmlParser_ValueContextEnum *)valueContext {
  int start = [((JavaLangStringBuilder *) nil_chk(outArg)) sequenceLength];
  if ([((IOSCharArray *) nil_chk(buffer_)) charAtIndex:position_++] != '&') {
    @throw [[[JavaLangAssertionError alloc] init] autorelease];
  }
  [outArg appendWithUnichar:'&'];
  while (YES) {
    int c = [self peekCharacter];
    if (c == ';') {
      [outArg appendWithUnichar:';'];
      position_++;
      break;
    }
    else if (c >= 128 || (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '_' || c == '-' || c == '#') {
      position_++;
      [outArg appendWithUnichar:(unichar) c];
    }
    else if (relaxed_) {
      return;
    }
    else {
      @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"unterminated entity ref" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
    }
  }
  NSString *code = [outArg substringWithInt:start + 1 withInt:[outArg sequenceLength] - 1];
  if (isEntityToken) {
    OrgKxml2IoKXmlParser_set_name_(self, code);
  }
  if ([((NSString *) nil_chk(code)) hasPrefix:@"#"]) {
    @try {
      int c = [code hasPrefix:@"#x"] ? [JavaLangInteger parseIntWithNSString:[code substring:2] withInt:16] : [JavaLangInteger parseIntWithNSString:[code substring:1]];
      [outArg delete__WithInt:start withInt:[outArg sequenceLength]];
      [outArg appendCodePointWithInt:c];
      unresolved_ = NO;
      return;
    }
    @catch (JavaLangNumberFormatException *notANumber) {
      @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:[NSString stringWithFormat:@"Invalid character reference: &%@", code]] autorelease];
    }
    @catch (JavaLangIllegalArgumentException *invalidCodePoint) {
      @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:[NSString stringWithFormat:@"Invalid character reference: &%@", code]] autorelease];
    }
  }
  if (valueContext == [OrgKxml2IoKXmlParser_ValueContextEnum ENTITY_DECLARATION]) {
    return;
  }
  NSString *defaultEntity = [((id<JavaUtilMap>) nil_chk(OrgKxml2IoKXmlParser_DEFAULT_ENTITIES_)) getWithId:code];
  if (defaultEntity != nil) {
    [outArg delete__WithInt:start withInt:[outArg sequenceLength]];
    unresolved_ = NO;
    [outArg appendWithNSString:defaultEntity];
    return;
  }
  IOSCharArray *resolved;
  if (documentEntities_ != nil && (resolved = [documentEntities_ getWithId:code]) != nil) {
    [outArg delete__WithInt:start withInt:[outArg sequenceLength]];
    unresolved_ = NO;
    if (processDocDecl_) {
      [self pushContentSourceWithCharArray:resolved];
    }
    else {
      [outArg appendWithCharArray:resolved];
    }
    return;
  }
  if (systemId_ != nil) {
    [outArg delete__WithInt:start withInt:[outArg sequenceLength]];
    return;
  }
  unresolved_ = YES;
  if (throwOnResolveFailure) {
    [self checkRelaxedWithNSString:[NSString stringWithFormat:@"unresolved: &%@;", code]];
  }
}

+ (IOSObjectArray *)__exceptions_readEntityWithJavaLangStringBuilder_withBOOL_withBOOL_withOrgKxml2IoKXmlParser_ValueContextEnum_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass], [OrgXmlpullV1XmlPullParserException getClass] } count:2 type:[IOSClass getClass]];
}

- (NSString *)readValueWithUnichar:(unichar)delimiter
                          withBOOL:(BOOL)resolveEntities
                          withBOOL:(BOOL)throwOnResolveFailure
withOrgKxml2IoKXmlParser_ValueContextEnum:(OrgKxml2IoKXmlParser_ValueContextEnum *)valueContext {
  int start = position_;
  JavaLangStringBuilder *result = nil;
  if (valueContext == [OrgKxml2IoKXmlParser_ValueContextEnum TEXT] && text_ != nil) {
    result = [[[JavaLangStringBuilder alloc] init] autorelease];
    [result appendWithNSString:text_];
  }
  while (YES) {
    if (position_ >= limit_) {
      if (start < position_) {
        if (result == nil) {
          result = [[[JavaLangStringBuilder alloc] init] autorelease];
        }
        [((JavaLangStringBuilder *) nil_chk(result)) appendWithCharArray:buffer_ withInt:start withInt:position_ - start];
      }
      if (![self fillBufferWithInt:1]) {
        return result != nil ? [result description] : @"";
      }
      start = position_;
    }
    unichar c = [((IOSCharArray *) nil_chk(buffer_)) charAtIndex:position_];
    if (c == delimiter || (delimiter == ' ' && (c <= ' ' || c == '>')) || (c == '&' && !resolveEntities)) {
      break;
    }
    if (c != 0x000d && (c != 0x000a || valueContext != [OrgKxml2IoKXmlParser_ValueContextEnum ATTRIBUTE]) && c != '&' && c != '<' && (c != ']' || valueContext != [OrgKxml2IoKXmlParser_ValueContextEnum TEXT]) && (c != '%' || valueContext != [OrgKxml2IoKXmlParser_ValueContextEnum ENTITY_DECLARATION])) {
      isWhitespace__ &= (c <= ' ');
      position_++;
      continue;
    }
    if (result == nil) {
      result = [[[JavaLangStringBuilder alloc] init] autorelease];
    }
    [((JavaLangStringBuilder *) nil_chk(result)) appendWithCharArray:buffer_ withInt:start withInt:position_ - start];
    if (c == 0x000d) {
      if ((position_ + 1 < limit_ || [self fillBufferWithInt:2]) && [buffer_ charAtIndex:position_ + 1] == 0x000a) {
        position_++;
      }
      c = (valueContext == [OrgKxml2IoKXmlParser_ValueContextEnum ATTRIBUTE]) ? ' ' : 0x000a;
    }
    else if (c == 0x000a) {
      c = ' ';
    }
    else if (c == '&') {
      isWhitespace__ = NO;
      [self readEntityWithJavaLangStringBuilder:result withBOOL:NO withBOOL:throwOnResolveFailure withOrgKxml2IoKXmlParser_ValueContextEnum:valueContext];
      start = position_;
      continue;
    }
    else if (c == '<') {
      if (valueContext == [OrgKxml2IoKXmlParser_ValueContextEnum ATTRIBUTE]) {
        [self checkRelaxedWithNSString:@"Illegal: \"<\" inside attribute value"];
      }
      isWhitespace__ = NO;
    }
    else if (c == ']') {
      if ((position_ + 2 < limit_ || [self fillBufferWithInt:3]) && [buffer_ charAtIndex:position_ + 1] == ']' && [buffer_ charAtIndex:position_ + 2] == '>') {
        [self checkRelaxedWithNSString:@"Illegal: \"]]>\" outside CDATA section"];
      }
      isWhitespace__ = NO;
    }
    else if (c == '%') {
      @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"This parser doesn't support parameter entities" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
    }
    else {
      @throw [[[JavaLangAssertionError alloc] init] autorelease];
    }
    position_++;
    [result appendWithUnichar:c];
    start = position_;
  }
  if (result == nil) {
    return [((LibcoreInternalStringPool *) nil_chk(stringPool_)) getWithCharArray:buffer_ withInt:start withInt:position_ - start];
  }
  else {
    [result appendWithCharArray:buffer_ withInt:start withInt:position_ - start];
    return [result description];
  }
}

+ (IOSObjectArray *)__exceptions_readValueWithUnichar_withBOOL_withBOOL_withOrgKxml2IoKXmlParser_ValueContextEnum_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass], [OrgXmlpullV1XmlPullParserException getClass] } count:2 type:[IOSClass getClass]];
}

- (void)readWithUnichar:(unichar)expected {
  int c = [self peekCharacter];
  if (c != expected) {
    [self checkRelaxedWithNSString:[NSString stringWithFormat:@"expected: '%C' actual: '%C'", expected, ((unichar) c)]];
  }
  position_++;
}

+ (IOSObjectArray *)__exceptions_readWithUnichar_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass], [OrgXmlpullV1XmlPullParserException getClass] } count:2 type:[IOSClass getClass]];
}

- (void)readWithCharArray:(IOSCharArray *)chars {
  if (position_ + (int) [((IOSCharArray *) nil_chk(chars)) count] >= limit_ && ![self fillBufferWithInt:(int) [chars count]]) {
    [self checkRelaxedWithNSString:[NSString stringWithFormat:@"expected: '%@' but was EOF", [NSString stringWithCharacters:chars]]];
    return;
  }
  for (int i = 0; i < (int) [chars count]; i++) {
    if ([((IOSCharArray *) nil_chk(buffer_)) charAtIndex:position_ + i] != [chars charAtIndex:i]) {
      [self checkRelaxedWithNSString:[NSString stringWithFormat:@"expected: \"%@\" but was \"%@...\"", [NSString stringWithCharacters:chars], [NSString stringWithCharacters:buffer_ offset:position_ length:(int) [chars count]]]];
    }
  }
  position_ += (int) [chars count];
}

+ (IOSObjectArray *)__exceptions_readWithCharArray_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass], [OrgXmlpullV1XmlPullParserException getClass] } count:2 type:[IOSClass getClass]];
}

- (int)peekCharacter {
  if (position_ < limit_ || [self fillBufferWithInt:1]) {
    return [((IOSCharArray *) nil_chk(buffer_)) charAtIndex:position_];
  }
  return -1;
}

+ (IOSObjectArray *)__exceptions_peekCharacter {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass], [OrgXmlpullV1XmlPullParserException getClass] } count:2 type:[IOSClass getClass]];
}

- (BOOL)fillBufferWithInt:(int)minimum {
  while (nextContentSource_ != nil) {
    if (position_ < limit_) {
      @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"Unbalanced entity!" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
    }
    [self popContentSource];
    if (limit_ - position_ >= minimum) {
      return YES;
    }
  }
  for (int i = 0; i < position_; i++) {
    if ([((IOSCharArray *) nil_chk(buffer_)) charAtIndex:i] == 0x000a) {
      bufferStartLine_++;
      bufferStartColumn_ = 0;
    }
    else {
      bufferStartColumn_++;
    }
  }
  if (bufferCapture_ != nil) {
    [bufferCapture_ appendWithCharArray:buffer_ withInt:0 withInt:position_];
  }
  if (limit_ != position_) {
    limit_ -= position_;
    [JavaLangSystem arraycopyWithId:buffer_ withInt:position_ withId:buffer_ withInt:0 withInt:limit_];
  }
  else {
    limit_ = 0;
  }
  position_ = 0;
  int total;
  while ((total = [((JavaIoReader *) nil_chk(reader_)) readWithCharArray:buffer_ withInt:limit_ withInt:(int) [((IOSCharArray *) nil_chk(buffer_)) count] - limit_]) != -1) {
    limit_ += total;
    if (limit_ >= minimum) {
      return YES;
    }
  }
  return NO;
}

+ (IOSObjectArray *)__exceptions_fillBufferWithInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass], [OrgXmlpullV1XmlPullParserException getClass] } count:2 type:[IOSClass getClass]];
}

- (NSString *)readName {
  if (position_ >= limit_ && ![self fillBufferWithInt:1]) {
    [self checkRelaxedWithNSString:@"name expected"];
    return @"";
  }
  int start = position_;
  JavaLangStringBuilder *result = nil;
  unichar c = [((IOSCharArray *) nil_chk(buffer_)) charAtIndex:position_];
  if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '_' || c == ':' || c >= 0x00c0 || relaxed_) {
    position_++;
  }
  else {
    [self checkRelaxedWithNSString:@"name expected"];
    return @"";
  }
  while (YES) {
    if (position_ >= limit_) {
      if (result == nil) {
        result = [[[JavaLangStringBuilder alloc] init] autorelease];
      }
      [((JavaLangStringBuilder *) nil_chk(result)) appendWithCharArray:buffer_ withInt:start withInt:position_ - start];
      if (![self fillBufferWithInt:1]) {
        return [result description];
      }
      start = position_;
    }
    c = [buffer_ charAtIndex:position_];
    if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9') || c == '_' || c == '-' || c == ':' || c == '.' || c >= 0x00b7) {
      position_++;
      continue;
    }
    if (result == nil) {
      return [((LibcoreInternalStringPool *) nil_chk(stringPool_)) getWithCharArray:buffer_ withInt:start withInt:position_ - start];
    }
    else {
      [result appendWithCharArray:buffer_ withInt:start withInt:position_ - start];
      return [result description];
    }
  }
}

+ (IOSObjectArray *)__exceptions_readName {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass], [OrgXmlpullV1XmlPullParserException getClass] } count:2 type:[IOSClass getClass]];
}

- (void)skip {
  while (position_ < limit_ || [self fillBufferWithInt:1]) {
    int c = [((IOSCharArray *) nil_chk(buffer_)) charAtIndex:position_];
    if (c > ' ') {
      break;
    }
    position_++;
  }
}

+ (IOSObjectArray *)__exceptions_skip {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass], [OrgXmlpullV1XmlPullParserException getClass] } count:2 type:[IOSClass getClass]];
}

- (void)setInputWithJavaIoReader:(JavaIoReader *)reader {
  OrgKxml2IoKXmlParser_set_reader_(self, reader);
  type_ = OrgXmlpullV1XmlPullParser_START_DOCUMENT;
  OrgKxml2IoKXmlParser_set_name_(self, nil);
  OrgKxml2IoKXmlParser_set_namespace__(self, nil);
  degenerated_ = NO;
  attributeCount_ = -1;
  OrgKxml2IoKXmlParser_set_encoding_(self, nil);
  OrgKxml2IoKXmlParser_set_version__(self, nil);
  OrgKxml2IoKXmlParser_set_standalone_(self, nil);
  if (reader == nil) {
    return;
  }
  position_ = 0;
  limit_ = 0;
  bufferStartLine_ = 0;
  bufferStartColumn_ = 0;
  depth_ = 0;
  OrgKxml2IoKXmlParser_set_documentEntities_(self, nil);
}

+ (IOSObjectArray *)__exceptions_setInputWithJavaIoReader_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlpullV1XmlPullParserException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)setInputWithJavaIoInputStream:(JavaIoInputStream *)is
                         withNSString:(NSString *)charset {
  position_ = 0;
  limit_ = 0;
  BOOL detectCharset = (charset == nil);
  if (is == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"is == null"] autorelease];
  }
  @try {
    if (detectCharset) {
      int firstFourBytes = 0;
      while (limit_ < 4) {
        int i = [((JavaIoInputStream *) nil_chk(is)) read];
        if (i == -1) {
          break;
        }
        firstFourBytes = (firstFourBytes << 8) | i;
        (*[((IOSCharArray *) nil_chk(buffer_)) charRefAtIndex:limit_++]) = (unichar) i;
      }
      if (limit_ == 4) {
        switch (firstFourBytes) {
          case (int) 0x00000FEFF:
          charset = @"UTF-32BE";
          limit_ = 0;
          break;
          case (int) 0x0FFFE0000:
          charset = @"UTF-32LE";
          limit_ = 0;
          break;
          case (int) 0x0000003c:
          charset = @"UTF-32BE";
          (*[((IOSCharArray *) nil_chk(buffer_)) charRefAtIndex:0]) = '<';
          limit_ = 1;
          break;
          case (int) 0x03c000000:
          charset = @"UTF-32LE";
          (*[((IOSCharArray *) nil_chk(buffer_)) charRefAtIndex:0]) = '<';
          limit_ = 1;
          break;
          case (int) 0x0003c003f:
          charset = @"UTF-16BE";
          (*[((IOSCharArray *) nil_chk(buffer_)) charRefAtIndex:0]) = '<';
          (*[buffer_ charRefAtIndex:1]) = '?';
          limit_ = 2;
          break;
          case (int) 0x03c003f00:
          charset = @"UTF-16LE";
          (*[((IOSCharArray *) nil_chk(buffer_)) charRefAtIndex:0]) = '<';
          (*[buffer_ charRefAtIndex:1]) = '?';
          limit_ = 2;
          break;
          case (int) 0x03c3f786d:
          while (YES) {
            int i = [((JavaIoInputStream *) nil_chk(is)) read];
            if (i == -1) {
              break;
            }
            (*[((IOSCharArray *) nil_chk(buffer_)) charRefAtIndex:limit_++]) = (unichar) i;
            if (i == '>') {
              NSString *s = [NSString stringWithCharacters:buffer_ offset:0 length:limit_];
              int i0 = [s indexOfString:@"encoding"];
              if (i0 != -1) {
                while ([s charAtWithInt:i0] != '"' && [s charAtWithInt:i0] != '\'') {
                  i0++;
                }
                unichar deli = [s charAtWithInt:i0++];
                int i1 = [s indexOf:deli fromIndex:i0];
                charset = [s substring:i0 endIndex:i1];
              }
              break;
            }
          }
          break;
          default:
          if ((firstFourBytes & (int) 0x0ffff0000) == (int) 0x0feff0000) {
            charset = @"UTF-16BE";
            (*[((IOSCharArray *) nil_chk(buffer_)) charRefAtIndex:0]) = (unichar) (([buffer_ charAtIndex:2] << 8) | [buffer_ charAtIndex:3]);
            limit_ = 1;
          }
          else if ((firstFourBytes & (int) 0x0ffff0000) == (int) 0x0fffe0000) {
            charset = @"UTF-16LE";
            (*[((IOSCharArray *) nil_chk(buffer_)) charRefAtIndex:0]) = (unichar) (([buffer_ charAtIndex:3] << 8) | [buffer_ charAtIndex:2]);
            limit_ = 1;
          }
          else if ((firstFourBytes & (int) 0x0ffffff00) == (int) 0x0efbbbf00) {
            charset = @"UTF-8";
            (*[((IOSCharArray *) nil_chk(buffer_)) charRefAtIndex:0]) = [buffer_ charAtIndex:3];
            limit_ = 1;
          }
        }
      }
    }
    if (charset == nil) {
      charset = @"UTF-8";
    }
    int savedLimit = limit_;
    [self setInputWithJavaIoReader:[[[JavaIoInputStreamReader alloc] initWithJavaIoInputStream:is withNSString:charset] autorelease]];
    OrgKxml2IoKXmlParser_set_encoding_(self, charset);
    limit_ = savedLimit;
    if (!detectCharset && [self peekCharacter] == (int) 0xfeff) {
      limit_--;
      [JavaLangSystem arraycopyWithId:buffer_ withInt:1 withId:buffer_ withInt:0 withInt:limit_];
    }
  }
  @catch (JavaLangException *e) {
    @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:[NSString stringWithFormat:@"Invalid stream or encoding: %@", e] withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:e] autorelease];
  }
}

+ (IOSObjectArray *)__exceptions_setInputWithJavaIoInputStream_withNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlpullV1XmlPullParserException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)close {
  if (reader_ != nil) {
    [reader_ close];
  }
}

+ (IOSObjectArray *)__exceptions_close {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (BOOL)getFeatureWithNSString:(NSString *)feature {
  if ([((NSString *) nil_chk([OrgXmlpullV1XmlPullParser FEATURE_PROCESS_NAMESPACES])) isEqual:feature]) {
    return processNsp_;
  }
  else if ([((NSString *) nil_chk(OrgKxml2IoKXmlParser_FEATURE_RELAXED_)) isEqual:feature]) {
    return relaxed_;
  }
  else if ([((NSString *) nil_chk([OrgXmlpullV1XmlPullParser FEATURE_PROCESS_DOCDECL])) isEqual:feature]) {
    return processDocDecl_;
  }
  else {
    return NO;
  }
}

- (NSString *)getInputEncoding {
  return encoding_;
}

- (void)defineEntityReplacementTextWithNSString:(NSString *)entity
                                   withNSString:(NSString *)value {
  if (processDocDecl_) {
    @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"Entity replacement text may not be defined with DOCTYPE processing enabled."] autorelease];
  }
  if (reader_ == nil) {
    @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"Entity replacement text must be defined after setInput()"] autorelease];
  }
  if (documentEntities_ == nil) {
    OrgKxml2IoKXmlParser_set_documentEntities_(self, [[[JavaUtilHashMap alloc] init] autorelease]);
  }
  [((id<JavaUtilMap>) nil_chk(documentEntities_)) putWithId:entity withId:[((NSString *) nil_chk(value)) toCharArray]];
}

+ (IOSObjectArray *)__exceptions_defineEntityReplacementTextWithNSString_withNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlpullV1XmlPullParserException getClass] } count:1 type:[IOSClass getClass]];
}

- (id)getPropertyWithNSString:(NSString *)property {
  if ([((NSString *) nil_chk(property)) isEqual:OrgKxml2IoKXmlParser_PROPERTY_XMLDECL_VERSION_]) {
    return version__;
  }
  else if ([property isEqual:OrgKxml2IoKXmlParser_PROPERTY_XMLDECL_STANDALONE_]) {
    return standalone_;
  }
  else if ([property isEqual:OrgKxml2IoKXmlParser_PROPERTY_LOCATION_]) {
    return location_ != nil ? location_ : [((JavaIoReader *) nil_chk(reader_)) description];
  }
  else {
    return nil;
  }
}

- (NSString *)getRootElementName {
  return rootElementName_;
}

- (NSString *)getSystemId {
  return systemId_;
}

- (NSString *)getPublicId {
  return publicId_;
}

- (int)getNamespaceCountWithInt:(int)depth {
  if (depth > self->depth_) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  return [((IOSIntArray *) nil_chk(nspCounts_)) intAtIndex:depth];
}

- (NSString *)getNamespacePrefixWithInt:(int)pos {
  return [((IOSObjectArray *) nil_chk(nspStack_)) objectAtIndex:pos * 2];
}

- (NSString *)getNamespaceUriWithInt:(int)pos {
  return [((IOSObjectArray *) nil_chk(nspStack_)) objectAtIndex:(pos * 2) + 1];
}

- (NSString *)getNamespaceWithNSString:(NSString *)prefix {
  if ([@"xml" isEqual:prefix]) {
    return @"http://www.w3.org/XML/1998/namespace";
  }
  if ([@"xmlns" isEqual:prefix]) {
    return @"http://www.w3.org/2000/xmlns/";
  }
  for (int i = ([self getNamespaceCountWithInt:depth_] << 1) - 2; i >= 0; i -= 2) {
    if (prefix == nil) {
      if ([((IOSObjectArray *) nil_chk(nspStack_)) objectAtIndex:i] == nil) {
        return [nspStack_ objectAtIndex:i + 1];
      }
    }
    else if ([prefix isEqual:[((IOSObjectArray *) nil_chk(nspStack_)) objectAtIndex:i]]) {
      return [nspStack_ objectAtIndex:i + 1];
    }
  }
  return nil;
}

- (int)getDepth {
  return depth_;
}

- (NSString *)getPositionDescription {
  JavaLangStringBuilder *buf = [[[JavaLangStringBuilder alloc] initWithNSString:type_ < (int) [((IOSObjectArray *) nil_chk([OrgXmlpullV1XmlPullParser TYPES])) count] ? [[OrgXmlpullV1XmlPullParser TYPES] objectAtIndex:type_] : @"unknown"] autorelease];
  [buf appendWithUnichar:' '];
  if (type_ == OrgXmlpullV1XmlPullParser_START_TAG || type_ == OrgXmlpullV1XmlPullParser_END_TAG) {
    if (degenerated_) {
      [buf appendWithNSString:@"(empty) "];
    }
    [buf appendWithUnichar:'<'];
    if (type_ == OrgXmlpullV1XmlPullParser_END_TAG) {
      [buf appendWithUnichar:'/'];
    }
    if (prefix_ != nil) {
      [buf appendWithNSString:[NSString stringWithFormat:@"{%@}%@:", namespace__, prefix_]];
    }
    [buf appendWithNSString:name_];
    int cnt = attributeCount_ * 4;
    for (int i = 0; i < cnt; i += 4) {
      [buf appendWithUnichar:' '];
      if ([((IOSObjectArray *) nil_chk(attributes_)) objectAtIndex:i + 1] != nil) {
        [buf appendWithNSString:[NSString stringWithFormat:@"{%@}%@:", [attributes_ objectAtIndex:i], [attributes_ objectAtIndex:i + 1]]];
      }
      [buf appendWithNSString:[NSString stringWithFormat:@"%@='%@'", [attributes_ objectAtIndex:i + 2], [attributes_ objectAtIndex:i + 3]]];
    }
    [buf appendWithUnichar:'>'];
  }
  else if (type_ == OrgXmlpullV1XmlPullParser_IGNORABLE_WHITESPACE) {
    ;
  }
  else if (type_ != OrgXmlpullV1XmlPullParser_TEXT) {
    [buf appendWithNSString:[self getText]];
  }
  else if (isWhitespace__) {
    [buf appendWithNSString:@"(whitespace)"];
  }
  else {
    NSString *text = [self getText];
    if ([((NSString *) nil_chk(text)) length] > 16) {
      text = [NSString stringWithFormat:@"%@...", [text substring:0 endIndex:16]];
    }
    [buf appendWithNSString:text];
  }
  [buf appendWithNSString:[NSString stringWithFormat:@"@%d:%d", [self getLineNumber], [self getColumnNumber]]];
  if (location_ != nil) {
    [buf appendWithNSString:@" in "];
    [buf appendWithNSString:location_];
  }
  else if (reader_ != nil) {
    [buf appendWithNSString:@" in "];
    [buf appendWithNSString:[reader_ description]];
  }
  return [buf description];
}

- (int)getLineNumber {
  int result = bufferStartLine_;
  for (int i = 0; i < position_; i++) {
    if ([((IOSCharArray *) nil_chk(buffer_)) charAtIndex:i] == 0x000a) {
      result++;
    }
  }
  return result + 1;
}

- (int)getColumnNumber {
  int result = bufferStartColumn_;
  for (int i = 0; i < position_; i++) {
    if ([((IOSCharArray *) nil_chk(buffer_)) charAtIndex:i] == 0x000a) {
      result = 0;
    }
    else {
      result++;
    }
  }
  return result + 1;
}

- (BOOL)isWhitespace {
  if (type_ != OrgXmlpullV1XmlPullParser_TEXT && type_ != OrgXmlpullV1XmlPullParser_IGNORABLE_WHITESPACE && type_ != OrgXmlpullV1XmlPullParser_CDSECT) {
    @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:OrgKxml2IoKXmlParser_ILLEGAL_TYPE_ withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
  }
  return isWhitespace__;
}

+ (IOSObjectArray *)__exceptions_isWhitespace {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlpullV1XmlPullParserException getClass] } count:1 type:[IOSClass getClass]];
}

- (NSString *)getText {
  if (type_ < OrgXmlpullV1XmlPullParser_TEXT || (type_ == OrgXmlpullV1XmlPullParser_ENTITY_REF && unresolved_)) {
    return nil;
  }
  else if (text_ == nil) {
    return @"";
  }
  else {
    return text_;
  }
}

- (IOSCharArray *)getTextCharactersWithIntArray:(IOSIntArray *)poslen {
  NSString *text = [self getText];
  if (text == nil) {
    (*[((IOSIntArray *) nil_chk(poslen)) intRefAtIndex:0]) = -1;
    (*[poslen intRefAtIndex:1]) = -1;
    return nil;
  }
  IOSCharArray *result = [((NSString *) nil_chk(text)) toCharArray];
  (*[((IOSIntArray *) nil_chk(poslen)) intRefAtIndex:0]) = 0;
  (*[poslen intRefAtIndex:1]) = (int) [((IOSCharArray *) nil_chk(result)) count];
  return result;
}

- (NSString *)getNamespace {
  return namespace__;
}

- (NSString *)getName {
  return name_;
}

- (NSString *)getPrefix {
  return prefix_;
}

- (BOOL)isEmptyElementTag {
  if (type_ != OrgXmlpullV1XmlPullParser_START_TAG) {
    @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:OrgKxml2IoKXmlParser_ILLEGAL_TYPE_ withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
  }
  return degenerated_;
}

+ (IOSObjectArray *)__exceptions_isEmptyElementTag {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlpullV1XmlPullParserException getClass] } count:1 type:[IOSClass getClass]];
}

- (int)getAttributeCount {
  return attributeCount_;
}

- (NSString *)getAttributeTypeWithInt:(int)index {
  return @"CDATA";
}

- (BOOL)isAttributeDefaultWithInt:(int)index {
  return NO;
}

- (NSString *)getAttributeNamespaceWithInt:(int)index {
  if (index >= attributeCount_) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  return [((IOSObjectArray *) nil_chk(attributes_)) objectAtIndex:index * 4];
}

- (NSString *)getAttributeNameWithInt:(int)index {
  if (index >= attributeCount_) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  return [((IOSObjectArray *) nil_chk(attributes_)) objectAtIndex:(index * 4) + 2];
}

- (NSString *)getAttributePrefixWithInt:(int)index {
  if (index >= attributeCount_) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  return [((IOSObjectArray *) nil_chk(attributes_)) objectAtIndex:(index * 4) + 1];
}

- (NSString *)getAttributeValueWithInt:(int)index {
  if (index >= attributeCount_) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  return [((IOSObjectArray *) nil_chk(attributes_)) objectAtIndex:(index * 4) + 3];
}

- (NSString *)getAttributeValueWithNSString:(NSString *)namespace_
                               withNSString:(NSString *)name {
  for (int i = (attributeCount_ * 4) - 4; i >= 0; i -= 4) {
    if ([((NSString *) nil_chk([((IOSObjectArray *) nil_chk(attributes_)) objectAtIndex:i + 2])) isEqual:name] && (namespace_ == nil || [((NSString *) nil_chk([attributes_ objectAtIndex:i])) isEqual:namespace_])) {
      return [attributes_ objectAtIndex:i + 3];
    }
  }
  return nil;
}

- (int)getEventType {
  return type_;
}

+ (IOSObjectArray *)__exceptions_getEventType {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlpullV1XmlPullParserException getClass] } count:1 type:[IOSClass getClass]];
}

- (int)nextTag {
  [self next];
  if (type_ == OrgXmlpullV1XmlPullParser_TEXT && isWhitespace__) {
    [self next];
  }
  if (type_ != OrgXmlpullV1XmlPullParser_END_TAG && type_ != OrgXmlpullV1XmlPullParser_START_TAG) {
    @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"unexpected type" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
  }
  return type_;
}

+ (IOSObjectArray *)__exceptions_nextTag {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlpullV1XmlPullParserException getClass], [JavaIoIOException getClass] } count:2 type:[IOSClass getClass]];
}

- (void)requireWithInt:(int)type
          withNSString:(NSString *)namespace_
          withNSString:(NSString *)name {
  if (type != self->type_ || (namespace_ != nil && ![namespace_ isEqual:[self getNamespace]]) || (name != nil && ![name isEqual:[self getName]])) {
    @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:[NSString stringWithFormat:@"expected: %@ {%@}%@", [((IOSObjectArray *) nil_chk([OrgXmlpullV1XmlPullParser TYPES])) objectAtIndex:type], namespace_, name] withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
  }
}

+ (IOSObjectArray *)__exceptions_requireWithInt_withNSString_withNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlpullV1XmlPullParserException getClass], [JavaIoIOException getClass] } count:2 type:[IOSClass getClass]];
}

- (NSString *)nextText {
  if (type_ != OrgXmlpullV1XmlPullParser_START_TAG) {
    @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"precondition: START_TAG" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
  }
  [self next];
  NSString *result;
  if (type_ == OrgXmlpullV1XmlPullParser_TEXT) {
    result = [self getText];
    [self next];
  }
  else {
    result = @"";
  }
  if (type_ != OrgXmlpullV1XmlPullParser_END_TAG) {
    @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"END_TAG expected" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
  }
  return result;
}

+ (IOSObjectArray *)__exceptions_nextText {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlpullV1XmlPullParserException getClass], [JavaIoIOException getClass] } count:2 type:[IOSClass getClass]];
}

- (void)setFeatureWithNSString:(NSString *)feature
                      withBOOL:(BOOL)value {
  if ([((NSString *) nil_chk([OrgXmlpullV1XmlPullParser FEATURE_PROCESS_NAMESPACES])) isEqual:feature]) {
    processNsp_ = value;
  }
  else if ([((NSString *) nil_chk([OrgXmlpullV1XmlPullParser FEATURE_PROCESS_DOCDECL])) isEqual:feature]) {
    processDocDecl_ = value;
  }
  else if ([((NSString *) nil_chk(OrgKxml2IoKXmlParser_FEATURE_RELAXED_)) isEqual:feature]) {
    relaxed_ = value;
  }
  else {
    @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:[NSString stringWithFormat:@"unsupported feature: %@", feature] withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
  }
}

+ (IOSObjectArray *)__exceptions_setFeatureWithNSString_withBOOL_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlpullV1XmlPullParserException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)setPropertyWithNSString:(NSString *)property
                         withId:(id)value {
  if ([((NSString *) nil_chk(property)) isEqual:OrgKxml2IoKXmlParser_PROPERTY_LOCATION_]) {
    OrgKxml2IoKXmlParser_set_location_(self, [NSString valueOf:value]);
  }
  else {
    @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:[NSString stringWithFormat:@"unsupported property: %@", property]] autorelease];
  }
}

+ (IOSObjectArray *)__exceptions_setPropertyWithNSString_withId_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlpullV1XmlPullParserException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)pushContentSourceWithCharArray:(IOSCharArray *)newBuffer {
  OrgKxml2IoKXmlParser_set_nextContentSource_(self, [[[OrgKxml2IoKXmlParser_ContentSource alloc] initWithOrgKxml2IoKXmlParser_ContentSource:nextContentSource_ withCharArray:buffer_ withInt:position_ withInt:limit_] autorelease]);
  OrgKxml2IoKXmlParser_set_buffer_(self, newBuffer);
  position_ = 0;
  limit_ = (int) [((IOSCharArray *) nil_chk(newBuffer)) count];
}

- (void)popContentSource {
  OrgKxml2IoKXmlParser_set_buffer_(self, ((OrgKxml2IoKXmlParser_ContentSource *) nil_chk(nextContentSource_))->buffer_);
  position_ = nextContentSource_->position_;
  limit_ = nextContentSource_->limit_;
  OrgKxml2IoKXmlParser_set_nextContentSource_(self, nextContentSource_->next_);
}

- (id)init {
  if ((self = [super init])) {
    OrgKxml2IoKXmlParser_set_elementStack_(self, [IOSObjectArray arrayWithLength:16 type:[IOSClass classWithClass:[NSString class]]]);
    OrgKxml2IoKXmlParser_set_nspStack_(self, [IOSObjectArray arrayWithLength:8 type:[IOSClass classWithClass:[NSString class]]]);
    OrgKxml2IoKXmlParser_set_nspCounts_(self, [IOSIntArray arrayWithLength:4]);
    OrgKxml2IoKXmlParser_set_buffer_(self, [IOSCharArray arrayWithLength:8192]);
    position_ = 0;
    limit_ = 0;
    OrgKxml2IoKXmlParser_set_attributes_(self, [IOSObjectArray arrayWithLength:16 type:[IOSClass classWithClass:[NSString class]]]);
    OrgKxml2IoKXmlParser_set_stringPool_(self, [[[LibcoreInternalStringPool alloc] init] autorelease]);
    JreMemDebugAdd(self);
  }
  return self;
}

+ (void)initialize {
  if (self == [OrgKxml2IoKXmlParser class]) {
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_DEFAULT_ENTITIES_, nil, [[[JavaUtilHashMap alloc] init] autorelease]);
    {
      [OrgKxml2IoKXmlParser_DEFAULT_ENTITIES_ putWithId:@"lt" withId:@"<"];
      [OrgKxml2IoKXmlParser_DEFAULT_ENTITIES_ putWithId:@"gt" withId:@">"];
      [OrgKxml2IoKXmlParser_DEFAULT_ENTITIES_ putWithId:@"amp" withId:@"&"];
      [OrgKxml2IoKXmlParser_DEFAULT_ENTITIES_ putWithId:@"apos" withId:@"'"];
      [OrgKxml2IoKXmlParser_DEFAULT_ENTITIES_ putWithId:@"quot" withId:@"\""];
    }
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_START_COMMENT_, nil, [IOSCharArray arrayWithCharacters:(unichar[]){ '<', '!', '-', '-' } count:4]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_END_COMMENT_, nil, [IOSCharArray arrayWithCharacters:(unichar[]){ '-', '-', '>' } count:3]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_COMMENT_DOUBLE_DASH_, nil, [IOSCharArray arrayWithCharacters:(unichar[]){ '-', '-' } count:2]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_START_CDATA_, nil, [IOSCharArray arrayWithCharacters:(unichar[]){ '<', '!', '[', 'C', 'D', 'A', 'T', 'A', '[' } count:9]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_END_CDATA_, nil, [IOSCharArray arrayWithCharacters:(unichar[]){ ']', ']', '>' } count:3]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_START_PROCESSING_INSTRUCTION_, nil, [IOSCharArray arrayWithCharacters:(unichar[]){ '<', '?' } count:2]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_END_PROCESSING_INSTRUCTION_, nil, [IOSCharArray arrayWithCharacters:(unichar[]){ '?', '>' } count:2]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_START_DOCTYPE_, nil, [IOSCharArray arrayWithCharacters:(unichar[]){ '<', '!', 'D', 'O', 'C', 'T', 'Y', 'P', 'E' } count:9]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_SYSTEM_, nil, [IOSCharArray arrayWithCharacters:(unichar[]){ 'S', 'Y', 'S', 'T', 'E', 'M' } count:6]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_PUBLIC_, nil, [IOSCharArray arrayWithCharacters:(unichar[]){ 'P', 'U', 'B', 'L', 'I', 'C' } count:6]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_START_ELEMENT_, nil, [IOSCharArray arrayWithCharacters:(unichar[]){ '<', '!', 'E', 'L', 'E', 'M', 'E', 'N', 'T' } count:9]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_START_ATTLIST_, nil, [IOSCharArray arrayWithCharacters:(unichar[]){ '<', '!', 'A', 'T', 'T', 'L', 'I', 'S', 'T' } count:9]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_START_ENTITY_, nil, [IOSCharArray arrayWithCharacters:(unichar[]){ '<', '!', 'E', 'N', 'T', 'I', 'T', 'Y' } count:8]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_START_NOTATION_, nil, [IOSCharArray arrayWithCharacters:(unichar[]){ '<', '!', 'N', 'O', 'T', 'A', 'T', 'I', 'O', 'N' } count:10]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_EMPTY_, nil, [IOSCharArray arrayWithCharacters:(unichar[]){ 'E', 'M', 'P', 'T', 'Y' } count:5]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_ANY_, nil, [IOSCharArray arrayWithCharacters:(unichar[]){ 'A', 'N', 'Y' } count:3]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_NDATA_, nil, [IOSCharArray arrayWithCharacters:(unichar[]){ 'N', 'D', 'A', 'T', 'A' } count:5]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_NOTATION_, nil, [IOSCharArray arrayWithCharacters:(unichar[]){ 'N', 'O', 'T', 'A', 'T', 'I', 'O', 'N' } count:8]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_REQUIRED_, nil, [IOSCharArray arrayWithCharacters:(unichar[]){ 'R', 'E', 'Q', 'U', 'I', 'R', 'E', 'D' } count:8]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_IMPLIED_, nil, [IOSCharArray arrayWithCharacters:(unichar[]){ 'I', 'M', 'P', 'L', 'I', 'E', 'D' } count:7]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_FIXED_, nil, [IOSCharArray arrayWithCharacters:(unichar[]){ 'F', 'I', 'X', 'E', 'D' } count:5]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_SINGLE_QUOTE_, nil, [IOSCharArray arrayWithCharacters:(unichar[]){ '\'' } count:1]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_DOUBLE_QUOTE_, nil, [IOSCharArray arrayWithCharacters:(unichar[]){ '"' } count:1]);
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  OrgKxml2IoKXmlParser_set_stringPool_(self, nil);
  OrgKxml2IoKXmlParser_set_error_(self, nil);
  OrgKxml2IoKXmlParser_set_attributes_(self, nil);
  OrgKxml2IoKXmlParser_set_text_(self, nil);
  OrgKxml2IoKXmlParser_set_name_(self, nil);
  OrgKxml2IoKXmlParser_set_prefix_(self, nil);
  OrgKxml2IoKXmlParser_set_namespace__(self, nil);
  OrgKxml2IoKXmlParser_set_buffer_(self, nil);
  OrgKxml2IoKXmlParser_set_nextContentSource_(self, nil);
  OrgKxml2IoKXmlParser_set_encoding_(self, nil);
  OrgKxml2IoKXmlParser_set_reader_(self, nil);
  OrgKxml2IoKXmlParser_set_nspCounts_(self, nil);
  OrgKxml2IoKXmlParser_set_nspStack_(self, nil);
  OrgKxml2IoKXmlParser_set_elementStack_(self, nil);
  OrgKxml2IoKXmlParser_set_defaultAttributes_(self, nil);
  OrgKxml2IoKXmlParser_set_documentEntities_(self, nil);
  OrgKxml2IoKXmlParser_set_bufferCapture_(self, nil);
  OrgKxml2IoKXmlParser_set_publicId_(self, nil);
  OrgKxml2IoKXmlParser_set_systemId_(self, nil);
  OrgKxml2IoKXmlParser_set_rootElementName_(self, nil);
  OrgKxml2IoKXmlParser_set_standalone_(self, nil);
  OrgKxml2IoKXmlParser_set_version__(self, nil);
  OrgKxml2IoKXmlParser_set_location_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgKxml2IoKXmlParser *)other {
  [super copyAllFieldsTo:other];
  other->attributeCount_ = attributeCount_;
  OrgKxml2IoKXmlParser_set_attributes_(other, attributes_);
  OrgKxml2IoKXmlParser_set_buffer_(other, buffer_);
  OrgKxml2IoKXmlParser_set_bufferCapture_(other, bufferCapture_);
  other->bufferStartColumn_ = bufferStartColumn_;
  other->bufferStartLine_ = bufferStartLine_;
  OrgKxml2IoKXmlParser_set_defaultAttributes_(other, defaultAttributes_);
  other->degenerated_ = degenerated_;
  other->depth_ = depth_;
  OrgKxml2IoKXmlParser_set_documentEntities_(other, documentEntities_);
  OrgKxml2IoKXmlParser_set_elementStack_(other, elementStack_);
  OrgKxml2IoKXmlParser_set_encoding_(other, encoding_);
  OrgKxml2IoKXmlParser_set_error_(other, error_);
  other->isWhitespace__ = isWhitespace__;
  other->keepNamespaceAttributes__ = keepNamespaceAttributes__;
  other->limit_ = limit_;
  OrgKxml2IoKXmlParser_set_location_(other, location_);
  OrgKxml2IoKXmlParser_set_name_(other, name_);
  OrgKxml2IoKXmlParser_set_namespace__(other, namespace__);
  OrgKxml2IoKXmlParser_set_nextContentSource_(other, nextContentSource_);
  OrgKxml2IoKXmlParser_set_nspCounts_(other, nspCounts_);
  OrgKxml2IoKXmlParser_set_nspStack_(other, nspStack_);
  other->position_ = position_;
  OrgKxml2IoKXmlParser_set_prefix_(other, prefix_);
  other->processDocDecl_ = processDocDecl_;
  other->processNsp_ = processNsp_;
  OrgKxml2IoKXmlParser_set_publicId_(other, publicId_);
  OrgKxml2IoKXmlParser_set_reader_(other, reader_);
  other->relaxed_ = relaxed_;
  OrgKxml2IoKXmlParser_set_rootElementName_(other, rootElementName_);
  OrgKxml2IoKXmlParser_set_standalone_(other, standalone_);
  OrgKxml2IoKXmlParser_set_stringPool_(other, stringPool_);
  OrgKxml2IoKXmlParser_set_systemId_(other, systemId_);
  OrgKxml2IoKXmlParser_set_text_(other, text_);
  other->type_ = type_;
  other->unresolved_ = unresolved_;
  OrgKxml2IoKXmlParser_set_version__(other, version__);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:location_ name:@"location"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:version__ name:@"version_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:standalone_ name:@"standalone"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:rootElementName_ name:@"rootElementName"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:systemId_ name:@"systemId"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:publicId_ name:@"publicId"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:bufferCapture_ name:@"bufferCapture"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:documentEntities_ name:@"documentEntities"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:defaultAttributes_ name:@"defaultAttributes"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:elementStack_ name:@"elementStack"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:nspStack_ name:@"nspStack"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:nspCounts_ name:@"nspCounts"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:reader_ name:@"reader"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:encoding_ name:@"encoding"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:nextContentSource_ name:@"nextContentSource"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:buffer_ name:@"buffer"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:namespace__ name:@"namespace_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:prefix_ name:@"prefix"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:name_ name:@"name"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:text_ name:@"text"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:attributes_ name:@"attributes"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:error_ name:@"error"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:stringPool_ name:@"stringPool"]];
  return result;
}

@end

static OrgKxml2IoKXmlParser_ValueContextEnum *OrgKxml2IoKXmlParser_ValueContextEnum_ATTRIBUTE;
static OrgKxml2IoKXmlParser_ValueContextEnum *OrgKxml2IoKXmlParser_ValueContextEnum_TEXT;
static OrgKxml2IoKXmlParser_ValueContextEnum *OrgKxml2IoKXmlParser_ValueContextEnum_ENTITY_DECLARATION;
IOSObjectArray *OrgKxml2IoKXmlParser_ValueContextEnum_values;

@implementation OrgKxml2IoKXmlParser_ValueContextEnum

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_ValueContextEnum_values name:@"enumValues"]];
  return result;
}

+ (OrgKxml2IoKXmlParser_ValueContextEnum *)ATTRIBUTE {
  return OrgKxml2IoKXmlParser_ValueContextEnum_ATTRIBUTE;
}
+ (OrgKxml2IoKXmlParser_ValueContextEnum *)TEXT {
  return OrgKxml2IoKXmlParser_ValueContextEnum_TEXT;
}
+ (OrgKxml2IoKXmlParser_ValueContextEnum *)ENTITY_DECLARATION {
  return OrgKxml2IoKXmlParser_ValueContextEnum_ENTITY_DECLARATION;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

- (id)initWithNSString:(NSString *)__name withInt:(int)__ordinal {
  return JreMemDebugAdd([super initWithNSString:__name withInt:__ordinal]);
}

+ (void)initialize {
  if (self == [OrgKxml2IoKXmlParser_ValueContextEnum class]) {
    OrgKxml2IoKXmlParser_ValueContextEnum_ATTRIBUTE = [[OrgKxml2IoKXmlParser_ValueContextEnum alloc] initWithNSString:@"ATTRIBUTE" withInt:0];
    OrgKxml2IoKXmlParser_ValueContextEnum_TEXT = [[OrgKxml2IoKXmlParser_ValueContextEnum alloc] initWithNSString:@"TEXT" withInt:1];
    OrgKxml2IoKXmlParser_ValueContextEnum_ENTITY_DECLARATION = [[OrgKxml2IoKXmlParser_ValueContextEnum alloc] initWithNSString:@"ENTITY_DECLARATION" withInt:2];
    OrgKxml2IoKXmlParser_ValueContextEnum_values = [[IOSObjectArray alloc] initWithObjects:(id[]){ OrgKxml2IoKXmlParser_ValueContextEnum_ATTRIBUTE, OrgKxml2IoKXmlParser_ValueContextEnum_TEXT, OrgKxml2IoKXmlParser_ValueContextEnum_ENTITY_DECLARATION, nil } count:3 type:[IOSClass classWithClass:[OrgKxml2IoKXmlParser_ValueContextEnum class]]];
  }
}

+ (IOSObjectArray *)values {
  return [IOSObjectArray arrayWithArray:OrgKxml2IoKXmlParser_ValueContextEnum_values];
}

+ (OrgKxml2IoKXmlParser_ValueContextEnum *)valueOfWithNSString:(NSString *)name {
  for (int i = 0; i < [OrgKxml2IoKXmlParser_ValueContextEnum_values count]; i++) {
    OrgKxml2IoKXmlParser_ValueContextEnum *e = [OrgKxml2IoKXmlParser_ValueContextEnum_values objectAtIndex:i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

@end
@implementation OrgKxml2IoKXmlParser_ContentSource

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithOrgKxml2IoKXmlParser_ContentSource:(OrgKxml2IoKXmlParser_ContentSource *)next
                                   withCharArray:(IOSCharArray *)buffer
                                         withInt:(int)position
                                         withInt:(int)limit {
  if ((self = [super init])) {
    OrgKxml2IoKXmlParser_ContentSource_set_next_(self, next);
    OrgKxml2IoKXmlParser_ContentSource_set_buffer_(self, buffer);
    self->position_ = position;
    self->limit_ = limit;
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  OrgKxml2IoKXmlParser_ContentSource_set_buffer_(self, nil);
  OrgKxml2IoKXmlParser_ContentSource_set_next_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgKxml2IoKXmlParser_ContentSource *)other {
  [super copyAllFieldsTo:other];
  OrgKxml2IoKXmlParser_ContentSource_set_buffer_(other, buffer_);
  other->limit_ = limit_;
  OrgKxml2IoKXmlParser_ContentSource_set_next_(other, next_);
  other->position_ = position_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:next_ name:@"next"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:buffer_ name:@"buffer"]];
  return result;
}

@end
