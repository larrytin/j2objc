//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/xml/src/main/java/org/kxml2/io/KXmlSerializer.java
//
//  Created by retechretech on 13-9-4.
//

#include "IOSBooleanArray.h"
#include "IOSCharArray.h"
#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "java/io/BufferedWriter.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/Writer.h"
#include "java/lang/Boolean.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/util/Locale.h"
#include "org/kxml2/io/KXmlSerializer.h"
#include "org/xmlpull/v1/XmlSerializer.h"

@implementation OrgKxml2IoKXmlSerializer

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (void)checkWithBOOL:(BOOL)close {
  if (!pending_) return;
  depth_++;
  pending_ = NO;
  if ((int) [((IOSBooleanArray *) nil_chk(indent_)) count] <= depth_) {
    IOSBooleanArray *hlp = [IOSBooleanArray arrayWithLength:depth_ + 4];
    [JavaLangSystem arraycopyWithId:indent_ withInt:0 withId:hlp withInt:0 withInt:depth_];
    OrgKxml2IoKXmlSerializer_set_indent_(self, hlp);
  }
  (*[indent_ booleanRefAtIndex:depth_]) = [indent_ booleanAtIndex:depth_ - 1];
  for (int i = [((IOSIntArray *) nil_chk(nspCounts_)) intAtIndex:depth_ - 1]; i < [nspCounts_ intAtIndex:depth_]; i++) {
    [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithInt:' '];
    [writer_ writeWithNSString:@"xmlns"];
    if (![((NSString *) nil_chk([((IOSObjectArray *) nil_chk(nspStack_)) objectAtIndex:i * 2])) isEmpty]) {
      [writer_ writeWithInt:':'];
      [writer_ writeWithNSString:[nspStack_ objectAtIndex:i * 2]];
    }
    else if ([((NSString *) nil_chk([self getNamespace])) isEmpty] && ![((NSString *) nil_chk([nspStack_ objectAtIndex:i * 2 + 1])) isEmpty]) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"Cannot set default namespace for elements in no namespace"] autorelease];
    [writer_ writeWithNSString:@"=\""];
    [self writeEscapedWithNSString:[nspStack_ objectAtIndex:i * 2 + 1] withInt:'"'];
    [writer_ writeWithInt:'"'];
  }
  if ((int) [nspCounts_ count] <= depth_ + 1) {
    IOSIntArray *hlp = [IOSIntArray arrayWithLength:depth_ + 8];
    [JavaLangSystem arraycopyWithId:nspCounts_ withInt:0 withId:hlp withInt:0 withInt:depth_ + 1];
    OrgKxml2IoKXmlSerializer_set_nspCounts_(self, hlp);
  }
  (*[nspCounts_ intRefAtIndex:depth_ + 1]) = [nspCounts_ intAtIndex:depth_];
  [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:close ? @" />" : @">"];
}

+ (IOSObjectArray *)__exceptions_checkWithBOOL_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)writeEscapedWithNSString:(NSString *)s
                         withInt:(int)quot {
  for (int i = 0; i < [((NSString *) nil_chk(s)) length]; i++) {
    unichar c = [s charAtWithInt:i];
    {
      BOOL valid;
      switch (c) {
        case 0x000a:
        case 0x000d:
        case 0x0009:
        if (quot == -1) [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithInt:c];
        else [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:[NSString stringWithFormat:@"&#%d;", ((int) c)]];
        break;
        case '&':
        [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:@"&amp;"];
        break;
        case '>':
        [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:@"&gt;"];
        break;
        case '<':
        [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:@"&lt;"];
        break;
        default:
        if (c == quot) {
          [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:c == '"' ? @"&quot;" : @"&apos;"];
          break;
        }
        valid = (c >= (int) 0x20 && c <= (int) 0xd7ff) || (c >= (int) 0xe000 && c <= (int) 0xfffd);
        if (!valid) {
          [OrgKxml2IoKXmlSerializer reportInvalidCharacterWithUnichar:c];
        }
        if (unicode_ || c < 127) {
          [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithInt:c];
        }
        else {
          [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:[NSString stringWithFormat:@"&#%d;", ((int) c)]];
        }
      }
    }
  }
}

+ (IOSObjectArray *)__exceptions_writeEscapedWithNSString_withInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

+ (void)reportInvalidCharacterWithUnichar:(unichar)ch {
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Illegal character (%@)", [JavaLangInteger toHexStringWithInt:(int) ch]]] autorelease];
}

- (void)docdeclWithNSString:(NSString *)dd {
  [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:@"<!DOCTYPE"];
  [writer_ writeWithNSString:dd];
  [writer_ writeWithNSString:@">"];
}

+ (IOSObjectArray *)__exceptions_docdeclWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)endDocument {
  while (depth_ > 0) {
    [self endTagWithNSString:[((IOSObjectArray *) nil_chk(elementStack_)) objectAtIndex:depth_ * 3 - 3] withNSString:[elementStack_ objectAtIndex:depth_ * 3 - 1]];
  }
  [self flush];
}

+ (IOSObjectArray *)__exceptions_endDocument {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)entityRefWithNSString:(NSString *)name {
  [self checkWithBOOL:NO];
  [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithInt:'&'];
  [writer_ writeWithNSString:name];
  [writer_ writeWithInt:';'];
}

+ (IOSObjectArray *)__exceptions_entityRefWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (BOOL)getFeatureWithNSString:(NSString *)name {
  return ([@"http://xmlpull.org/v1/doc/features.html#indent-output" isEqual:name]) ? [((IOSBooleanArray *) nil_chk(indent_)) booleanAtIndex:depth_] : NO;
}

- (NSString *)getPrefixWithNSString:(NSString *)namespace_
                           withBOOL:(BOOL)create {
  @try {
    return [self getPrefixWithNSString:namespace_ withBOOL:NO withBOOL:create];
  }
  @catch (JavaIoIOException *e) {
    @throw [[[JavaLangRuntimeException alloc] initWithNSString:[((JavaIoIOException *) nil_chk(e)) description]] autorelease];
  }
}

- (NSString *)getPrefixWithNSString:(NSString *)namespace_
                           withBOOL:(BOOL)includeDefault
                           withBOOL:(BOOL)create {
  for (int i = [((IOSIntArray *) nil_chk(nspCounts_)) intAtIndex:depth_ + 1] * 2 - 2; i >= 0; i -= 2) {
    if ([((NSString *) nil_chk([((IOSObjectArray *) nil_chk(nspStack_)) objectAtIndex:i + 1])) isEqual:namespace_] && (includeDefault || ![((NSString *) nil_chk([nspStack_ objectAtIndex:i])) isEmpty])) {
      NSString *cand = [nspStack_ objectAtIndex:i];
      for (int j = i + 2; j < [nspCounts_ intAtIndex:depth_ + 1] * 2; j++) {
        if ([((NSString *) nil_chk([nspStack_ objectAtIndex:j])) isEqual:cand]) {
          cand = nil;
          break;
        }
      }
      if (cand != nil) return cand;
    }
  }
  if (!create) return nil;
  NSString *prefix;
  if ([((NSString *) nil_chk(namespace_)) isEmpty]) prefix = @"";
  else {
    do {
      prefix = [NSString stringWithFormat:@"n%d", (auto__++)];
      for (int i = [nspCounts_ intAtIndex:depth_ + 1] * 2 - 2; i >= 0; i -= 2) {
        if ([prefix isEqual:[((IOSObjectArray *) nil_chk(nspStack_)) objectAtIndex:i]]) {
          prefix = nil;
          break;
        }
      }
    }
    while (prefix == nil);
  }
  BOOL p = pending_;
  pending_ = NO;
  [self setPrefixWithNSString:prefix withNSString:namespace_];
  pending_ = p;
  return prefix;
}

+ (IOSObjectArray *)__exceptions_getPrefixWithNSString_withBOOL_withBOOL_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (id)getPropertyWithNSString:(NSString *)name {
  @throw [[[JavaLangRuntimeException alloc] initWithNSString:@"Unsupported property"] autorelease];
}

- (void)ignorableWhitespaceWithNSString:(NSString *)s {
  [self textWithNSString:s];
}

+ (IOSObjectArray *)__exceptions_ignorableWhitespaceWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)setFeatureWithNSString:(NSString *)name
                      withBOOL:(BOOL)value {
  if ([@"http://xmlpull.org/v1/doc/features.html#indent-output" isEqual:name]) {
    (*[((IOSBooleanArray *) nil_chk(indent_)) booleanRefAtIndex:depth_]) = value;
  }
  else @throw [[[JavaLangRuntimeException alloc] initWithNSString:@"Unsupported Feature"] autorelease];
}

- (void)setPropertyWithNSString:(NSString *)name
                         withId:(id)value {
  @throw [[[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Unsupported Property:%@", value]] autorelease];
}

- (void)setPrefixWithNSString:(NSString *)prefix
                 withNSString:(NSString *)namespace_ {
  [self checkWithBOOL:NO];
  if (prefix == nil) prefix = @"";
  if (namespace_ == nil) namespace_ = @"";
  NSString *defined = [self getPrefixWithNSString:namespace_ withBOOL:YES withBOOL:NO];
  if ([((NSString *) nil_chk(prefix)) isEqual:defined]) return;
  int pos = ((*[((IOSIntArray *) nil_chk(nspCounts_)) intRefAtIndex:depth_ + 1])++) << 1;
  if ((int) [((IOSObjectArray *) nil_chk(nspStack_)) count] < pos + 1) {
    IOSObjectArray *hlp = [IOSObjectArray arrayWithLength:(int) [nspStack_ count] + 16 type:[IOSClass classWithClass:[NSString class]]];
    [JavaLangSystem arraycopyWithId:nspStack_ withInt:0 withId:hlp withInt:0 withInt:pos];
    OrgKxml2IoKXmlSerializer_set_nspStack_(self, hlp);
  }
  [nspStack_ replaceObjectAtIndex:pos++ withObject:prefix];
  [nspStack_ replaceObjectAtIndex:pos withObject:namespace_];
}

+ (IOSObjectArray *)__exceptions_setPrefixWithNSString_withNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)setOutputWithJavaIoWriter:(JavaIoWriter *)writer {
  if ([writer isKindOfClass:[JavaIoBufferedWriter class]]) {
    OrgKxml2IoKXmlSerializer_set_writer_(self, (JavaIoBufferedWriter *) writer);
  }
  else {
    OrgKxml2IoKXmlSerializer_set_writer_(self, [[[JavaIoBufferedWriter alloc] initWithJavaIoWriter:writer withInt:OrgKxml2IoKXmlSerializer_WRITE_BUFFER_SIZE] autorelease]);
  }
  (*[((IOSIntArray *) nil_chk(nspCounts_)) intRefAtIndex:0]) = 2;
  (*[nspCounts_ intRefAtIndex:1]) = 2;
  [((IOSObjectArray *) nil_chk(nspStack_)) replaceObjectAtIndex:0 withObject:@""];
  [nspStack_ replaceObjectAtIndex:1 withObject:@""];
  [nspStack_ replaceObjectAtIndex:2 withObject:@"xml"];
  [nspStack_ replaceObjectAtIndex:3 withObject:@"http://www.w3.org/XML/1998/namespace"];
  pending_ = NO;
  auto__ = 0;
  depth_ = 0;
  unicode_ = NO;
}

- (void)setOutputWithJavaIoOutputStream:(JavaIoOutputStream *)os
                           withNSString:(NSString *)encoding {
  if (os == nil) @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"os == null"] autorelease];
  [self setOutputWithJavaIoWriter:encoding == nil ? [[[JavaIoOutputStreamWriter alloc] initWithJavaIoOutputStream:os] autorelease] : [[[JavaIoOutputStreamWriter alloc] initWithJavaIoOutputStream:os withNSString:encoding] autorelease]];
  OrgKxml2IoKXmlSerializer_set_encoding_(self, encoding);
  if (encoding != nil && [((NSString *) nil_chk([encoding lowercaseStringWithJRELocale:[JavaUtilLocale US]])) hasPrefix:@"utf"]) {
    unicode_ = YES;
  }
}

+ (IOSObjectArray *)__exceptions_setOutputWithJavaIoOutputStream_withNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)startDocumentWithNSString:(NSString *)encoding
              withJavaLangBoolean:(JavaLangBoolean *)standalone {
  [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:@"<?xml version='1.0' "];
  if (encoding != nil) {
    OrgKxml2IoKXmlSerializer_set_encoding_(self, encoding);
    if ([((NSString *) nil_chk([encoding lowercaseStringWithJRELocale:[JavaUtilLocale US]])) hasPrefix:@"utf"]) {
      unicode_ = YES;
    }
  }
  if (self->encoding_ != nil) {
    [writer_ writeWithNSString:@"encoding='"];
    [writer_ writeWithNSString:self->encoding_];
    [writer_ writeWithNSString:@"' "];
  }
  if (standalone != nil) {
    [writer_ writeWithNSString:@"standalone='"];
    [writer_ writeWithNSString:[standalone booleanValue] ? @"yes" : @"no"];
    [writer_ writeWithNSString:@"' "];
  }
  [writer_ writeWithNSString:@"?>"];
}

+ (IOSObjectArray *)__exceptions_startDocumentWithNSString_withJavaLangBoolean_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (id<OrgXmlpullV1XmlSerializer>)startTagWithNSString:(NSString *)namespace_
                                         withNSString:(NSString *)name {
  [self checkWithBOOL:NO];
  if ([((IOSBooleanArray *) nil_chk(indent_)) booleanAtIndex:depth_]) {
    [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:@"\r\n"];
    for (int i = 0; i < depth_; i++) [writer_ writeWithNSString:@"  "];
  }
  int esp = depth_ * 3;
  if ((int) [((IOSObjectArray *) nil_chk(elementStack_)) count] < esp + 3) {
    IOSObjectArray *hlp = [IOSObjectArray arrayWithLength:(int) [elementStack_ count] + 12 type:[IOSClass classWithClass:[NSString class]]];
    [JavaLangSystem arraycopyWithId:elementStack_ withInt:0 withId:hlp withInt:0 withInt:esp];
    OrgKxml2IoKXmlSerializer_set_elementStack_(self, hlp);
  }
  NSString *prefix = namespace_ == nil ? @"" : [self getPrefixWithNSString:namespace_ withBOOL:YES withBOOL:YES];
  if (namespace_ != nil && [namespace_ isEmpty]) {
    for (int i = [((IOSIntArray *) nil_chk(nspCounts_)) intAtIndex:depth_]; i < [nspCounts_ intAtIndex:depth_ + 1]; i++) {
      if ([((NSString *) nil_chk([((IOSObjectArray *) nil_chk(nspStack_)) objectAtIndex:i * 2])) isEmpty] && ![((NSString *) nil_chk([nspStack_ objectAtIndex:i * 2 + 1])) isEmpty]) {
        @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"Cannot set default namespace for elements in no namespace"] autorelease];
      }
    }
  }
  [elementStack_ replaceObjectAtIndex:esp++ withObject:namespace_];
  [elementStack_ replaceObjectAtIndex:esp++ withObject:prefix];
  [elementStack_ replaceObjectAtIndex:esp withObject:name];
  [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithInt:'<'];
  if (![prefix isEmpty]) {
    [writer_ writeWithNSString:prefix];
    [writer_ writeWithInt:':'];
  }
  [writer_ writeWithNSString:name];
  pending_ = YES;
  return self;
}

+ (IOSObjectArray *)__exceptions_startTagWithNSString_withNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (id<OrgXmlpullV1XmlSerializer>)attributeWithNSString:(NSString *)namespace_
                                          withNSString:(NSString *)name
                                          withNSString:(NSString *)value {
  if (!pending_) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"illegal position for attribute"] autorelease];
  if (namespace_ == nil) namespace_ = @"";
  NSString *prefix = [((NSString *) nil_chk(namespace_)) isEmpty] ? @"" : [self getPrefixWithNSString:namespace_ withBOOL:NO withBOOL:YES];
  [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithInt:' '];
  if (![prefix isEmpty]) {
    [writer_ writeWithNSString:prefix];
    [writer_ writeWithInt:':'];
  }
  [writer_ writeWithNSString:name];
  [writer_ writeWithInt:'='];
  unichar q = [((NSString *) nil_chk(value)) indexOf:'"'] == -1 ? '"' : '\'';
  [writer_ writeWithInt:q];
  [self writeEscapedWithNSString:value withInt:q];
  [writer_ writeWithInt:q];
  return self;
}

+ (IOSObjectArray *)__exceptions_attributeWithNSString_withNSString_withNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)flush {
  [self checkWithBOOL:NO];
  [((JavaIoBufferedWriter *) nil_chk(writer_)) flush];
}

+ (IOSObjectArray *)__exceptions_flush {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (id<OrgXmlpullV1XmlSerializer>)endTagWithNSString:(NSString *)namespace_
                                       withNSString:(NSString *)name {
  if (!pending_) depth_--;
  if ((namespace_ == nil && [((IOSObjectArray *) nil_chk(elementStack_)) objectAtIndex:depth_ * 3] != nil) || (namespace_ != nil && ![namespace_ isEqual:[((IOSObjectArray *) nil_chk(elementStack_)) objectAtIndex:depth_ * 3]]) || ![((NSString *) nil_chk([((IOSObjectArray *) nil_chk(elementStack_)) objectAtIndex:depth_ * 3 + 2])) isEqual:name]) @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"</{%@}%@> does not match start", namespace_, name]] autorelease];
  if (pending_) {
    [self checkWithBOOL:YES];
    depth_--;
  }
  else {
    if ([((IOSBooleanArray *) nil_chk(indent_)) booleanAtIndex:depth_ + 1]) {
      [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:@"\r\n"];
      for (int i = 0; i < depth_; i++) [writer_ writeWithNSString:@"  "];
    }
    [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:@"</"];
    NSString *prefix = [((IOSObjectArray *) nil_chk(elementStack_)) objectAtIndex:depth_ * 3 + 1];
    if (![((NSString *) nil_chk(prefix)) isEmpty]) {
      [writer_ writeWithNSString:prefix];
      [writer_ writeWithInt:':'];
    }
    [writer_ writeWithNSString:name];
    [writer_ writeWithInt:'>'];
  }
  (*[((IOSIntArray *) nil_chk(nspCounts_)) intRefAtIndex:depth_ + 1]) = [nspCounts_ intAtIndex:depth_];
  return self;
}

+ (IOSObjectArray *)__exceptions_endTagWithNSString_withNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (NSString *)getNamespace {
  return [self getDepth] == 0 ? nil : [((IOSObjectArray *) nil_chk(elementStack_)) objectAtIndex:[self getDepth] * 3 - 3];
}

- (NSString *)getName {
  return [self getDepth] == 0 ? nil : [((IOSObjectArray *) nil_chk(elementStack_)) objectAtIndex:[self getDepth] * 3 - 1];
}

- (int)getDepth {
  return pending_ ? depth_ + 1 : depth_;
}

- (id<OrgXmlpullV1XmlSerializer>)textWithNSString:(NSString *)text {
  [self checkWithBOOL:NO];
  (*[((IOSBooleanArray *) nil_chk(indent_)) booleanRefAtIndex:depth_]) = NO;
  [self writeEscapedWithNSString:text withInt:-1];
  return self;
}

+ (IOSObjectArray *)__exceptions_textWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (id<OrgXmlpullV1XmlSerializer>)textWithCharArray:(IOSCharArray *)text
                                           withInt:(int)start
                                           withInt:(int)len {
  [self textWithNSString:[NSString stringWithCharacters:text offset:start length:len]];
  return self;
}

+ (IOSObjectArray *)__exceptions_textWithCharArray_withInt_withInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)cdsectWithNSString:(NSString *)data {
  [self checkWithBOOL:NO];
  data = [((NSString *) nil_chk(data)) replace:@"]]>" withSequence:@"]]]]><![CDATA[>"];
  IOSCharArray *chars = [((NSString *) nil_chk(data)) toCharArray];
  {
    IOSCharArray *a__ = chars;
    int n__ = (int) [((IOSCharArray *) nil_chk(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      unichar ch = [a__ charAtIndex:i__];
      BOOL valid = (ch >= (int) 0x20 && ch <= (int) 0xd7ff) || (ch == 0x0009 || ch == 0x000a || ch == 0x000d) || (ch >= (int) 0xe000 && ch <= (int) 0xfffd);
      if (!valid) {
        [OrgKxml2IoKXmlSerializer reportInvalidCharacterWithUnichar:ch];
      }
    }
  }
  [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:@"<![CDATA["];
  [writer_ writeWithCharArray:chars withInt:0 withInt:(int) [((IOSCharArray *) nil_chk(chars)) count]];
  [writer_ writeWithNSString:@"]]>"];
}

+ (IOSObjectArray *)__exceptions_cdsectWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)commentWithNSString:(NSString *)comment {
  [self checkWithBOOL:NO];
  [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:@"<!--"];
  [writer_ writeWithNSString:comment];
  [writer_ writeWithNSString:@"-->"];
}

+ (IOSObjectArray *)__exceptions_commentWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)processingInstructionWithNSString:(NSString *)pi {
  [self checkWithBOOL:NO];
  [((JavaIoBufferedWriter *) nil_chk(writer_)) writeWithNSString:@"<?"];
  [writer_ writeWithNSString:pi];
  [writer_ writeWithNSString:@"?>"];
}

+ (IOSObjectArray *)__exceptions_processingInstructionWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass] } count:1 type:[IOSClass getClass]];
}

- (id)init {
  if ((self = [super init])) {
    OrgKxml2IoKXmlSerializer_set_elementStack_(self, [IOSObjectArray arrayWithLength:12 type:[IOSClass classWithClass:[NSString class]]]);
    OrgKxml2IoKXmlSerializer_set_nspCounts_(self, [IOSIntArray arrayWithLength:4]);
    OrgKxml2IoKXmlSerializer_set_nspStack_(self, [IOSObjectArray arrayWithLength:8 type:[IOSClass classWithClass:[NSString class]]]);
    OrgKxml2IoKXmlSerializer_set_indent_(self, [IOSBooleanArray arrayWithLength:4]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  OrgKxml2IoKXmlSerializer_set_encoding_(self, nil);
  OrgKxml2IoKXmlSerializer_set_indent_(self, nil);
  OrgKxml2IoKXmlSerializer_set_nspStack_(self, nil);
  OrgKxml2IoKXmlSerializer_set_nspCounts_(self, nil);
  OrgKxml2IoKXmlSerializer_set_elementStack_(self, nil);
  OrgKxml2IoKXmlSerializer_set_writer_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgKxml2IoKXmlSerializer *)other {
  [super copyAllFieldsTo:other];
  other->auto__ = auto__;
  other->depth_ = depth_;
  OrgKxml2IoKXmlSerializer_set_elementStack_(other, elementStack_);
  OrgKxml2IoKXmlSerializer_set_encoding_(other, encoding_);
  OrgKxml2IoKXmlSerializer_set_indent_(other, indent_);
  OrgKxml2IoKXmlSerializer_set_nspCounts_(other, nspCounts_);
  OrgKxml2IoKXmlSerializer_set_nspStack_(other, nspStack_);
  other->pending_ = pending_;
  other->unicode_ = unicode_;
  OrgKxml2IoKXmlSerializer_set_writer_(other, writer_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:writer_ name:@"writer"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:elementStack_ name:@"elementStack"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:nspCounts_ name:@"nspCounts"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:nspStack_ name:@"nspStack"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:indent_ name:@"indent"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:encoding_ name:@"encoding"]];
  return result;
}

@end
