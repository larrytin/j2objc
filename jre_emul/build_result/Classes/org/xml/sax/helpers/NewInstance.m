//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/org/xml/sax/helpers/NewInstance.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/AssertionError.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/InstantiationException.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/Thread.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/lang/reflect/Method.h"
#include "org/xml/sax/helpers/NewInstance.h"

@implementation OrgXmlSaxHelpersNewInstance

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

+ (id)newInstanceWithNSString:(NSString *)className_ {
  IOSClass *driverClass = [IOSClass forName:className_];
  return [((IOSClass *) nil_chk(driverClass)) newInstance];
}

+ (IOSObjectArray *)__exceptions_newInstanceWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangClassNotFoundException getClass], [JavaLangIllegalAccessException getClass], [JavaLangInstantiationException getClass] } count:3 type:[IOSClass getClass]];
}

+ (JavaLangClassLoader *)getClassLoader {
  JavaLangReflectMethod *m = nil;
  @try {
    m = [[IOSClass classWithClass:[JavaLangThread class]] getMethod:@"getContextClassLoader" parameterTypes:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[IOSClass class]]]];
  }
  @catch (JavaLangNoSuchMethodException *e) {
    return [[IOSClass classWithClass:[OrgXmlSaxHelpersNewInstance class]] getClassLoader];
  }
  @try {
    return (JavaLangClassLoader *) check_class_cast([((JavaLangReflectMethod *) nil_chk(m)) invokeWithId:[JavaLangThread currentThread] withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]], [JavaLangClassLoader class]);
  }
  @catch (JavaLangIllegalAccessException *e) {
    @throw [[[JavaLangAssertionError alloc] initWithId:[((JavaLangIllegalAccessException *) nil_chk(e)) getMessage]] autorelease];
  }
  @catch (JavaLangReflectInvocationTargetException *e) {
    @throw [[[JavaLangAssertionError alloc] initWithId:[((JavaLangReflectInvocationTargetException *) nil_chk(e)) getMessage]] autorelease];
  }
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

@end
