//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSCharArray.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/io/IOException.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/InstantiationException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Enumeration.h"
#include "org/xml/sax/AttributeList.h"
#include "org/xml/sax/ContentHandler.h"
#include "org/xml/sax/DTDHandler.h"
#include "org/xml/sax/EntityResolver.h"
#include "org/xml/sax/ErrorHandler.h"
#include "org/xml/sax/InputSource.h"
#include "org/xml/sax/Locator.h"
#include "org/xml/sax/Parser.h"
#include "org/xml/sax/SAXException.h"
#include "org/xml/sax/SAXNotRecognizedException.h"
#include "org/xml/sax/SAXNotSupportedException.h"
#include "org/xml/sax/SAXParseException.h"
#include "org/xml/sax/helpers/AttributesImpl.h"
#include "org/xml/sax/helpers/NamespaceSupport.h"
#include "org/xml/sax/helpers/ParserAdapter.h"
#include "org/xml/sax/helpers/ParserFactory.h"

@implementation OrgXmlSaxHelpersParserAdapter

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgXmlSaxHelpersParserAdapter_FEATURES_ name:@"OrgXmlSaxHelpersParserAdapter_FEATURES_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgXmlSaxHelpersParserAdapter_NAMESPACES_ name:@"OrgXmlSaxHelpersParserAdapter_NAMESPACES_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgXmlSaxHelpersParserAdapter_NAMESPACE_PREFIXES_ name:@"OrgXmlSaxHelpersParserAdapter_NAMESPACE_PREFIXES_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgXmlSaxHelpersParserAdapter_XMLNS_URIs_ name:@"OrgXmlSaxHelpersParserAdapter_XMLNS_URIs_"]];
  return result;
}

static NSString * OrgXmlSaxHelpersParserAdapter_FEATURES_ = @"http://xml.org/sax/features/";
static NSString * OrgXmlSaxHelpersParserAdapter_NAMESPACES_ = @"http://xml.org/sax/features/namespaces";
static NSString * OrgXmlSaxHelpersParserAdapter_NAMESPACE_PREFIXES_ = @"http://xml.org/sax/features/namespace-prefixes";
static NSString * OrgXmlSaxHelpersParserAdapter_XMLNS_URIs_ = @"http://xml.org/sax/features/xmlns-uris";

+ (NSString *)FEATURES {
  return OrgXmlSaxHelpersParserAdapter_FEATURES_;
}

+ (NSString *)NAMESPACES {
  return OrgXmlSaxHelpersParserAdapter_NAMESPACES_;
}

+ (NSString *)NAMESPACE_PREFIXES {
  return OrgXmlSaxHelpersParserAdapter_NAMESPACE_PREFIXES_;
}

+ (NSString *)XMLNS_URIs {
  return OrgXmlSaxHelpersParserAdapter_XMLNS_URIs_;
}

- (id)init {
  if (self = [super init]) {
    parsing_ = NO;
    OrgXmlSaxHelpersParserAdapter_set_nameParts_(self, [IOSObjectArray arrayWithLength:3 type:[IOSClass classWithClass:[NSString class]]]);
    OrgXmlSaxHelpersParserAdapter_set_parser_(self, nil);
    OrgXmlSaxHelpersParserAdapter_set_atts_(self, nil);
    namespaces_ = YES;
    prefixes_ = NO;
    uris_ = NO;
    OrgXmlSaxHelpersParserAdapter_set_entityResolver_(self, nil);
    OrgXmlSaxHelpersParserAdapter_set_dtdHandler_(self, nil);
    OrgXmlSaxHelpersParserAdapter_set_contentHandler_(self, nil);
    OrgXmlSaxHelpersParserAdapter_set_errorHandler_(self, nil);
    NSString *driver = [JavaLangSystem getPropertyWithNSString:@"org.xml.sax.parser"];
    @try {
      [self setupWithOrgXmlSaxParser:[OrgXmlSaxHelpersParserFactory makeParser]];
    }
    @catch (JavaLangClassNotFoundException *e1) {
      @throw [[[OrgXmlSaxSAXException alloc] initWithNSString:[NSString stringWithFormat:@"Cannot find SAX1 driver class %@", driver] withJavaLangException:e1] autorelease];
    }
    @catch (JavaLangIllegalAccessException *e2) {
      @throw [[[OrgXmlSaxSAXException alloc] initWithNSString:[NSString stringWithFormat:@"SAX1 driver class %@ found but cannot be loaded", driver] withJavaLangException:e2] autorelease];
    }
    @catch (JavaLangInstantiationException *e3) {
      @throw [[[OrgXmlSaxSAXException alloc] initWithNSString:[NSString stringWithFormat:@"SAX1 driver class %@ loaded but cannot be instantiated", driver] withJavaLangException:e3] autorelease];
    }
    @catch (JavaLangClassCastException *e4) {
      @throw [[[OrgXmlSaxSAXException alloc] initWithNSString:[NSString stringWithFormat:@"SAX1 driver class %@ does not implement org.xml.sax.Parser", driver]] autorelease];
    }
    @catch (JavaLangNullPointerException *e5) {
      @throw [[[OrgXmlSaxSAXException alloc] initWithNSString:@"System property org.xml.sax.parser not specified"] autorelease];
    }
    JreMemDebugAdd(self);
  }
  return self;
}

+ (IOSObjectArray *)__exceptions_OrgXmlSaxHelpersParserAdapter {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlSaxSAXException getClass] } count:1 type:[IOSClass getClass]];
}

- (id)initWithOrgXmlSaxParser:(id<OrgXmlSaxParser>)parser {
  if (self = [super init]) {
    parsing_ = NO;
    OrgXmlSaxHelpersParserAdapter_set_nameParts_(self, [IOSObjectArray arrayWithLength:3 type:[IOSClass classWithClass:[NSString class]]]);
    OrgXmlSaxHelpersParserAdapter_set_parser_(self, nil);
    OrgXmlSaxHelpersParserAdapter_set_atts_(self, nil);
    namespaces_ = YES;
    prefixes_ = NO;
    uris_ = NO;
    OrgXmlSaxHelpersParserAdapter_set_entityResolver_(self, nil);
    OrgXmlSaxHelpersParserAdapter_set_dtdHandler_(self, nil);
    OrgXmlSaxHelpersParserAdapter_set_contentHandler_(self, nil);
    OrgXmlSaxHelpersParserAdapter_set_errorHandler_(self, nil);
    [self setupWithOrgXmlSaxParser:parser];
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)setupWithOrgXmlSaxParser:(id<OrgXmlSaxParser>)parser {
  if (parser == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"Parser argument must not be null"] autorelease];
  }
  OrgXmlSaxHelpersParserAdapter_set_parser_(self, parser);
  OrgXmlSaxHelpersParserAdapter_set_atts_(self, [[[OrgXmlSaxHelpersAttributesImpl alloc] init] autorelease]);
  OrgXmlSaxHelpersParserAdapter_set_nsSupport_(self, [[[OrgXmlSaxHelpersNamespaceSupport alloc] init] autorelease]);
  OrgXmlSaxHelpersParserAdapter_set_attAdapter_(self, [[[OrgXmlSaxHelpersParserAdapter_AttributeListAdapter alloc] initWithOrgXmlSaxHelpersParserAdapter:self] autorelease]);
}

- (void)setFeatureWithNSString:(NSString *)name
                   withBoolean:(BOOL)value {
  if ([((NSString *) nil_chk(name)) isEqual:OrgXmlSaxHelpersParserAdapter_NAMESPACES_]) {
    [self checkNotParsingWithNSString:@"feature" withNSString:name];
    namespaces_ = value;
    if (!namespaces_ && !prefixes_) {
      prefixes_ = YES;
    }
  }
  else if ([name isEqual:OrgXmlSaxHelpersParserAdapter_NAMESPACE_PREFIXES_]) {
    [self checkNotParsingWithNSString:@"feature" withNSString:name];
    prefixes_ = value;
    if (!prefixes_ && !namespaces_) {
      namespaces_ = YES;
    }
  }
  else if ([name isEqual:OrgXmlSaxHelpersParserAdapter_XMLNS_URIs_]) {
    [self checkNotParsingWithNSString:@"feature" withNSString:name];
    uris_ = value;
  }
  else {
    @throw [[[OrgXmlSaxSAXNotRecognizedException alloc] initWithNSString:[NSString stringWithFormat:@"Feature: %@", name]] autorelease];
  }
}

+ (IOSObjectArray *)__exceptions_setFeatureWithNSString_withBoolean_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlSaxSAXNotRecognizedException getClass], [OrgXmlSaxSAXNotSupportedException getClass] } count:2 type:[IOSClass getClass]];
}

- (BOOL)getFeatureWithNSString:(NSString *)name {
  if ([((NSString *) nil_chk(name)) isEqual:OrgXmlSaxHelpersParserAdapter_NAMESPACES_]) {
    return namespaces_;
  }
  else if ([name isEqual:OrgXmlSaxHelpersParserAdapter_NAMESPACE_PREFIXES_]) {
    return prefixes_;
  }
  else if ([name isEqual:OrgXmlSaxHelpersParserAdapter_XMLNS_URIs_]) {
    return uris_;
  }
  else {
    @throw [[[OrgXmlSaxSAXNotRecognizedException alloc] initWithNSString:[NSString stringWithFormat:@"Feature: %@", name]] autorelease];
  }
}

+ (IOSObjectArray *)__exceptions_getFeatureWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlSaxSAXNotRecognizedException getClass], [OrgXmlSaxSAXNotSupportedException getClass] } count:2 type:[IOSClass getClass]];
}

- (void)setPropertyWithNSString:(NSString *)name
                         withId:(id)value {
  @throw [[[OrgXmlSaxSAXNotRecognizedException alloc] initWithNSString:[NSString stringWithFormat:@"Property: %@", name]] autorelease];
}

+ (IOSObjectArray *)__exceptions_setPropertyWithNSString_withId_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlSaxSAXNotRecognizedException getClass], [OrgXmlSaxSAXNotSupportedException getClass] } count:2 type:[IOSClass getClass]];
}

- (id)getPropertyWithNSString:(NSString *)name {
  @throw [[[OrgXmlSaxSAXNotRecognizedException alloc] initWithNSString:[NSString stringWithFormat:@"Property: %@", name]] autorelease];
}

+ (IOSObjectArray *)__exceptions_getPropertyWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlSaxSAXNotRecognizedException getClass], [OrgXmlSaxSAXNotSupportedException getClass] } count:2 type:[IOSClass getClass]];
}

- (void)setEntityResolverWithOrgXmlSaxEntityResolver:(id<OrgXmlSaxEntityResolver>)resolver {
  OrgXmlSaxHelpersParserAdapter_set_entityResolver_(self, resolver);
}

- (id<OrgXmlSaxEntityResolver>)getEntityResolver {
  return entityResolver_;
}

- (void)setDTDHandlerWithOrgXmlSaxDTDHandler:(id<OrgXmlSaxDTDHandler>)handler {
  OrgXmlSaxHelpersParserAdapter_set_dtdHandler_(self, handler);
}

- (id<OrgXmlSaxDTDHandler>)getDTDHandler {
  return dtdHandler_;
}

- (void)setContentHandlerWithOrgXmlSaxContentHandler:(id<OrgXmlSaxContentHandler>)handler {
  OrgXmlSaxHelpersParserAdapter_set_contentHandler_(self, handler);
}

- (id<OrgXmlSaxContentHandler>)getContentHandler {
  return contentHandler_;
}

- (void)setErrorHandlerWithOrgXmlSaxErrorHandler:(id<OrgXmlSaxErrorHandler>)handler {
  OrgXmlSaxHelpersParserAdapter_set_errorHandler_(self, handler);
}

- (id<OrgXmlSaxErrorHandler>)getErrorHandler {
  return errorHandler_;
}

- (void)parseWithNSString:(NSString *)systemId {
  [self parseWithOrgXmlSaxInputSource:[[[OrgXmlSaxInputSource alloc] initWithNSString:systemId] autorelease]];
}

+ (IOSObjectArray *)__exceptions_parseWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass], [OrgXmlSaxSAXException getClass] } count:2 type:[IOSClass getClass]];
}

- (void)parseWithOrgXmlSaxInputSource:(OrgXmlSaxInputSource *)input {
  if (parsing_) {
    @throw [[[OrgXmlSaxSAXException alloc] initWithNSString:@"Parser is already in use"] autorelease];
  }
  [self setupParser];
  parsing_ = YES;
  @try {
    [((id<OrgXmlSaxParser>) nil_chk(parser_)) parseWithOrgXmlSaxInputSource:input];
  }
  @finally {
    parsing_ = NO;
  }
  parsing_ = NO;
}

+ (IOSObjectArray *)__exceptions_parseWithOrgXmlSaxInputSource_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaIoIOException getClass], [OrgXmlSaxSAXException getClass] } count:2 type:[IOSClass getClass]];
}

- (void)setDocumentLocatorWithOrgXmlSaxLocator:(id<OrgXmlSaxLocator>)locator {
  OrgXmlSaxHelpersParserAdapter_set_locator_(self, locator);
  if (contentHandler_ != nil) {
    [contentHandler_ setDocumentLocatorWithOrgXmlSaxLocator:locator];
  }
}

- (void)startDocument {
  if (contentHandler_ != nil) {
    [contentHandler_ startDocument];
  }
}

+ (IOSObjectArray *)__exceptions_startDocument {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlSaxSAXException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)endDocument {
  if (contentHandler_ != nil) {
    [contentHandler_ endDocument];
  }
}

+ (IOSObjectArray *)__exceptions_endDocument {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlSaxSAXException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)startElementWithNSString:(NSString *)qName
      withOrgXmlSaxAttributeList:(id<OrgXmlSaxAttributeList>)qAtts {
  JavaUtilArrayList *exceptions = nil;
  if (!namespaces_) {
    if (contentHandler_ != nil) {
      [((OrgXmlSaxHelpersParserAdapter_AttributeListAdapter *) nil_chk(attAdapter_)) setAttributeListWithOrgXmlSaxAttributeList:qAtts];
      [contentHandler_ startElementWithNSString:@"" withNSString:@"" withNSString:[((NSString *) nil_chk(qName)) intern] withOrgXmlSaxAttributes:attAdapter_];
    }
    return;
  }
  [((OrgXmlSaxHelpersNamespaceSupport *) nil_chk(nsSupport_)) pushContext];
  int length = [((id<OrgXmlSaxAttributeList>) nil_chk(qAtts)) getLength];
  for (int i = 0; i < length; i++) {
    NSString *attQName = [qAtts getNameWithInt:i];
    if (![((NSString *) nil_chk(attQName)) hasPrefix:@"xmlns"]) continue;
    NSString *prefix;
    int n = [attQName indexOf:':'];
    if (n == -1 && [attQName length] == 5) {
      prefix = @"";
    }
    else if (n != 5) {
      continue;
    }
    else prefix = [attQName substring:n + 1];
    NSString *value = [qAtts getValueWithInt:i];
    if (![nsSupport_ declarePrefixWithNSString:prefix withNSString:value]) {
      [self reportErrorWithNSString:[NSString stringWithFormat:@"Illegal Namespace prefix: %@", prefix]];
      continue;
    }
    if (contentHandler_ != nil) [contentHandler_ startPrefixMappingWithNSString:prefix withNSString:value];
  }
  [((OrgXmlSaxHelpersAttributesImpl *) nil_chk(atts_)) clear];
  for (int i = 0; i < length; i++) {
    NSString *attQName = [qAtts getNameWithInt:i];
    NSString *type = [qAtts getTypeWithInt:i];
    NSString *value = [qAtts getValueWithInt:i];
    if ([((NSString *) nil_chk(attQName)) hasPrefix:@"xmlns"]) {
      NSString *prefix;
      int n = [attQName indexOf:':'];
      if (n == -1 && [attQName length] == 5) {
        prefix = @"";
      }
      else if (n != 5) {
        prefix = nil;
      }
      else {
        prefix = [attQName substring:6];
      }
      if (prefix != nil) {
        if (prefixes_) {
          if (uris_) [atts_ addAttributeWithNSString:[OrgXmlSaxHelpersNamespaceSupport XMLNS] withNSString:prefix withNSString:[attQName intern] withNSString:type withNSString:value];
          else [atts_ addAttributeWithNSString:@"" withNSString:@"" withNSString:[attQName intern] withNSString:type withNSString:value];
        }
        continue;
      }
    }
    @try {
      IOSObjectArray *attName = [self processNameWithNSString:attQName withBoolean:YES withBoolean:YES];
      [atts_ addAttributeWithNSString:IOSObjectArray_Get(nil_chk(attName), 0) withNSString:IOSObjectArray_Get(attName, 1) withNSString:IOSObjectArray_Get(attName, 2) withNSString:type withNSString:value];
    }
    @catch (OrgXmlSaxSAXException *e) {
      if (exceptions == nil) {
        exceptions = [[[JavaUtilArrayList alloc] init] autorelease];
      }
      [((JavaUtilArrayList *) nil_chk(exceptions)) addWithId:(OrgXmlSaxSAXParseException *) check_class_cast(e, [OrgXmlSaxSAXParseException class])];
      [atts_ addAttributeWithNSString:@"" withNSString:attQName withNSString:attQName withNSString:type withNSString:value];
    }
  }
  if (exceptions != nil && errorHandler_ != nil) {
    for (OrgXmlSaxSAXParseException * __strong ex in exceptions) {
      [errorHandler_ errorWithOrgXmlSaxSAXParseException:ex];
    }
  }
  if (contentHandler_ != nil) {
    IOSObjectArray *name = [self processNameWithNSString:qName withBoolean:NO withBoolean:NO];
    [contentHandler_ startElementWithNSString:IOSObjectArray_Get(nil_chk(name), 0) withNSString:IOSObjectArray_Get(name, 1) withNSString:IOSObjectArray_Get(name, 2) withOrgXmlSaxAttributes:atts_];
  }
}

+ (IOSObjectArray *)__exceptions_startElementWithNSString_withOrgXmlSaxAttributeList_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlSaxSAXException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)endElementWithNSString:(NSString *)qName {
  if (!namespaces_) {
    if (contentHandler_ != nil) {
      [contentHandler_ endElementWithNSString:@"" withNSString:@"" withNSString:[((NSString *) nil_chk(qName)) intern]];
    }
    return;
  }
  IOSObjectArray *names = [self processNameWithNSString:qName withBoolean:NO withBoolean:NO];
  if (contentHandler_ != nil) {
    [contentHandler_ endElementWithNSString:IOSObjectArray_Get(nil_chk(names), 0) withNSString:IOSObjectArray_Get(names, 1) withNSString:IOSObjectArray_Get(names, 2)];
    id<JavaUtilEnumeration> prefixes = [((OrgXmlSaxHelpersNamespaceSupport *) nil_chk(nsSupport_)) getDeclaredPrefixes];
    while ([((id<JavaUtilEnumeration>) nil_chk(prefixes)) hasMoreElements]) {
      NSString *prefix = (NSString *) check_class_cast([prefixes nextElement], [NSString class]);
      [contentHandler_ endPrefixMappingWithNSString:prefix];
    }
  }
  [((OrgXmlSaxHelpersNamespaceSupport *) nil_chk(nsSupport_)) popContext];
}

+ (IOSObjectArray *)__exceptions_endElementWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlSaxSAXException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)charactersWithCharArray:(IOSCharArray *)ch
                        withInt:(int)start
                        withInt:(int)length {
  if (contentHandler_ != nil) {
    [contentHandler_ charactersWithCharArray:ch withInt:start withInt:length];
  }
}

+ (IOSObjectArray *)__exceptions_charactersWithCharArray_withInt_withInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlSaxSAXException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)ignorableWhitespaceWithCharArray:(IOSCharArray *)ch
                                 withInt:(int)start
                                 withInt:(int)length {
  if (contentHandler_ != nil) {
    [contentHandler_ ignorableWhitespaceWithCharArray:ch withInt:start withInt:length];
  }
}

+ (IOSObjectArray *)__exceptions_ignorableWhitespaceWithCharArray_withInt_withInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlSaxSAXException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)processingInstructionWithNSString:(NSString *)target
                             withNSString:(NSString *)data {
  if (contentHandler_ != nil) {
    [contentHandler_ processingInstructionWithNSString:target withNSString:data];
  }
}

+ (IOSObjectArray *)__exceptions_processingInstructionWithNSString_withNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlSaxSAXException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)setupParser {
  if (!prefixes_ && !namespaces_) @throw [[[JavaLangIllegalStateException alloc] init] autorelease];
  [((OrgXmlSaxHelpersNamespaceSupport *) nil_chk(nsSupport_)) reset];
  if (uris_) [nsSupport_ setNamespaceDeclUrisWithBoolean:YES];
  if (entityResolver_ != nil) {
    [((id<OrgXmlSaxParser>) nil_chk(parser_)) setEntityResolverWithOrgXmlSaxEntityResolver:entityResolver_];
  }
  if (dtdHandler_ != nil) {
    [((id<OrgXmlSaxParser>) nil_chk(parser_)) setDTDHandlerWithOrgXmlSaxDTDHandler:dtdHandler_];
  }
  if (errorHandler_ != nil) {
    [((id<OrgXmlSaxParser>) nil_chk(parser_)) setErrorHandlerWithOrgXmlSaxErrorHandler:errorHandler_];
  }
  [((id<OrgXmlSaxParser>) nil_chk(parser_)) setDocumentHandlerWithOrgXmlSaxDocumentHandler:self];
  OrgXmlSaxHelpersParserAdapter_set_locator_(self, nil);
}

- (IOSObjectArray *)processNameWithNSString:(NSString *)qName
                                withBoolean:(BOOL)isAttribute
                                withBoolean:(BOOL)useException {
  IOSObjectArray *parts = [((OrgXmlSaxHelpersNamespaceSupport *) nil_chk(nsSupport_)) processNameWithNSString:qName withNSStringArray:nameParts_ withBoolean:isAttribute];
  if (parts == nil) {
    if (useException) @throw [self makeExceptionWithNSString:[NSString stringWithFormat:@"Undeclared prefix: %@", qName]];
    [self reportErrorWithNSString:[NSString stringWithFormat:@"Undeclared prefix: %@", qName]];
    parts = [IOSObjectArray arrayWithLength:3 type:[IOSClass classWithClass:[NSString class]]];
    IOSObjectArray_Set(parts, 0, IOSObjectArray_Set(parts, 1, @""));
    IOSObjectArray_Set(parts, 2, [((NSString *) nil_chk(qName)) intern]);
  }
  return parts;
}

+ (IOSObjectArray *)__exceptions_processNameWithNSString_withBoolean_withBoolean_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlSaxSAXException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)reportErrorWithNSString:(NSString *)message {
  if (errorHandler_ != nil) [errorHandler_ errorWithOrgXmlSaxSAXParseException:[self makeExceptionWithNSString:message]];
}

+ (IOSObjectArray *)__exceptions_reportErrorWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlSaxSAXException getClass] } count:1 type:[IOSClass getClass]];
}

- (OrgXmlSaxSAXParseException *)makeExceptionWithNSString:(NSString *)message {
  if (locator_ != nil) {
    return [[[OrgXmlSaxSAXParseException alloc] initWithNSString:message withOrgXmlSaxLocator:locator_] autorelease];
  }
  else {
    return [[[OrgXmlSaxSAXParseException alloc] initWithNSString:message withNSString:nil withNSString:nil withInt:-1 withInt:-1] autorelease];
  }
}

- (void)checkNotParsingWithNSString:(NSString *)type
                       withNSString:(NSString *)name {
  if (parsing_) {
    @throw [[[OrgXmlSaxSAXNotSupportedException alloc] initWithNSString:[NSString stringWithFormat:@"Cannot change %@ %@ while parsing", type, name]] autorelease];
  }
}

+ (IOSObjectArray *)__exceptions_checkNotParsingWithNSString_withNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgXmlSaxSAXNotSupportedException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  OrgXmlSaxHelpersParserAdapter_set_errorHandler_(self, nil);
  OrgXmlSaxHelpersParserAdapter_set_contentHandler_(self, nil);
  OrgXmlSaxHelpersParserAdapter_set_dtdHandler_(self, nil);
  OrgXmlSaxHelpersParserAdapter_set_entityResolver_(self, nil);
  OrgXmlSaxHelpersParserAdapter_set_locator_(self, nil);
  OrgXmlSaxHelpersParserAdapter_set_atts_(self, nil);
  OrgXmlSaxHelpersParserAdapter_set_parser_(self, nil);
  OrgXmlSaxHelpersParserAdapter_set_nameParts_(self, nil);
  OrgXmlSaxHelpersParserAdapter_set_attAdapter_(self, nil);
  OrgXmlSaxHelpersParserAdapter_set_nsSupport_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgXmlSaxHelpersParserAdapter *)other {
  [super copyAllFieldsTo:other];
  OrgXmlSaxHelpersParserAdapter_set_attAdapter_(other, attAdapter_);
  OrgXmlSaxHelpersParserAdapter_set_atts_(other, atts_);
  OrgXmlSaxHelpersParserAdapter_set_contentHandler_(other, contentHandler_);
  OrgXmlSaxHelpersParserAdapter_set_dtdHandler_(other, dtdHandler_);
  OrgXmlSaxHelpersParserAdapter_set_entityResolver_(other, entityResolver_);
  OrgXmlSaxHelpersParserAdapter_set_errorHandler_(other, errorHandler_);
  OrgXmlSaxHelpersParserAdapter_set_locator_(other, locator_);
  OrgXmlSaxHelpersParserAdapter_set_nameParts_(other, nameParts_);
  other->namespaces_ = namespaces_;
  OrgXmlSaxHelpersParserAdapter_set_nsSupport_(other, nsSupport_);
  OrgXmlSaxHelpersParserAdapter_set_parser_(other, parser_);
  other->parsing_ = parsing_;
  other->prefixes_ = prefixes_;
  other->uris_ = uris_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:nsSupport_ name:@"nsSupport"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:attAdapter_ name:@"attAdapter"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:nameParts_ name:@"nameParts"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:parser_ name:@"parser"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:atts_ name:@"atts"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:locator_ name:@"locator"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:entityResolver_ name:@"entityResolver"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:dtdHandler_ name:@"dtdHandler"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:contentHandler_ name:@"contentHandler"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:errorHandler_ name:@"errorHandler"]];
  return result;
}

@end
@implementation OrgXmlSaxHelpersParserAdapter_AttributeListAdapter

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithOrgXmlSaxHelpersParserAdapter:(OrgXmlSaxHelpersParserAdapter *)outer$ {
  this$0_ = outer$;
  return JreMemDebugAdd([super init]);
}

- (void)setAttributeListWithOrgXmlSaxAttributeList:(id<OrgXmlSaxAttributeList>)qAtts {
  OrgXmlSaxHelpersParserAdapter_AttributeListAdapter_set_qAtts_(self, qAtts);
}

- (int)getLength {
  return [((id<OrgXmlSaxAttributeList>) nil_chk(qAtts_)) getLength];
}

- (NSString *)getURIWithInt:(int)i {
  return @"";
}

- (NSString *)getLocalNameWithInt:(int)i {
  return @"";
}

- (NSString *)getQNameWithInt:(int)i {
  return [((NSString *) nil_chk([((id<OrgXmlSaxAttributeList>) nil_chk(qAtts_)) getNameWithInt:i])) intern];
}

- (NSString *)getTypeWithInt:(int)i {
  return [((NSString *) nil_chk([((id<OrgXmlSaxAttributeList>) nil_chk(qAtts_)) getTypeWithInt:i])) intern];
}

- (NSString *)getValueWithInt:(int)i {
  return [((id<OrgXmlSaxAttributeList>) nil_chk(qAtts_)) getValueWithInt:i];
}

- (int)getIndexWithNSString:(NSString *)uri
               withNSString:(NSString *)localName {
  return -1;
}

- (int)getIndexWithNSString:(NSString *)qName {
  int max = [((OrgXmlSaxHelpersAttributesImpl *) nil_chk(this$0_->atts_)) getLength];
  for (int i = 0; i < max; i++) {
    if ([((NSString *) nil_chk([((id<OrgXmlSaxAttributeList>) nil_chk(qAtts_)) getNameWithInt:i])) isEqual:qName]) {
      return i;
    }
  }
  return -1;
}

- (NSString *)getTypeWithNSString:(NSString *)uri
                     withNSString:(NSString *)localName {
  return nil;
}

- (NSString *)getTypeWithNSString:(NSString *)qName {
  return [((NSString *) nil_chk([((id<OrgXmlSaxAttributeList>) nil_chk(qAtts_)) getTypeWithNSString:qName])) intern];
}

- (NSString *)getValueWithNSString:(NSString *)uri
                      withNSString:(NSString *)localName {
  return nil;
}

- (NSString *)getValueWithNSString:(NSString *)qName {
  return [((id<OrgXmlSaxAttributeList>) nil_chk(qAtts_)) getValueWithNSString:qName];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  OrgXmlSaxHelpersParserAdapter_AttributeListAdapter_set_qAtts_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgXmlSaxHelpersParserAdapter_AttributeListAdapter *)other {
  [super copyAllFieldsTo:other];
  OrgXmlSaxHelpersParserAdapter_AttributeListAdapter_set_qAtts_(other, qAtts_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:qAtts_ name:@"qAtts"]];
  return result;
}

@end
