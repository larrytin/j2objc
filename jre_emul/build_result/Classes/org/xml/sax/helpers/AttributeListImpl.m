//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "java/lang/Deprecated.h"
#include "java/util/ArrayList.h"
#include "org/xml/sax/AttributeList.h"
#include "org/xml/sax/helpers/AttributeListImpl.h"

@implementation OrgXmlSaxHelpersAttributeListImpl

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)init {
  if (self = [super init]) {
    OrgXmlSaxHelpersAttributeListImpl_set_names_(self, [[[JavaUtilArrayList alloc] init] autorelease]);
    OrgXmlSaxHelpersAttributeListImpl_set_types_(self, [[[JavaUtilArrayList alloc] init] autorelease]);
    OrgXmlSaxHelpersAttributeListImpl_set_values_(self, [[[JavaUtilArrayList alloc] init] autorelease]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithOrgXmlSaxAttributeList:(id<OrgXmlSaxAttributeList>)atts {
  if (self = [super init]) {
    OrgXmlSaxHelpersAttributeListImpl_set_names_(self, [[[JavaUtilArrayList alloc] init] autorelease]);
    OrgXmlSaxHelpersAttributeListImpl_set_types_(self, [[[JavaUtilArrayList alloc] init] autorelease]);
    OrgXmlSaxHelpersAttributeListImpl_set_values_(self, [[[JavaUtilArrayList alloc] init] autorelease]);
    [self setAttributeListWithOrgXmlSaxAttributeList:atts];
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)setAttributeListWithOrgXmlSaxAttributeList:(id<OrgXmlSaxAttributeList>)atts {
  int count = [((id<OrgXmlSaxAttributeList>) nil_chk(atts)) getLength];
  [self clear];
  for (int i = 0; i < count; i++) {
    [self addAttributeWithNSString:[atts getNameWithInt:i] withNSString:[atts getTypeWithInt:i] withNSString:[atts getValueWithInt:i]];
  }
}

- (void)addAttributeWithNSString:(NSString *)name
                    withNSString:(NSString *)type
                    withNSString:(NSString *)value {
  [((JavaUtilArrayList *) nil_chk(names_)) addWithId:name];
  [((JavaUtilArrayList *) nil_chk(types_)) addWithId:type];
  [((JavaUtilArrayList *) nil_chk(values_)) addWithId:value];
}

- (void)removeAttributeWithNSString:(NSString *)name {
  int i = [((JavaUtilArrayList *) nil_chk(names_)) indexOfWithId:name];
  if (i != -1) {
    [names_ removeWithInt:i];
    [((JavaUtilArrayList *) nil_chk(types_)) removeWithInt:i];
    [((JavaUtilArrayList *) nil_chk(values_)) removeWithInt:i];
  }
}

- (void)clear {
  [((JavaUtilArrayList *) nil_chk(names_)) clear];
  [((JavaUtilArrayList *) nil_chk(types_)) clear];
  [((JavaUtilArrayList *) nil_chk(values_)) clear];
}

- (int)getLength {
  return [((JavaUtilArrayList *) nil_chk(names_)) size];
}

- (NSString *)getNameWithInt:(int)i {
  if (i < 0 || i >= [((JavaUtilArrayList *) nil_chk(names_)) size]) {
    return nil;
  }
  return [((JavaUtilArrayList *) nil_chk(names_)) getWithInt:i];
}

- (NSString *)getTypeWithInt:(int)i {
  if (i < 0 || i >= [((JavaUtilArrayList *) nil_chk(types_)) size]) {
    return nil;
  }
  return [((JavaUtilArrayList *) nil_chk(types_)) getWithInt:i];
}

- (NSString *)getValueWithInt:(int)i {
  if (i < 0 || i >= [((JavaUtilArrayList *) nil_chk(values_)) size]) {
    return nil;
  }
  return [((JavaUtilArrayList *) nil_chk(values_)) getWithInt:i];
}

- (NSString *)getTypeWithNSString:(NSString *)name {
  return [self getTypeWithInt:[((JavaUtilArrayList *) nil_chk(names_)) indexOfWithId:name]];
}

- (NSString *)getValueWithNSString:(NSString *)name {
  return [self getValueWithInt:[((JavaUtilArrayList *) nil_chk(names_)) indexOfWithId:name]];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  OrgXmlSaxHelpersAttributeListImpl_set_values_(self, nil);
  OrgXmlSaxHelpersAttributeListImpl_set_types_(self, nil);
  OrgXmlSaxHelpersAttributeListImpl_set_names_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgXmlSaxHelpersAttributeListImpl *)other {
  [super copyAllFieldsTo:other];
  OrgXmlSaxHelpersAttributeListImpl_set_names_(other, names_);
  OrgXmlSaxHelpersAttributeListImpl_set_types_(other, types_);
  OrgXmlSaxHelpersAttributeListImpl_set_values_(other, values_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:names_ name:@"names"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:types_ name:@"types"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:values_ name:@"values"]];
  return result;
}

+ (IOSObjectArray *)__annotations {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecatedImpl alloc] init] autorelease] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

@end
