//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/org/xml/sax/helpers/NamespaceSupport.java
//
//  Created by retechretech on 13-9-4.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/EmptyStackException.h"
#include "java/util/Enumeration.h"
#include "java/util/Hashtable.h"
#include "java/util/List.h"
#include "org/xml/sax/helpers/NamespaceSupport.h"

@implementation OrgXmlSaxHelpersNamespaceSupport

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgXmlSaxHelpersNamespaceSupport_XMLNS_ name:@"OrgXmlSaxHelpersNamespaceSupport_XMLNS_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgXmlSaxHelpersNamespaceSupport_NSDECL_ name:@"OrgXmlSaxHelpersNamespaceSupport_NSDECL_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgXmlSaxHelpersNamespaceSupport_EMPTY_ENUMERATION_ name:@"OrgXmlSaxHelpersNamespaceSupport_EMPTY_ENUMERATION_"]];
  return result;
}

static NSString * OrgXmlSaxHelpersNamespaceSupport_XMLNS_ = @"http://www.w3.org/XML/1998/namespace";
static NSString * OrgXmlSaxHelpersNamespaceSupport_NSDECL_ = @"http://www.w3.org/xmlns/2000/";
static id<JavaUtilEnumeration> OrgXmlSaxHelpersNamespaceSupport_EMPTY_ENUMERATION_;

+ (NSString *)XMLNS {
  return OrgXmlSaxHelpersNamespaceSupport_XMLNS_;
}

+ (NSString *)NSDECL {
  return OrgXmlSaxHelpersNamespaceSupport_NSDECL_;
}

+ (id<JavaUtilEnumeration>)EMPTY_ENUMERATION {
  return OrgXmlSaxHelpersNamespaceSupport_EMPTY_ENUMERATION_;
}

- (id)init {
  if ((self = [super init])) {
    [self reset];
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)reset {
  OrgXmlSaxHelpersNamespaceSupport_set_contexts_(self, [IOSObjectArray arrayWithLength:32 type:[IOSClass classWithClass:[OrgXmlSaxHelpersNamespaceSupport_Context class]]]);
  namespaceDeclUris_ = NO;
  contextPos_ = 0;
  [contexts_ replaceObjectAtIndex:contextPos_ withObject:OrgXmlSaxHelpersNamespaceSupport_set_currentContext_(self, [[[OrgXmlSaxHelpersNamespaceSupport_Context alloc] initWithOrgXmlSaxHelpersNamespaceSupport:self] autorelease])];
  [currentContext_ declarePrefixWithNSString:@"xml" withNSString:OrgXmlSaxHelpersNamespaceSupport_XMLNS_];
}

- (void)pushContext {
  int max = (int) [((IOSObjectArray *) nil_chk(contexts_)) count];
  ((OrgXmlSaxHelpersNamespaceSupport_Context *) nil_chk([contexts_ objectAtIndex:contextPos_]))->declsOK_ = NO;
  contextPos_++;
  if (contextPos_ >= max) {
    IOSObjectArray *newContexts = [IOSObjectArray arrayWithLength:max * 2 type:[IOSClass classWithClass:[OrgXmlSaxHelpersNamespaceSupport_Context class]]];
    [JavaLangSystem arraycopyWithId:contexts_ withInt:0 withId:newContexts withInt:0 withInt:max];
    max *= 2;
    OrgXmlSaxHelpersNamespaceSupport_set_contexts_(self, newContexts);
  }
  OrgXmlSaxHelpersNamespaceSupport_set_currentContext_(self, [contexts_ objectAtIndex:contextPos_]);
  if (currentContext_ == nil) {
    [contexts_ replaceObjectAtIndex:contextPos_ withObject:OrgXmlSaxHelpersNamespaceSupport_set_currentContext_(self, [[[OrgXmlSaxHelpersNamespaceSupport_Context alloc] initWithOrgXmlSaxHelpersNamespaceSupport:self] autorelease])];
  }
  if (contextPos_ > 0) {
    [((OrgXmlSaxHelpersNamespaceSupport_Context *) nil_chk(currentContext_)) setParentWithOrgXmlSaxHelpersNamespaceSupport_Context:[contexts_ objectAtIndex:contextPos_ - 1]];
  }
}

- (void)popContext {
  [((OrgXmlSaxHelpersNamespaceSupport_Context *) nil_chk([((IOSObjectArray *) nil_chk(contexts_)) objectAtIndex:contextPos_])) clear];
  contextPos_--;
  if (contextPos_ < 0) {
    @throw [[[JavaUtilEmptyStackException alloc] init] autorelease];
  }
  OrgXmlSaxHelpersNamespaceSupport_set_currentContext_(self, [contexts_ objectAtIndex:contextPos_]);
}

- (BOOL)declarePrefixWithNSString:(NSString *)prefix
                     withNSString:(NSString *)uri {
  if ([((NSString *) nil_chk(prefix)) isEqual:@"xml"] || [prefix isEqual:@"xmlns"]) {
    return NO;
  }
  else {
    [((OrgXmlSaxHelpersNamespaceSupport_Context *) nil_chk(currentContext_)) declarePrefixWithNSString:prefix withNSString:uri];
    return YES;
  }
}

- (IOSObjectArray *)processNameWithNSString:(NSString *)qName
                          withNSStringArray:(IOSObjectArray *)parts
                                   withBOOL:(BOOL)isAttribute {
  IOSObjectArray *myParts = [((OrgXmlSaxHelpersNamespaceSupport_Context *) nil_chk(currentContext_)) processNameWithNSString:qName withBOOL:isAttribute];
  if (myParts == nil) {
    return nil;
  }
  else {
    [((IOSObjectArray *) nil_chk(parts)) replaceObjectAtIndex:0 withObject:[myParts objectAtIndex:0]];
    [parts replaceObjectAtIndex:1 withObject:[myParts objectAtIndex:1]];
    [parts replaceObjectAtIndex:2 withObject:[myParts objectAtIndex:2]];
    return parts;
  }
}

- (NSString *)getURIWithNSString:(NSString *)prefix {
  return [((OrgXmlSaxHelpersNamespaceSupport_Context *) nil_chk(currentContext_)) getURIWithNSString:prefix];
}

- (id<JavaUtilEnumeration>)getPrefixes {
  return [((OrgXmlSaxHelpersNamespaceSupport_Context *) nil_chk(currentContext_)) getPrefixes];
}

- (NSString *)getPrefixWithNSString:(NSString *)uri {
  return [((OrgXmlSaxHelpersNamespaceSupport_Context *) nil_chk(currentContext_)) getPrefixWithNSString:uri];
}

- (id<JavaUtilEnumeration>)getPrefixesWithNSString:(NSString *)uri {
  JavaUtilArrayList *prefixes = [[[JavaUtilArrayList alloc] init] autorelease];
  id<JavaUtilEnumeration> allPrefixes = [self getPrefixes];
  while ([((id<JavaUtilEnumeration>) nil_chk(allPrefixes)) hasMoreElements]) {
    NSString *prefix = (NSString *) [allPrefixes nextElement];
    if ([((NSString *) nil_chk(uri)) isEqual:[self getURIWithNSString:prefix]]) {
      [prefixes addWithId:prefix];
    }
  }
  return [JavaUtilCollections enumerationWithJavaUtilCollection:prefixes];
}

- (id<JavaUtilEnumeration>)getDeclaredPrefixes {
  return [((OrgXmlSaxHelpersNamespaceSupport_Context *) nil_chk(currentContext_)) getDeclaredPrefixes];
}

- (void)setNamespaceDeclUrisWithBOOL:(BOOL)value {
  if (contextPos_ != 0) @throw [[[JavaLangIllegalStateException alloc] init] autorelease];
  if (value == namespaceDeclUris_) return;
  namespaceDeclUris_ = value;
  if (value) [((OrgXmlSaxHelpersNamespaceSupport_Context *) nil_chk(currentContext_)) declarePrefixWithNSString:@"xmlns" withNSString:OrgXmlSaxHelpersNamespaceSupport_NSDECL_];
  else {
    [((IOSObjectArray *) nil_chk(contexts_)) replaceObjectAtIndex:contextPos_ withObject:OrgXmlSaxHelpersNamespaceSupport_set_currentContext_(self, [[[OrgXmlSaxHelpersNamespaceSupport_Context alloc] initWithOrgXmlSaxHelpersNamespaceSupport:self] autorelease])];
    [currentContext_ declarePrefixWithNSString:@"xml" withNSString:OrgXmlSaxHelpersNamespaceSupport_XMLNS_];
  }
}

- (BOOL)isNamespaceDeclUris {
  return namespaceDeclUris_;
}

+ (void)initialize {
  if (self == [OrgXmlSaxHelpersNamespaceSupport class]) {
    JreOperatorRetainedAssign(&OrgXmlSaxHelpersNamespaceSupport_EMPTY_ENUMERATION_, nil, [JavaUtilCollections enumerationWithJavaUtilCollection:[JavaUtilCollections emptyList]]);
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  OrgXmlSaxHelpersNamespaceSupport_set_currentContext_(self, nil);
  OrgXmlSaxHelpersNamespaceSupport_set_contexts_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgXmlSaxHelpersNamespaceSupport *)other {
  [super copyAllFieldsTo:other];
  other->contextPos_ = contextPos_;
  OrgXmlSaxHelpersNamespaceSupport_set_contexts_(other, contexts_);
  OrgXmlSaxHelpersNamespaceSupport_set_currentContext_(other, currentContext_);
  other->namespaceDeclUris_ = namespaceDeclUris_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:contexts_ name:@"contexts"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:currentContext_ name:@"currentContext"]];
  return result;
}

@end
@implementation OrgXmlSaxHelpersNamespaceSupport_Context

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithOrgXmlSaxHelpersNamespaceSupport:(OrgXmlSaxHelpersNamespaceSupport *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
    OrgXmlSaxHelpersNamespaceSupport_Context_set_defaultNS_(self, nil);
    declsOK_ = YES;
    OrgXmlSaxHelpersNamespaceSupport_Context_set_declarations_(self, nil);
    declSeen_ = NO;
    OrgXmlSaxHelpersNamespaceSupport_Context_set_parent_(self, nil);
    [self copyTables];
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)setParentWithOrgXmlSaxHelpersNamespaceSupport_Context:(OrgXmlSaxHelpersNamespaceSupport_Context *)parent {
  OrgXmlSaxHelpersNamespaceSupport_Context_set_parent_(self, parent);
  OrgXmlSaxHelpersNamespaceSupport_Context_set_declarations_(self, nil);
  OrgXmlSaxHelpersNamespaceSupport_Context_set_prefixTable_(self, ((OrgXmlSaxHelpersNamespaceSupport_Context *) nil_chk(parent))->prefixTable_);
  OrgXmlSaxHelpersNamespaceSupport_Context_set_uriTable_(self, parent->uriTable_);
  OrgXmlSaxHelpersNamespaceSupport_Context_set_elementNameTable_(self, parent->elementNameTable_);
  OrgXmlSaxHelpersNamespaceSupport_Context_set_attributeNameTable_(self, parent->attributeNameTable_);
  OrgXmlSaxHelpersNamespaceSupport_Context_set_defaultNS_(self, parent->defaultNS_);
  declSeen_ = NO;
  declsOK_ = YES;
}

- (void)clear {
  OrgXmlSaxHelpersNamespaceSupport_Context_set_parent_(self, nil);
  OrgXmlSaxHelpersNamespaceSupport_Context_set_prefixTable_(self, nil);
  OrgXmlSaxHelpersNamespaceSupport_Context_set_uriTable_(self, nil);
  OrgXmlSaxHelpersNamespaceSupport_Context_set_elementNameTable_(self, nil);
  OrgXmlSaxHelpersNamespaceSupport_Context_set_attributeNameTable_(self, nil);
  OrgXmlSaxHelpersNamespaceSupport_Context_set_defaultNS_(self, nil);
}

- (void)declarePrefixWithNSString:(NSString *)prefix
                     withNSString:(NSString *)uri {
  if (!declsOK_) {
    @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"can't declare any more prefixes in this context"] autorelease];
  }
  if (!declSeen_) {
    [self copyTables];
  }
  if (declarations_ == nil) {
    OrgXmlSaxHelpersNamespaceSupport_Context_set_declarations_(self, [[[JavaUtilArrayList alloc] init] autorelease]);
  }
  prefix = [((NSString *) nil_chk(prefix)) intern];
  uri = [((NSString *) nil_chk(uri)) intern];
  if ([@"" isEqual:prefix]) {
    if ([@"" isEqual:uri]) {
      OrgXmlSaxHelpersNamespaceSupport_Context_set_defaultNS_(self, nil);
    }
    else {
      OrgXmlSaxHelpersNamespaceSupport_Context_set_defaultNS_(self, uri);
    }
  }
  else {
    [((JavaUtilHashtable *) nil_chk(prefixTable_)) putWithId:prefix withId:uri];
    [((JavaUtilHashtable *) nil_chk(uriTable_)) putWithId:uri withId:prefix];
  }
  [((JavaUtilArrayList *) nil_chk(declarations_)) addWithId:prefix];
}

- (IOSObjectArray *)processNameWithNSString:(NSString *)qName
                                   withBOOL:(BOOL)isAttribute {
  IOSObjectArray *name;
  JavaUtilHashtable *table;
  declsOK_ = NO;
  if (isAttribute) {
    table = attributeNameTable_;
  }
  else {
    table = elementNameTable_;
  }
  name = (IOSObjectArray *) [((JavaUtilHashtable *) nil_chk(table)) getWithId:qName];
  if (name != nil) {
    return name;
  }
  name = [IOSObjectArray arrayWithLength:3 type:[IOSClass classWithClass:[NSString class]]];
  [name replaceObjectAtIndex:2 withObject:[((NSString *) nil_chk(qName)) intern]];
  int index = [qName indexOf:':'];
  if (index == -1) {
    if (isAttribute) {
      if ([@"xmlns" isEqual:qName] && this$0_->namespaceDeclUris_) [name replaceObjectAtIndex:0 withObject:[OrgXmlSaxHelpersNamespaceSupport NSDECL]];
      else [name replaceObjectAtIndex:0 withObject:@""];
    }
    else if (defaultNS_ == nil) {
      [name replaceObjectAtIndex:0 withObject:@""];
    }
    else {
      [name replaceObjectAtIndex:0 withObject:defaultNS_];
    }
    [name replaceObjectAtIndex:1 withObject:[name objectAtIndex:2]];
  }
  else {
    NSString *prefix = [qName substring:0 endIndex:index];
    NSString *local = [qName substring:index + 1];
    NSString *uri;
    if ([@"" isEqual:prefix]) {
      uri = defaultNS_;
    }
    else {
      uri = (NSString *) [((JavaUtilHashtable *) nil_chk(prefixTable_)) getWithId:prefix];
    }
    if (uri == nil || (!isAttribute && [@"xmlns" isEqual:prefix])) {
      return nil;
    }
    [name replaceObjectAtIndex:0 withObject:uri];
    [name replaceObjectAtIndex:1 withObject:[((NSString *) nil_chk(local)) intern]];
  }
  [table putWithId:[name objectAtIndex:2] withId:name];
  return name;
}

- (NSString *)getURIWithNSString:(NSString *)prefix {
  if ([@"" isEqual:prefix]) {
    return defaultNS_;
  }
  else if (prefixTable_ == nil) {
    return nil;
  }
  else {
    return (NSString *) [prefixTable_ getWithId:prefix];
  }
}

- (NSString *)getPrefixWithNSString:(NSString *)uri {
  if (uriTable_ == nil) {
    return nil;
  }
  else {
    return (NSString *) [uriTable_ getWithId:uri];
  }
}

- (id<JavaUtilEnumeration>)getDeclaredPrefixes {
  return (declarations_ == nil) ? ((id) [OrgXmlSaxHelpersNamespaceSupport EMPTY_ENUMERATION]) : ((id) [JavaUtilCollections enumerationWithJavaUtilCollection:declarations_]);
}

- (id<JavaUtilEnumeration>)getPrefixes {
  if (prefixTable_ == nil) {
    return [OrgXmlSaxHelpersNamespaceSupport EMPTY_ENUMERATION];
  }
  else {
    return [prefixTable_ keys];
  }
}

- (void)copyTables {
  if (prefixTable_ != nil) {
    OrgXmlSaxHelpersNamespaceSupport_Context_set_prefixTable_(self, (JavaUtilHashtable *) [prefixTable_ clone]);
  }
  else {
    OrgXmlSaxHelpersNamespaceSupport_Context_set_prefixTable_(self, [[[JavaUtilHashtable alloc] init] autorelease]);
  }
  if (uriTable_ != nil) {
    OrgXmlSaxHelpersNamespaceSupport_Context_set_uriTable_(self, (JavaUtilHashtable *) [uriTable_ clone]);
  }
  else {
    OrgXmlSaxHelpersNamespaceSupport_Context_set_uriTable_(self, [[[JavaUtilHashtable alloc] init] autorelease]);
  }
  OrgXmlSaxHelpersNamespaceSupport_Context_set_elementNameTable_(self, [[[JavaUtilHashtable alloc] init] autorelease]);
  OrgXmlSaxHelpersNamespaceSupport_Context_set_attributeNameTable_(self, [[[JavaUtilHashtable alloc] init] autorelease]);
  declSeen_ = YES;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  OrgXmlSaxHelpersNamespaceSupport_Context_set_parent_(self, nil);
  OrgXmlSaxHelpersNamespaceSupport_Context_set_declarations_(self, nil);
  OrgXmlSaxHelpersNamespaceSupport_Context_set_defaultNS_(self, nil);
  OrgXmlSaxHelpersNamespaceSupport_Context_set_attributeNameTable_(self, nil);
  OrgXmlSaxHelpersNamespaceSupport_Context_set_elementNameTable_(self, nil);
  OrgXmlSaxHelpersNamespaceSupport_Context_set_uriTable_(self, nil);
  OrgXmlSaxHelpersNamespaceSupport_Context_set_prefixTable_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgXmlSaxHelpersNamespaceSupport_Context *)other {
  [super copyAllFieldsTo:other];
  OrgXmlSaxHelpersNamespaceSupport_Context_set_attributeNameTable_(other, attributeNameTable_);
  other->declSeen_ = declSeen_;
  OrgXmlSaxHelpersNamespaceSupport_Context_set_declarations_(other, declarations_);
  other->declsOK_ = declsOK_;
  OrgXmlSaxHelpersNamespaceSupport_Context_set_defaultNS_(other, defaultNS_);
  OrgXmlSaxHelpersNamespaceSupport_Context_set_elementNameTable_(other, elementNameTable_);
  OrgXmlSaxHelpersNamespaceSupport_Context_set_parent_(other, parent_);
  OrgXmlSaxHelpersNamespaceSupport_Context_set_prefixTable_(other, prefixTable_);
  OrgXmlSaxHelpersNamespaceSupport_Context_set_uriTable_(other, uriTable_);
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  return result;
}

@end
