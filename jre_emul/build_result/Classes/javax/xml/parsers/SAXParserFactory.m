//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/javax/xml/parsers/SAXParserFactory.java
//
//  Created by retechretech on 13-9-4.
//

#include "IOSClass.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/InstantiationException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "javax/xml/parsers/FactoryConfigurationError.h"
#include "javax/xml/parsers/ParserConfigurationException.h"
#include "javax/xml/parsers/SAXParser.h"
#include "javax/xml/parsers/SAXParserFactory.h"
#include "javax/xml/validation/Schema.h"
#include "org/apache/harmony/xml/parsers/SAXParserFactoryImpl.h"
#include "org/xml/sax/SAXException.h"
#include "org/xml/sax/SAXNotRecognizedException.h"
#include "org/xml/sax/SAXNotSupportedException.h"

@implementation JavaxXmlParsersSAXParserFactory

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)init {
  if ((self = [super init])) {
    validating_ = NO;
    namespaceAware_ = NO;
    JreMemDebugAdd(self);
  }
  return self;
}

+ (JavaxXmlParsersSAXParserFactory *)newInstance {
  return [[[OrgApacheHarmonyXmlParsersSAXParserFactoryImpl alloc] init] autorelease];
}

+ (JavaxXmlParsersSAXParserFactory *)newInstanceWithNSString:(NSString *)factoryClassName
                                     withJavaLangClassLoader:(JavaLangClassLoader *)classLoader {
  if (factoryClassName == nil) {
    @throw [[[JavaxXmlParsersFactoryConfigurationError alloc] initWithNSString:@"factoryClassName == null"] autorelease];
  }
  @try {
    IOSClass *type = classLoader != nil ? [classLoader loadClassWithNSString:factoryClassName] : [IOSClass forName:factoryClassName];
    return (JavaxXmlParsersSAXParserFactory *) [type newInstance];
  }
  @catch (JavaLangClassNotFoundException *e) {
    @throw [[[JavaxXmlParsersFactoryConfigurationError alloc] initWithJavaLangException:e] autorelease];
  }
  @catch (JavaLangInstantiationException *e) {
    @throw [[[JavaxXmlParsersFactoryConfigurationError alloc] initWithJavaLangException:e] autorelease];
  }
  @catch (JavaLangIllegalAccessException *e) {
    @throw [[[JavaxXmlParsersFactoryConfigurationError alloc] initWithJavaLangException:e] autorelease];
  }
}

- (JavaxXmlParsersSAXParser *)newSAXParser {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (IOSObjectArray *)__exceptions_newSAXParser {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaxXmlParsersParserConfigurationException getClass], [OrgXmlSaxSAXException getClass] } count:2 type:[IOSClass getClass]];
}

- (void)setNamespaceAwareWithBOOL:(BOOL)awareness {
  self->namespaceAware_ = awareness;
}

- (void)setValidatingWithBOOL:(BOOL)validating {
  self->validating_ = validating;
}

- (BOOL)isNamespaceAware {
  return namespaceAware_;
}

- (BOOL)isValidating {
  return validating_;
}

- (void)setFeatureWithNSString:(NSString *)name
                      withBOOL:(BOOL)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (IOSObjectArray *)__exceptions_setFeatureWithNSString_withBOOL_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaxXmlParsersParserConfigurationException getClass], [OrgXmlSaxSAXNotRecognizedException getClass], [OrgXmlSaxSAXNotSupportedException getClass] } count:3 type:[IOSClass getClass]];
}

- (BOOL)getFeatureWithNSString:(NSString *)name {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (IOSObjectArray *)__exceptions_getFeatureWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaxXmlParsersParserConfigurationException getClass], [OrgXmlSaxSAXNotRecognizedException getClass], [OrgXmlSaxSAXNotSupportedException getClass] } count:3 type:[IOSClass getClass]];
}

- (JavaxXmlValidationSchema *)getSchema {
  @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:@"This parser does not support specification"] autorelease];
}

- (void)setSchemaWithJavaxXmlValidationSchema:(JavaxXmlValidationSchema *)schema {
  @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:@"This parser does not support specification"] autorelease];
}

- (void)setXIncludeAwareWithBOOL:(BOOL)state {
  @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:@"This parser does not support specification"] autorelease];
}

- (BOOL)isXIncludeAware {
  @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:@"This parser does not support specification"] autorelease];
}

- (void)copyAllFieldsTo:(JavaxXmlParsersSAXParserFactory *)other {
  [super copyAllFieldsTo:other];
  other->namespaceAware_ = namespaceAware_;
  other->validating_ = validating_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  return result;
}

@end
