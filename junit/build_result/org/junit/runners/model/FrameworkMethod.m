//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/Throwable.h"
#include "java/lang/Void.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/Modifier.h"
#include "java/lang/reflect/Type.h"
#include "java/util/List.h"
#include "org/junit/runners/model/FrameworkMethod.h"
#include "org/junit/runners/model/NoGenericTypeParametersValidator.h"

@implementation OrgJunitRunnersModelFrameworkMethod

- (id)initWithJavaLangReflectMethod:(JavaLangReflectMethod *)method {
  if (self = [super init]) {
    OrgJunitRunnersModelFrameworkMethod_set_fMethod_(self, method);
  }
  return self;
}

- (JavaLangReflectMethod *)getMethod {
  return fMethod_;
}

- (id)invokeExplosivelyWithId:(id)target
            withNSObjectArray:(IOSObjectArray *)params {
  return [((OrgJunitRunnersModelFrameworkMethod_$1 *) [[[OrgJunitRunnersModelFrameworkMethod_$1 alloc] initWithOrgJunitRunnersModelFrameworkMethod:self withId:target withNSObjectArray:params] autorelease]) run];
}

+ (IOSObjectArray *)__exceptions_invokeExplosivelyWithId_withNSObjectArray_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangThrowable getClass] } count:1 type:[IOSClass getClass]];
}

- (NSString *)getName {
  return [((JavaLangReflectMethod *) nil_chk(fMethod_)) getName];
}

- (void)validatePublicVoidNoArgWithBoolean:(BOOL)isStatic
                          withJavaUtilList:(id<JavaUtilList>)errors {
  [self validatePublicVoidWithBoolean:isStatic withJavaUtilList:errors];
  if ((int) [((IOSObjectArray *) nil_chk([((JavaLangReflectMethod *) nil_chk(fMethod_)) getParameterTypes])) count] != 0) [((id<JavaUtilList>) nil_chk(errors)) addWithId:[[[JavaLangException alloc] initWithNSString:[NSString stringWithFormat:@"Method %@ should have no parameters", [fMethod_ getName]]] autorelease]];
}

- (void)validatePublicVoidWithBoolean:(BOOL)isStatic
                     withJavaUtilList:(id<JavaUtilList>)errors {
  if ([JavaLangReflectModifier isStaticWithInt:[((JavaLangReflectMethod *) nil_chk(fMethod_)) getModifiers]] != isStatic) {
    NSString *state = isStatic ? @"should" : @"should not";
    [((id<JavaUtilList>) nil_chk(errors)) addWithId:[[[JavaLangException alloc] initWithNSString:[NSString stringWithFormat:@"Method %@() %@ be static", [fMethod_ getName], state]] autorelease]];
  }
  if (![JavaLangReflectModifier isPublicWithInt:[((IOSClass *) nil_chk([fMethod_ getDeclaringClass])) getModifiers]]) [((id<JavaUtilList>) nil_chk(errors)) addWithId:[[[JavaLangException alloc] initWithNSString:[NSString stringWithFormat:@"Class %@ should be public", [((IOSClass *) nil_chk([fMethod_ getDeclaringClass])) getName]]] autorelease]];
  if (![JavaLangReflectModifier isPublicWithInt:[fMethod_ getModifiers]]) [((id<JavaUtilList>) nil_chk(errors)) addWithId:[[[JavaLangException alloc] initWithNSString:[NSString stringWithFormat:@"Method %@() should be public", [fMethod_ getName]]] autorelease]];
  if ([fMethod_ getReturnType] != [JavaLangVoid TYPE]) [((id<JavaUtilList>) nil_chk(errors)) addWithId:[[[JavaLangException alloc] initWithNSString:[NSString stringWithFormat:@"Method %@() should be void", [fMethod_ getName]]] autorelease]];
}

- (void)validateNoTypeParametersOnArgsWithJavaUtilList:(id<JavaUtilList>)errors {
  [((OrgJunitRunnersModelNoGenericTypeParametersValidator *) [[[OrgJunitRunnersModelNoGenericTypeParametersValidator alloc] initWithJavaLangReflectMethod:fMethod_] autorelease]) validateWithJavaUtilList:errors];
}

- (BOOL)isShadowedByWithId:(OrgJunitRunnersModelFrameworkMethod *)other {
  if (![((NSString *) nil_chk([((OrgJunitRunnersModelFrameworkMethod *) nil_chk(other)) getName])) isEqual:[self getName]]) return NO;
  if ((int) [((IOSObjectArray *) nil_chk([other getParameterTypes])) count] != (int) [((IOSObjectArray *) nil_chk([self getParameterTypes])) count]) return NO;
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk([other getParameterTypes])) count]; i++) if (![((IOSClass *) nil_chk(IOSObjectArray_Get(nil_chk([other getParameterTypes]), i))) isEqual:IOSObjectArray_Get(nil_chk([self getParameterTypes]), i)]) return NO;
  return YES;
}

- (BOOL)isEqual:(id)obj {
  if (![[IOSClass classWithClass:[OrgJunitRunnersModelFrameworkMethod class]] isInstance:obj]) return NO;
  return [((JavaLangReflectMethod *) nil_chk(((OrgJunitRunnersModelFrameworkMethod *) nil_chk(obj))->fMethod_)) isEqual:fMethod_];
}

- (NSUInteger)hash {
  return [((JavaLangReflectMethod *) nil_chk(fMethod_)) hash];
}

- (BOOL)producesTypeWithJavaLangReflectType:(id<JavaLangReflectType>)type {
  return (int) [((IOSObjectArray *) nil_chk([self getParameterTypes])) count] == 0 && [(id) type isKindOfClass:[IOSClass class]] && [nil_chk(type) isAssignableFrom:[((JavaLangReflectMethod *) nil_chk(fMethod_)) getReturnType]];
}

- (IOSObjectArray *)getParameterTypes {
  return [((JavaLangReflectMethod *) nil_chk(fMethod_)) getParameterTypes];
}

- (IOSObjectArray *)getAnnotations {
  return [((JavaLangReflectMethod *) nil_chk(fMethod_)) getAnnotations];
}

- (id)getAnnotationWithIOSClass:(IOSClass *)annotationType {
  return [((JavaLangReflectMethod *) nil_chk(fMethod_)) getAnnotationWithIOSClass:annotationType];
}

- (void)dealloc {
  OrgJunitRunnersModelFrameworkMethod_set_fMethod_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJunitRunnersModelFrameworkMethod *)other {
  [super copyAllFieldsTo:other];
  OrgJunitRunnersModelFrameworkMethod_set_fMethod_(other, fMethod_);
}

+ (IOSObjectArray *)__annotations_producesTypeWithJavaLangReflectType_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecatedImpl alloc] init] autorelease] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

@end
@implementation OrgJunitRunnersModelFrameworkMethod_$1

- (id)runReflectiveCall {
  return [((JavaLangReflectMethod *) nil_chk(this$0_->fMethod_)) invokeWithId:val$target_ withNSObjectArray:val$params_];
}

+ (IOSObjectArray *)__exceptions_runReflectiveCall {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangThrowable getClass] } count:1 type:[IOSClass getClass]];
}

- (id)initWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)outer$
                                           withId:(id)capture$0
                                withNSObjectArray:(IOSObjectArray *)capture$1 {
  OrgJunitRunnersModelFrameworkMethod_$1_set_this$0_(self, outer$);
  OrgJunitRunnersModelFrameworkMethod_$1_set_val$target_(self, capture$0);
  OrgJunitRunnersModelFrameworkMethod_$1_set_val$params_(self, capture$1);
  return [super init];
}

- (void)dealloc {
  OrgJunitRunnersModelFrameworkMethod_$1_set_val$params_(self, nil);
  OrgJunitRunnersModelFrameworkMethod_$1_set_val$target_(self, nil);
  OrgJunitRunnersModelFrameworkMethod_$1_set_this$0_(self, nil);
  [super dealloc];
}

@end
