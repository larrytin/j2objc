//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Constructor.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/Modifier.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "org/junit/Assert.h"
#include "org/junit/Before.h"
#include "org/junit/BeforeClass.h"
#include "org/junit/runners/model/FrameworkField.h"
#include "org/junit/runners/model/FrameworkMember.h"
#include "org/junit/runners/model/FrameworkMethod.h"
#include "org/junit/runners/model/TestClass.h"

@implementation OrgJunitRunnersModelTestClass

- (id)initWithIOSClass:(IOSClass *)klass {
  if (self = [super init]) {
    OrgJunitRunnersModelTestClass_set_fMethodsForAnnotations_(self, [[[JavaUtilHashMap alloc] init] autorelease]);
    OrgJunitRunnersModelTestClass_set_fFieldsForAnnotations_(self, [[[JavaUtilHashMap alloc] init] autorelease]);
    OrgJunitRunnersModelTestClass_set_fClass_(self, klass);
    if (klass != nil && (int) [((IOSObjectArray *) nil_chk([klass getConstructors])) count] > 1) @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Test class can only have one constructor"] autorelease];
    for (IOSClass * __strong eachClass in [self getSuperClassesWithIOSClass:fClass_]) {
      {
        IOSObjectArray *a__ = [((IOSClass *) nil_chk(eachClass)) getDeclaredMethods];
        id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        id const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          JavaLangReflectMethod *eachMethod = (*b__++);
          [self addToAnnotationListsWithId:[[[OrgJunitRunnersModelFrameworkMethod alloc] initWithJavaLangReflectMethod:eachMethod] autorelease] withJavaUtilMap:fMethodsForAnnotations_];
        }
      }
      {
        IOSObjectArray *a__ = [eachClass getDeclaredFields];
        id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        id const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          JavaLangReflectField *eachField = (*b__++);
          [self addToAnnotationListsWithId:[[[OrgJunitRunnersModelFrameworkField alloc] initWithJavaLangReflectField:eachField] autorelease] withJavaUtilMap:fFieldsForAnnotations_];
        }
      }
    }
  }
  return self;
}

- (void)addToAnnotationListsWithId:(OrgJunitRunnersModelFrameworkMember *)member
                   withJavaUtilMap:(id<JavaUtilMap>)map {
  {
    IOSObjectArray *a__ = [((OrgJunitRunnersModelFrameworkMember *) nil_chk(member)) getAnnotations];
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<JavaLangAnnotationAnnotation> each = (*b__++);
      IOSClass *type = [((id<JavaLangAnnotationAnnotation>) nil_chk(each)) annotationType];
      id<JavaUtilList> members = [self getAnnotatedMembersWithJavaUtilMap:map withIOSClass:type];
      if ([member isShadowedByWithJavaUtilList:members]) return;
      if ([self runsTopToBottomWithIOSClass:type]) [((id<JavaUtilList>) nil_chk(members)) addWithInt:0 withId:member];
      else [((id<JavaUtilList>) nil_chk(members)) addWithId:member];
    }
  }
}

- (id<JavaUtilList>)getAnnotatedMethodsWithIOSClass:(IOSClass *)annotationClass {
  return [self getAnnotatedMembersWithJavaUtilMap:fMethodsForAnnotations_ withIOSClass:annotationClass];
}

- (id<JavaUtilList>)getAnnotatedFieldsWithIOSClass:(IOSClass *)annotationClass {
  return [self getAnnotatedMembersWithJavaUtilMap:fFieldsForAnnotations_ withIOSClass:annotationClass];
}

- (id<JavaUtilList>)getAnnotatedMembersWithJavaUtilMap:(id<JavaUtilMap>)map
                                          withIOSClass:(IOSClass *)type {
  if (![((id<JavaUtilMap>) nil_chk(map)) containsKeyWithId:type]) [map putWithId:type withId:[[[JavaUtilArrayList alloc] init] autorelease]];
  return [map getWithId:type];
}

- (BOOL)runsTopToBottomWithIOSClass:(IOSClass *)annotation {
  return [((IOSClass *) nil_chk(annotation)) isEqual:[IOSClass classWithProtocol:@protocol(OrgJunitBefore)]] || [annotation isEqual:[IOSClass classWithProtocol:@protocol(OrgJunitBeforeClass)]];
}

- (id<JavaUtilList>)getSuperClassesWithIOSClass:(IOSClass *)testClass {
  JavaUtilArrayList *results = [[[JavaUtilArrayList alloc] init] autorelease];
  IOSClass *current = testClass;
  while (current != nil) {
    [results addWithId:current];
    current = [((IOSClass *) nil_chk(current)) getSuperclass];
  }
  return results;
}

- (IOSClass *)getJavaClass {
  return fClass_;
}

- (NSString *)getName {
  if (fClass_ == nil) return @"null";
  return [((IOSClass *) nil_chk(fClass_)) getName];
}

- (JavaLangReflectConstructor *)getOnlyConstructor {
  IOSObjectArray *constructors = [((IOSClass *) nil_chk(fClass_)) getConstructors];
  [OrgJunitAssert assertEqualsWithLong:1 withLong:(int) [((IOSObjectArray *) nil_chk(constructors)) count]];
  return IOSObjectArray_Get(constructors, 0);
}

- (IOSObjectArray *)getAnnotations {
  if (fClass_ == nil) return [IOSObjectArray arrayWithLength:0 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
  return [((IOSClass *) nil_chk(fClass_)) getAnnotations];
}

- (id<JavaUtilList>)getAnnotatedFieldValuesWithId:(id)test
                                     withIOSClass:(IOSClass *)annotationClass
                                     withIOSClass:(IOSClass *)valueClass {
  id<JavaUtilList> results = [[[JavaUtilArrayList alloc] init] autorelease];
  for (OrgJunitRunnersModelFrameworkField * __strong each in [self getAnnotatedFieldsWithIOSClass:annotationClass]) {
    @try {
      id fieldValue = [((OrgJunitRunnersModelFrameworkField *) nil_chk(each)) getWithId:test];
      if ([((IOSClass *) nil_chk(valueClass)) isInstance:fieldValue]) [results addWithId:[valueClass cast:fieldValue]];
    }
    @catch (JavaLangIllegalAccessException *e) {
      @throw [[[JavaLangRuntimeException alloc] initWithNSString:@"How did getFields return a field we couldn't access?" withJavaLangThrowable:e] autorelease];
    }
  }
  return results;
}

- (BOOL)isANonStaticInnerClass {
  return [((IOSClass *) nil_chk(fClass_)) isMemberClass] && ![JavaLangReflectModifier isStaticWithInt:[fClass_ getModifiers]];
}

- (void)dealloc {
  OrgJunitRunnersModelTestClass_set_fFieldsForAnnotations_(self, nil);
  OrgJunitRunnersModelTestClass_set_fMethodsForAnnotations_(self, nil);
  OrgJunitRunnersModelTestClass_set_fClass_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJunitRunnersModelTestClass *)other {
  [super copyAllFieldsTo:other];
  OrgJunitRunnersModelTestClass_set_fClass_(other, fClass_);
  OrgJunitRunnersModelTestClass_set_fFieldsForAnnotations_(other, fFieldsForAnnotations_);
  OrgJunitRunnersModelTestClass_set_fMethodsForAnnotations_(other, fMethodsForAnnotations_);
}

@end
