//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/retechretech/dev/tools/lib/j2objc/junit/build_result/java/org/junit/runners/model/MultipleFailureException.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSClass.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "org/junit/internal/runners/model/MultipleFailureException.h"
#include "org/junit/runners/model/MultipleFailureException.h"

@implementation OrgJunitRunnersModelMultipleFailureException

- (id)initWithJavaUtilList:(id<JavaUtilList>)errors {
  if (self = [super init]) {
    OrgJunitRunnersModelMultipleFailureException_set_fErrors_(self, [[[JavaUtilArrayList alloc] initWithJavaUtilCollection:errors] autorelease]);
  }
  return self;
}

- (id<JavaUtilList>)getFailures {
  return [JavaUtilCollections unmodifiableListWithJavaUtilList:fErrors_];
}

- (NSString *)getMessage {
  JavaLangStringBuilder *sb = [[[JavaLangStringBuilder alloc] initWithNSString:[NSString stringWithFormat:@"There were %d errors:" , [((id<JavaUtilList>) nil_chk(fErrors_)) size], nil]] autorelease];
  for (JavaLangThrowable * __strong e in fErrors_) {
    [sb appendWithNSString:[NSString stringWithFormat:@"\n  %@(%@)" , [[((JavaLangThrowable *) nil_chk(e)) getClass] getName], [e getMessage], nil]];
  }
  return [sb description];
}

+ (void)assertEmptyWithJavaUtilList:(id<JavaUtilList>)errors {
  if ([((id<JavaUtilList>) nil_chk(errors)) isEmpty]) return;
  if ([errors size] == 1) @throw [errors getWithInt:0];
  @throw [[[OrgJunitInternalRunnersModelMultipleFailureException alloc] initWithJavaUtilList:errors] autorelease];
}

+ (IOSObjectArray *)__exceptions_assertEmptyWithJavaUtilList_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangThrowable getClass] } count:1 type:[IOSClass getClass]];
}

- (void)dealloc {
  OrgJunitRunnersModelMultipleFailureException_set_fErrors_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJunitRunnersModelMultipleFailureException *)other {
  [super copyAllFieldsTo:other];
  OrgJunitRunnersModelMultipleFailureException_set_fErrors_(other, fErrors_);
}

@end
