//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/Constructor.h"
#include "java/util/List.h"
#include "org/junit/After.h"
#include "org/junit/Before.h"
#include "org/junit/Ignore.h"
#include "org/junit/Rule.h"
#include "org/junit/Test.h"
#include "org/junit/internal/runners/rules/RuleFieldValidator.h"
#include "org/junit/internal/runners/statements/ExpectException.h"
#include "org/junit/internal/runners/statements/Fail.h"
#include "org/junit/internal/runners/statements/FailOnTimeout.h"
#include "org/junit/internal/runners/statements/InvokeMethod.h"
#include "org/junit/internal/runners/statements/RunAfters.h"
#include "org/junit/internal/runners/statements/RunBefores.h"
#include "org/junit/rules/MethodRule.h"
#include "org/junit/rules/RunRules.h"
#include "org/junit/rules/TestRule.h"
#include "org/junit/runner/Description.h"
#include "org/junit/runner/notification/RunNotifier.h"
#include "org/junit/runners/BlockJUnit4ClassRunner.h"
#include "org/junit/runners/ParentRunner.h"
#include "org/junit/runners/model/FrameworkMethod.h"
#include "org/junit/runners/model/InitializationError.h"
#include "org/junit/runners/model/Statement.h"
#include "org/junit/runners/model/TestClass.h"

@implementation OrgJunitRunnersBlockJUnit4ClassRunner

- (id)initWithIOSClass:(IOSClass *)klass {
  return [super initWithIOSClass:klass];
}

+ (IOSObjectArray *)__exceptions_OrgJunitRunnersBlockJUnit4ClassRunnerWithIOSClass_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgJunitRunnersModelInitializationError getClass] } count:1 type:[IOSClass getClass]];
}

- (void)runChildWithId:(OrgJunitRunnersModelFrameworkMethod *)method
withOrgJunitRunnerNotificationRunNotifier:(OrgJunitRunnerNotificationRunNotifier *)notifier {
  OrgJunitRunnerDescription *description_ = [self describeChildWithId:method];
  if ([((OrgJunitRunnersModelFrameworkMethod *) nil_chk(method)) getAnnotationWithIOSClass:[IOSClass classWithProtocol:@protocol(OrgJunitIgnore)]] != nil) {
    [((OrgJunitRunnerNotificationRunNotifier *) nil_chk(notifier)) fireTestIgnoredWithOrgJunitRunnerDescription:description_];
  }
  else {
    [self runLeafWithOrgJunitRunnersModelStatement:[self methodBlockWithOrgJunitRunnersModelFrameworkMethod:method] withOrgJunitRunnerDescription:description_ withOrgJunitRunnerNotificationRunNotifier:notifier];
  }
}

- (OrgJunitRunnerDescription *)describeChildWithId:(OrgJunitRunnersModelFrameworkMethod *)method {
  return [OrgJunitRunnerDescription createTestDescriptionWithIOSClass:[((OrgJunitRunnersModelTestClass *) nil_chk([self getTestClass])) getJavaClass] withNSString:[self testNameWithOrgJunitRunnersModelFrameworkMethod:method] withJavaLangAnnotationAnnotationArray:[((OrgJunitRunnersModelFrameworkMethod *) nil_chk(method)) getAnnotations]];
}

- (id<JavaUtilList>)getChildren {
  return [self computeTestMethods];
}

- (id<JavaUtilList>)computeTestMethods {
  return [((OrgJunitRunnersModelTestClass *) nil_chk([self getTestClass])) getAnnotatedMethodsWithIOSClass:[IOSClass classWithProtocol:@protocol(OrgJunitTest)]];
}

- (void)collectInitializationErrorsWithJavaUtilList:(id<JavaUtilList>)errors {
  [super collectInitializationErrorsWithJavaUtilList:errors];
  [self validateNoNonStaticInnerClassWithJavaUtilList:errors];
  [self validateConstructorWithJavaUtilList:errors];
  [self validateInstanceMethodsWithJavaUtilList:errors];
  [self validateFieldsWithJavaUtilList:errors];
}

- (void)validateNoNonStaticInnerClassWithJavaUtilList:(id<JavaUtilList>)errors {
  if ([((OrgJunitRunnersModelTestClass *) nil_chk([self getTestClass])) isANonStaticInnerClass]) {
    NSString *gripe = [NSString stringWithFormat:@"The inner class %@ is not static.", [((OrgJunitRunnersModelTestClass *) nil_chk([self getTestClass])) getName]];
    [((id<JavaUtilList>) nil_chk(errors)) addWithId:[[[JavaLangException alloc] initWithNSString:gripe] autorelease]];
  }
}

- (void)validateConstructorWithJavaUtilList:(id<JavaUtilList>)errors {
  [self validateOnlyOneConstructorWithJavaUtilList:errors];
  [self validateZeroArgConstructorWithJavaUtilList:errors];
}

- (void)validateOnlyOneConstructorWithJavaUtilList:(id<JavaUtilList>)errors {
  if (![self hasOneConstructor]) {
    NSString *gripe = @"Test class should have exactly one public constructor";
    [((id<JavaUtilList>) nil_chk(errors)) addWithId:[[[JavaLangException alloc] initWithNSString:gripe] autorelease]];
  }
}

- (void)validateZeroArgConstructorWithJavaUtilList:(id<JavaUtilList>)errors {
  if (![((OrgJunitRunnersModelTestClass *) nil_chk([self getTestClass])) isANonStaticInnerClass] && [self hasOneConstructor] && ((int) [((IOSObjectArray *) nil_chk([((JavaLangReflectConstructor *) nil_chk([((OrgJunitRunnersModelTestClass *) nil_chk([self getTestClass])) getOnlyConstructor])) getParameterTypes])) count] != 0)) {
    NSString *gripe = @"Test class should have exactly one public zero-argument constructor";
    [((id<JavaUtilList>) nil_chk(errors)) addWithId:[[[JavaLangException alloc] initWithNSString:gripe] autorelease]];
  }
}

- (BOOL)hasOneConstructor {
  return (int) [((IOSObjectArray *) nil_chk([((IOSClass *) nil_chk([((OrgJunitRunnersModelTestClass *) nil_chk([self getTestClass])) getJavaClass])) getConstructors])) count] == 1;
}

- (void)validateInstanceMethodsWithJavaUtilList:(id<JavaUtilList>)errors {
  [self validatePublicVoidNoArgMethodsWithIOSClass:[IOSClass classWithProtocol:@protocol(OrgJunitAfter)] withBoolean:NO withJavaUtilList:errors];
  [self validatePublicVoidNoArgMethodsWithIOSClass:[IOSClass classWithProtocol:@protocol(OrgJunitBefore)] withBoolean:NO withJavaUtilList:errors];
  [self validateTestMethodsWithJavaUtilList:errors];
  if ([((id<JavaUtilList>) nil_chk([self computeTestMethods])) size] == 0) [((id<JavaUtilList>) nil_chk(errors)) addWithId:[[[JavaLangException alloc] initWithNSString:@"No runnable methods"] autorelease]];
}

- (void)validateFieldsWithJavaUtilList:(id<JavaUtilList>)errors {
  [((OrgJunitInternalRunnersRulesRuleFieldValidatorEnum *) nil_chk([OrgJunitInternalRunnersRulesRuleFieldValidatorEnum RULE_VALIDATOR])) validateWithOrgJunitRunnersModelTestClass:[self getTestClass] withJavaUtilList:errors];
}

- (void)validateTestMethodsWithJavaUtilList:(id<JavaUtilList>)errors {
  [self validatePublicVoidNoArgMethodsWithIOSClass:[IOSClass classWithProtocol:@protocol(OrgJunitTest)] withBoolean:NO withJavaUtilList:errors];
}

- (id)createTest {
  return [((JavaLangReflectConstructor *) nil_chk([((OrgJunitRunnersModelTestClass *) nil_chk([self getTestClass])) getOnlyConstructor])) newInstanceWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]];
}

+ (IOSObjectArray *)__exceptions_createTest {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangException getClass] } count:1 type:[IOSClass getClass]];
}

- (NSString *)testNameWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)method {
  return [((OrgJunitRunnersModelFrameworkMethod *) nil_chk(method)) getName];
}

- (OrgJunitRunnersModelStatement *)methodBlockWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)method {
  id test;
  @try {
    test = [((OrgJunitRunnersBlockJUnit4ClassRunner_$1 *) [[[OrgJunitRunnersBlockJUnit4ClassRunner_$1 alloc] initWithOrgJunitRunnersBlockJUnit4ClassRunner:self] autorelease]) run];
  }
  @catch (JavaLangThrowable *e) {
    return [[[OrgJunitInternalRunnersStatementsFail alloc] initWithJavaLangThrowable:e] autorelease];
  }
  OrgJunitRunnersModelStatement *statement = [self methodInvokerWithOrgJunitRunnersModelFrameworkMethod:method withId:test];
  statement = [self possiblyExpectingExceptionsWithOrgJunitRunnersModelFrameworkMethod:method withId:test withOrgJunitRunnersModelStatement:statement];
  statement = [self withPotentialTimeoutWithOrgJunitRunnersModelFrameworkMethod:method withId:test withOrgJunitRunnersModelStatement:statement];
  statement = [self withBeforesWithOrgJunitRunnersModelFrameworkMethod:method withId:test withOrgJunitRunnersModelStatement:statement];
  statement = [self withAftersWithOrgJunitRunnersModelFrameworkMethod:method withId:test withOrgJunitRunnersModelStatement:statement];
  statement = [self withRulesWithOrgJunitRunnersModelFrameworkMethod:method withId:test withOrgJunitRunnersModelStatement:statement];
  return statement;
}

- (OrgJunitRunnersModelStatement *)methodInvokerWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)method
                                                                                 withId:(id)test {
  return [[[OrgJunitInternalRunnersStatementsInvokeMethod alloc] initWithOrgJunitRunnersModelFrameworkMethod:method withId:test] autorelease];
}

- (OrgJunitRunnersModelStatement *)possiblyExpectingExceptionsWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)method
                                                                                               withId:(id)test
                                                                    withOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)next {
  id<OrgJunitTest> annotation = [((OrgJunitRunnersModelFrameworkMethod *) nil_chk(method)) getAnnotationWithIOSClass:[IOSClass classWithProtocol:@protocol(OrgJunitTest)]];
  return [self expectsExceptionWithOrgJunitTest:annotation] ? [[[OrgJunitInternalRunnersStatementsExpectException alloc] initWithOrgJunitRunnersModelStatement:next withIOSClass:[self getExpectedExceptionWithOrgJunitTest:annotation]] autorelease] : next;
}

- (OrgJunitRunnersModelStatement *)withPotentialTimeoutWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)method
                                                                                        withId:(id)test
                                                             withOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)next {
  long long int timeout = [self getTimeoutWithOrgJunitTest:[((OrgJunitRunnersModelFrameworkMethod *) nil_chk(method)) getAnnotationWithIOSClass:[IOSClass classWithProtocol:@protocol(OrgJunitTest)]]];
  return timeout > 0 ? [[[OrgJunitInternalRunnersStatementsFailOnTimeout alloc] initWithOrgJunitRunnersModelStatement:next withLong:timeout] autorelease] : next;
}

- (OrgJunitRunnersModelStatement *)withBeforesWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)method
                                                                               withId:(id)target
                                                    withOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)statement {
  id<JavaUtilList> befores = [((OrgJunitRunnersModelTestClass *) nil_chk([self getTestClass])) getAnnotatedMethodsWithIOSClass:[IOSClass classWithProtocol:@protocol(OrgJunitBefore)]];
  return [((id<JavaUtilList>) nil_chk(befores)) isEmpty] ? statement : [[[OrgJunitInternalRunnersStatementsRunBefores alloc] initWithOrgJunitRunnersModelStatement:statement withJavaUtilList:befores withId:target] autorelease];
}

- (OrgJunitRunnersModelStatement *)withAftersWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)method
                                                                              withId:(id)target
                                                   withOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)statement {
  id<JavaUtilList> afters = [((OrgJunitRunnersModelTestClass *) nil_chk([self getTestClass])) getAnnotatedMethodsWithIOSClass:[IOSClass classWithProtocol:@protocol(OrgJunitAfter)]];
  return [((id<JavaUtilList>) nil_chk(afters)) isEmpty] ? statement : [[[OrgJunitInternalRunnersStatementsRunAfters alloc] initWithOrgJunitRunnersModelStatement:statement withJavaUtilList:afters withId:target] autorelease];
}

- (OrgJunitRunnersModelStatement *)withRulesWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)method
                                                                             withId:(id)target
                                                  withOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)statement {
  OrgJunitRunnersModelStatement *result = statement;
  result = [self withMethodRulesWithOrgJunitRunnersModelFrameworkMethod:method withId:target withOrgJunitRunnersModelStatement:result];
  result = [self withTestRulesWithOrgJunitRunnersModelFrameworkMethod:method withId:target withOrgJunitRunnersModelStatement:result];
  return result;
}

- (OrgJunitRunnersModelStatement *)withMethodRulesWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)method
                                                                                   withId:(id)target
                                                        withOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)result {
  id<JavaUtilList> testRules = [self getTestRulesWithId:target];
  for (id<OrgJunitRulesMethodRule> __strong each in [self getMethodRulesWithId:target]) if (![((id<JavaUtilList>) nil_chk(testRules)) containsWithId:each]) result = [((id<OrgJunitRulesMethodRule>) nil_chk(each)) applyWithOrgJunitRunnersModelStatement:result withOrgJunitRunnersModelFrameworkMethod:method withId:target];
  return result;
}

- (id<JavaUtilList>)getMethodRulesWithId:(id)target {
  return [self rulesWithId:target];
}

- (id<JavaUtilList>)rulesWithId:(id)target {
  return [((OrgJunitRunnersModelTestClass *) nil_chk([self getTestClass])) getAnnotatedFieldValuesWithId:target withIOSClass:[IOSClass classWithProtocol:@protocol(OrgJunitRule)] withIOSClass:[IOSClass classWithProtocol:@protocol(OrgJunitRulesMethodRule)]];
}

- (OrgJunitRunnersModelStatement *)withTestRulesWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)method
                                                                                 withId:(id)target
                                                      withOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)statement {
  id<JavaUtilList> testRules = [self getTestRulesWithId:target];
  return [((id<JavaUtilList>) nil_chk(testRules)) isEmpty] ? statement : [[[OrgJunitRulesRunRules alloc] initWithOrgJunitRunnersModelStatement:statement withJavaLangIterable:testRules withOrgJunitRunnerDescription:[self describeChildWithId:method]] autorelease];
}

- (id<JavaUtilList>)getTestRulesWithId:(id)target {
  return [((OrgJunitRunnersModelTestClass *) nil_chk([self getTestClass])) getAnnotatedFieldValuesWithId:target withIOSClass:[IOSClass classWithProtocol:@protocol(OrgJunitRule)] withIOSClass:[IOSClass classWithProtocol:@protocol(OrgJunitRulesTestRule)]];
}

- (IOSClass *)getExpectedExceptionWithOrgJunitTest:(id<OrgJunitTest>)annotation {
  if (annotation == nil || [annotation expected] == [IOSClass classWithClass:[OrgJunitTest_None class]]) return nil;
  else return [annotation expected];
}

- (BOOL)expectsExceptionWithOrgJunitTest:(id<OrgJunitTest>)annotation {
  return [self getExpectedExceptionWithOrgJunitTest:annotation] != nil;
}

- (long long int)getTimeoutWithOrgJunitTest:(id<OrgJunitTest>)annotation {
  if (annotation == nil) return 0;
  return [((id<OrgJunitTest>) nil_chk(annotation)) timeout];
}

+ (IOSObjectArray *)__annotations_validateInstanceMethodsWithJavaUtilList_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecatedImpl alloc] init] autorelease] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_possiblyExpectingExceptionsWithOrgJunitRunnersModelFrameworkMethod_withId_withOrgJunitRunnersModelStatement_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecatedImpl alloc] init] autorelease] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_withPotentialTimeoutWithOrgJunitRunnersModelFrameworkMethod_withId_withOrgJunitRunnersModelStatement_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecatedImpl alloc] init] autorelease] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_withBeforesWithOrgJunitRunnersModelFrameworkMethod_withId_withOrgJunitRunnersModelStatement_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecatedImpl alloc] init] autorelease] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_withAftersWithOrgJunitRunnersModelFrameworkMethod_withId_withOrgJunitRunnersModelStatement_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecatedImpl alloc] init] autorelease] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_rulesWithId_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecatedImpl alloc] init] autorelease] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

@end
@implementation OrgJunitRunnersBlockJUnit4ClassRunner_$1

- (id)runReflectiveCall {
  return [this$0_ createTest];
}

+ (IOSObjectArray *)__exceptions_runReflectiveCall {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangThrowable getClass] } count:1 type:[IOSClass getClass]];
}

- (id)initWithOrgJunitRunnersBlockJUnit4ClassRunner:(OrgJunitRunnersBlockJUnit4ClassRunner *)outer$ {
  OrgJunitRunnersBlockJUnit4ClassRunner_$1_set_this$0_(self, outer$);
  return [super init];
}

- (void)dealloc {
  OrgJunitRunnersBlockJUnit4ClassRunner_$1_set_this$0_(self, nil);
  [super dealloc];
}

@end
