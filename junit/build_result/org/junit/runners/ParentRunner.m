//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/retechretech/dev/tools/lib/j2objc/junit/build_result/java/org/junit/runners/ParentRunner.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Runnable.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "org/junit/AfterClass.h"
#include "org/junit/BeforeClass.h"
#include "org/junit/ClassRule.h"
#include "org/junit/internal/AssumptionViolatedException.h"
#include "org/junit/internal/runners/model/EachTestNotifier.h"
#include "org/junit/internal/runners/rules/RuleFieldValidator.h"
#include "org/junit/internal/runners/statements/RunAfters.h"
#include "org/junit/internal/runners/statements/RunBefores.h"
#include "org/junit/rules/RunRules.h"
#include "org/junit/rules/TestRule.h"
#include "org/junit/runner/Description.h"
#include "org/junit/runner/manipulation/Filter.h"
#include "org/junit/runner/manipulation/NoTestsRemainException.h"
#include "org/junit/runner/manipulation/Sorter.h"
#include "org/junit/runner/notification/RunNotifier.h"
#include "org/junit/runner/notification/StoppedByUserException.h"
#include "org/junit/runners/ParentRunner.h"
#include "org/junit/runners/model/FrameworkMethod.h"
#include "org/junit/runners/model/InitializationError.h"
#include "org/junit/runners/model/RunnerScheduler.h"
#include "org/junit/runners/model/Statement.h"
#include "org/junit/runners/model/TestClass.h"

@implementation OrgJunitRunnersParentRunner

- (id)initWithIOSClass:(IOSClass *)testClass {
  if (self = [super init]) {
    OrgJunitRunnersParentRunner_set_fSorter_(self, [OrgJunitRunnerManipulationSorter getNULL]);
    OrgJunitRunnersParentRunner_set_fFilteredChildren_(self, nil);
    OrgJunitRunnersParentRunner_set_fScheduler_(self, [[[OrgJunitRunnersParentRunner_$1 alloc] init] autorelease]);
    OrgJunitRunnersParentRunner_set_fTestClass_(self, [[[OrgJunitRunnersModelTestClass alloc] initWithIOSClass:testClass] autorelease]);
    [self validate];
  }
  return self;
}

+ (IOSObjectArray *)__exceptions_OrgJunitRunnersParentRunnerWithIOSClass_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgJunitRunnersModelInitializationError getClass] } count:1 type:[IOSClass getClass]];
}

- (id<JavaUtilList>)getChildren {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgJunitRunnerDescription *)describeChildWithId:(id)child {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)runChildWithId:(id)child
withOrgJunitRunnerNotificationRunNotifier:(OrgJunitRunnerNotificationRunNotifier *)notifier {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)collectInitializationErrorsWithJavaUtilList:(id<JavaUtilList>)errors {
  [self validatePublicVoidNoArgMethodsWithIOSClass:[IOSClass classWithProtocol:@protocol(OrgJunitBeforeClass)] withBoolean:YES withJavaUtilList:errors];
  [self validatePublicVoidNoArgMethodsWithIOSClass:[IOSClass classWithProtocol:@protocol(OrgJunitAfterClass)] withBoolean:YES withJavaUtilList:errors];
  [self validateClassRulesWithJavaUtilList:errors];
}

- (void)validatePublicVoidNoArgMethodsWithIOSClass:(IOSClass *)annotation
                                       withBoolean:(BOOL)isStatic
                                  withJavaUtilList:(id<JavaUtilList>)errors {
  id<JavaUtilList> methods = [((OrgJunitRunnersModelTestClass *) nil_chk([self getTestClass])) getAnnotatedMethodsWithIOSClass:annotation];
  for (OrgJunitRunnersModelFrameworkMethod * __strong eachTestMethod in methods) [((OrgJunitRunnersModelFrameworkMethod *) nil_chk(eachTestMethod)) validatePublicVoidNoArgWithBoolean:isStatic withJavaUtilList:errors];
}

- (void)validateClassRulesWithJavaUtilList:(id<JavaUtilList>)errors {
  [((OrgJunitInternalRunnersRulesRuleFieldValidatorEnum *) nil_chk([OrgJunitInternalRunnersRulesRuleFieldValidatorEnum CLASS_RULE_VALIDATOR])) validateWithOrgJunitRunnersModelTestClass:[self getTestClass] withJavaUtilList:errors];
}

- (OrgJunitRunnersModelStatement *)classBlockWithOrgJunitRunnerNotificationRunNotifier:(OrgJunitRunnerNotificationRunNotifier *)notifier {
  OrgJunitRunnersModelStatement *statement = [self childrenInvokerWithOrgJunitRunnerNotificationRunNotifier:notifier];
  statement = [self withBeforeClassesWithOrgJunitRunnersModelStatement:statement];
  statement = [self withAfterClassesWithOrgJunitRunnersModelStatement:statement];
  statement = [self withClassRulesWithOrgJunitRunnersModelStatement:statement];
  return statement;
}

- (OrgJunitRunnersModelStatement *)withBeforeClassesWithOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)statement {
  id<JavaUtilList> befores = [((OrgJunitRunnersModelTestClass *) nil_chk(fTestClass_)) getAnnotatedMethodsWithIOSClass:[IOSClass classWithProtocol:@protocol(OrgJunitBeforeClass)]];
  return [((id<JavaUtilList>) nil_chk(befores)) isEmpty] ? statement : [[[OrgJunitInternalRunnersStatementsRunBefores alloc] initWithOrgJunitRunnersModelStatement:statement withJavaUtilList:befores withId:nil] autorelease];
}

- (OrgJunitRunnersModelStatement *)withAfterClassesWithOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)statement {
  id<JavaUtilList> afters = [((OrgJunitRunnersModelTestClass *) nil_chk(fTestClass_)) getAnnotatedMethodsWithIOSClass:[IOSClass classWithProtocol:@protocol(OrgJunitAfterClass)]];
  return [((id<JavaUtilList>) nil_chk(afters)) isEmpty] ? statement : [[[OrgJunitInternalRunnersStatementsRunAfters alloc] initWithOrgJunitRunnersModelStatement:statement withJavaUtilList:afters withId:nil] autorelease];
}

- (OrgJunitRunnersModelStatement *)withClassRulesWithOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)statement {
  id<JavaUtilList> classRules = [self classRules];
  return [((id<JavaUtilList>) nil_chk(classRules)) isEmpty] ? statement : [[[OrgJunitRulesRunRules alloc] initWithOrgJunitRunnersModelStatement:statement withJavaLangIterable:classRules withOrgJunitRunnerDescription:[self getDescription]] autorelease];
}

- (id<JavaUtilList>)classRules {
  return [((OrgJunitRunnersModelTestClass *) nil_chk(fTestClass_)) getAnnotatedFieldValuesWithId:nil withIOSClass:[IOSClass classWithProtocol:@protocol(OrgJunitClassRule)] withIOSClass:[IOSClass classWithProtocol:@protocol(OrgJunitRulesTestRule)]];
}

- (OrgJunitRunnersModelStatement *)childrenInvokerWithOrgJunitRunnerNotificationRunNotifier:(OrgJunitRunnerNotificationRunNotifier *)notifier {
  return [[[OrgJunitRunnersParentRunner_$2 alloc] initWithOrgJunitRunnersParentRunner:self withOrgJunitRunnerNotificationRunNotifier:notifier] autorelease];
}

- (void)runChildrenWithOrgJunitRunnerNotificationRunNotifier:(OrgJunitRunnerNotificationRunNotifier *)notifier {
  for (id __strong each in [self getFilteredChildren]) [((id<OrgJunitRunnersModelRunnerScheduler>) nil_chk(fScheduler_)) scheduleWithJavaLangRunnable:[[[OrgJunitRunnersParentRunner_$3 alloc] initWithOrgJunitRunnersParentRunner:self withId:each withOrgJunitRunnerNotificationRunNotifier:notifier] autorelease]];
  [((id<OrgJunitRunnersModelRunnerScheduler>) nil_chk(fScheduler_)) finished];
}

- (NSString *)getName {
  return [((OrgJunitRunnersModelTestClass *) nil_chk(fTestClass_)) getName];
}

- (OrgJunitRunnersModelTestClass *)getTestClass {
  return fTestClass_;
}

- (void)runLeafWithOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)statement
                   withOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_
       withOrgJunitRunnerNotificationRunNotifier:(OrgJunitRunnerNotificationRunNotifier *)notifier {
  OrgJunitInternalRunnersModelEachTestNotifier *eachNotifier = [[[OrgJunitInternalRunnersModelEachTestNotifier alloc] initWithOrgJunitRunnerNotificationRunNotifier:notifier withOrgJunitRunnerDescription:description_] autorelease];
  [eachNotifier fireTestStarted];
  @try {
    [((OrgJunitRunnersModelStatement *) nil_chk(statement)) evaluate];
  }
  @catch (OrgJunitInternalAssumptionViolatedException *e) {
    [eachNotifier addFailedAssumptionWithOrgJunitInternalAssumptionViolatedException:e];
  }
  @catch (JavaLangThrowable *e) {
    [eachNotifier addFailureWithJavaLangThrowable:e];
  }
  @finally {
    [eachNotifier fireTestFinished];
  }
}

- (IOSObjectArray *)getRunnerAnnotations {
  return [((OrgJunitRunnersModelTestClass *) nil_chk(fTestClass_)) getAnnotations];
}

- (OrgJunitRunnerDescription *)getDescription {
  OrgJunitRunnerDescription *description_ = [OrgJunitRunnerDescription createSuiteDescriptionWithNSString:[self getName] withJavaLangAnnotationAnnotationArray:[self getRunnerAnnotations]];
  for (id __strong child in [self getFilteredChildren]) [((OrgJunitRunnerDescription *) nil_chk(description_)) addChildWithOrgJunitRunnerDescription:[self describeChildWithId:child]];
  return description_;
}

- (void)runWithOrgJunitRunnerNotificationRunNotifier:(OrgJunitRunnerNotificationRunNotifier *)notifier {
  OrgJunitInternalRunnersModelEachTestNotifier *testNotifier = [[[OrgJunitInternalRunnersModelEachTestNotifier alloc] initWithOrgJunitRunnerNotificationRunNotifier:notifier withOrgJunitRunnerDescription:[self getDescription]] autorelease];
  @try {
    OrgJunitRunnersModelStatement *statement = [self classBlockWithOrgJunitRunnerNotificationRunNotifier:notifier];
    [((OrgJunitRunnersModelStatement *) nil_chk(statement)) evaluate];
  }
  @catch (OrgJunitInternalAssumptionViolatedException *e) {
    [testNotifier fireTestIgnored];
  }
  @catch (OrgJunitRunnerNotificationStoppedByUserException *e) {
    @throw e;
  }
  @catch (JavaLangThrowable *e) {
    [testNotifier addFailureWithJavaLangThrowable:e];
  }
}

- (void)filterWithOrgJunitRunnerManipulationFilter:(OrgJunitRunnerManipulationFilter *)filter {
  for (id<JavaUtilIterator> iter = [((id<JavaUtilList>) nil_chk([self getFilteredChildren])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    id each = [iter next];
    if ([self shouldRunWithOrgJunitRunnerManipulationFilter:filter withId:each]) @try {
      [((OrgJunitRunnerManipulationFilter *) nil_chk(filter)) applyWithId:each];
    }
    @catch (OrgJunitRunnerManipulationNoTestsRemainException *e) {
      [iter remove];
    }
    else [iter remove];
  }
  if ([((id<JavaUtilList>) nil_chk([self getFilteredChildren])) isEmpty]) {
    @throw [[[OrgJunitRunnerManipulationNoTestsRemainException alloc] init] autorelease];
  }
}

+ (IOSObjectArray *)__exceptions_filterWithOrgJunitRunnerManipulationFilter_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgJunitRunnerManipulationNoTestsRemainException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)sortWithOrgJunitRunnerManipulationSorter:(OrgJunitRunnerManipulationSorter *)sorter {
  OrgJunitRunnersParentRunner_set_fSorter_(self, sorter);
  for (id __strong each in [self getFilteredChildren]) [self sortChildWithId:each];
  [JavaUtilCollections sortWithJavaUtilList:[self getFilteredChildren] withJavaUtilComparator:[self comparator]];
}

- (void)validate {
  id<JavaUtilList> errors = [[[JavaUtilArrayList alloc] init] autorelease];
  [self collectInitializationErrorsWithJavaUtilList:errors];
  if (![errors isEmpty]) @throw [[[OrgJunitRunnersModelInitializationError alloc] initWithJavaUtilList:errors] autorelease];
}

+ (IOSObjectArray *)__exceptions_validate {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgJunitRunnersModelInitializationError getClass] } count:1 type:[IOSClass getClass]];
}

- (id<JavaUtilList>)getFilteredChildren {
  if (fFilteredChildren_ == nil) OrgJunitRunnersParentRunner_set_fFilteredChildren_(self, [[[JavaUtilArrayList alloc] initWithJavaUtilCollection:[self getChildren]] autorelease]);
  return fFilteredChildren_;
}

- (void)sortChildWithId:(id)child {
  [((OrgJunitRunnerManipulationSorter *) nil_chk(fSorter_)) applyWithId:child];
}

- (BOOL)shouldRunWithOrgJunitRunnerManipulationFilter:(OrgJunitRunnerManipulationFilter *)filter
                                               withId:(id)each {
  return [((OrgJunitRunnerManipulationFilter *) nil_chk(filter)) shouldRunWithOrgJunitRunnerDescription:[self describeChildWithId:each]];
}

- (id<JavaUtilComparator>)comparator {
  return [[[OrgJunitRunnersParentRunner_$4 alloc] initWithOrgJunitRunnersParentRunner:self] autorelease];
}

- (void)setSchedulerWithOrgJunitRunnersModelRunnerScheduler:(id<OrgJunitRunnersModelRunnerScheduler>)scheduler {
  OrgJunitRunnersParentRunner_set_fScheduler_(self, scheduler);
}

- (void)dealloc {
  OrgJunitRunnersParentRunner_set_fScheduler_(self, nil);
  OrgJunitRunnersParentRunner_set_fFilteredChildren_(self, nil);
  OrgJunitRunnersParentRunner_set_fSorter_(self, nil);
  OrgJunitRunnersParentRunner_set_fTestClass_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJunitRunnersParentRunner *)other {
  [super copyAllFieldsTo:other];
  OrgJunitRunnersParentRunner_set_fFilteredChildren_(other, fFilteredChildren_);
  OrgJunitRunnersParentRunner_set_fScheduler_(other, fScheduler_);
  OrgJunitRunnersParentRunner_set_fSorter_(other, fSorter_);
  OrgJunitRunnersParentRunner_set_fTestClass_(other, fTestClass_);
}

@end
@implementation OrgJunitRunnersParentRunner_$1

- (void)scheduleWithJavaLangRunnable:(id<JavaLangRunnable>)childStatement {
  [((id<JavaLangRunnable>) nil_chk(childStatement)) run];
}

- (void)finished {
}

- (id)init {
  return [super init];
}

@end
@implementation OrgJunitRunnersParentRunner_$2

- (void)evaluate {
  [this$0_ runChildrenWithOrgJunitRunnerNotificationRunNotifier:val$notifier_];
}

- (id)initWithOrgJunitRunnersParentRunner:(OrgJunitRunnersParentRunner *)outer$
withOrgJunitRunnerNotificationRunNotifier:(OrgJunitRunnerNotificationRunNotifier *)capture$0 {
  OrgJunitRunnersParentRunner_$2_set_this$0_(self, outer$);
  OrgJunitRunnersParentRunner_$2_set_val$notifier_(self, capture$0);
  return [super init];
}

- (void)dealloc {
  OrgJunitRunnersParentRunner_$2_set_val$notifier_(self, nil);
  OrgJunitRunnersParentRunner_$2_set_this$0_(self, nil);
  [super dealloc];
}

@end
@implementation OrgJunitRunnersParentRunner_$3

- (void)run {
  [this$0_ runChildWithId:val$each_ withOrgJunitRunnerNotificationRunNotifier:val$notifier_];
}

- (id)initWithOrgJunitRunnersParentRunner:(OrgJunitRunnersParentRunner *)outer$
                                   withId:(id)capture$0
withOrgJunitRunnerNotificationRunNotifier:(OrgJunitRunnerNotificationRunNotifier *)capture$1 {
  OrgJunitRunnersParentRunner_$3_set_this$0_(self, outer$);
  OrgJunitRunnersParentRunner_$3_set_val$each_(self, capture$0);
  OrgJunitRunnersParentRunner_$3_set_val$notifier_(self, capture$1);
  return [super init];
}

- (void)dealloc {
  OrgJunitRunnersParentRunner_$3_set_val$notifier_(self, nil);
  OrgJunitRunnersParentRunner_$3_set_val$each_(self, nil);
  OrgJunitRunnersParentRunner_$3_set_this$0_(self, nil);
  [super dealloc];
}

@end
@implementation OrgJunitRunnersParentRunner_$4

- (int)compareWithId:(id)o1
              withId:(id)o2 {
  return [((OrgJunitRunnerManipulationSorter *) nil_chk(this$0_->fSorter_)) compareWithId:[this$0_ describeChildWithId:o1] withId:[this$0_ describeChildWithId:o2]];
}

- (id)initWithOrgJunitRunnersParentRunner:(OrgJunitRunnersParentRunner *)outer$ {
  OrgJunitRunnersParentRunner_$4_set_this$0_(self, outer$);
  return [super init];
}

- (void)dealloc {
  OrgJunitRunnersParentRunner_$4_set_this$0_(self, nil);
  [super dealloc];
}

@end
