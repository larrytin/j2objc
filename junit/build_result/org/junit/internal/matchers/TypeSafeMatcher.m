//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Error.h"
#include "java/lang/reflect/Method.h"
#include "org/junit/internal/matchers/TypeSafeMatcher.h"

@implementation OrgJunitInternalMatchersTypeSafeMatcher

- (BOOL)matchesSafelyWithId:(id)item {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)init {
  if (self = [super init]) {
    OrgJunitInternalMatchersTypeSafeMatcher_set_expectedType_(self, [OrgJunitInternalMatchersTypeSafeMatcher findExpectedTypeWithIOSClass:[self getClass]]);
  }
  return self;
}

+ (IOSClass *)findExpectedTypeWithIOSClass:(IOSClass *)fromClass {
  for (IOSClass * c = fromClass; c != [IOSClass classWithClass:[NSObject class]]; c = [c getSuperclass]) {
    {
      IOSObjectArray *a__ = [((IOSClass *) nil_chk(c)) getDeclaredMethods];
      id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      id const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaLangReflectMethod *method = (*b__++);
        if ([OrgJunitInternalMatchersTypeSafeMatcher isMatchesSafelyMethodWithJavaLangReflectMethod:method]) {
          return IOSObjectArray_Get(nil_chk([((JavaLangReflectMethod *) nil_chk(method)) getParameterTypes]), 0);
        }
      }
    }
  }
  @throw [[[JavaLangError alloc] initWithNSString:@"Cannot determine correct type for matchesSafely() method."] autorelease];
}

+ (BOOL)isMatchesSafelyMethodWithJavaLangReflectMethod:(JavaLangReflectMethod *)method {
  return [((NSString *) nil_chk([((JavaLangReflectMethod *) nil_chk(method)) getName])) isEqual:@"matchesSafely"] && (int) [((IOSObjectArray *) nil_chk([method getParameterTypes])) count] == 1 && ![method isSynthetic];
}

- (id)initWithIOSClass:(IOSClass *)expectedType {
  if (self = [super init]) {
    OrgJunitInternalMatchersTypeSafeMatcher_set_expectedType_(self, expectedType);
  }
  return self;
}

- (BOOL)matchesWithId:(id)item {
  return item != nil && [((IOSClass *) nil_chk(expectedType_)) isInstance:item] && [self matchesSafelyWithId:(id) item];
}

- (void)dealloc {
  OrgJunitInternalMatchersTypeSafeMatcher_set_expectedType_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJunitInternalMatchersTypeSafeMatcher *)other {
  [super copyAllFieldsTo:other];
  OrgJunitInternalMatchersTypeSafeMatcher_set_expectedType_(other, expectedType_);
}

@end
