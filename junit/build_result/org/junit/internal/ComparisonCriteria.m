//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/retechretech/dev/tools/lib/j2objc/junit/build_result/java/org/junit/internal/ComparisonCriteria.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSClass.h"
#include "java/lang/AssertionError.h"
#include "java/lang/reflect/Array.h"
#include "org/junit/Assert.h"
#include "org/junit/internal/ArrayComparisonFailure.h"
#include "org/junit/internal/ComparisonCriteria.h"

@implementation OrgJunitInternalComparisonCriteria

- (void)arrayEqualsWithNSString:(NSString *)message
                         withId:(id)expecteds
                         withId:(id)actuals {
  if (expecteds == actuals) return;
  NSString *header = message == nil ? @"" : [NSString stringWithFormat:@"%@: ", message];
  int expectedsLength = [self assertArraysAreSameLengthWithId:expecteds withId:actuals withNSString:header];
  for (int i = 0; i < expectedsLength; i++) {
    id expected = [JavaLangReflectArray getWithId:expecteds withInt:i];
    id actual = [JavaLangReflectArray getWithId:actuals withInt:i];
    if ([self isArrayWithId:expected] && [self isArrayWithId:actual]) {
      @try {
        [self arrayEqualsWithNSString:message withId:expected withId:actual];
      }
      @catch (OrgJunitInternalArrayComparisonFailure *e) {
        [((OrgJunitInternalArrayComparisonFailure *) nil_chk(e)) addDimensionWithInt:i];
        @throw e;
      }
    }
    else @try {
      [self assertElementsEqualWithId:expected withId:actual];
    }
    @catch (JavaLangAssertionError *e) {
      @throw [[[OrgJunitInternalArrayComparisonFailure alloc] initWithNSString:header withJavaLangAssertionError:e withInt:i] autorelease];
    }
  }
}

+ (IOSObjectArray *)__exceptions_arrayEqualsWithNSString_withId_withId_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgJunitInternalArrayComparisonFailure getClass] } count:1 type:[IOSClass getClass]];
}

- (BOOL)isArrayWithId:(id)expected {
  return expected != nil && [[expected getClass] isArray];
}

- (int)assertArraysAreSameLengthWithId:(id)expecteds
                                withId:(id)actuals
                          withNSString:(NSString *)header {
  if (expecteds == nil) [OrgJunitAssert failWithNSString:[NSString stringWithFormat:@"%@expected array was null", header]];
  if (actuals == nil) [OrgJunitAssert failWithNSString:[NSString stringWithFormat:@"%@actual array was null", header]];
  int actualsLength = [JavaLangReflectArray getLengthWithId:actuals];
  int expectedsLength = [JavaLangReflectArray getLengthWithId:expecteds];
  if (actualsLength != expectedsLength) [OrgJunitAssert failWithNSString:[NSString stringWithFormat:@"%@array lengths differed, expected.length=%d actual.length=%d", header, expectedsLength, actualsLength]];
  return expectedsLength;
}

- (void)assertElementsEqualWithId:(id)expected
                           withId:(id)actual {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id)init {
  return [super init];
}

@end
