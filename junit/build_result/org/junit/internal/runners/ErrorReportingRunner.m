//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "org/junit/internal/runners/ErrorReportingRunner.h"
#include "org/junit/internal/runners/InitializationError.h"
#include "org/junit/runner/Description.h"
#include "org/junit/runner/notification/Failure.h"
#include "org/junit/runner/notification/RunNotifier.h"
#include "org/junit/runners/model/InitializationError.h"

@implementation OrgJunitInternalRunnersErrorReportingRunner

- (id)initWithIOSClass:(IOSClass *)testClass
 withJavaLangThrowable:(JavaLangThrowable *)cause {
  if (self = [super init]) {
    OrgJunitInternalRunnersErrorReportingRunner_set_fTestClass_(self, testClass);
    OrgJunitInternalRunnersErrorReportingRunner_set_fCauses_(self, [self getCausesWithJavaLangThrowable:cause]);
  }
  return self;
}

- (OrgJunitRunnerDescription *)getDescription {
  OrgJunitRunnerDescription *description_ = [OrgJunitRunnerDescription createSuiteDescriptionWithIOSClass:fTestClass_];
  for (JavaLangThrowable * __strong each in fCauses_) [((OrgJunitRunnerDescription *) nil_chk(description_)) addChildWithOrgJunitRunnerDescription:[self describeCauseWithJavaLangThrowable:each]];
  return description_;
}

- (void)runWithOrgJunitRunnerNotificationRunNotifier:(OrgJunitRunnerNotificationRunNotifier *)notifier {
  for (JavaLangThrowable * __strong each in fCauses_) [self runCauseWithJavaLangThrowable:each withOrgJunitRunnerNotificationRunNotifier:notifier];
}

- (id<JavaUtilList>)getCausesWithJavaLangThrowable:(JavaLangThrowable *)cause {
  if ([cause isKindOfClass:[JavaLangReflectInvocationTargetException class]]) return [self getCausesWithJavaLangThrowable:[((JavaLangThrowable *) nil_chk(cause)) getCause]];
  if ([cause isKindOfClass:[OrgJunitRunnersModelInitializationError class]]) return [((OrgJunitRunnersModelInitializationError *) nil_chk(cause)) getCauses];
  if ([cause isKindOfClass:[OrgJunitInternalRunnersInitializationError class]]) return [((OrgJunitInternalRunnersInitializationError *) nil_chk(cause)) getCauses];
  return [JavaUtilArrays asListWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ cause } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
}

- (OrgJunitRunnerDescription *)describeCauseWithJavaLangThrowable:(JavaLangThrowable *)child {
  return [OrgJunitRunnerDescription createTestDescriptionWithIOSClass:fTestClass_ withNSString:@"initializationError"];
}

- (void)runCauseWithJavaLangThrowable:(JavaLangThrowable *)child
withOrgJunitRunnerNotificationRunNotifier:(OrgJunitRunnerNotificationRunNotifier *)notifier {
  OrgJunitRunnerDescription *description_ = [self describeCauseWithJavaLangThrowable:child];
  [((OrgJunitRunnerNotificationRunNotifier *) nil_chk(notifier)) fireTestStartedWithOrgJunitRunnerDescription:description_];
  [notifier fireTestFailureWithOrgJunitRunnerNotificationFailure:[[[OrgJunitRunnerNotificationFailure alloc] initWithOrgJunitRunnerDescription:description_ withJavaLangThrowable:child] autorelease]];
  [notifier fireTestFinishedWithOrgJunitRunnerDescription:description_];
}

- (void)dealloc {
  OrgJunitInternalRunnersErrorReportingRunner_set_fTestClass_(self, nil);
  OrgJunitInternalRunnersErrorReportingRunner_set_fCauses_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJunitInternalRunnersErrorReportingRunner *)other {
  [super copyAllFieldsTo:other];
  OrgJunitInternalRunnersErrorReportingRunner_set_fCauses_(other, fCauses_);
  OrgJunitInternalRunnersErrorReportingRunner_set_fTestClass_(other, fTestClass_);
}

@end
