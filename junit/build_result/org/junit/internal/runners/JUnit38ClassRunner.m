//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/retechretech/dev/tools/lib/j2objc/junit/build_result/java/org/junit/internal/runners/JUnit38ClassRunner.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Integer.h"
#include "java/lang/Throwable.h"
#include "java/lang/annotation/Annotation.h"
#include "junit/extensions/TestDecorator.h"
#include "junit/framework/AssertionFailedError.h"
#include "junit/framework/Test.h"
#include "junit/framework/TestCase.h"
#include "junit/framework/TestListener.h"
#include "junit/framework/TestResult.h"
#include "junit/framework/TestSuite.h"
#include "org/junit/internal/runners/JUnit38ClassRunner.h"
#include "org/junit/runner/Describable.h"
#include "org/junit/runner/Description.h"
#include "org/junit/runner/manipulation/Filter.h"
#include "org/junit/runner/manipulation/Filterable.h"
#include "org/junit/runner/manipulation/NoTestsRemainException.h"
#include "org/junit/runner/manipulation/Sortable.h"
#include "org/junit/runner/manipulation/Sorter.h"
#include "org/junit/runner/notification/Failure.h"
#include "org/junit/runner/notification/RunNotifier.h"

@implementation OrgJunitInternalRunnersJUnit38ClassRunner

- (id)initWithIOSClass:(IOSClass *)klass {
  return [self initOrgJunitInternalRunnersJUnit38ClassRunnerWithJunitFrameworkTest:[[[JunitFrameworkTestSuite alloc] initWithIOSClass:[((IOSClass *) nil_chk(klass)) asSubclass:[IOSClass classWithClass:[JunitFrameworkTestCase class]]]] autorelease]];
}

- (id)initOrgJunitInternalRunnersJUnit38ClassRunnerWithJunitFrameworkTest:(id<JunitFrameworkTest>)test {
  if (self = [super init]) {
    [self setTestWithJunitFrameworkTest:test];
  }
  return self;
}

- (id)initWithJunitFrameworkTest:(id<JunitFrameworkTest>)test {
  return [self initOrgJunitInternalRunnersJUnit38ClassRunnerWithJunitFrameworkTest:test];
}

- (void)runWithOrgJunitRunnerNotificationRunNotifier:(OrgJunitRunnerNotificationRunNotifier *)notifier {
  JunitFrameworkTestResult *result = [[[JunitFrameworkTestResult alloc] init] autorelease];
  [result addListenerWithJunitFrameworkTestListener:[self createAdaptingListenerWithOrgJunitRunnerNotificationRunNotifier:notifier]];
  [((id<JunitFrameworkTest>) nil_chk([self getTest])) runWithJunitFrameworkTestResult:result];
}

- (id<JunitFrameworkTestListener>)createAdaptingListenerWithOrgJunitRunnerNotificationRunNotifier:(OrgJunitRunnerNotificationRunNotifier *)notifier {
  return [[[OrgJunitInternalRunnersJUnit38ClassRunner_OldTestClassAdaptingListener alloc] initWithOrgJunitInternalRunnersJUnit38ClassRunner:self withOrgJunitRunnerNotificationRunNotifier:notifier] autorelease];
}

- (OrgJunitRunnerDescription *)getDescription {
  return [OrgJunitInternalRunnersJUnit38ClassRunner makeDescriptionWithJunitFrameworkTest:[self getTest]];
}

+ (OrgJunitRunnerDescription *)makeDescriptionWithJunitFrameworkTest:(id<JunitFrameworkTest>)test {
  if ([(id) test isKindOfClass:[JunitFrameworkTestCase class]]) {
    JunitFrameworkTestCase *tc = (JunitFrameworkTestCase *) check_class_cast(test, [JunitFrameworkTestCase class]);
    return [OrgJunitRunnerDescription createTestDescriptionWithIOSClass:[((JunitFrameworkTestCase *) nil_chk(tc)) getClass] withNSString:[tc getName]];
  }
  else if ([(id) test isKindOfClass:[JunitFrameworkTestSuite class]]) {
    JunitFrameworkTestSuite *ts = (JunitFrameworkTestSuite *) check_class_cast(test, [JunitFrameworkTestSuite class]);
    NSString *name = [((JunitFrameworkTestSuite *) nil_chk(ts)) getName] == nil ? [OrgJunitInternalRunnersJUnit38ClassRunner createSuiteDescriptionWithJunitFrameworkTestSuite:ts] : [ts getName];
    OrgJunitRunnerDescription *description_ = [OrgJunitRunnerDescription createSuiteDescriptionWithNSString:name withJavaLangAnnotationAnnotationArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]]];
    int n = [ts testCount];
    for (int i = 0; i < n; i++) {
      OrgJunitRunnerDescription *made = [OrgJunitInternalRunnersJUnit38ClassRunner makeDescriptionWithJunitFrameworkTest:[ts testAtWithInt:i]];
      [((OrgJunitRunnerDescription *) nil_chk(description_)) addChildWithOrgJunitRunnerDescription:made];
    }
    return description_;
  }
  else if ([(id) test conformsToProtocol: @protocol(OrgJunitRunnerDescribable)]) {
    id<OrgJunitRunnerDescribable> adapter = (id<OrgJunitRunnerDescribable>) check_protocol_cast(test, @protocol(OrgJunitRunnerDescribable));
    return [((id<OrgJunitRunnerDescribable>) nil_chk(adapter)) getDescription];
  }
  else if ([(id) test isKindOfClass:[JunitExtensionsTestDecorator class]]) {
    JunitExtensionsTestDecorator *decorator = (JunitExtensionsTestDecorator *) check_class_cast(test, [JunitExtensionsTestDecorator class]);
    return [OrgJunitInternalRunnersJUnit38ClassRunner makeDescriptionWithJunitFrameworkTest:[((JunitExtensionsTestDecorator *) nil_chk(decorator)) getTest]];
  }
  else {
    return [OrgJunitRunnerDescription createSuiteDescriptionWithIOSClass:[((id<JunitFrameworkTest>) nil_chk(test)) getClass]];
  }
}

+ (NSString *)createSuiteDescriptionWithJunitFrameworkTestSuite:(JunitFrameworkTestSuite *)ts {
  int count = [((JunitFrameworkTestSuite *) nil_chk(ts)) countTestCases];
  NSString *example = count == 0 ? @"" : [NSString stringWithFormat:@" [example: %@]" , [ts testAtWithInt:0], nil];
  return [NSString stringWithFormat:@"TestSuite with %@ tests%@" , [JavaLangInteger valueOfWithInt:count], example, nil];
}

- (void)filterWithOrgJunitRunnerManipulationFilter:(OrgJunitRunnerManipulationFilter *)filter {
  if ([(id) [self getTest] conformsToProtocol: @protocol(OrgJunitRunnerManipulationFilterable)]) {
    id<OrgJunitRunnerManipulationFilterable> adapter = (id<OrgJunitRunnerManipulationFilterable>) check_protocol_cast([self getTest], @protocol(OrgJunitRunnerManipulationFilterable));
    [((id<OrgJunitRunnerManipulationFilterable>) nil_chk(adapter)) filterWithOrgJunitRunnerManipulationFilter:filter];
  }
  else if ([(id) [self getTest] isKindOfClass:[JunitFrameworkTestSuite class]]) {
    JunitFrameworkTestSuite *suite = (JunitFrameworkTestSuite *) check_class_cast([self getTest], [JunitFrameworkTestSuite class]);
    JunitFrameworkTestSuite *filtered = [[[JunitFrameworkTestSuite alloc] initWithNSString:[((JunitFrameworkTestSuite *) nil_chk(suite)) getName]] autorelease];
    int n = [suite testCount];
    for (int i = 0; i < n; i++) {
      id<JunitFrameworkTest> test = [suite testAtWithInt:i];
      if ([((OrgJunitRunnerManipulationFilter *) nil_chk(filter)) shouldRunWithOrgJunitRunnerDescription:[OrgJunitInternalRunnersJUnit38ClassRunner makeDescriptionWithJunitFrameworkTest:test]]) [filtered addTestWithJunitFrameworkTest:test];
    }
    [self setTestWithJunitFrameworkTest:filtered];
  }
}

+ (IOSObjectArray *)__exceptions_filterWithOrgJunitRunnerManipulationFilter_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgJunitRunnerManipulationNoTestsRemainException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)sortWithOrgJunitRunnerManipulationSorter:(OrgJunitRunnerManipulationSorter *)sorter {
  if ([(id) [self getTest] conformsToProtocol: @protocol(OrgJunitRunnerManipulationSortable)]) {
    id<OrgJunitRunnerManipulationSortable> adapter = (id<OrgJunitRunnerManipulationSortable>) check_protocol_cast([self getTest], @protocol(OrgJunitRunnerManipulationSortable));
    [((id<OrgJunitRunnerManipulationSortable>) nil_chk(adapter)) sortWithOrgJunitRunnerManipulationSorter:sorter];
  }
}

- (void)setTestWithJunitFrameworkTest:(id<JunitFrameworkTest>)test {
  OrgJunitInternalRunnersJUnit38ClassRunner_set_fTest_(self, test);
}

- (id<JunitFrameworkTest>)getTest {
  return fTest_;
}

- (void)dealloc {
  OrgJunitInternalRunnersJUnit38ClassRunner_set_fTest_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJunitInternalRunnersJUnit38ClassRunner *)other {
  [super copyAllFieldsTo:other];
  OrgJunitInternalRunnersJUnit38ClassRunner_set_fTest_(other, fTest_);
}

@end
@implementation OrgJunitInternalRunnersJUnit38ClassRunner_OldTestClassAdaptingListener

- (id)initWithOrgJunitInternalRunnersJUnit38ClassRunner:(OrgJunitInternalRunnersJUnit38ClassRunner *)outer$
              withOrgJunitRunnerNotificationRunNotifier:(OrgJunitRunnerNotificationRunNotifier *)notifier {
  if (self = [super init]) {
    OrgJunitInternalRunnersJUnit38ClassRunner_OldTestClassAdaptingListener_set_fNotifier_(self, notifier);
  }
  return self;
}

- (void)endTestWithJunitFrameworkTest:(id<JunitFrameworkTest>)test {
  [((OrgJunitRunnerNotificationRunNotifier *) nil_chk(fNotifier_)) fireTestFinishedWithOrgJunitRunnerDescription:[self asDescriptionWithJunitFrameworkTest:test]];
}

- (void)startTestWithJunitFrameworkTest:(id<JunitFrameworkTest>)test {
  [((OrgJunitRunnerNotificationRunNotifier *) nil_chk(fNotifier_)) fireTestStartedWithOrgJunitRunnerDescription:[self asDescriptionWithJunitFrameworkTest:test]];
}

- (void)addErrorWithJunitFrameworkTest:(id<JunitFrameworkTest>)test
                 withJavaLangThrowable:(JavaLangThrowable *)t {
  OrgJunitRunnerNotificationFailure *failure = [[[OrgJunitRunnerNotificationFailure alloc] initWithOrgJunitRunnerDescription:[self asDescriptionWithJunitFrameworkTest:test] withJavaLangThrowable:t] autorelease];
  [((OrgJunitRunnerNotificationRunNotifier *) nil_chk(fNotifier_)) fireTestFailureWithOrgJunitRunnerNotificationFailure:failure];
}

- (OrgJunitRunnerDescription *)asDescriptionWithJunitFrameworkTest:(id<JunitFrameworkTest>)test {
  if ([(id) test conformsToProtocol: @protocol(OrgJunitRunnerDescribable)]) {
    id<OrgJunitRunnerDescribable> facade = (id<OrgJunitRunnerDescribable>) check_protocol_cast(test, @protocol(OrgJunitRunnerDescribable));
    return [((id<OrgJunitRunnerDescribable>) nil_chk(facade)) getDescription];
  }
  return [OrgJunitRunnerDescription createTestDescriptionWithIOSClass:[self getEffectiveClassWithJunitFrameworkTest:test] withNSString:[self getNameWithJunitFrameworkTest:test]];
}

- (IOSClass *)getEffectiveClassWithJunitFrameworkTest:(id<JunitFrameworkTest>)test {
  return [((id<JunitFrameworkTest>) nil_chk(test)) getClass];
}

- (NSString *)getNameWithJunitFrameworkTest:(id<JunitFrameworkTest>)test {
  if ([(id) test isKindOfClass:[JunitFrameworkTestCase class]]) return [((JunitFrameworkTestCase *) nil_chk(test)) getName];
  else return [((id<JunitFrameworkTest>) nil_chk(test)) description];
}

- (void)addFailureWithJunitFrameworkTest:(id<JunitFrameworkTest>)test
  withJunitFrameworkAssertionFailedError:(JunitFrameworkAssertionFailedError *)t {
  [self addErrorWithJunitFrameworkTest:test withJavaLangThrowable:t];
}

- (void)dealloc {
  OrgJunitInternalRunnersJUnit38ClassRunner_OldTestClassAdaptingListener_set_fNotifier_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJunitInternalRunnersJUnit38ClassRunner_OldTestClassAdaptingListener *)other {
  [super copyAllFieldsTo:other];
  OrgJunitInternalRunnersJUnit38ClassRunner_OldTestClassAdaptingListener_set_fNotifier_(other, fNotifier_);
}

@end
