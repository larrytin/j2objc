//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/retechretech/dev/tools/lib/j2objc/junit/build_result/java/org/junit/internal/runners/statements/FailOnTimeout.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Exception.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Throwable.h"
#include "org/junit/internal/runners/statements/FailOnTimeout.h"
#include "org/junit/runners/model/Statement.h"

@implementation OrgJunitInternalRunnersStatementsFailOnTimeout

- (id)initWithOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)originalStatement
                                   withLong:(long long int)timeout {
  if (self = [super init]) {
    OrgJunitInternalRunnersStatementsFailOnTimeout_set_fOriginalStatement_(self, originalStatement);
    fTimeout_ = timeout;
  }
  return self;
}

- (void)evaluate {
  OrgJunitInternalRunnersStatementsFailOnTimeout_StatementThread *thread = [self evaluateStatement];
  if (!((OrgJunitInternalRunnersStatementsFailOnTimeout_StatementThread *) nil_chk(thread))->fFinished_) [self throwExceptionForUnfinishedThreadWithOrgJunitInternalRunnersStatementsFailOnTimeout_StatementThread:thread];
}

+ (IOSObjectArray *)__exceptions_evaluate {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangThrowable getClass] } count:1 type:[IOSClass getClass]];
}

- (OrgJunitInternalRunnersStatementsFailOnTimeout_StatementThread *)evaluateStatement {
  OrgJunitInternalRunnersStatementsFailOnTimeout_StatementThread *thread = [[[OrgJunitInternalRunnersStatementsFailOnTimeout_StatementThread alloc] initWithOrgJunitRunnersModelStatement:fOriginalStatement_] autorelease];
  [thread start];
  [thread joinWithLong:fTimeout_];
  [thread interrupt];
  return thread;
}

+ (IOSObjectArray *)__exceptions_evaluateStatement {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangInterruptedException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)throwExceptionForUnfinishedThreadWithOrgJunitInternalRunnersStatementsFailOnTimeout_StatementThread:(OrgJunitInternalRunnersStatementsFailOnTimeout_StatementThread *)thread {
  if (((OrgJunitInternalRunnersStatementsFailOnTimeout_StatementThread *) nil_chk(thread))->fExceptionThrownByOriginalStatement_ != nil) @throw thread->fExceptionThrownByOriginalStatement_;
  else [self throwTimeoutExceptionWithOrgJunitInternalRunnersStatementsFailOnTimeout_StatementThread:thread];
}

+ (IOSObjectArray *)__exceptions_throwExceptionForUnfinishedThreadWithOrgJunitInternalRunnersStatementsFailOnTimeout_StatementThread_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangThrowable getClass] } count:1 type:[IOSClass getClass]];
}

- (void)throwTimeoutExceptionWithOrgJunitInternalRunnersStatementsFailOnTimeout_StatementThread:(OrgJunitInternalRunnersStatementsFailOnTimeout_StatementThread *)thread {
  JavaLangException *exception = [[[JavaLangException alloc] initWithNSString:[NSString stringWithFormat:@"test timed out after %lld milliseconds" , fTimeout_, nil]] autorelease];
  [exception setStackTraceWithJavaLangStackTraceElementArray:[((OrgJunitInternalRunnersStatementsFailOnTimeout_StatementThread *) nil_chk(thread)) getStackTrace]];
  @throw exception;
}

+ (IOSObjectArray *)__exceptions_throwTimeoutExceptionWithOrgJunitInternalRunnersStatementsFailOnTimeout_StatementThread_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)dealloc {
  OrgJunitInternalRunnersStatementsFailOnTimeout_set_fOriginalStatement_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJunitInternalRunnersStatementsFailOnTimeout *)other {
  [super copyAllFieldsTo:other];
  OrgJunitInternalRunnersStatementsFailOnTimeout_set_fOriginalStatement_(other, fOriginalStatement_);
  other->fTimeout_ = fTimeout_;
}

@end
@implementation OrgJunitInternalRunnersStatementsFailOnTimeout_StatementThread

- (id)initWithOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)statement {
  if (self = [super init]) {
    fFinished_ = NO;
    OrgJunitInternalRunnersStatementsFailOnTimeout_StatementThread_set_fExceptionThrownByOriginalStatement_(self, nil);
    OrgJunitInternalRunnersStatementsFailOnTimeout_StatementThread_set_fStatement_(self, statement);
  }
  return self;
}

- (void)run {
  @try {
    [((OrgJunitRunnersModelStatement *) nil_chk(fStatement_)) evaluate];
    fFinished_ = YES;
  }
  @catch (JavaLangInterruptedException *e) {
  }
  @catch (JavaLangThrowable *e) {
    OrgJunitInternalRunnersStatementsFailOnTimeout_StatementThread_set_fExceptionThrownByOriginalStatement_(self, e);
  }
}

- (void)dealloc {
  OrgJunitInternalRunnersStatementsFailOnTimeout_StatementThread_set_fExceptionThrownByOriginalStatement_(self, nil);
  OrgJunitInternalRunnersStatementsFailOnTimeout_StatementThread_set_fStatement_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJunitInternalRunnersStatementsFailOnTimeout_StatementThread *)other {
  [super copyAllFieldsTo:other];
  OrgJunitInternalRunnersStatementsFailOnTimeout_StatementThread_set_fExceptionThrownByOriginalStatement_(other, fExceptionThrownByOriginalStatement_);
  other->fFinished_ = fFinished_;
  OrgJunitInternalRunnersStatementsFailOnTimeout_StatementThread_set_fStatement_(other, fStatement_);
}

@end
