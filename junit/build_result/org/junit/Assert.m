//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSByteArray.h"
#include "IOSCharArray.h"
#include "IOSClass.h"
#include "IOSDoubleArray.h"
#include "IOSFloatArray.h"
#include "IOSIntArray.h"
#include "IOSLongArray.h"
#include "IOSObjectArray.h"
#include "IOSShortArray.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Double.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "org/hamcrest/Description.h"
#include "org/hamcrest/Matcher.h"
#include "org/hamcrest/StringDescription.h"
#include "org/junit/Assert.h"
#include "org/junit/ComparisonFailure.h"
#include "org/junit/internal/ArrayComparisonFailure.h"
#include "org/junit/internal/ExactComparisonCriteria.h"
#include "org/junit/internal/InexactComparisonCriteria.h"

@implementation OrgJunitAssert

- (id)init {
  return [super init];
}

+ (void)assertTrueWithNSString:(NSString *)message
                   withBoolean:(BOOL)condition {
  if (!condition) [OrgJunitAssert failWithNSString:message];
}

+ (void)assertTrueWithBoolean:(BOOL)condition {
  [OrgJunitAssert assertTrueWithNSString:nil withBoolean:condition];
}

+ (void)assertFalseWithNSString:(NSString *)message
                    withBoolean:(BOOL)condition {
  [OrgJunitAssert assertTrueWithNSString:message withBoolean:!condition];
}

+ (void)assertFalseWithBoolean:(BOOL)condition {
  [OrgJunitAssert assertFalseWithNSString:nil withBoolean:condition];
}

+ (void)failWithNSString:(NSString *)message {
  if (message == nil) @throw [[[JavaLangAssertionError alloc] init] autorelease];
  @throw [[[JavaLangAssertionError alloc] initWithId:message] autorelease];
}

+ (void)fail {
  [OrgJunitAssert failWithNSString:nil];
}

+ (void)assertEqualsWithNSString:(NSString *)message
                          withId:(id)expected
                          withId:(id)actual {
  if (expected == nil && actual == nil) return;
  if (expected != nil && [OrgJunitAssert isEqualsWithId:expected withId:actual]) return;
  else if ([expected isKindOfClass:[NSString class]] && [actual isKindOfClass:[NSString class]]) {
    NSString *cleanMessage = message == nil ? @"" : message;
    @throw [[[OrgJunitComparisonFailure alloc] initWithNSString:cleanMessage withNSString:(NSString *) check_class_cast(expected, [NSString class]) withNSString:(NSString *) check_class_cast(actual, [NSString class])] autorelease];
  }
  else [OrgJunitAssert failNotEqualsWithNSString:message withId:expected withId:actual];
}

+ (BOOL)isEqualsWithId:(id)expected
                withId:(id)actual {
  return [nil_chk(expected) isEqual:actual];
}

+ (void)assertEqualsWithId:(id)expected
                    withId:(id)actual {
  [OrgJunitAssert assertEqualsWithNSString:nil withId:expected withId:actual];
}

+ (void)assertArrayEqualsWithNSString:(NSString *)message
                    withNSObjectArray:(IOSObjectArray *)expecteds
                    withNSObjectArray:(IOSObjectArray *)actuals {
  [OrgJunitAssert internalArrayEqualsWithNSString:message withId:expecteds withId:actuals];
}

+ (IOSObjectArray *)__exceptions_assertArrayEqualsWithNSString_withNSObjectArray_withNSObjectArray_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgJunitInternalArrayComparisonFailure getClass] } count:1 type:[IOSClass getClass]];
}

+ (void)assertArrayEqualsWithNSObjectArray:(IOSObjectArray *)expecteds
                         withNSObjectArray:(IOSObjectArray *)actuals {
  [OrgJunitAssert assertArrayEqualsWithNSString:nil withNSObjectArray:expecteds withNSObjectArray:actuals];
}

+ (void)assertArrayEqualsWithNSString:(NSString *)message
                        withByteArray:(IOSByteArray *)expecteds
                        withByteArray:(IOSByteArray *)actuals {
  [OrgJunitAssert internalArrayEqualsWithNSString:message withId:expecteds withId:actuals];
}

+ (IOSObjectArray *)__exceptions_assertArrayEqualsWithNSString_withByteArray_withByteArray_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgJunitInternalArrayComparisonFailure getClass] } count:1 type:[IOSClass getClass]];
}

+ (void)assertArrayEqualsWithByteArray:(IOSByteArray *)expecteds
                         withByteArray:(IOSByteArray *)actuals {
  [OrgJunitAssert assertArrayEqualsWithNSString:nil withByteArray:expecteds withByteArray:actuals];
}

+ (void)assertArrayEqualsWithNSString:(NSString *)message
                        withCharArray:(IOSCharArray *)expecteds
                        withCharArray:(IOSCharArray *)actuals {
  [OrgJunitAssert internalArrayEqualsWithNSString:message withId:expecteds withId:actuals];
}

+ (IOSObjectArray *)__exceptions_assertArrayEqualsWithNSString_withCharArray_withCharArray_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgJunitInternalArrayComparisonFailure getClass] } count:1 type:[IOSClass getClass]];
}

+ (void)assertArrayEqualsWithCharArray:(IOSCharArray *)expecteds
                         withCharArray:(IOSCharArray *)actuals {
  [OrgJunitAssert assertArrayEqualsWithNSString:nil withCharArray:expecteds withCharArray:actuals];
}

+ (void)assertArrayEqualsWithNSString:(NSString *)message
                       withShortArray:(IOSShortArray *)expecteds
                       withShortArray:(IOSShortArray *)actuals {
  [OrgJunitAssert internalArrayEqualsWithNSString:message withId:expecteds withId:actuals];
}

+ (IOSObjectArray *)__exceptions_assertArrayEqualsWithNSString_withShortArray_withShortArray_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgJunitInternalArrayComparisonFailure getClass] } count:1 type:[IOSClass getClass]];
}

+ (void)assertArrayEqualsWithShortArray:(IOSShortArray *)expecteds
                         withShortArray:(IOSShortArray *)actuals {
  [OrgJunitAssert assertArrayEqualsWithNSString:nil withShortArray:expecteds withShortArray:actuals];
}

+ (void)assertArrayEqualsWithNSString:(NSString *)message
                         withIntArray:(IOSIntArray *)expecteds
                         withIntArray:(IOSIntArray *)actuals {
  [OrgJunitAssert internalArrayEqualsWithNSString:message withId:expecteds withId:actuals];
}

+ (IOSObjectArray *)__exceptions_assertArrayEqualsWithNSString_withIntArray_withIntArray_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgJunitInternalArrayComparisonFailure getClass] } count:1 type:[IOSClass getClass]];
}

+ (void)assertArrayEqualsWithIntArray:(IOSIntArray *)expecteds
                         withIntArray:(IOSIntArray *)actuals {
  [OrgJunitAssert assertArrayEqualsWithNSString:nil withIntArray:expecteds withIntArray:actuals];
}

+ (void)assertArrayEqualsWithNSString:(NSString *)message
                        withLongArray:(IOSLongArray *)expecteds
                        withLongArray:(IOSLongArray *)actuals {
  [OrgJunitAssert internalArrayEqualsWithNSString:message withId:expecteds withId:actuals];
}

+ (IOSObjectArray *)__exceptions_assertArrayEqualsWithNSString_withLongArray_withLongArray_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgJunitInternalArrayComparisonFailure getClass] } count:1 type:[IOSClass getClass]];
}

+ (void)assertArrayEqualsWithLongArray:(IOSLongArray *)expecteds
                         withLongArray:(IOSLongArray *)actuals {
  [OrgJunitAssert assertArrayEqualsWithNSString:nil withLongArray:expecteds withLongArray:actuals];
}

+ (void)assertArrayEqualsWithNSString:(NSString *)message
                      withDoubleArray:(IOSDoubleArray *)expecteds
                      withDoubleArray:(IOSDoubleArray *)actuals
                           withDouble:(double)delta {
  [((OrgJunitInternalInexactComparisonCriteria *) [[[OrgJunitInternalInexactComparisonCriteria alloc] initWithDouble:delta] autorelease]) arrayEqualsWithNSString:message withId:expecteds withId:actuals];
}

+ (IOSObjectArray *)__exceptions_assertArrayEqualsWithNSString_withDoubleArray_withDoubleArray_withDouble_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgJunitInternalArrayComparisonFailure getClass] } count:1 type:[IOSClass getClass]];
}

+ (void)assertArrayEqualsWithDoubleArray:(IOSDoubleArray *)expecteds
                         withDoubleArray:(IOSDoubleArray *)actuals
                              withDouble:(double)delta {
  [OrgJunitAssert assertArrayEqualsWithNSString:nil withDoubleArray:expecteds withDoubleArray:actuals withDouble:delta];
}

+ (void)assertArrayEqualsWithNSString:(NSString *)message
                       withFloatArray:(IOSFloatArray *)expecteds
                       withFloatArray:(IOSFloatArray *)actuals
                            withFloat:(float)delta {
  [((OrgJunitInternalInexactComparisonCriteria *) [[[OrgJunitInternalInexactComparisonCriteria alloc] initWithDouble:delta] autorelease]) arrayEqualsWithNSString:message withId:expecteds withId:actuals];
}

+ (IOSObjectArray *)__exceptions_assertArrayEqualsWithNSString_withFloatArray_withFloatArray_withFloat_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgJunitInternalArrayComparisonFailure getClass] } count:1 type:[IOSClass getClass]];
}

+ (void)assertArrayEqualsWithFloatArray:(IOSFloatArray *)expecteds
                         withFloatArray:(IOSFloatArray *)actuals
                              withFloat:(float)delta {
  [OrgJunitAssert assertArrayEqualsWithNSString:nil withFloatArray:expecteds withFloatArray:actuals withFloat:delta];
}

+ (void)internalArrayEqualsWithNSString:(NSString *)message
                                 withId:(id)expecteds
                                 withId:(id)actuals {
  [((OrgJunitInternalExactComparisonCriteria *) [[[OrgJunitInternalExactComparisonCriteria alloc] init] autorelease]) arrayEqualsWithNSString:message withId:expecteds withId:actuals];
}

+ (IOSObjectArray *)__exceptions_internalArrayEqualsWithNSString_withId_withId_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [OrgJunitInternalArrayComparisonFailure getClass] } count:1 type:[IOSClass getClass]];
}

+ (void)assertEqualsWithNSString:(NSString *)message
                      withDouble:(double)expected
                      withDouble:(double)actual
                      withDouble:(double)delta {
  if ([JavaLangDouble compareWithDouble:expected withDouble:actual] == 0) return;
  if (!([JavaLangMath absWithDouble:expected - actual] <= delta)) [OrgJunitAssert failNotEqualsWithNSString:message withId:[[[JavaLangDouble alloc] initWithDouble:expected] autorelease] withId:[[[JavaLangDouble alloc] initWithDouble:actual] autorelease]];
}

+ (void)assertEqualsWithLong:(long long int)expected
                    withLong:(long long int)actual {
  [OrgJunitAssert assertEqualsWithNSString:nil withLong:expected withLong:actual];
}

+ (void)assertEqualsWithNSString:(NSString *)message
                        withLong:(long long int)expected
                        withLong:(long long int)actual {
  [OrgJunitAssert assertEqualsWithNSString:message withId:[JavaLangLong valueOfWithLong:expected] withId:[JavaLangLong valueOfWithLong:actual]];
}

+ (void)assertEqualsWithDouble:(double)expected
                    withDouble:(double)actual {
  [OrgJunitAssert assertEqualsWithNSString:nil withDouble:expected withDouble:actual];
}

+ (void)assertEqualsWithNSString:(NSString *)message
                      withDouble:(double)expected
                      withDouble:(double)actual {
  [OrgJunitAssert failWithNSString:@"Use assertEquals(expected, actual, delta) to compare floating-point numbers"];
}

+ (void)assertEqualsWithDouble:(double)expected
                    withDouble:(double)actual
                    withDouble:(double)delta {
  [OrgJunitAssert assertEqualsWithNSString:nil withDouble:expected withDouble:actual withDouble:delta];
}

+ (void)assertNotNullWithNSString:(NSString *)message
                           withId:(id)object {
  [OrgJunitAssert assertTrueWithNSString:message withBoolean:object != nil];
}

+ (void)assertNotNullWithId:(id)object {
  [OrgJunitAssert assertNotNullWithNSString:nil withId:object];
}

+ (void)assertNullWithNSString:(NSString *)message
                        withId:(id)object {
  [OrgJunitAssert assertTrueWithNSString:message withBoolean:object == nil];
}

+ (void)assertNullWithId:(id)object {
  [OrgJunitAssert assertNullWithNSString:nil withId:object];
}

+ (void)assertSameWithNSString:(NSString *)message
                        withId:(id)expected
                        withId:(id)actual {
  if (expected == actual) return;
  [OrgJunitAssert failNotSameWithNSString:message withId:expected withId:actual];
}

+ (void)assertSameWithId:(id)expected
                  withId:(id)actual {
  [OrgJunitAssert assertSameWithNSString:nil withId:expected withId:actual];
}

+ (void)assertNotSameWithNSString:(NSString *)message
                           withId:(id)unexpected
                           withId:(id)actual {
  if (unexpected == actual) [OrgJunitAssert failSameWithNSString:message];
}

+ (void)assertNotSameWithId:(id)unexpected
                     withId:(id)actual {
  [OrgJunitAssert assertNotSameWithNSString:nil withId:unexpected withId:actual];
}

+ (void)failSameWithNSString:(NSString *)message {
  NSString *formatted = @"";
  if (message != nil) formatted = [NSString stringWithFormat:@"%@ ", message];
  [OrgJunitAssert failWithNSString:[NSString stringWithFormat:@"%@expected not same", formatted]];
}

+ (void)failNotSameWithNSString:(NSString *)message
                         withId:(id)expected
                         withId:(id)actual {
  NSString *formatted = @"";
  if (message != nil) formatted = [NSString stringWithFormat:@"%@ ", message];
  [OrgJunitAssert failWithNSString:[NSString stringWithFormat:@"%@expected same:<%@> was not:<%@>", formatted, expected, actual]];
}

+ (void)failNotEqualsWithNSString:(NSString *)message
                           withId:(id)expected
                           withId:(id)actual {
  [OrgJunitAssert failWithNSString:[OrgJunitAssert formatWithNSString:message withId:expected withId:actual]];
}

+ (NSString *)formatWithNSString:(NSString *)message
                          withId:(id)expected
                          withId:(id)actual {
  NSString *formatted = @"";
  if (message != nil && ![message isEqual:@""]) formatted = [NSString stringWithFormat:@"%@ ", message];
  NSString *expectedString = [NSString valueOf:expected];
  NSString *actualString = [NSString valueOf:actual];
  if ([((NSString *) nil_chk(expectedString)) isEqual:actualString]) return [NSString stringWithFormat:@"%@expected: %@ but was: %@", formatted, [OrgJunitAssert formatClassAndValueWithId:expected withNSString:expectedString], [OrgJunitAssert formatClassAndValueWithId:actual withNSString:actualString]];
  else return [NSString stringWithFormat:@"%@expected:<%@> but was:<%@>", formatted, expectedString, actualString];
}

+ (NSString *)formatClassAndValueWithId:(id)value
                           withNSString:(NSString *)valueString {
  NSString *className_ = value == nil ? @"null" : [[value getClass] getName];
  return [NSString stringWithFormat:@"%@<%@>", className_, valueString];
}

+ (void)assertEqualsWithNSString:(NSString *)message
               withNSObjectArray:(IOSObjectArray *)expecteds
               withNSObjectArray:(IOSObjectArray *)actuals {
  [OrgJunitAssert assertArrayEqualsWithNSString:message withNSObjectArray:expecteds withNSObjectArray:actuals];
}

+ (void)assertEqualsWithNSObjectArray:(IOSObjectArray *)expecteds
                    withNSObjectArray:(IOSObjectArray *)actuals {
  [OrgJunitAssert assertArrayEqualsWithNSObjectArray:expecteds withNSObjectArray:actuals];
}

+ (void)assertThatWithId:(id)actual
  withOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher {
  [OrgJunitAssert assertThatWithNSString:@"" withId:actual withOrgHamcrestMatcher:matcher];
}

+ (void)assertThatWithNSString:(NSString *)reason
                        withId:(id)actual
        withOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher {
  if (![((id<OrgHamcrestMatcher>) nil_chk(matcher)) matchesWithId:actual]) {
    id<OrgHamcrestDescription> description_ = [[[OrgHamcrestStringDescription alloc] init] autorelease];
    [description_ appendTextWithNSString:reason];
    [description_ appendTextWithNSString:@"\nExpected: "];
    [description_ appendDescriptionOfWithOrgHamcrestSelfDescribing:matcher];
    [description_ appendTextWithNSString:@"\n     got: "];
    [description_ appendValueWithId:actual];
    [description_ appendTextWithNSString:@"\n"];
    @throw [[[JavaLangAssertionError alloc] initWithId:[description_ description]] autorelease];
  }
}

+ (IOSObjectArray *)__annotations_assertEqualsWithDouble_withDouble_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecatedImpl alloc] init] autorelease] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_assertEqualsWithNSString_withDouble_withDouble_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecatedImpl alloc] init] autorelease] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_assertEqualsWithNSString_withNSObjectArray_withNSObjectArray_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecatedImpl alloc] init] autorelease] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_assertEqualsWithNSObjectArray_withNSObjectArray_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecatedImpl alloc] init] autorelease] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

@end
