//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/retechretech/dev/tools/lib/j2objc/junit/build_result/java/org/junit/runner/Result.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSClass.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/junit/runner/Description.h"
#include "org/junit/runner/Result.h"
#include "org/junit/runner/notification/Failure.h"
#include "org/junit/runner/notification/RunListener.h"

@implementation OrgJunitRunnerResult

- (int)getRunCount {
  return [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(fCount_)) get];
}

- (int)getFailureCount {
  return [((id<JavaUtilList>) nil_chk(fFailures_)) size];
}

- (long long int)getRunTime {
  return fRunTime_;
}

- (id<JavaUtilList>)getFailures {
  return fFailures_;
}

- (int)getIgnoreCount {
  return [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(fIgnoreCount_)) get];
}

- (BOOL)wasSuccessful {
  return [self getFailureCount] == 0;
}

- (OrgJunitRunnerNotificationRunListener *)createListener {
  return [[[OrgJunitRunnerResult_Listener alloc] initWithOrgJunitRunnerResult:self] autorelease];
}

- (id)init {
  if (self = [super init]) {
    OrgJunitRunnerResult_set_fCount_(self, [[[JavaUtilConcurrentAtomicAtomicInteger alloc] init] autorelease]);
    OrgJunitRunnerResult_set_fIgnoreCount_(self, [[[JavaUtilConcurrentAtomicAtomicInteger alloc] init] autorelease]);
    OrgJunitRunnerResult_set_fFailures_(self, [JavaUtilCollections synchronizedListWithJavaUtilList:[[[JavaUtilArrayList alloc] init] autorelease]]);
    fRunTime_ = 0;
  }
  return self;
}

- (void)dealloc {
  OrgJunitRunnerResult_set_fFailures_(self, nil);
  OrgJunitRunnerResult_set_fIgnoreCount_(self, nil);
  OrgJunitRunnerResult_set_fCount_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJunitRunnerResult *)other {
  [super copyAllFieldsTo:other];
  OrgJunitRunnerResult_set_fCount_(other, fCount_);
  OrgJunitRunnerResult_set_fFailures_(other, fFailures_);
  OrgJunitRunnerResult_set_fIgnoreCount_(other, fIgnoreCount_);
  other->fRunTime_ = fRunTime_;
  other->fStartTime_ = fStartTime_;
}

@end
@implementation OrgJunitRunnerResult_Listener

- (void)testRunStartedWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_ {
  this$0_->fStartTime_ = [JavaLangSystem currentTimeMillis];
}

+ (IOSObjectArray *)__exceptions_testRunStartedWithOrgJunitRunnerDescription_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)testRunFinishedWithOrgJunitRunnerResult:(OrgJunitRunnerResult *)result {
  long long int endTime = [JavaLangSystem currentTimeMillis];
  this$0_->fRunTime_ += endTime - this$0_->fStartTime_;
}

+ (IOSObjectArray *)__exceptions_testRunFinishedWithOrgJunitRunnerResult_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)testFinishedWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_ {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->fCount_)) getAndIncrement];
}

+ (IOSObjectArray *)__exceptions_testFinishedWithOrgJunitRunnerDescription_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)testFailureWithOrgJunitRunnerNotificationFailure:(OrgJunitRunnerNotificationFailure *)failure {
  [((id<JavaUtilList>) nil_chk(this$0_->fFailures_)) addWithId:failure];
}

+ (IOSObjectArray *)__exceptions_testFailureWithOrgJunitRunnerNotificationFailure_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)testIgnoredWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_ {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->fIgnoreCount_)) getAndIncrement];
}

+ (IOSObjectArray *)__exceptions_testIgnoredWithOrgJunitRunnerDescription_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)testAssumptionFailureWithOrgJunitRunnerNotificationFailure:(OrgJunitRunnerNotificationFailure *)failure {
}

- (id)initWithOrgJunitRunnerResult:(OrgJunitRunnerResult *)outer$ {
  OrgJunitRunnerResult_Listener_set_this$0_(self, outer$);
  return [super init];
}

- (void)dealloc {
  OrgJunitRunnerResult_Listener_set_this$0_(self, nil);
  [super dealloc];
}

@end
