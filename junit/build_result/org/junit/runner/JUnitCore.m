//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/io/PrintStream.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "junit/framework/Test.h"
#include "junit/runner/Version.h"
#include "org/junit/internal/JUnitSystem.h"
#include "org/junit/internal/RealSystem.h"
#include "org/junit/internal/TextListener.h"
#include "org/junit/internal/runners/JUnit38ClassRunner.h"
#include "org/junit/runner/Computer.h"
#include "org/junit/runner/Description.h"
#include "org/junit/runner/JUnitCore.h"
#include "org/junit/runner/Request.h"
#include "org/junit/runner/Result.h"
#include "org/junit/runner/Runner.h"
#include "org/junit/runner/notification/Failure.h"
#include "org/junit/runner/notification/RunListener.h"
#include "org/junit/runner/notification/RunNotifier.h"

@implementation OrgJunitRunnerJUnitCore

- (id)init {
  if (self = [super init]) {
    OrgJunitRunnerJUnitCore_set_fNotifier_(self, [[[OrgJunitRunnerNotificationRunNotifier alloc] init] autorelease]);
  }
  return self;
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  [OrgJunitRunnerJUnitCore runMainAndExitWithOrgJunitInternalJUnitSystem:[[[OrgJunitInternalRealSystem alloc] init] autorelease] withNSStringArray:args];
}

+ (void)runMainAndExitWithOrgJunitInternalJUnitSystem:(id<OrgJunitInternalJUnitSystem>)system
                                    withNSStringArray:(IOSObjectArray *)args {
  OrgJunitRunnerResult *result = [((OrgJunitRunnerJUnitCore *) [[[OrgJunitRunnerJUnitCore alloc] init] autorelease]) runMainWithOrgJunitInternalJUnitSystem:system withNSStringArray:args];
  [((id<OrgJunitInternalJUnitSystem>) nil_chk(system)) exitWithInt:[((OrgJunitRunnerResult *) nil_chk(result)) wasSuccessful] ? 0 : 1];
}

+ (OrgJunitRunnerResult *)runClassesWithOrgJunitRunnerComputer:(OrgJunitRunnerComputer *)computer
                                             withIOSClassArray:(IOSObjectArray *)classes {
  return [((OrgJunitRunnerJUnitCore *) [[[OrgJunitRunnerJUnitCore alloc] init] autorelease]) runWithOrgJunitRunnerComputer:computer withIOSClassArray:classes];
}

+ (OrgJunitRunnerResult *)runClassesWithIOSClassArray:(IOSObjectArray *)classes {
  return [((OrgJunitRunnerJUnitCore *) [[[OrgJunitRunnerJUnitCore alloc] init] autorelease]) runWithOrgJunitRunnerComputer:[OrgJunitRunnerJUnitCore defaultComputer] withIOSClassArray:classes];
}

- (OrgJunitRunnerResult *)runMainWithOrgJunitInternalJUnitSystem:(id<OrgJunitInternalJUnitSystem>)system
                                               withNSStringArray:(IOSObjectArray *)args {
  [((JavaIoPrintStream *) nil_chk([((id<OrgJunitInternalJUnitSystem>) nil_chk(system)) out])) printlnWithNSString:[NSString stringWithFormat:@"JUnit version %@", [JunitRunnerVersion id__]]];
  id<JavaUtilList> classes = [[[JavaUtilArrayList alloc] init] autorelease];
  id<JavaUtilList> missingClasses = [[[JavaUtilArrayList alloc] init] autorelease];
  {
    IOSObjectArray *a__ = args;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *each = (*b__++);
      @try {
        [classes addWithId:[IOSClass forName:each]];
      }
      @catch (JavaLangClassNotFoundException *e) {
        [((JavaIoPrintStream *) nil_chk([system out])) printlnWithNSString:[NSString stringWithFormat:@"Could not find class: %@", each]];
        OrgJunitRunnerDescription *description_ = [OrgJunitRunnerDescription createSuiteDescriptionWithNSString:each withJavaLangAnnotationAnnotationArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]]];
        OrgJunitRunnerNotificationFailure *failure = [[[OrgJunitRunnerNotificationFailure alloc] initWithOrgJunitRunnerDescription:description_ withJavaLangThrowable:e] autorelease];
        [missingClasses addWithId:failure];
      }
    }
  }
  OrgJunitRunnerNotificationRunListener *listener = [[[OrgJunitInternalTextListener alloc] initWithOrgJunitInternalJUnitSystem:system] autorelease];
  [self addListenerWithOrgJunitRunnerNotificationRunListener:listener];
  OrgJunitRunnerResult *result = [self runWithIOSClassArray:[classes toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[IOSClass class]]]]];
  for (OrgJunitRunnerNotificationFailure * __strong each in missingClasses) [((id<JavaUtilList>) nil_chk([((OrgJunitRunnerResult *) nil_chk(result)) getFailures])) addWithId:each];
  return result;
}

- (NSString *)getVersion {
  return [JunitRunnerVersion id__];
}

- (OrgJunitRunnerResult *)runWithIOSClassArray:(IOSObjectArray *)classes {
  return [self runWithOrgJunitRunnerRequest:[OrgJunitRunnerRequest classesWithOrgJunitRunnerComputer:[OrgJunitRunnerJUnitCore defaultComputer] withIOSClassArray:classes]];
}

- (OrgJunitRunnerResult *)runWithOrgJunitRunnerComputer:(OrgJunitRunnerComputer *)computer
                                      withIOSClassArray:(IOSObjectArray *)classes {
  return [self runWithOrgJunitRunnerRequest:[OrgJunitRunnerRequest classesWithOrgJunitRunnerComputer:computer withIOSClassArray:classes]];
}

- (OrgJunitRunnerResult *)runWithOrgJunitRunnerRequest:(OrgJunitRunnerRequest *)request {
  return [self runWithOrgJunitRunnerRunner:[((OrgJunitRunnerRequest *) nil_chk(request)) getRunner]];
}

- (OrgJunitRunnerResult *)runWithJunitFrameworkTest:(id<JunitFrameworkTest>)test {
  return [self runWithOrgJunitRunnerRunner:[[[OrgJunitInternalRunnersJUnit38ClassRunner alloc] initWithJunitFrameworkTest:test] autorelease]];
}

- (OrgJunitRunnerResult *)runWithOrgJunitRunnerRunner:(OrgJunitRunnerRunner *)runner {
  OrgJunitRunnerResult *result = [[[OrgJunitRunnerResult alloc] init] autorelease];
  OrgJunitRunnerNotificationRunListener *listener = [result createListener];
  [((OrgJunitRunnerNotificationRunNotifier *) nil_chk(fNotifier_)) addFirstListenerWithOrgJunitRunnerNotificationRunListener:listener];
  @try {
    [fNotifier_ fireTestRunStartedWithOrgJunitRunnerDescription:[((OrgJunitRunnerRunner *) nil_chk(runner)) getDescription]];
    [runner runWithOrgJunitRunnerNotificationRunNotifier:fNotifier_];
    [fNotifier_ fireTestRunFinishedWithOrgJunitRunnerResult:result];
  }
  @finally {
    [self removeListenerWithOrgJunitRunnerNotificationRunListener:listener];
  }
  return result;
}

- (void)addListenerWithOrgJunitRunnerNotificationRunListener:(OrgJunitRunnerNotificationRunListener *)listener {
  [((OrgJunitRunnerNotificationRunNotifier *) nil_chk(fNotifier_)) addListenerWithOrgJunitRunnerNotificationRunListener:listener];
}

- (void)removeListenerWithOrgJunitRunnerNotificationRunListener:(OrgJunitRunnerNotificationRunListener *)listener {
  [((OrgJunitRunnerNotificationRunNotifier *) nil_chk(fNotifier_)) removeListenerWithOrgJunitRunnerNotificationRunListener:listener];
}

+ (OrgJunitRunnerComputer *)defaultComputer {
  return [[[OrgJunitRunnerComputer alloc] init] autorelease];
}

- (void)dealloc {
  OrgJunitRunnerJUnitCore_set_fNotifier_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJunitRunnerJUnitCore *)other {
  [super copyAllFieldsTo:other];
  OrgJunitRunnerJUnitCore_set_fNotifier_(other, fNotifier_);
}

@end
