//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/retechretech/dev/tools/lib/j2objc/junit/build_result/java/org/junit/ComparisonFailure.java
//
//  Created by retechretech on 13-9-25.
//

#include "java/lang/Math.h"
#include "org/junit/Assert.h"
#include "org/junit/ComparisonFailure.h"

@implementation OrgJunitComparisonFailure

- (id)initWithNSString:(NSString *)message
          withNSString:(NSString *)expected
          withNSString:(NSString *)actual {
  if (self = [super initWithId:message]) {
    OrgJunitComparisonFailure_set_fExpected_(self, expected);
    OrgJunitComparisonFailure_set_fActual_(self, actual);
  }
  return self;
}

- (NSString *)getMessage {
  return [((OrgJunitComparisonFailure_ComparisonCompactor *) [[[OrgJunitComparisonFailure_ComparisonCompactor alloc] initWithInt:OrgJunitComparisonFailure_MAX_CONTEXT_LENGTH withNSString:fExpected_ withNSString:fActual_] autorelease]) compactWithNSString:[super getMessage]];
}

- (NSString *)getActual {
  return fActual_;
}

- (NSString *)getExpected {
  return fExpected_;
}

- (void)dealloc {
  OrgJunitComparisonFailure_set_fActual_(self, nil);
  OrgJunitComparisonFailure_set_fExpected_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJunitComparisonFailure *)other {
  [super copyAllFieldsTo:other];
  OrgJunitComparisonFailure_set_fActual_(other, fActual_);
  OrgJunitComparisonFailure_set_fExpected_(other, fExpected_);
}

@end
@implementation OrgJunitComparisonFailure_ComparisonCompactor

static NSString * OrgJunitComparisonFailure_ComparisonCompactor_ELLIPSIS_ = @"...";
static NSString * OrgJunitComparisonFailure_ComparisonCompactor_DELTA_END_ = @"]";
static NSString * OrgJunitComparisonFailure_ComparisonCompactor_DELTA_START_ = @"[";

+ (NSString *)ELLIPSIS {
  return OrgJunitComparisonFailure_ComparisonCompactor_ELLIPSIS_;
}

+ (NSString *)DELTA_END {
  return OrgJunitComparisonFailure_ComparisonCompactor_DELTA_END_;
}

+ (NSString *)DELTA_START {
  return OrgJunitComparisonFailure_ComparisonCompactor_DELTA_START_;
}

- (id)initWithInt:(int)contextLength
     withNSString:(NSString *)expected
     withNSString:(NSString *)actual {
  if (self = [super init]) {
    fContextLength_ = contextLength;
    OrgJunitComparisonFailure_ComparisonCompactor_set_fExpected_(self, expected);
    OrgJunitComparisonFailure_ComparisonCompactor_set_fActual_(self, actual);
  }
  return self;
}

- (NSString *)compactWithNSString:(NSString *)message {
  if (fExpected_ == nil || fActual_ == nil || [self areStringsEqual]) return [OrgJunitAssert formatWithNSString:message withId:fExpected_ withId:fActual_];
  [self findCommonPrefix];
  [self findCommonSuffix];
  NSString *expected = [self compactStringWithNSString:fExpected_];
  NSString *actual = [self compactStringWithNSString:fActual_];
  return [OrgJunitAssert formatWithNSString:message withId:expected withId:actual];
}

- (NSString *)compactStringWithNSString:(NSString *)source {
  NSString *result = [NSString stringWithFormat:@"[%@]", [source substring:fPrefix_ endIndex:[((NSString *) nil_chk(source)) length] - fSuffix_ + 1]];
  if (fPrefix_ > 0) result = [NSString stringWithFormat:@"%@%@", [self computeCommonPrefix], result];
  if (fSuffix_ > 0) result = [NSString stringWithFormat:@"%@%@", result, [self computeCommonSuffix]];
  return result;
}

- (void)findCommonPrefix {
  fPrefix_ = 0;
  int end = [JavaLangMath minWithInt:[((NSString *) nil_chk(fExpected_)) length] withInt:[((NSString *) nil_chk(fActual_)) length]];
  for (; fPrefix_ < end; fPrefix_++) {
    if ([fExpected_ charAtWithInt:fPrefix_] != [fActual_ charAtWithInt:fPrefix_]) break;
  }
}

- (void)findCommonSuffix {
  int expectedSuffix = [((NSString *) nil_chk(fExpected_)) length] - 1;
  int actualSuffix = [((NSString *) nil_chk(fActual_)) length] - 1;
  for (; actualSuffix >= fPrefix_ && expectedSuffix >= fPrefix_; actualSuffix--, expectedSuffix--) {
    if ([fExpected_ charAtWithInt:expectedSuffix] != [fActual_ charAtWithInt:actualSuffix]) break;
  }
  fSuffix_ = [fExpected_ length] - expectedSuffix;
}

- (NSString *)computeCommonPrefix {
  return [NSString stringWithFormat:@"%@%@", (fPrefix_ > fContextLength_ ? OrgJunitComparisonFailure_ComparisonCompactor_ELLIPSIS_ : @""), [((NSString *) nil_chk(fExpected_)) substring:[JavaLangMath maxWithInt:0 withInt:fPrefix_ - fContextLength_] endIndex:fPrefix_]];
}

- (NSString *)computeCommonSuffix {
  int end = [JavaLangMath minWithInt:[((NSString *) nil_chk(fExpected_)) length] - fSuffix_ + 1 + fContextLength_ withInt:[fExpected_ length]];
  return [NSString stringWithFormat:@"%@%@", [fExpected_ substring:[fExpected_ length] - fSuffix_ + 1 endIndex:end], ([fExpected_ length] - fSuffix_ + 1 < [fExpected_ length] - fContextLength_ ? OrgJunitComparisonFailure_ComparisonCompactor_ELLIPSIS_ : @"")];
}

- (BOOL)areStringsEqual {
  return [((NSString *) nil_chk(fExpected_)) isEqual:fActual_];
}

- (void)dealloc {
  OrgJunitComparisonFailure_ComparisonCompactor_set_fActual_(self, nil);
  OrgJunitComparisonFailure_ComparisonCompactor_set_fExpected_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJunitComparisonFailure_ComparisonCompactor *)other {
  [super copyAllFieldsTo:other];
  OrgJunitComparisonFailure_ComparisonCompactor_set_fActual_(other, fActual_);
  other->fContextLength_ = fContextLength_;
  OrgJunitComparisonFailure_ComparisonCompactor_set_fExpected_(other, fExpected_);
  other->fPrefix_ = fPrefix_;
  other->fSuffix_ = fSuffix_;
}

@end
