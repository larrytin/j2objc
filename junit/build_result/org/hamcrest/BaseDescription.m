//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/retechretech/dev/tools/lib/j2objc/junit/build_result/java/org/hamcrest/BaseDescription.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Character.h"
#include "java/lang/Float.h"
#include "java/lang/Iterable.h"
#include "java/lang/Long.h"
#include "java/lang/Short.h"
#include "java/util/Arrays.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "org/hamcrest/BaseDescription.h"
#include "org/hamcrest/Description.h"
#include "org/hamcrest/SelfDescribing.h"
#include "org/hamcrest/internal/ArrayIterator.h"
#include "org/hamcrest/internal/SelfDescribingValueIterator.h"

@implementation OrgHamcrestBaseDescription

- (id<OrgHamcrestDescription>)appendTextWithNSString:(NSString *)text {
  [self appendWithNSString:text];
  return self;
}

- (id<OrgHamcrestDescription>)appendDescriptionOfWithOrgHamcrestSelfDescribing:(id<OrgHamcrestSelfDescribing>)value {
  [((id<OrgHamcrestSelfDescribing>) nil_chk(value)) describeToWithOrgHamcrestDescription:self];
  return self;
}

- (id<OrgHamcrestDescription>)appendValueWithId:(id)value {
  if (value == nil) {
    [self appendWithNSString:@"null"];
  }
  else if ([value isKindOfClass:[NSString class]]) {
    [self toJavaSyntaxWithNSString:(NSString *) check_class_cast(value, [NSString class])];
  }
  else if ([value isKindOfClass:[JavaLangCharacter class]]) {
    [self appendWithChar:'"'];
    [self toJavaSyntaxWithChar:[(JavaLangCharacter *) check_class_cast(value, [JavaLangCharacter class]) charValue]];
    [self appendWithChar:'"'];
  }
  else if ([value isKindOfClass:[JavaLangShort class]]) {
    [self appendWithChar:'<'];
    [self appendWithNSString:[NSString valueOf:value]];
    [self appendWithNSString:@"s>"];
  }
  else if ([value isKindOfClass:[JavaLangLong class]]) {
    [self appendWithChar:'<'];
    [self appendWithNSString:[NSString valueOf:value]];
    [self appendWithNSString:@"L>"];
  }
  else if ([value isKindOfClass:[JavaLangFloat class]]) {
    [self appendWithChar:'<'];
    [self appendWithNSString:[NSString valueOf:value]];
    [self appendWithNSString:@"F>"];
  }
  else if ([[value getClass] isArray]) {
    [self appendValueListWithNSString:@"[" withNSString:@", " withNSString:@"]" withJavaUtilIterator:[[[OrgHamcrestInternalArrayIterator alloc] initWithId:value] autorelease]];
  }
  else {
    [self appendWithChar:'<'];
    [self appendWithNSString:[NSString valueOf:value]];
    [self appendWithChar:'>'];
  }
  return self;
}

- (id<OrgHamcrestDescription>)appendValueListWithNSString:(NSString *)start
                                             withNSString:(NSString *)separator
                                             withNSString:(NSString *)end
                                        withNSObjectArray:(IOSObjectArray *)values {
  return [self appendValueListWithNSString:start withNSString:separator withNSString:end withJavaLangIterable:[JavaUtilArrays asListWithNSObjectArray:values]];
}

- (id<OrgHamcrestDescription>)appendValueListWithNSString:(NSString *)start
                                             withNSString:(NSString *)separator
                                             withNSString:(NSString *)end
                                     withJavaLangIterable:(id<JavaLangIterable>)values {
  return [self appendValueListWithNSString:start withNSString:separator withNSString:end withJavaUtilIterator:[((id<JavaLangIterable>) nil_chk(values)) iterator]];
}

- (id<OrgHamcrestDescription>)appendValueListWithNSString:(NSString *)start
                                             withNSString:(NSString *)separator
                                             withNSString:(NSString *)end
                                     withJavaUtilIterator:(id<JavaUtilIterator>)values {
  return [self appendListWithNSString:start withNSString:separator withNSString:end withJavaUtilIterator:[[[OrgHamcrestInternalSelfDescribingValueIterator alloc] initWithJavaUtilIterator:values] autorelease]];
}

- (id<OrgHamcrestDescription>)appendListWithNSString:(NSString *)start
                                        withNSString:(NSString *)separator
                                        withNSString:(NSString *)end
                                withJavaLangIterable:(id<JavaLangIterable>)values {
  return [self appendListWithNSString:start withNSString:separator withNSString:end withJavaUtilIterator:[((id<JavaLangIterable>) nil_chk(values)) iterator]];
}

- (id<OrgHamcrestDescription>)appendListWithNSString:(NSString *)start
                                        withNSString:(NSString *)separator
                                        withNSString:(NSString *)end
                                withJavaUtilIterator:(id<JavaUtilIterator>)i {
  BOOL separate = NO;
  [self appendWithNSString:start];
  while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
    if (separate) [self appendWithNSString:separator];
    [self appendDescriptionOfWithOrgHamcrestSelfDescribing:[i next]];
    separate = YES;
  }
  [self appendWithNSString:end];
  return self;
}

- (void)appendWithNSString:(NSString *)str {
  for (int i = 0; i < [((NSString *) nil_chk(str)) length]; i++) {
    [self appendWithChar:[str charAtWithInt:i]];
  }
}

- (void)appendWithChar:(unichar)c {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)toJavaSyntaxWithNSString:(NSString *)unformatted {
  [self appendWithChar:'"'];
  for (int i = 0; i < [((NSString *) nil_chk(unformatted)) length]; i++) {
    [self toJavaSyntaxWithChar:[unformatted charAtWithInt:i]];
  }
  [self appendWithChar:'"'];
}

- (void)toJavaSyntaxWithChar:(unichar)ch {
  switch (ch) {
    case '"':
    [self appendWithNSString:@"\\\""];
    break;
    case 0x000a:
    [self appendWithNSString:@"\\n"];
    break;
    case 0x000d:
    [self appendWithNSString:@"\\r"];
    break;
    case 0x0009:
    [self appendWithNSString:@"\\t"];
    break;
    default:
    [self appendWithChar:ch];
  }
}

- (id)init {
  return [super init];
}

@end
