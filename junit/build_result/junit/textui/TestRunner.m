//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/retechretech/dev/tools/lib/j2objc/junit/build_result/java/junit/textui/TestRunner.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/io/InputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "junit/framework/Test.h"
#include "junit/framework/TestCase.h"
#include "junit/framework/TestResult.h"
#include "junit/framework/TestSuite.h"
#include "junit/runner/BaseTestRunner.h"
#include "junit/runner/Version.h"
#include "junit/textui/ResultPrinter.h"
#include "junit/textui/TestRunner.h"

@implementation JunitTextuiTestRunner

+ (int)SUCCESS_EXIT {
  return JunitTextuiTestRunner_SUCCESS_EXIT;
}

+ (int)FAILURE_EXIT {
  return JunitTextuiTestRunner_FAILURE_EXIT;
}

+ (int)EXCEPTION_EXIT {
  return JunitTextuiTestRunner_EXCEPTION_EXIT;
}

- (id)init {
  return [self initJunitTextuiTestRunnerWithJavaIoPrintStream:[JavaLangSystem out]];
}

- (id)initJunitTextuiTestRunnerWithJavaIoPrintStream:(JavaIoPrintStream *)writer {
  return [self initJunitTextuiTestRunnerWithJunitTextuiResultPrinter:[[[JunitTextuiResultPrinter alloc] initWithJavaIoPrintStream:writer] autorelease]];
}

- (id)initWithJavaIoPrintStream:(JavaIoPrintStream *)writer {
  return [self initJunitTextuiTestRunnerWithJavaIoPrintStream:writer];
}

- (id)initJunitTextuiTestRunnerWithJunitTextuiResultPrinter:(JunitTextuiResultPrinter *)printer {
  if (self = [super init]) {
    JunitTextuiTestRunner_set_fPrinter_(self, printer);
  }
  return self;
}

- (id)initWithJunitTextuiResultPrinter:(JunitTextuiResultPrinter *)printer {
  return [self initJunitTextuiTestRunnerWithJunitTextuiResultPrinter:printer];
}

+ (void)runWithIOSClass:(IOSClass *)testClass {
  [JunitTextuiTestRunner runWithJunitFrameworkTest:[[[JunitFrameworkTestSuite alloc] initWithIOSClass:testClass] autorelease]];
}

+ (JunitFrameworkTestResult *)runWithJunitFrameworkTest:(id<JunitFrameworkTest>)test {
  JunitTextuiTestRunner *runner = [[[JunitTextuiTestRunner alloc] init] autorelease];
  return [runner doRunWithJunitFrameworkTest:test];
}

+ (void)runAndWaitWithJunitFrameworkTest:(id<JunitFrameworkTest>)suite {
  JunitTextuiTestRunner *aTestRunner = [[[JunitTextuiTestRunner alloc] init] autorelease];
  [aTestRunner doRunWithJunitFrameworkTest:suite withBoolean:YES];
}

- (void)testFailedWithInt:(int)status
   withJunitFrameworkTest:(id<JunitFrameworkTest>)test
    withJavaLangThrowable:(JavaLangThrowable *)t {
}

- (void)testStartedWithNSString:(NSString *)testName {
}

- (void)testEndedWithNSString:(NSString *)testName {
}

- (JunitFrameworkTestResult *)createTestResult {
  return [[[JunitFrameworkTestResult alloc] init] autorelease];
}

- (JunitFrameworkTestResult *)doRunWithJunitFrameworkTest:(id<JunitFrameworkTest>)test {
  return [self doRunWithJunitFrameworkTest:test withBoolean:NO];
}

- (JunitFrameworkTestResult *)doRunWithJunitFrameworkTest:(id<JunitFrameworkTest>)suite
                                              withBoolean:(BOOL)wait {
  JunitFrameworkTestResult *result = [self createTestResult];
  [((JunitFrameworkTestResult *) nil_chk(result)) addListenerWithJunitFrameworkTestListener:fPrinter_];
  long long int startTime = [JavaLangSystem currentTimeMillis];
  [((id<JunitFrameworkTest>) nil_chk(suite)) runWithJunitFrameworkTestResult:result];
  long long int endTime = [JavaLangSystem currentTimeMillis];
  long long int runTime = endTime - startTime;
  [((JunitTextuiResultPrinter *) nil_chk(fPrinter_)) printWithJunitFrameworkTestResult:result withLong:runTime];
  [self pauseWithBoolean:wait];
  return result;
}

- (void)pauseWithBoolean:(BOOL)wait {
  if (!wait) return;
  [((JunitTextuiResultPrinter *) nil_chk(fPrinter_)) printWaitPrompt];
  @try {
    [((JavaIoInputStream *) nil_chk([JavaLangSystem in])) read];
  }
  @catch (JavaLangException *e) {
  }
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  JunitTextuiTestRunner *aTestRunner = [[[JunitTextuiTestRunner alloc] init] autorelease];
  @try {
    JunitFrameworkTestResult *r = [aTestRunner startWithNSStringArray:args];
    if (![((JunitFrameworkTestResult *) nil_chk(r)) wasSuccessful]) [JavaLangSystem exitWithInt:JunitTextuiTestRunner_FAILURE_EXIT];
    [JavaLangSystem exitWithInt:JunitTextuiTestRunner_SUCCESS_EXIT];
  }
  @catch (JavaLangException *e) {
    [((JavaIoPrintStream *) nil_chk([JavaLangSystem err])) printlnWithNSString:[((JavaLangException *) nil_chk(e)) getMessage]];
    [JavaLangSystem exitWithInt:JunitTextuiTestRunner_EXCEPTION_EXIT];
  }
}

- (JunitFrameworkTestResult *)startWithNSStringArray:(IOSObjectArray *)args {
  NSString *testCase = @"";
  NSString *method = @"";
  BOOL wait = NO;
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(args)) count]; i++) {
    if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) isEqual:@"-wait"]) wait = YES;
    else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) isEqual:@"-c"]) testCase = [self extractClassNameWithNSString:IOSObjectArray_Get(args, ++i)];
    else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) isEqual:@"-m"]) {
      NSString *arg = IOSObjectArray_Get(args, ++i);
      int lastIndex = [((NSString *) nil_chk(arg)) lastIndexOf:'.'];
      testCase = [arg substring:0 endIndex:lastIndex];
      method = [arg substring:lastIndex + 1];
    }
    else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) isEqual:@"-v"]) [((JavaIoPrintStream *) nil_chk([JavaLangSystem err])) printlnWithNSString:[NSString stringWithFormat:@"JUnit %@ by Kent Beck and Erich Gamma", [JunitRunnerVersion id__]]];
    else testCase = IOSObjectArray_Get(args, i);
  }
  if ([((NSString *) nil_chk(testCase)) isEqual:@""]) @throw [[[JavaLangException alloc] initWithNSString:@"Usage: TestRunner [-wait] testCaseName, where name is the name of the TestCase class"] autorelease];
  @try {
    if (![((NSString *) nil_chk(method)) isEqual:@""]) return [self runSingleMethodWithNSString:testCase withNSString:method withBoolean:wait];
    id<JunitFrameworkTest> suite = [self getTestWithNSString:testCase];
    return [self doRunWithJunitFrameworkTest:suite withBoolean:wait];
  }
  @catch (JavaLangException *e) {
    @throw [[[JavaLangException alloc] initWithNSString:[NSString stringWithFormat:@"Could not create and run test suite: %@", e]] autorelease];
  }
}

+ (IOSObjectArray *)__exceptions_startWithNSStringArray_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangException getClass] } count:1 type:[IOSClass getClass]];
}

- (JunitFrameworkTestResult *)runSingleMethodWithNSString:(NSString *)testCase
                                             withNSString:(NSString *)method
                                              withBoolean:(BOOL)wait {
  IOSClass *testClass = [((IOSClass *) nil_chk([self loadSuiteClassWithNSString:testCase])) asSubclass:[IOSClass classWithClass:[JunitFrameworkTestCase class]]];
  id<JunitFrameworkTest> test = [JunitFrameworkTestSuite createTestWithIOSClass:testClass withNSString:method];
  return [self doRunWithJunitFrameworkTest:test withBoolean:wait];
}

+ (IOSObjectArray *)__exceptions_runSingleMethodWithNSString_withNSString_withBoolean_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)runFailedWithNSString:(NSString *)message {
  [((JavaIoPrintStream *) nil_chk([JavaLangSystem err])) printlnWithNSString:message];
  [JavaLangSystem exitWithInt:JunitTextuiTestRunner_FAILURE_EXIT];
}

- (void)setPrinterWithJunitTextuiResultPrinter:(JunitTextuiResultPrinter *)printer {
  JunitTextuiTestRunner_set_fPrinter_(self, printer);
}

- (void)dealloc {
  JunitTextuiTestRunner_set_fPrinter_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JunitTextuiTestRunner *)other {
  [super copyAllFieldsTo:other];
  JunitTextuiTestRunner_set_fPrinter_(other, fPrinter_);
}

@end
