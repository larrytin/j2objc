//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/retechretech/dev/tools/lib/j2objc/junit/build_result/java/junit/textui/ResultPrinter.java
//
//  Created by retechretech on 13-9-25.
//

#include "java/io/PrintStream.h"
#include "java/lang/Throwable.h"
#include "java/text/NumberFormat.h"
#include "java/util/Enumeration.h"
#include "junit/framework/AssertionFailedError.h"
#include "junit/framework/Test.h"
#include "junit/framework/TestFailure.h"
#include "junit/framework/TestResult.h"
#include "junit/runner/BaseTestRunner.h"
#include "junit/textui/ResultPrinter.h"

@implementation JunitTextuiResultPrinter

- (id)initWithJavaIoPrintStream:(JavaIoPrintStream *)writer {
  if (self = [super init]) {
    fColumn_ = 0;
    JunitTextuiResultPrinter_set_fWriter_(self, writer);
  }
  return self;
}

- (void)printWithJunitFrameworkTestResult:(JunitFrameworkTestResult *)result
                                 withLong:(long long int)runTime {
  @synchronized(self) {
    {
      [self printHeaderWithLong:runTime];
      [self printErrorsWithJunitFrameworkTestResult:result];
      [self printFailuresWithJunitFrameworkTestResult:result];
      [self printFooterWithJunitFrameworkTestResult:result];
    }
  }
}

- (void)printWaitPrompt {
  [((JavaIoPrintStream *) nil_chk([self getWriter])) println];
  [((JavaIoPrintStream *) nil_chk([self getWriter])) printlnWithNSString:@"<RETURN> to continue"];
}

- (void)printHeaderWithLong:(long long int)runTime {
  [((JavaIoPrintStream *) nil_chk([self getWriter])) println];
  [((JavaIoPrintStream *) nil_chk([self getWriter])) printlnWithNSString:[NSString stringWithFormat:@"Time: %@", [self elapsedTimeAsStringWithLong:runTime]]];
}

- (void)printErrorsWithJunitFrameworkTestResult:(JunitFrameworkTestResult *)result {
  [self printDefectsWithJavaUtilEnumeration:[((JunitFrameworkTestResult *) nil_chk(result)) errors] withInt:[result errorCount] withNSString:@"error"];
}

- (void)printFailuresWithJunitFrameworkTestResult:(JunitFrameworkTestResult *)result {
  [self printDefectsWithJavaUtilEnumeration:[((JunitFrameworkTestResult *) nil_chk(result)) failures] withInt:[result failureCount] withNSString:@"failure"];
}

- (void)printDefectsWithJavaUtilEnumeration:(id<JavaUtilEnumeration>)booBoos
                                    withInt:(int)count
                               withNSString:(NSString *)type {
  if (count == 0) return;
  if (count == 1) [((JavaIoPrintStream *) nil_chk([self getWriter])) printlnWithNSString:[NSString stringWithFormat:@"There was %d %@:", count, type]];
  else [((JavaIoPrintStream *) nil_chk([self getWriter])) printlnWithNSString:[NSString stringWithFormat:@"There were %d %@s:", count, type]];
  for (int i = 1; [((id<JavaUtilEnumeration>) nil_chk(booBoos)) hasMoreElements]; i++) {
    [self printDefectWithJunitFrameworkTestFailure:[booBoos nextElement] withInt:i];
  }
}

- (void)printDefectWithJunitFrameworkTestFailure:(JunitFrameworkTestFailure *)booBoo
                                         withInt:(int)count {
  [self printDefectHeaderWithJunitFrameworkTestFailure:booBoo withInt:count];
  [self printDefectTraceWithJunitFrameworkTestFailure:booBoo];
}

- (void)printDefectHeaderWithJunitFrameworkTestFailure:(JunitFrameworkTestFailure *)booBoo
                                               withInt:(int)count {
  [((JavaIoPrintStream *) nil_chk([self getWriter])) printWithNSString:[NSString stringWithFormat:@"%d) %@", count, [((JunitFrameworkTestFailure *) nil_chk(booBoo)) failedTest]]];
}

- (void)printDefectTraceWithJunitFrameworkTestFailure:(JunitFrameworkTestFailure *)booBoo {
  [((JavaIoPrintStream *) nil_chk([self getWriter])) printWithNSString:[JunitRunnerBaseTestRunner getFilteredTraceWithNSString:[((JunitFrameworkTestFailure *) nil_chk(booBoo)) trace]]];
}

- (void)printFooterWithJunitFrameworkTestResult:(JunitFrameworkTestResult *)result {
  if ([((JunitFrameworkTestResult *) nil_chk(result)) wasSuccessful]) {
    [((JavaIoPrintStream *) nil_chk([self getWriter])) println];
    [((JavaIoPrintStream *) nil_chk([self getWriter])) printWithNSString:@"OK"];
    [((JavaIoPrintStream *) nil_chk([self getWriter])) printlnWithNSString:[NSString stringWithFormat:@" (%d test%@)", [result runCount], ([result runCount] == 1 ? @"" : @"s")]];
  }
  else {
    [((JavaIoPrintStream *) nil_chk([self getWriter])) println];
    [((JavaIoPrintStream *) nil_chk([self getWriter])) printlnWithNSString:@"FAILURES!!!"];
    [((JavaIoPrintStream *) nil_chk([self getWriter])) printlnWithNSString:[NSString stringWithFormat:@"Tests run: %d,  Failures: %d,  Errors: %d", [result runCount], [result failureCount], [result errorCount]]];
  }
  [((JavaIoPrintStream *) nil_chk([self getWriter])) println];
}

- (NSString *)elapsedTimeAsStringWithLong:(long long int)runTime {
  return [((JavaTextNumberFormat *) nil_chk([JavaTextNumberFormat getInstance])) formatWithDouble:(double) runTime / 1000];
}

- (JavaIoPrintStream *)getWriter {
  return fWriter_;
}

- (void)addErrorWithJunitFrameworkTest:(id<JunitFrameworkTest>)test
                 withJavaLangThrowable:(JavaLangThrowable *)t {
  [((JavaIoPrintStream *) nil_chk([self getWriter])) printWithNSString:@"E"];
}

- (void)addFailureWithJunitFrameworkTest:(id<JunitFrameworkTest>)test
  withJunitFrameworkAssertionFailedError:(JunitFrameworkAssertionFailedError *)t {
  [((JavaIoPrintStream *) nil_chk([self getWriter])) printWithNSString:@"F"];
}

- (void)endTestWithJunitFrameworkTest:(id<JunitFrameworkTest>)test {
}

- (void)startTestWithJunitFrameworkTest:(id<JunitFrameworkTest>)test {
  [((JavaIoPrintStream *) nil_chk([self getWriter])) printWithNSString:@"."];
  if (fColumn_++ >= 40) {
    [((JavaIoPrintStream *) nil_chk([self getWriter])) println];
    fColumn_ = 0;
  }
}

- (void)dealloc {
  JunitTextuiResultPrinter_set_fWriter_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JunitTextuiResultPrinter *)other {
  [super copyAllFieldsTo:other];
  other->fColumn_ = fColumn_;
  JunitTextuiResultPrinter_set_fWriter_(other, fWriter_);
}

@end
