//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/retechretech/dev/tools/lib/j2objc/junit/build_result/java/junit/framework/Assert.java
//
//  Created by retechretech on 13-9-25.
//

#include "IOSClass.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/Short.h"
#include "junit/framework/Assert.h"
#include "junit/framework/AssertionFailedError.h"
#include "junit/framework/ComparisonFailure.h"

@implementation JunitFrameworkAssert

- (id)init {
  return [super init];
}

+ (void)assertTrueWithNSString:(NSString *)message
                   withBoolean:(BOOL)condition {
  if (!condition) [JunitFrameworkAssert failWithNSString:message];
}

+ (void)assertTrueWithBoolean:(BOOL)condition {
  [JunitFrameworkAssert assertTrueWithNSString:nil withBoolean:condition];
}

+ (void)assertFalseWithNSString:(NSString *)message
                    withBoolean:(BOOL)condition {
  [JunitFrameworkAssert assertTrueWithNSString:message withBoolean:!condition];
}

+ (void)assertFalseWithBoolean:(BOOL)condition {
  [JunitFrameworkAssert assertFalseWithNSString:nil withBoolean:condition];
}

+ (void)failWithNSString:(NSString *)message {
  if (message == nil) {
    @throw [[[JunitFrameworkAssertionFailedError alloc] init] autorelease];
  }
  @throw [[[JunitFrameworkAssertionFailedError alloc] initWithNSString:message] autorelease];
}

+ (void)fail {
  [JunitFrameworkAssert failWithNSString:nil];
}

+ (void)assertEqualsWithNSString:(NSString *)message
                          withId:(id)expected
                          withId:(id)actual {
  if (expected == nil && actual == nil) return;
  if (expected != nil && [expected isEqual:actual]) return;
  [JunitFrameworkAssert failNotEqualsWithNSString:message withId:expected withId:actual];
}

+ (void)assertEqualsWithId:(id)expected
                    withId:(id)actual {
  [JunitFrameworkAssert assertEqualsWithNSString:nil withId:expected withId:actual];
}

+ (void)assertEqualsWithNSString:(NSString *)message
                    withNSString:(NSString *)expected
                    withNSString:(NSString *)actual {
  if (expected == nil && actual == nil) return;
  if (expected != nil && [expected isEqual:actual]) return;
  NSString *cleanMessage = message == nil ? @"" : message;
  @throw [[[JunitFrameworkComparisonFailure alloc] initWithNSString:cleanMessage withNSString:expected withNSString:actual] autorelease];
}

+ (void)assertEqualsWithNSString:(NSString *)expected
                    withNSString:(NSString *)actual {
  [JunitFrameworkAssert assertEqualsWithNSString:nil withNSString:expected withNSString:actual];
}

+ (void)assertEqualsWithNSString:(NSString *)message
                      withDouble:(double)expected
                      withDouble:(double)actual
                      withDouble:(double)delta {
  if ([JavaLangDouble compareWithDouble:expected withDouble:actual] == 0) return;
  if (!([JavaLangMath absWithDouble:expected - actual] <= delta)) [JunitFrameworkAssert failNotEqualsWithNSString:message withId:[[[JavaLangDouble alloc] initWithDouble:expected] autorelease] withId:[[[JavaLangDouble alloc] initWithDouble:actual] autorelease]];
}

+ (void)assertEqualsWithDouble:(double)expected
                    withDouble:(double)actual
                    withDouble:(double)delta {
  [JunitFrameworkAssert assertEqualsWithNSString:nil withDouble:expected withDouble:actual withDouble:delta];
}

+ (void)assertEqualsWithNSString:(NSString *)message
                       withFloat:(float)expected
                       withFloat:(float)actual
                       withFloat:(float)delta {
  if ([JavaLangFloat compareWithFloat:expected withFloat:actual] == 0) return;
  if (!([JavaLangMath absWithFloat:expected - actual] <= delta)) [JunitFrameworkAssert failNotEqualsWithNSString:message withId:[[[JavaLangFloat alloc] initWithFloat:expected] autorelease] withId:[[[JavaLangFloat alloc] initWithFloat:actual] autorelease]];
}

+ (void)assertEqualsWithFloat:(float)expected
                    withFloat:(float)actual
                    withFloat:(float)delta {
  [JunitFrameworkAssert assertEqualsWithNSString:nil withFloat:expected withFloat:actual withFloat:delta];
}

+ (void)assertEqualsWithNSString:(NSString *)message
                        withLong:(long long int)expected
                        withLong:(long long int)actual {
  [JunitFrameworkAssert assertEqualsWithNSString:message withId:[[[JavaLangLong alloc] initWithLong:expected] autorelease] withId:[[[JavaLangLong alloc] initWithLong:actual] autorelease]];
}

+ (void)assertEqualsWithLong:(long long int)expected
                    withLong:(long long int)actual {
  [JunitFrameworkAssert assertEqualsWithNSString:nil withLong:expected withLong:actual];
}

+ (void)assertEqualsWithNSString:(NSString *)message
                     withBoolean:(BOOL)expected
                     withBoolean:(BOOL)actual {
  [JunitFrameworkAssert assertEqualsWithNSString:message withId:[JavaLangBoolean valueOfWithBoolean:expected] withId:[JavaLangBoolean valueOfWithBoolean:actual]];
}

+ (void)assertEqualsWithBoolean:(BOOL)expected
                    withBoolean:(BOOL)actual {
  [JunitFrameworkAssert assertEqualsWithNSString:nil withBoolean:expected withBoolean:actual];
}

+ (void)assertEqualsWithNSString:(NSString *)message
                        withByte:(char)expected
                        withByte:(char)actual {
  [JunitFrameworkAssert assertEqualsWithNSString:message withId:[[[JavaLangByte alloc] initWithByte:expected] autorelease] withId:[[[JavaLangByte alloc] initWithByte:actual] autorelease]];
}

+ (void)assertEqualsWithByte:(char)expected
                    withByte:(char)actual {
  [JunitFrameworkAssert assertEqualsWithNSString:nil withByte:expected withByte:actual];
}

+ (void)assertEqualsWithNSString:(NSString *)message
                        withChar:(unichar)expected
                        withChar:(unichar)actual {
  [JunitFrameworkAssert assertEqualsWithNSString:message withId:[[[JavaLangCharacter alloc] initWithChar:expected] autorelease] withId:[[[JavaLangCharacter alloc] initWithChar:actual] autorelease]];
}

+ (void)assertEqualsWithChar:(unichar)expected
                    withChar:(unichar)actual {
  [JunitFrameworkAssert assertEqualsWithNSString:nil withChar:expected withChar:actual];
}

+ (void)assertEqualsWithNSString:(NSString *)message
                       withShort:(short int)expected
                       withShort:(short int)actual {
  [JunitFrameworkAssert assertEqualsWithNSString:message withId:[[[JavaLangShort alloc] initWithShort:expected] autorelease] withId:[[[JavaLangShort alloc] initWithShort:actual] autorelease]];
}

+ (void)assertEqualsWithShort:(short int)expected
                    withShort:(short int)actual {
  [JunitFrameworkAssert assertEqualsWithNSString:nil withShort:expected withShort:actual];
}

+ (void)assertEqualsWithNSString:(NSString *)message
                         withInt:(int)expected
                         withInt:(int)actual {
  [JunitFrameworkAssert assertEqualsWithNSString:message withId:[[[JavaLangInteger alloc] initWithInt:expected] autorelease] withId:[[[JavaLangInteger alloc] initWithInt:actual] autorelease]];
}

+ (void)assertEqualsWithInt:(int)expected
                    withInt:(int)actual {
  [JunitFrameworkAssert assertEqualsWithNSString:nil withInt:expected withInt:actual];
}

+ (void)assertNotNullWithId:(id)object {
  [JunitFrameworkAssert assertNotNullWithNSString:nil withId:object];
}

+ (void)assertNotNullWithNSString:(NSString *)message
                           withId:(id)object {
  [JunitFrameworkAssert assertTrueWithNSString:message withBoolean:object != nil];
}

+ (void)assertNullWithId:(id)object {
  NSString *message = [NSString stringWithFormat:@"Expected: <null> but was: %@", [NSString valueOf:object]];
  [JunitFrameworkAssert assertNullWithNSString:message withId:object];
}

+ (void)assertNullWithNSString:(NSString *)message
                        withId:(id)object {
  [JunitFrameworkAssert assertTrueWithNSString:message withBoolean:object == nil];
}

+ (void)assertSameWithNSString:(NSString *)message
                        withId:(id)expected
                        withId:(id)actual {
  if (expected == actual) return;
  [JunitFrameworkAssert failNotSameWithNSString:message withId:expected withId:actual];
}

+ (void)assertSameWithId:(id)expected
                  withId:(id)actual {
  [JunitFrameworkAssert assertSameWithNSString:nil withId:expected withId:actual];
}

+ (void)assertNotSameWithNSString:(NSString *)message
                           withId:(id)expected
                           withId:(id)actual {
  if (expected == actual) [JunitFrameworkAssert failSameWithNSString:message];
}

+ (void)assertNotSameWithId:(id)expected
                     withId:(id)actual {
  [JunitFrameworkAssert assertNotSameWithNSString:nil withId:expected withId:actual];
}

+ (void)failSameWithNSString:(NSString *)message {
  NSString *formatted = @"";
  if (message != nil) formatted = [NSString stringWithFormat:@"%@ ", message];
  [JunitFrameworkAssert failWithNSString:[NSString stringWithFormat:@"%@expected not same", formatted]];
}

+ (void)failNotSameWithNSString:(NSString *)message
                         withId:(id)expected
                         withId:(id)actual {
  NSString *formatted = @"";
  if (message != nil) formatted = [NSString stringWithFormat:@"%@ ", message];
  [JunitFrameworkAssert failWithNSString:[NSString stringWithFormat:@"%@expected same:<%@> was not:<%@>", formatted, expected, actual]];
}

+ (void)failNotEqualsWithNSString:(NSString *)message
                           withId:(id)expected
                           withId:(id)actual {
  [JunitFrameworkAssert failWithNSString:[JunitFrameworkAssert formatWithNSString:message withId:expected withId:actual]];
}

+ (NSString *)formatWithNSString:(NSString *)message
                          withId:(id)expected
                          withId:(id)actual {
  NSString *formatted = @"";
  if (message != nil && [message length] > 0) formatted = [NSString stringWithFormat:@"%@ ", message];
  return [NSString stringWithFormat:@"%@expected:<%@> but was:<%@>", formatted, expected, actual];
}

@end
