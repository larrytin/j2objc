//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Exception.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "junit/framework/JUnit4TestAdapter.h"
#include "junit/framework/JUnit4TestAdapterCache.h"
#include "junit/framework/JUnit4TestCaseFacade.h"
#include "junit/framework/Test.h"
#include "junit/framework/TestResult.h"
#include "junit/framework/TestSuite.h"
#include "org/junit/runner/Description.h"
#include "org/junit/runner/notification/Failure.h"
#include "org/junit/runner/notification/RunNotifier.h"

@implementation JunitFrameworkJUnit4TestAdapterCache

static JunitFrameworkJUnit4TestAdapterCache * JunitFrameworkJUnit4TestAdapterCache_fInstance_;

+ (JunitFrameworkJUnit4TestAdapterCache *)fInstance {
  return JunitFrameworkJUnit4TestAdapterCache_fInstance_;
}

+ (JunitFrameworkJUnit4TestAdapterCache *)getDefault {
  return JunitFrameworkJUnit4TestAdapterCache_fInstance_;
}

- (id<JunitFrameworkTest>)asTestWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_ {
  if ([((OrgJunitRunnerDescription *) nil_chk(description_)) isSuite]) return [self createTestWithOrgJunitRunnerDescription:description_];
  else {
    if (![self containsKeyWithId:description_]) [self putWithId:description_ withId:[self createTestWithOrgJunitRunnerDescription:description_]];
    return [self getWithId:description_];
  }
}

- (id<JunitFrameworkTest>)createTestWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_ {
  if ([((OrgJunitRunnerDescription *) nil_chk(description_)) isTest]) return [[[JunitFrameworkJUnit4TestCaseFacade alloc] initWithOrgJunitRunnerDescription:description_] autorelease];
  else {
    JunitFrameworkTestSuite *suite = [[[JunitFrameworkTestSuite alloc] initWithNSString:[description_ getDisplayName]] autorelease];
    for (OrgJunitRunnerDescription * __strong child in [description_ getChildren]) [suite addTestWithJunitFrameworkTest:[self asTestWithOrgJunitRunnerDescription:child]];
    return suite;
  }
}

- (OrgJunitRunnerNotificationRunNotifier *)getNotifierWithJunitFrameworkTestResult:(JunitFrameworkTestResult *)result
                                               withJunitFrameworkJUnit4TestAdapter:(JunitFrameworkJUnit4TestAdapter *)adapter {
  OrgJunitRunnerNotificationRunNotifier *notifier = [[[OrgJunitRunnerNotificationRunNotifier alloc] init] autorelease];
  [notifier addListenerWithOrgJunitRunnerNotificationRunListener:[[[JunitFrameworkJUnit4TestAdapterCache_$1 alloc] initWithJunitFrameworkJUnit4TestAdapterCache:self withJunitFrameworkTestResult:result] autorelease]];
  return notifier;
}

- (id<JavaUtilList>)asTestListWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_ {
  if ([((OrgJunitRunnerDescription *) nil_chk(description_)) isTest]) return [JavaUtilArrays asListWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [self asTestWithOrgJunitRunnerDescription:description_] } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
  else {
    id<JavaUtilList> returnThis = [[[JavaUtilArrayList alloc] init] autorelease];
    for (OrgJunitRunnerDescription * __strong child in [description_ getChildren]) {
      [returnThis addWithId:[self asTestWithOrgJunitRunnerDescription:child]];
    }
    return returnThis;
  }
}

- (id)init {
  return [super init];
}

+ (void)initialize {
  if (self == [JunitFrameworkJUnit4TestAdapterCache class]) {
    JreOperatorRetainedAssign(&JunitFrameworkJUnit4TestAdapterCache_fInstance_, nil, [[[JunitFrameworkJUnit4TestAdapterCache alloc] init] autorelease]);
  }
}

@end
@implementation JunitFrameworkJUnit4TestAdapterCache_$1

- (void)testFailureWithOrgJunitRunnerNotificationFailure:(OrgJunitRunnerNotificationFailure *)failure {
  [((JunitFrameworkTestResult *) nil_chk(val$result_)) addErrorWithJunitFrameworkTest:[this$0_ asTestWithOrgJunitRunnerDescription:[((OrgJunitRunnerNotificationFailure *) nil_chk(failure)) getDescription]] withJavaLangThrowable:[failure getException]];
}

+ (IOSObjectArray *)__exceptions_testFailureWithOrgJunitRunnerNotificationFailure_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)testFinishedWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_ {
  [((JunitFrameworkTestResult *) nil_chk(val$result_)) endTestWithJunitFrameworkTest:[this$0_ asTestWithOrgJunitRunnerDescription:description_]];
}

+ (IOSObjectArray *)__exceptions_testFinishedWithOrgJunitRunnerDescription_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangException getClass] } count:1 type:[IOSClass getClass]];
}

- (void)testStartedWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_ {
  [((JunitFrameworkTestResult *) nil_chk(val$result_)) startTestWithJunitFrameworkTest:[this$0_ asTestWithOrgJunitRunnerDescription:description_]];
}

+ (IOSObjectArray *)__exceptions_testStartedWithOrgJunitRunnerDescription_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangException getClass] } count:1 type:[IOSClass getClass]];
}

- (id)initWithJunitFrameworkJUnit4TestAdapterCache:(JunitFrameworkJUnit4TestAdapterCache *)outer$
                      withJunitFrameworkTestResult:(JunitFrameworkTestResult *)capture$0 {
  JunitFrameworkJUnit4TestAdapterCache_$1_set_this$0_(self, outer$);
  JunitFrameworkJUnit4TestAdapterCache_$1_set_val$result_(self, capture$0);
  return [super init];
}

- (void)dealloc {
  JunitFrameworkJUnit4TestAdapterCache_$1_set_val$result_(self, nil);
  JunitFrameworkJUnit4TestAdapterCache_$1_set_this$0_(self, nil);
  [super dealloc];
}

@end
