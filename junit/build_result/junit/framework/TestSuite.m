//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/io/PrintWriter.h"
#include "java/io/StringWriter.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/InstantiationException.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/Throwable.h"
#include "java/lang/Void.h"
#include "java/lang/reflect/Constructor.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/Modifier.h"
#include "java/util/ArrayList.h"
#include "java/util/Enumeration.h"
#include "java/util/List.h"
#include "java/util/Vector.h"
#include "junit/framework/Assert.h"
#include "junit/framework/Test.h"
#include "junit/framework/TestCase.h"
#include "junit/framework/TestResult.h"
#include "junit/framework/TestSuite.h"

@implementation JunitFrameworkTestSuite

+ (id<JunitFrameworkTest>)createTestWithIOSClass:(IOSClass *)theClass
                                    withNSString:(NSString *)name {
  JavaLangReflectConstructor *constructor;
  @try {
    constructor = [JunitFrameworkTestSuite getTestConstructorWithIOSClass:theClass];
  }
  @catch (JavaLangNoSuchMethodException *e) {
    return [JunitFrameworkTestSuite warningWithNSString:[NSString stringWithFormat:@"Class %@ has no public constructor TestCase(String name) or TestCase()", [((IOSClass *) nil_chk(theClass)) getName]]];
  }
  id test;
  @try {
    if ((int) [((IOSObjectArray *) nil_chk([((JavaLangReflectConstructor *) nil_chk(constructor)) getParameterTypes])) count] == 0) {
      test = [constructor newInstanceWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]];
      if ([test isKindOfClass:[JunitFrameworkTestCase class]]) [((JunitFrameworkTestCase *) nil_chk(test)) setNameWithNSString:name];
    }
    else {
      test = [constructor newInstanceWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ name } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
    }
  }
  @catch (JavaLangInstantiationException *e) {
    return ([JunitFrameworkTestSuite warningWithNSString:[NSString stringWithFormat:@"Cannot instantiate test case: %@ (%@)", name, [JunitFrameworkTestSuite exceptionToStringWithJavaLangThrowable:e]]]);
  }
  @catch (JavaLangReflectInvocationTargetException *e) {
    return ([JunitFrameworkTestSuite warningWithNSString:[NSString stringWithFormat:@"Exception in constructor: %@ (%@)", name, [JunitFrameworkTestSuite exceptionToStringWithJavaLangThrowable:[((JavaLangReflectInvocationTargetException *) nil_chk(e)) getTargetException]]]]);
  }
  @catch (JavaLangIllegalAccessException *e) {
    return ([JunitFrameworkTestSuite warningWithNSString:[NSString stringWithFormat:@"Cannot access test case: %@ (%@)", name, [JunitFrameworkTestSuite exceptionToStringWithJavaLangThrowable:e]]]);
  }
  return (id<JunitFrameworkTest>) check_protocol_cast(test, @protocol(JunitFrameworkTest));
}

+ (JavaLangReflectConstructor *)getTestConstructorWithIOSClass:(IOSClass *)theClass {
  @try {
    return [((IOSClass *) nil_chk(theClass)) getConstructor:[IOSObjectArray arrayWithObjects:(id[]){ [IOSClass classWithClass:[NSString class]] } count:1 type:[IOSClass classWithClass:[IOSClass class]]]];
  }
  @catch (JavaLangNoSuchMethodException *e) {
  }
  return [((IOSClass *) nil_chk(theClass)) getConstructor:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[IOSClass class]]]];
}

+ (IOSObjectArray *)__exceptions_getTestConstructorWithIOSClass_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangNoSuchMethodException getClass] } count:1 type:[IOSClass getClass]];
}

+ (id<JunitFrameworkTest>)warningWithNSString:(NSString *)message {
  return [[[JunitFrameworkTestSuite_$1 alloc] initWithNSString:@"warning" withNSString:message] autorelease];
}

+ (NSString *)exceptionToStringWithJavaLangThrowable:(JavaLangThrowable *)t {
  JavaIoStringWriter *stringWriter = [[[JavaIoStringWriter alloc] init] autorelease];
  JavaIoPrintWriter *writer = [[[JavaIoPrintWriter alloc] initWithJavaIoWriter:stringWriter] autorelease];
  [((JavaLangThrowable *) nil_chk(t)) printStackTraceWithJavaIoPrintWriter:writer];
  return [stringWriter description];
}

- (id)init {
  if (self = [super init]) {
    JunitFrameworkTestSuite_set_fTests_(self, [[[JavaUtilVector alloc] initWithInt:10] autorelease]);
  }
  return self;
}

- (id)initJunitFrameworkTestSuiteWithIOSClass:(IOSClass *)theClass {
  if (self = [super init]) {
    JunitFrameworkTestSuite_set_fTests_(self, [[[JavaUtilVector alloc] initWithInt:10] autorelease]);
    [self addTestsFromTestCaseWithIOSClass:theClass];
  }
  return self;
}

- (id)initWithIOSClass:(IOSClass *)theClass {
  return [self initJunitFrameworkTestSuiteWithIOSClass:theClass];
}

- (void)addTestsFromTestCaseWithIOSClass:(IOSClass *)theClass {
  JunitFrameworkTestSuite_set_fName_(self, [((IOSClass *) nil_chk(theClass)) getName]);
  @try {
    [JunitFrameworkTestSuite getTestConstructorWithIOSClass:theClass];
  }
  @catch (JavaLangNoSuchMethodException *e) {
    [self addTestWithJunitFrameworkTest:[JunitFrameworkTestSuite warningWithNSString:[NSString stringWithFormat:@"Class %@ has no public constructor TestCase(String name) or TestCase()", [theClass getName]]]];
    return;
  }
  if (![JavaLangReflectModifier isPublicWithInt:[theClass getModifiers]]) {
    [self addTestWithJunitFrameworkTest:[JunitFrameworkTestSuite warningWithNSString:[NSString stringWithFormat:@"Class %@ is not public", [theClass getName]]]];
    return;
  }
  IOSClass *superClass = theClass;
  id<JavaUtilList> names = [[[JavaUtilArrayList alloc] init] autorelease];
  while ([[IOSClass classWithProtocol:@protocol(JunitFrameworkTest)] isAssignableFrom:superClass]) {
    {
      IOSObjectArray *a__ = [superClass getDeclaredMethods];
      id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      id const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaLangReflectMethod *each = (*b__++);
        [self addTestMethodWithJavaLangReflectMethod:each withJavaUtilList:names withIOSClass:theClass];
      }
    }
    superClass = [superClass getSuperclass];
  }
  if ([((JavaUtilVector *) nil_chk(fTests_)) size] == 0) [self addTestWithJunitFrameworkTest:[JunitFrameworkTestSuite warningWithNSString:[NSString stringWithFormat:@"No tests found in %@", [theClass getName]]]];
}

- (id)initWithIOSClass:(IOSClass *)theClass
          withNSString:(NSString *)name {
  if (self = [self initJunitFrameworkTestSuiteWithIOSClass:theClass]) {
    [self setNameWithNSString:name];
  }
  return self;
}

- (id)initWithNSString:(NSString *)name {
  if (self = [super init]) {
    JunitFrameworkTestSuite_set_fTests_(self, [[[JavaUtilVector alloc] initWithInt:10] autorelease]);
    [self setNameWithNSString:name];
  }
  return self;
}

- (id)initJunitFrameworkTestSuiteWithIOSClassArray:(IOSObjectArray *)classes {
  if (self = [super init]) {
    JunitFrameworkTestSuite_set_fTests_(self, [[[JavaUtilVector alloc] initWithInt:10] autorelease]);
    {
      IOSObjectArray *a__ = classes;
      id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      id const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        IOSClass *each = (*b__++);
        [self addTestWithJunitFrameworkTest:[self testCaseForClassWithIOSClass:each]];
      }
    }
  }
  return self;
}

- (id)initWithIOSClassArray:(IOSObjectArray *)classes {
  return [self initJunitFrameworkTestSuiteWithIOSClassArray:classes];
}

- (id<JunitFrameworkTest>)testCaseForClassWithIOSClass:(IOSClass *)each {
  if ([[IOSClass classWithClass:[JunitFrameworkTestCase class]] isAssignableFrom:each]) return [[[JunitFrameworkTestSuite alloc] initWithIOSClass:[((IOSClass *) nil_chk(each)) asSubclass:[IOSClass classWithClass:[JunitFrameworkTestCase class]]]] autorelease];
  else return [JunitFrameworkTestSuite warningWithNSString:[NSString stringWithFormat:@"%@ does not extend TestCase", [((IOSClass *) nil_chk(each)) getCanonicalName]]];
}

- (id)initWithIOSClassArray:(IOSObjectArray *)classes
               withNSString:(NSString *)name {
  if (self = [self initJunitFrameworkTestSuiteWithIOSClassArray:classes]) {
    [self setNameWithNSString:name];
  }
  return self;
}

- (void)addTestWithJunitFrameworkTest:(id<JunitFrameworkTest>)test {
  [((JavaUtilVector *) nil_chk(fTests_)) addWithId:test];
}

- (void)addTestSuiteWithIOSClass:(IOSClass *)testClass {
  [self addTestWithJunitFrameworkTest:[[[JunitFrameworkTestSuite alloc] initWithIOSClass:testClass] autorelease]];
}

- (int)countTestCases {
  int count = 0;
  for (id<JunitFrameworkTest> __strong each in fTests_) count += [((id<JunitFrameworkTest>) nil_chk(each)) countTestCases];
  return count;
}

- (NSString *)getName {
  return fName_;
}

- (void)runWithJunitFrameworkTestResult:(JunitFrameworkTestResult *)result {
  for (id<JunitFrameworkTest> __strong each in fTests_) {
    if ([((JunitFrameworkTestResult *) nil_chk(result)) shouldStop]) break;
    [self runTestWithJunitFrameworkTest:each withJunitFrameworkTestResult:result];
  }
}

- (void)runTestWithJunitFrameworkTest:(id<JunitFrameworkTest>)test
         withJunitFrameworkTestResult:(JunitFrameworkTestResult *)result {
  [((id<JunitFrameworkTest>) nil_chk(test)) runWithJunitFrameworkTestResult:result];
}

- (void)setNameWithNSString:(NSString *)name {
  JunitFrameworkTestSuite_set_fName_(self, name);
}

- (id<JunitFrameworkTest>)testAtWithInt:(int)index {
  return [((JavaUtilVector *) nil_chk(fTests_)) getWithInt:index];
}

- (int)testCount {
  return [((JavaUtilVector *) nil_chk(fTests_)) size];
}

- (id<JavaUtilEnumeration>)tests {
  return [((JavaUtilVector *) nil_chk(fTests_)) elements];
}

- (NSString *)description {
  if ([self getName] != nil) return [self getName];
  return [super description];
}

- (void)addTestMethodWithJavaLangReflectMethod:(JavaLangReflectMethod *)m
                              withJavaUtilList:(id<JavaUtilList>)names
                                  withIOSClass:(IOSClass *)theClass {
  NSString *name = [((JavaLangReflectMethod *) nil_chk(m)) getName];
  if ([((id<JavaUtilList>) nil_chk(names)) containsWithId:name]) return;
  if (![self isPublicTestMethodWithJavaLangReflectMethod:m]) {
    if ([self isTestMethodWithJavaLangReflectMethod:m]) [self addTestWithJunitFrameworkTest:[JunitFrameworkTestSuite warningWithNSString:[NSString stringWithFormat:@"Test method isn't public: %@(%@)", [m getName], [((IOSClass *) nil_chk(theClass)) getCanonicalName]]]];
    return;
  }
  [names addWithId:name];
  [self addTestWithJunitFrameworkTest:[JunitFrameworkTestSuite createTestWithIOSClass:theClass withNSString:name]];
}

- (BOOL)isPublicTestMethodWithJavaLangReflectMethod:(JavaLangReflectMethod *)m {
  return [self isTestMethodWithJavaLangReflectMethod:m] && [JavaLangReflectModifier isPublicWithInt:[((JavaLangReflectMethod *) nil_chk(m)) getModifiers]];
}

- (BOOL)isTestMethodWithJavaLangReflectMethod:(JavaLangReflectMethod *)m {
  return (int) [((IOSObjectArray *) nil_chk([((JavaLangReflectMethod *) nil_chk(m)) getParameterTypes])) count] == 0 && [((NSString *) nil_chk([m getName])) hasPrefix:@"test"] && [((IOSClass *) nil_chk([m getReturnType])) isEqual:[JavaLangVoid TYPE]];
}

- (void)dealloc {
  JunitFrameworkTestSuite_set_fTests_(self, nil);
  JunitFrameworkTestSuite_set_fName_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JunitFrameworkTestSuite *)other {
  [super copyAllFieldsTo:other];
  JunitFrameworkTestSuite_set_fName_(other, fName_);
  JunitFrameworkTestSuite_set_fTests_(other, fTests_);
}

@end
@implementation JunitFrameworkTestSuite_$1

- (void)runTest {
  [JunitFrameworkAssert failWithNSString:val$message_];
}

- (id)initWithNSString:(NSString *)arg$0
          withNSString:(NSString *)capture$0 {
  JunitFrameworkTestSuite_$1_set_val$message_(self, capture$0);
  return [super initWithNSString:arg$0];
}

- (void)dealloc {
  JunitFrameworkTestSuite_$1_set_val$message_(self, nil);
  [super dealloc];
}

@end
