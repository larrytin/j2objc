//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/retechretech/dev/tools/lib/j2objc/junit/build_result/java/junit/framework/TestResult.java
//
//  Created by retechretech on 13-9-4.
//

#include "IOSClass.h"
#include "java/lang/ThreadDeath.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Enumeration.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "junit/framework/AssertionFailedError.h"
#include "junit/framework/Protectable.h"
#include "junit/framework/Test.h"
#include "junit/framework/TestCase.h"
#include "junit/framework/TestFailure.h"
#include "junit/framework/TestListener.h"
#include "junit/framework/TestResult.h"

@implementation JunitFrameworkTestResult

- (id)init {
  if ((self = [super init])) {
    JunitFrameworkTestResult_set_fFailures_(self, [[[JavaUtilArrayList alloc] init] autorelease]);
    JunitFrameworkTestResult_set_fErrors_(self, [[[JavaUtilArrayList alloc] init] autorelease]);
    JunitFrameworkTestResult_set_fListeners_(self, [[[JavaUtilArrayList alloc] init] autorelease]);
    fRunTests_ = 0;
    fStop_ = NO;
  }
  return self;
}

- (void)addErrorWithJunitFrameworkTest:(id<JunitFrameworkTest>)test
                 withJavaLangThrowable:(JavaLangThrowable *)t {
  @synchronized(self) {
    {
      [((id<JavaUtilList>) nil_chk(fErrors_)) addWithId:[[[JunitFrameworkTestFailure alloc] initWithJunitFrameworkTest:test withJavaLangThrowable:t] autorelease]];
      {
        id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk([self cloneListeners])) iterator];
        while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
          id<JunitFrameworkTestListener> each = [iter__ next];
          [((id<JunitFrameworkTestListener>) nil_chk(each)) addErrorWithJunitFrameworkTest:test withJavaLangThrowable:t];
        }
      }
    }
  }
}

- (void)addFailureWithJunitFrameworkTest:(id<JunitFrameworkTest>)test
  withJunitFrameworkAssertionFailedError:(JunitFrameworkAssertionFailedError *)t {
  @synchronized(self) {
    {
      [((id<JavaUtilList>) nil_chk(fFailures_)) addWithId:[[[JunitFrameworkTestFailure alloc] initWithJunitFrameworkTest:test withJavaLangThrowable:t] autorelease]];
      {
        id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk([self cloneListeners])) iterator];
        while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
          id<JunitFrameworkTestListener> each = [iter__ next];
          [((id<JunitFrameworkTestListener>) nil_chk(each)) addFailureWithJunitFrameworkTest:test withJunitFrameworkAssertionFailedError:t];
        }
      }
    }
  }
}

- (void)addListenerWithJunitFrameworkTestListener:(id<JunitFrameworkTestListener>)listener {
  @synchronized(self) {
    {
      [((id<JavaUtilList>) nil_chk(fListeners_)) addWithId:listener];
    }
  }
}

- (void)removeListenerWithJunitFrameworkTestListener:(id<JunitFrameworkTestListener>)listener {
  @synchronized(self) {
    {
      [((id<JavaUtilList>) nil_chk(fListeners_)) removeWithId:listener];
    }
  }
}

- (id<JavaUtilList>)cloneListeners {
  @synchronized(self) {
    {
      id<JavaUtilList> result = [[[JavaUtilArrayList alloc] init] autorelease];
      [result addAllWithJavaUtilCollection:fListeners_];
      return result;
    }
  }
}

- (void)endTestWithJunitFrameworkTest:(id<JunitFrameworkTest>)test {
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk([self cloneListeners])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      id<JunitFrameworkTestListener> each = [iter__ next];
      [((id<JunitFrameworkTestListener>) nil_chk(each)) endTestWithJunitFrameworkTest:test];
    }
  }
}

- (int)errorCount {
  @synchronized(self) {
    {
      return [((id<JavaUtilList>) nil_chk(fErrors_)) size];
    }
  }
}

- (id<JavaUtilEnumeration>)errors {
  @synchronized(self) {
    {
      return [JavaUtilCollections enumerationWithJavaUtilCollection:fErrors_];
    }
  }
}

- (int)failureCount {
  @synchronized(self) {
    {
      return [((id<JavaUtilList>) nil_chk(fFailures_)) size];
    }
  }
}

- (id<JavaUtilEnumeration>)failures {
  @synchronized(self) {
    {
      return [JavaUtilCollections enumerationWithJavaUtilCollection:fFailures_];
    }
  }
}

- (void)runWithJunitFrameworkTestCase:(JunitFrameworkTestCase *)test {
  [self startTestWithJunitFrameworkTest:test];
  id<JunitFrameworkProtectable> p = [[[JunitFrameworkTestResult_$1 alloc] initWithJunitFrameworkTestCase:test] autorelease];
  [self runProtectedWithJunitFrameworkTest:test withJunitFrameworkProtectable:p];
  [self endTestWithJunitFrameworkTest:test];
}

- (int)runCount {
  @synchronized(self) {
    {
      return fRunTests_;
    }
  }
}

- (void)runProtectedWithJunitFrameworkTest:(id<JunitFrameworkTest>)test
             withJunitFrameworkProtectable:(id<JunitFrameworkProtectable>)p {
  @try {
    [((id<JunitFrameworkProtectable>) nil_chk(p)) protect];
  }
  @catch (JunitFrameworkAssertionFailedError *e) {
    [self addFailureWithJunitFrameworkTest:test withJunitFrameworkAssertionFailedError:e];
  }
  @catch (JavaLangThreadDeath *e) {
    @throw e;
  }
  @catch (JavaLangThrowable *e) {
    [self addErrorWithJunitFrameworkTest:test withJavaLangThrowable:e];
  }
}

- (BOOL)shouldStop {
  @synchronized(self) {
    {
      return fStop_;
    }
  }
}

- (void)startTestWithJunitFrameworkTest:(id<JunitFrameworkTest>)test {
  int count = [((id<JunitFrameworkTest>) nil_chk(test)) countTestCases];
  @synchronized (self) {
    fRunTests_ += count;
  }
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk([self cloneListeners])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      id<JunitFrameworkTestListener> each = [iter__ next];
      [((id<JunitFrameworkTestListener>) nil_chk(each)) startTestWithJunitFrameworkTest:test];
    }
  }
}

- (void)stop {
  @synchronized(self) {
    {
      fStop_ = YES;
    }
  }
}

- (BOOL)wasSuccessful {
  @synchronized(self) {
    {
      return [self failureCount] == 0 && [self errorCount] == 0;
    }
  }
}

- (void)dealloc {
  JunitFrameworkTestResult_set_fListeners_(self, nil);
  JunitFrameworkTestResult_set_fErrors_(self, nil);
  JunitFrameworkTestResult_set_fFailures_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(JunitFrameworkTestResult *)other {
  [super copyAllFieldsTo:other];
  JunitFrameworkTestResult_set_fErrors_(other, fErrors_);
  JunitFrameworkTestResult_set_fFailures_(other, fFailures_);
  JunitFrameworkTestResult_set_fListeners_(other, fListeners_);
  other->fRunTests_ = fRunTests_;
  other->fStop_ = fStop_;
}

@end
@implementation JunitFrameworkTestResult_$1

- (void)protect {
  [((JunitFrameworkTestCase *) nil_chk(val$test_)) runBare];
}

+ (IOSObjectArray *)__exceptions_protect {
  return [IOSObjectArray arrayWithObjects:(id[]) { [JavaLangThrowable getClass] } count:1 type:[IOSClass getClass]];
}

- (id)initWithJunitFrameworkTestCase:(JunitFrameworkTestCase *)capture$0 {
  if ((self = [super init])) {
    JunitFrameworkTestResult_$1_set_val$test_(self, capture$0);
  }
  return self;
}

- (void)dealloc {
  JunitFrameworkTestResult_$1_set_val$test_(self, nil);
  [super dealloc];
}

@end
